
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop$1() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$1;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$1;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop$1;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_node(node) {
        if (!node)
            return document;
        return (node.getRootNode ? node.getRootNode() : node.ownerDocument); // check for getRootNode because IE is still supported
    }
    function get_root_for_styles(node) {
        const root = get_root_for_node(node);
        return root.host ? root : root;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_styles(node), style_element);
        return style_element;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function xlink_attr(node, attribute, value) {
        node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
            'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_node(node);
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function beforeUpdate(fn) {
        get_current_component().$$.before_update.push(fn);
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update$1(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update$1($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop$1,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$1;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.40.0' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /* src\CreateUserDoc.svelte generated by Svelte v3.40.0 */

    function create_fragment$N(ctx) {
    	const block = {
    		c: noop$1,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop$1,
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: noop$1
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$N($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CreateUserDoc', slots, []);
    	let { userDocRef } = $$props;
    	let { user } = $$props;

    	userDocRef.set({
    		uid: user.uid,
    		email: user.email,
    		courses: [],
    		todos: []
    	});

    	const writable_props = ['userDocRef', 'user'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CreateUserDoc> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('userDocRef' in $$props) $$invalidate(0, userDocRef = $$props.userDocRef);
    		if ('user' in $$props) $$invalidate(1, user = $$props.user);
    	};

    	$$self.$capture_state = () => ({ userDocRef, user });

    	$$self.$inject_state = $$props => {
    		if ('userDocRef' in $$props) $$invalidate(0, userDocRef = $$props.userDocRef);
    		if ('user' in $$props) $$invalidate(1, user = $$props.user);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [userDocRef, user];
    }

    class CreateUserDoc extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$N, create_fragment$N, safe_not_equal, { userDocRef: 0, user: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CreateUserDoc",
    			options,
    			id: create_fragment$N.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*userDocRef*/ ctx[0] === undefined && !('userDocRef' in props)) {
    			console.warn("<CreateUserDoc> was created without expected prop 'userDocRef'");
    		}

    		if (/*user*/ ctx[1] === undefined && !('user' in props)) {
    			console.warn("<CreateUserDoc> was created without expected prop 'user'");
    		}
    	}

    	get userDocRef() {
    		throw new Error("<CreateUserDoc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userDocRef(value) {
    		throw new Error("<CreateUserDoc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get user() {
    		throw new Error("<CreateUserDoc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set user(value) {
    		throw new Error("<CreateUserDoc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\BackgroundEffects.svelte generated by Svelte v3.40.0 */

    const file$G = "src\\BackgroundEffects.svelte";

    function create_fragment$M(ctx) {
    	let ul;
    	let li0;
    	let t0;
    	let li1;
    	let t1;
    	let li2;
    	let t2;
    	let li3;
    	let t3;
    	let li4;
    	let t4;
    	let li5;
    	let t5;
    	let li6;
    	let t6;
    	let li7;
    	let t7;
    	let li8;
    	let t8;
    	let li9;

    	const block = {
    		c: function create() {
    			ul = element("ul");
    			li0 = element("li");
    			t0 = space();
    			li1 = element("li");
    			t1 = space();
    			li2 = element("li");
    			t2 = space();
    			li3 = element("li");
    			t3 = space();
    			li4 = element("li");
    			t4 = space();
    			li5 = element("li");
    			t5 = space();
    			li6 = element("li");
    			t6 = space();
    			li7 = element("li");
    			t7 = space();
    			li8 = element("li");
    			t8 = space();
    			li9 = element("li");
    			attr_dev(li0, "class", "svelte-k2bv6u");
    			add_location(li0, file$G, 114, 2, 2060);
    			attr_dev(li1, "class", "svelte-k2bv6u");
    			add_location(li1, file$G, 115, 2, 2070);
    			attr_dev(li2, "class", "svelte-k2bv6u");
    			add_location(li2, file$G, 116, 2, 2080);
    			attr_dev(li3, "class", "svelte-k2bv6u");
    			add_location(li3, file$G, 117, 2, 2090);
    			attr_dev(li4, "class", "svelte-k2bv6u");
    			add_location(li4, file$G, 118, 2, 2100);
    			attr_dev(li5, "class", "svelte-k2bv6u");
    			add_location(li5, file$G, 119, 2, 2110);
    			attr_dev(li6, "class", "svelte-k2bv6u");
    			add_location(li6, file$G, 120, 2, 2120);
    			attr_dev(li7, "class", "svelte-k2bv6u");
    			add_location(li7, file$G, 121, 2, 2130);
    			attr_dev(li8, "class", "svelte-k2bv6u");
    			add_location(li8, file$G, 122, 2, 2140);
    			attr_dev(li9, "class", "svelte-k2bv6u");
    			add_location(li9, file$G, 123, 2, 2150);
    			attr_dev(ul, "class", "particles svelte-k2bv6u");
    			add_location(ul, file$G, 113, 0, 2034);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);
    			append_dev(ul, li0);
    			append_dev(ul, t0);
    			append_dev(ul, li1);
    			append_dev(ul, t1);
    			append_dev(ul, li2);
    			append_dev(ul, t2);
    			append_dev(ul, li3);
    			append_dev(ul, t3);
    			append_dev(ul, li4);
    			append_dev(ul, t4);
    			append_dev(ul, li5);
    			append_dev(ul, t5);
    			append_dev(ul, li6);
    			append_dev(ul, t6);
    			append_dev(ul, li7);
    			append_dev(ul, t7);
    			append_dev(ul, li8);
    			append_dev(ul, t8);
    			append_dev(ul, li9);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$M($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BackgroundEffects', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BackgroundEffects> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class BackgroundEffects extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$M, create_fragment$M, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BackgroundEffects",
    			options,
    			id: create_fragment$M.name
    		});
    	}
    }

    /* src\ProgressTimeline.svelte generated by Svelte v3.40.0 */

    const file$F = "src\\ProgressTimeline.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (91:14) {#each Array(course.credits * 2) as credit}
    function create_each_block_2(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line green svelte-cydkii");
    			add_location(div, file$F, 91, 16, 2197);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(91:14) {#each Array(course.credits * 2) as credit}",
    		ctx
    	});

    	return block;
    }

    // (88:8) {#each courses as course}
    function create_each_block_1$4(ctx) {
    	let div3;
    	let div1;
    	let t0;
    	let div0;
    	let t1;
    	let div2;
    	let h6;
    	let t2_value = /*course*/ ctx[8].code + "";
    	let t2;
    	let t3;
    	let t4;
    	let t5_value = /*course*/ ctx[8].name + "";
    	let t5;
    	let t6;
    	let each_value_2 = Array(/*course*/ ctx[8].credits * 2);
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div0 = element("div");
    			t1 = space();
    			div2 = element("div");
    			h6 = element("h6");
    			t2 = text(t2_value);
    			t3 = text(":");
    			t4 = space();
    			t5 = text(t5_value);
    			t6 = space();
    			attr_dev(div0, "class", "dot green svelte-cydkii");
    			add_location(div0, file$F, 93, 14, 2262);
    			set_style(div1, "display", "flex");
    			set_style(div1, "flex-direction", "column");
    			add_location(div1, file$F, 89, 12, 2070);
    			attr_dev(h6, "class", "position:absolute;");
    			add_location(h6, file$F, 98, 14, 2450);
    			attr_dev(div2, "class", "card svelte-cydkii");
    			set_style(div2, "position", "absolute");
    			set_style(div2, "width", "250px");
    			set_style(div2, "left", "20px");
    			set_style(div2, "bottom", "-40px");
    			add_location(div2, file$F, 95, 12, 2321);
    			set_style(div3, "display", "flex");
    			set_style(div3, "flex-direction", "row");
    			set_style(div3, "position", "relative");
    			add_location(div3, file$F, 88, 10, 1991);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, h6);
    			append_dev(h6, t2);
    			append_dev(h6, t3);
    			append_dev(div2, t4);
    			append_dev(div2, t5);
    			append_dev(div3, t6);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*courses*/ 2) {
    				const old_length = each_value_2.length;
    				each_value_2 = Array(/*course*/ ctx[8].credits * 2);
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = old_length; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (!each_blocks[i]) {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, t0);
    					}
    				}

    				for (i = each_value_2.length; i < old_length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}

    			if (dirty & /*courses*/ 2 && t2_value !== (t2_value = /*course*/ ctx[8].code + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*courses*/ 2 && t5_value !== (t5_value = /*course*/ ctx[8].name + "")) set_data_dev(t5, t5_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(88:8) {#each courses as course}",
    		ctx
    	});

    	return block;
    }

    // (105:8) {#if creditsLeft > 0}
    function create_if_block$l(ctx) {
    	let t;
    	let div;
    	let each_value = Array(/*creditsLeft*/ ctx[4] * 2);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			div = element("div");
    			attr_dev(div, "class", "dot red svelte-cydkii");
    			add_location(div, file$F, 108, 10, 2819);
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(105:8) {#if creditsLeft > 0}",
    		ctx
    	});

    	return block;
    }

    // (106:10) {#each Array(creditsLeft * 2) as halfCredit}
    function create_each_block$c(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line red svelte-cydkii");
    			add_location(div, file$F, 106, 12, 2764);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(106:10) {#each Array(creditsLeft * 2) as halfCredit}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$L(ctx) {
    	let div4;
    	let h2;
    	let t0;
    	let t1;
    	let div0;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let div3;
    	let div2;
    	let div1;
    	let t7;
    	let each_value_1 = /*courses*/ ctx[1];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	let if_block = /*creditsLeft*/ ctx[4] > 0 && create_if_block$l(ctx);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			h2 = element("h2");
    			t0 = text(/*coursesType*/ ctx[0]);
    			t1 = space();
    			div0 = element("div");
    			t2 = text("Credits: ");
    			t3 = text(/*creditsDone*/ ctx[3]);
    			t4 = text("/");
    			t5 = text(/*totalCreditsReq*/ ctx[2]);
    			t6 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t7 = space();
    			if (if_block) if_block.c();
    			attr_dev(h2, "class", "");
    			attr_dev(h2, "class", "svelte-cydkii");
    			add_location(h2, file$F, 82, 2, 1765);
    			attr_dev(div0, "class", "subheading svelte-cydkii");
    			add_location(div0, file$F, 83, 2, 1797);
    			attr_dev(div1, "class", "lines svelte-cydkii");
    			add_location(div1, file$F, 86, 6, 1925);
    			attr_dev(div2, "class", "container svelte-cydkii");
    			add_location(div2, file$F, 85, 4, 1894);
    			attr_dev(div3, "class", "box svelte-cydkii");
    			add_location(div3, file$F, 84, 2, 1871);
    			attr_dev(div4, "class", "timeline svelte-cydkii");
    			add_location(div4, file$F, 81, 0, 1739);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, h2);
    			append_dev(h2, t0);
    			append_dev(div4, t1);
    			append_dev(div4, div0);
    			append_dev(div0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, t4);
    			append_dev(div0, t5);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t7);
    			if (if_block) if_block.m(div1, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*coursesType*/ 1) set_data_dev(t0, /*coursesType*/ ctx[0]);
    			if (dirty & /*totalCreditsReq*/ 4) set_data_dev(t5, /*totalCreditsReq*/ ctx[2]);

    			if (dirty & /*courses, Array*/ 2) {
    				each_value_1 = /*courses*/ ctx[1];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, t7);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (/*creditsLeft*/ ctx[4] > 0) if_block.p(ctx, dirty);
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$L($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProgressTimeline', slots, []);

    	let { coursesType } = $$props,
    		{ courses } = $$props,
    		{ totalCreditsReq } = $$props;

    	//get sum of property "credits" in all courses
    	let creditsDone = courses.reduce((sum, { credits }) => sum + credits, 0);

    	let creditsLeft = totalCreditsReq - creditsDone;
    	const writable_props = ['coursesType', 'courses', 'totalCreditsReq'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProgressTimeline> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('coursesType' in $$props) $$invalidate(0, coursesType = $$props.coursesType);
    		if ('courses' in $$props) $$invalidate(1, courses = $$props.courses);
    		if ('totalCreditsReq' in $$props) $$invalidate(2, totalCreditsReq = $$props.totalCreditsReq);
    	};

    	$$self.$capture_state = () => ({
    		coursesType,
    		courses,
    		totalCreditsReq,
    		creditsDone,
    		creditsLeft
    	});

    	$$self.$inject_state = $$props => {
    		if ('coursesType' in $$props) $$invalidate(0, coursesType = $$props.coursesType);
    		if ('courses' in $$props) $$invalidate(1, courses = $$props.courses);
    		if ('totalCreditsReq' in $$props) $$invalidate(2, totalCreditsReq = $$props.totalCreditsReq);
    		if ('creditsDone' in $$props) $$invalidate(3, creditsDone = $$props.creditsDone);
    		if ('creditsLeft' in $$props) $$invalidate(4, creditsLeft = $$props.creditsLeft);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [coursesType, courses, totalCreditsReq, creditsDone, creditsLeft];
    }

    class ProgressTimeline extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$L, create_fragment$L, safe_not_equal, {
    			coursesType: 0,
    			courses: 1,
    			totalCreditsReq: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProgressTimeline",
    			options,
    			id: create_fragment$L.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*coursesType*/ ctx[0] === undefined && !('coursesType' in props)) {
    			console.warn("<ProgressTimeline> was created without expected prop 'coursesType'");
    		}

    		if (/*courses*/ ctx[1] === undefined && !('courses' in props)) {
    			console.warn("<ProgressTimeline> was created without expected prop 'courses'");
    		}

    		if (/*totalCreditsReq*/ ctx[2] === undefined && !('totalCreditsReq' in props)) {
    			console.warn("<ProgressTimeline> was created without expected prop 'totalCreditsReq'");
    		}
    	}

    	get coursesType() {
    		throw new Error("<ProgressTimeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set coursesType(value) {
    		throw new Error("<ProgressTimeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get courses() {
    		throw new Error("<ProgressTimeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set courses(value) {
    		throw new Error("<ProgressTimeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get totalCreditsReq() {
    		throw new Error("<ProgressTimeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set totalCreditsReq(value) {
    		throw new Error("<ProgressTimeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop$1) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$1) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop$1;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const userCourses = writable([]);

    let GERCategories = [
    	"Humanities and Languages",
    	"Social Sciences",
    	"Mathematical and Physical Sciences",
    	"Biological and Life Sciences",
    	"Performing and Visual Arts",
    ];

    let subjects = [
    	"Accounting",
    	"Accounting and Finance",
    	"Business Analytics",
    	"Family Business and Entrepreneurship*",
    	"Finance",
    	"Finance and Economics",
    	"Human Resources and Organisations",
    	"Marketing",
    	"Operations Management",
    	"Operations Research and Statistics",
    	"Supply Chain Management",
    	"Economics",
    	"History",
    	"Philosophy, History and Languages",
    	"Psychology",
    	"Social and Political Sciences",
    	"Computer Science",
    	"Life Sciences",
    	"Physics",
    	"Chemical Engineering",
    	"Computer Science and Engineering",
    	"Mechanical Engineering",
    	"Mathematics",
    	"Business Analytics",
    ];

    /* src\Progress.svelte generated by Svelte v3.40.0 */
    const file$E = "src\\Progress.svelte";

    function create_fragment$K(ctx) {
    	let div;
    	let progresstimeline0;
    	let t0;
    	let progresstimeline1;
    	let t1;
    	let progresstimeline2;
    	let current;

    	progresstimeline0 = new ProgressTimeline({
    			props: {
    				coursesType: "Major",
    				courses: /*majorCourses*/ ctx[0],
    				totalCreditsReq: 60
    			},
    			$$inline: true
    		});

    	progresstimeline1 = new ProgressTimeline({
    			props: {
    				coursesType: "Free Electives",
    				courses: /*freeElectives*/ ctx[1],
    				totalCreditsReq: 18
    			},
    			$$inline: true
    		});

    	progresstimeline2 = new ProgressTimeline({
    			props: {
    				coursesType: "GER",
    				courses: /*GERCourses*/ ctx[2],
    				totalCreditsReq: 30
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(progresstimeline0.$$.fragment);
    			t0 = space();
    			create_component(progresstimeline1.$$.fragment);
    			t1 = space();
    			create_component(progresstimeline2.$$.fragment);
    			attr_dev(div, "class", "mainContainer svelte-1wd43ug");
    			add_location(div, file$E, 39, 0, 1127);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(progresstimeline0, div, null);
    			append_dev(div, t0);
    			mount_component(progresstimeline1, div, null);
    			append_dev(div, t1);
    			mount_component(progresstimeline2, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const progresstimeline0_changes = {};
    			if (dirty & /*majorCourses*/ 1) progresstimeline0_changes.courses = /*majorCourses*/ ctx[0];
    			progresstimeline0.$set(progresstimeline0_changes);
    			const progresstimeline1_changes = {};
    			if (dirty & /*freeElectives*/ 2) progresstimeline1_changes.courses = /*freeElectives*/ ctx[1];
    			progresstimeline1.$set(progresstimeline1_changes);
    			const progresstimeline2_changes = {};
    			if (dirty & /*GERCourses*/ 4) progresstimeline2_changes.courses = /*GERCourses*/ ctx[2];
    			progresstimeline2.$set(progresstimeline2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(progresstimeline0.$$.fragment, local);
    			transition_in(progresstimeline1.$$.fragment, local);
    			transition_in(progresstimeline2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(progresstimeline0.$$.fragment, local);
    			transition_out(progresstimeline1.$$.fragment, local);
    			transition_out(progresstimeline2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(progresstimeline0);
    			destroy_component(progresstimeline1);
    			destroy_component(progresstimeline2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$K($$self, $$props, $$invalidate) {
    	let $userCourses;
    	validate_store(userCourses, 'userCourses');
    	component_subscribe($$self, userCourses, $$value => $$invalidate(3, $userCourses = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Progress', slots, []);
    	let major = "Computer Science";
    	let majorCourses, freeElectives, GERCourses;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Progress> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ProgressTimeline,
    		userCourses,
    		GERCategories,
    		major,
    		majorCourses,
    		freeElectives,
    		GERCourses,
    		$userCourses
    	});

    	$$self.$inject_state = $$props => {
    		if ('major' in $$props) $$invalidate(4, major = $$props.major);
    		if ('majorCourses' in $$props) $$invalidate(0, majorCourses = $$props.majorCourses);
    		if ('freeElectives' in $$props) $$invalidate(1, freeElectives = $$props.freeElectives);
    		if ('GERCourses' in $$props) $$invalidate(2, GERCourses = $$props.GERCourses);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$userCourses*/ 8) {
    			//$: reactive variables that change dynamically
    			$$invalidate(0, majorCourses = $userCourses.filter(course => course.subject == major));
    		}

    		if ($$self.$$.dirty & /*$userCourses*/ 8) {
    			$$invalidate(1, freeElectives = $userCourses.filter(course => course.subject != major && !GERCategories.includes(course.GERCategory)));
    		}

    		if ($$self.$$.dirty & /*$userCourses*/ 8) {
    			$$invalidate(2, GERCourses = $userCourses.filter(course => GERCategories.includes(course.GERCategory)));
    		}
    	};

    	return [majorCourses, freeElectives, GERCourses, $userCourses];
    }

    class Progress extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$K, create_fragment$K, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Progress",
    			options,
    			id: create_fragment$K.name
    		});
    	}
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values$1(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || from);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var stringToByteArray = function (str) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if ((c & 0xfc00) === 0xd800 &&
                i + 1 < str.length &&
                (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Turns an array of numbers into the string given by the concatenation of the
     * characters to which the numbers correspond.
     * @param bytes Array of numbers representing characters.
     * @return Stringification of the array.
     */
    var byteArrayToString = function (bytes) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var pos = 0, c = 0;
        while (pos < bytes.length) {
            var c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            }
            else if (c1 > 239 && c1 < 365) {
                // Surrogate Pair
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                var c4 = bytes[pos++];
                var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                    0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            }
            else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            }
        }
        return out.join('');
    };
    // We define it as an object literal instead of a class because a class compiled down to es5 can't
    // be treeshaked. https://github.com/rollup/rollup/issues/1691
    // Static lookup maps, lazily populated by init_()
    var base64 = {
        /**
         * Maps bytes to characters.
         */
        byteToCharMap_: null,
        /**
         * Maps characters to bytes.
         */
        charToByteMap_: null,
        /**
         * Maps bytes to websafe characters.
         * @private
         */
        byteToCharMapWebSafe_: null,
        /**
         * Maps websafe characters to bytes.
         * @private
         */
        charToByteMapWebSafe_: null,
        /**
         * Our default alphabet, shared between
         * ENCODED_VALS and ENCODED_VALS_WEBSAFE
         */
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
        /**
         * Our default alphabet. Value 64 (=) is special; it means "nothing."
         */
        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },
        /**
         * Our websafe alphabet.
         */
        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },
        /**
         * Whether this browser supports the atob and btoa functions. This extension
         * started at Mozilla but is now implemented by many browsers. We use the
         * ASSUME_* variables to avoid pulling in the full useragent detection library
         * but still allowing the standard per-browser compilations.
         *
         */
        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        /**
         * Base64-encode an array of bytes.
         *
         * @param input An array of bytes (numbers with
         *     value in [0, 255]) to encode.
         * @param webSafe Boolean indicating we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeByteArray: function (input, webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }
            this.init_();
            var byteToCharMap = webSafe
                ? this.byteToCharMapWebSafe_
                : this.byteToCharMap_;
            var output = [];
            for (var i = 0; i < input.length; i += 3) {
                var byte1 = input[i];
                var haveByte2 = i + 1 < input.length;
                var byte2 = haveByte2 ? input[i + 1] : 0;
                var haveByte3 = i + 2 < input.length;
                var byte3 = haveByte3 ? input[i + 2] : 0;
                var outByte1 = byte1 >> 2;
                var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
                var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
                var outByte4 = byte3 & 0x3f;
                if (!haveByte3) {
                    outByte4 = 64;
                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }
                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }
            return output.join('');
        },
        /**
         * Base64-encode a string.
         *
         * @param input A string to encode.
         * @param webSafe If true, we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return btoa(input);
            }
            return this.encodeByteArray(stringToByteArray(input), webSafe);
        },
        /**
         * Base64-decode a string.
         *
         * @param input to decode.
         * @param webSafe True if we should use the
         *     alternative alphabet.
         * @return string representing the decoded value.
         */
        decodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return atob(input);
            }
            return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
        },
        /**
         * Base64-decode a string.
         *
         * In base-64 decoding, groups of four characters are converted into three
         * bytes.  If the encoder did not apply padding, the input length may not
         * be a multiple of 4.
         *
         * In this case, the last group will have fewer than 4 characters, and
         * padding will be inferred.  If the group has one or two characters, it decodes
         * to one byte.  If the group has three characters, it decodes to two bytes.
         *
         * @param input Input to decode.
         * @param webSafe True if we should use the web-safe alphabet.
         * @return bytes representing the decoded value.
         */
        decodeStringToByteArray: function (input, webSafe) {
            this.init_();
            var charToByteMap = webSafe
                ? this.charToByteMapWebSafe_
                : this.charToByteMap_;
            var output = [];
            for (var i = 0; i < input.length;) {
                var byte1 = charToByteMap[input.charAt(i++)];
                var haveByte2 = i < input.length;
                var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                var haveByte3 = i < input.length;
                var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                var haveByte4 = i < input.length;
                var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw Error();
                }
                var outByte1 = (byte1 << 2) | (byte2 >> 4);
                output.push(outByte1);
                if (byte3 !== 64) {
                    var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                    output.push(outByte2);
                    if (byte4 !== 64) {
                        var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                        output.push(outByte3);
                    }
                }
            }
            return output;
        },
        /**
         * Lazy static initialization function. Called before
         * accessing any of the static map variables.
         * @private
         */
        init_: function () {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};
                // We want quick mappings back and forth, so we precompute two maps.
                for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                    // Be forgiving when decoding and correctly decode both encodings.
                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Do a deep-copy of basic JavaScript Objects or Arrays.
     */
    function deepCopy(value) {
        return deepExtend(undefined, value);
    }
    /**
     * Copy properties from source to target (recursively allows extension
     * of Objects and Arrays).  Scalar values in the target are over-written.
     * If target is undefined, an object of the appropriate type will be created
     * (and returned).
     *
     * We recursively copy all child properties of plain Objects in the source- so
     * that namespace- like dictionaries are merged.
     *
     * Note that the target can be a function, in which case the properties in
     * the source Object are copied onto it as static properties of the Function.
     *
     * Note: we don't merge __proto__ to prevent prototype pollution
     */
    function deepExtend(target, source) {
        if (!(source instanceof Object)) {
            return source;
        }
        switch (source.constructor) {
            case Date:
                // Treat Dates like scalars; if the target date object had any child
                // properties - they will be lost!
                var dateValue = source;
                return new Date(dateValue.getTime());
            case Object:
                if (target === undefined) {
                    target = {};
                }
                break;
            case Array:
                // Always copy the array source and overwrite the target.
                target = [];
                break;
            default:
                // Not a plain Object - treat it as a scalar.
                return source;
        }
        for (var prop in source) {
            // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
            if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
                continue;
            }
            target[prop] = deepExtend(target[prop], source[prop]);
        }
        return target;
    }
    function isValidKey(key) {
        return key !== '__proto__';
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Deferred = /** @class */ (function () {
        function Deferred() {
            var _this = this;
            this.reject = function () { };
            this.resolve = function () { };
            this.promise = new Promise(function (resolve, reject) {
                _this.resolve = resolve;
                _this.reject = reject;
            });
        }
        /**
         * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
         * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
         * and returns a node-style callback which will resolve or reject the Deferred's promise.
         */
        Deferred.prototype.wrapCallback = function (callback) {
            var _this = this;
            return function (error, value) {
                if (error) {
                    _this.reject(error);
                }
                else {
                    _this.resolve(value);
                }
                if (typeof callback === 'function') {
                    // Attaching noop handler just in case developer wasn't expecting
                    // promises
                    _this.promise.catch(function () { });
                    // Some of our callbacks don't expect a value and our own tests
                    // assert that the parameter length is 1
                    if (callback.length === 1) {
                        callback(error);
                    }
                    else {
                        callback(error, value);
                    }
                }
            };
        };
        return Deferred;
    }());

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createMockUserToken(token, projectId) {
        if (token.uid) {
            throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
        }
        // Unsecured JWTs use "none" as the algorithm.
        var header = {
            alg: 'none',
            type: 'JWT'
        };
        var project = projectId || 'demo-project';
        var iat = token.iat || 0;
        var sub = token.sub || token.user_id;
        if (!sub) {
            throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
        }
        var payload = __assign({ 
            // Set all required fields to decent defaults
            iss: "https://securetoken.google.com/" + project, aud: project, iat: iat, exp: iat + 3600, auth_time: iat, sub: sub, user_id: sub, firebase: {
                sign_in_provider: 'custom',
                identities: {}
            } }, token);
        // Unsecured JWTs use the empty string as a signature.
        var signature = '';
        return [
            base64.encodeString(JSON.stringify(header), /*webSafe=*/ false),
            base64.encodeString(JSON.stringify(payload), /*webSafe=*/ false),
            signature
        ].join('.');
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    /**
     * Detect Node.js.
     *
     * @return true if Node.js environment is detected.
     */
    // Node detection logic from: https://github.com/iliakan/detect-node/
    function isNode() {
        try {
            return (Object.prototype.toString.call(global.process) === '[object process]');
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Detect Browser Environment
     */
    function isBrowser() {
        return typeof self === 'object' && self.self === self;
    }
    function isBrowserExtension() {
        var runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Electron apps. */
    function isElectron() {
        return getUA().indexOf('Electron/') >= 0;
    }
    /** Detects Internet Explorer. */
    function isIE() {
        var ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }
    /** Detects Universal Windows Platform apps. */
    function isUWP() {
        return getUA().indexOf('MSAppHost/') >= 0;
    }
    /**
     * This method checks if indexedDB is supported by current browser/service worker context
     * @return true if indexedDB is supported by current browser/service worker context
     */
    function isIndexedDBAvailable() {
        return 'indexedDB' in self && indexedDB != null;
    }
    /**
     * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
     * if errors occur during the database open operation.
     *
     * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
     * private browsing)
     */
    function validateIndexedDBOpenable() {
        return new Promise(function (resolve, reject) {
            try {
                var preExist_1 = true;
                var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
                var request_1 = self.indexedDB.open(DB_CHECK_NAME_1);
                request_1.onsuccess = function () {
                    request_1.result.close();
                    // delete database only when it doesn't pre-exist
                    if (!preExist_1) {
                        self.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
                    }
                    resolve(true);
                };
                request_1.onupgradeneeded = function () {
                    preExist_1 = false;
                };
                request_1.onerror = function () {
                    var _a;
                    reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
                };
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * This method checks whether cookie is enabled within current browser
     * @return true if cookie is enabled within current browser
     */
    function areCookiesEnabled() {
        if (!navigator || !navigator.cookieEnabled) {
            return false;
        }
        return true;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends$1(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function contains(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }

    /**
     * Helper to make a Subscribe function (just like Promise helps make a
     * Thenable).
     *
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function createSubscribe(executor, onNoObservers) {
        var proxy = new ObserverProxy(executor, onNoObservers);
        return proxy.subscribe.bind(proxy);
    }
    /**
     * Implement fan-out for any number of Observers attached via a subscribe
     * function.
     */
    var ObserverProxy = /** @class */ (function () {
        /**
         * @param executor Function which can make calls to a single Observer
         *     as a proxy.
         * @param onNoObservers Callback when count of Observers goes to zero.
         */
        function ObserverProxy(executor, onNoObservers) {
            var _this = this;
            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            // Micro-task scheduling by calling task.then().
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            // Call the executor asynchronously so subscribers that are called
            // synchronously after the creation of the subscribe function
            // can still receive the very first value generated in the executor.
            this.task
                .then(function () {
                executor(_this);
            })
                .catch(function (e) {
                _this.error(e);
            });
        }
        ObserverProxy.prototype.next = function (value) {
            this.forEachObserver(function (observer) {
                observer.next(value);
            });
        };
        ObserverProxy.prototype.error = function (error) {
            this.forEachObserver(function (observer) {
                observer.error(error);
            });
            this.close(error);
        };
        ObserverProxy.prototype.complete = function () {
            this.forEachObserver(function (observer) {
                observer.complete();
            });
            this.close();
        };
        /**
         * Subscribe function that can be used to add an Observer to the fan-out list.
         *
         * - We require that no event is sent to a subscriber sychronously to their
         *   call to subscribe().
         */
        ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
            var _this = this;
            var observer;
            if (nextOrObserver === undefined &&
                error === undefined &&
                complete === undefined) {
                throw new Error('Missing Observer.');
            }
            // Assemble an Observer object when passed as callback functions.
            if (implementsAnyMethods(nextOrObserver, [
                'next',
                'error',
                'complete'
            ])) {
                observer = nextOrObserver;
            }
            else {
                observer = {
                    next: nextOrObserver,
                    error: error,
                    complete: complete
                };
            }
            if (observer.next === undefined) {
                observer.next = noop;
            }
            if (observer.error === undefined) {
                observer.error = noop;
            }
            if (observer.complete === undefined) {
                observer.complete = noop;
            }
            var unsub = this.unsubscribeOne.bind(this, this.observers.length);
            // Attempt to subscribe to a terminated Observable - we
            // just respond to the Observer with the final error or complete
            // event.
            if (this.finalized) {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.task.then(function () {
                    try {
                        if (_this.finalError) {
                            observer.error(_this.finalError);
                        }
                        else {
                            observer.complete();
                        }
                    }
                    catch (e) {
                        // nothing
                    }
                    return;
                });
            }
            this.observers.push(observer);
            return unsub;
        };
        // Unsubscribe is synchronous - we guarantee that no events are sent to
        // any unsubscribed Observer.
        ObserverProxy.prototype.unsubscribeOne = function (i) {
            if (this.observers === undefined || this.observers[i] === undefined) {
                return;
            }
            delete this.observers[i];
            this.observerCount -= 1;
            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
                this.onNoObservers(this);
            }
        };
        ObserverProxy.prototype.forEachObserver = function (fn) {
            if (this.finalized) {
                // Already closed by previous event....just eat the additional values.
                return;
            }
            // Since sendOne calls asynchronously - there is no chance that
            // this.observers will become undefined.
            for (var i = 0; i < this.observers.length; i++) {
                this.sendOne(i, fn);
            }
        };
        // Call the Observer via one of it's callback function. We are careful to
        // confirm that the observe has not been unsubscribed since this asynchronous
        // function had been queued.
        ObserverProxy.prototype.sendOne = function (i, fn) {
            var _this = this;
            // Execute the callback asynchronously
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                    try {
                        fn(_this.observers[i]);
                    }
                    catch (e) {
                        // Ignore exceptions raised in Observers or missing methods of an
                        // Observer.
                        // Log error to console. b/31404806
                        if (typeof console !== 'undefined' && console.error) {
                            console.error(e);
                        }
                    }
                }
            });
        };
        ObserverProxy.prototype.close = function (err) {
            var _this = this;
            if (this.finalized) {
                return;
            }
            this.finalized = true;
            if (err !== undefined) {
                this.finalError = err;
            }
            // Proxy is no longer needed - garbage collect references
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                _this.observers = undefined;
                _this.onNoObservers = undefined;
            });
        };
        return ObserverProxy;
    }());
    /**
     * Return true if the object passed in implements any of the named methods.
     */
    function implementsAnyMethods(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var method = methods_1[_i];
            if (method in obj && typeof obj[method] === 'function') {
                return true;
            }
        }
        return false;
    }
    function noop() {
        // do nothing
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The amount of milliseconds to exponentially increase.
     */
    var DEFAULT_INTERVAL_MILLIS = 1000;
    /**
     * The factor to backoff by.
     * Should be a number greater than 1.
     */
    var DEFAULT_BACKOFF_FACTOR = 2;
    /**
     * The maximum milliseconds to increase to.
     *
     * <p>Visible for testing
     */
    var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.
    /**
     * The percentage of backoff time to randomize by.
     * See
     * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
     * for context.
     *
     * <p>Visible for testing
     */
    var RANDOM_FACTOR = 0.5;
    /**
     * Based on the backoff method from
     * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
     * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
     */
    function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
        if (intervalMillis === void 0) { intervalMillis = DEFAULT_INTERVAL_MILLIS; }
        if (backoffFactor === void 0) { backoffFactor = DEFAULT_BACKOFF_FACTOR; }
        // Calculates an exponentially increasing value.
        // Deviation: calculates value from count and a constant interval, so we only need to save value
        // and count to restore state.
        var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
        // A random "fuzz" to avoid waves of retries.
        // Deviation: randomFactor is required.
        var randomWait = Math.round(
        // A fraction of the backoff value to add/subtract.
        // Deviation: changes multiplication order to improve readability.
        RANDOM_FACTOR *
            currBaseValue *
            // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
            // if we add or subtract.
            (Math.random() - 0.5) *
            2);
        // Limits backoff to max to avoid effectively permanent backoff.
        return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getModularInstance(service) {
        if (service && service._delegate) {
            return service._delegate;
        }
        else {
            return service;
        }
    }

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
            this.onInstanceCreated = null;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        Component.prototype.setInstanceCreatedCallback = function (callback) {
            this.onInstanceCreated = callback;
            return this;
        };
        return Component;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_ENTRY_NAME$2 = '[DEFAULT]';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
     * NameServiceMapping[T] is an alias for the type of the instance
     */
    var Provider = /** @class */ (function () {
        function Provider(name, container) {
            this.name = name;
            this.container = container;
            this.component = null;
            this.instances = new Map();
            this.instancesDeferred = new Map();
            this.onInitCallbacks = new Map();
        }
        /**
         * @param identifier A provider can provide mulitple instances of a service
         * if this.component.multipleInstances is true.
         */
        Provider.prototype.get = function (identifier) {
            // if multipleInstances is not supported, use the default name
            var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            if (!this.instancesDeferred.has(normalizedIdentifier)) {
                var deferred = new Deferred();
                this.instancesDeferred.set(normalizedIdentifier, deferred);
                if (this.isInitialized(normalizedIdentifier) ||
                    this.shouldAutoInitialize()) {
                    // initialize the service if it can be auto-initialized
                    try {
                        var instance = this.getOrInitializeService({
                            instanceIdentifier: normalizedIdentifier
                        });
                        if (instance) {
                            deferred.resolve(instance);
                        }
                    }
                    catch (e) {
                        // when the instance factory throws an exception during get(), it should not cause
                        // a fatal error. We just return the unresolved promise in this case.
                    }
                }
            }
            return this.instancesDeferred.get(normalizedIdentifier).promise;
        };
        Provider.prototype.getImmediate = function (options) {
            var _a;
            // if multipleInstances is not supported, use the default name
            var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
            var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
            if (this.isInitialized(normalizedIdentifier) ||
                this.shouldAutoInitialize()) {
                try {
                    return this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                }
                catch (e) {
                    if (optional) {
                        return null;
                    }
                    else {
                        throw e;
                    }
                }
            }
            else {
                // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
                if (optional) {
                    return null;
                }
                else {
                    throw Error("Service " + this.name + " is not available");
                }
            }
        };
        Provider.prototype.getComponent = function () {
            return this.component;
        };
        Provider.prototype.setComponent = function (component) {
            var e_1, _a;
            if (component.name !== this.name) {
                throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
            }
            if (this.component) {
                throw Error("Component for " + this.name + " has already been provided");
            }
            this.component = component;
            // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
            if (!this.shouldAutoInitialize()) {
                return;
            }
            // if the service is eager, initialize the default instance
            if (isComponentEager(component)) {
                try {
                    this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME$2 });
                }
                catch (e) {
                    // when the instance factory for an eager Component throws an exception during the eager
                    // initialization, it should not cause a fatal error.
                    // TODO: Investigate if we need to make it configurable, because some component may want to cause
                    // a fatal error in this case?
                }
            }
            try {
                // Create service instances for the pending promises and resolve them
                // NOTE: if this.multipleInstances is false, only the default instance will be created
                // and all promises with resolve with it regardless of the identifier.
                for (var _b = __values$1(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                    var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                    try {
                        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                        var instance = this.getOrInitializeService({
                            instanceIdentifier: normalizedIdentifier
                        });
                        instanceDeferred.resolve(instance);
                    }
                    catch (e) {
                        // when the instance factory throws an exception, it should not cause
                        // a fatal error. We just leave the promise unresolved.
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        Provider.prototype.clearInstance = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME$2; }
            this.instancesDeferred.delete(identifier);
            this.instances.delete(identifier);
        };
        // app.delete() will call this method on every provider to delete the services
        // TODO: should we mark the provider as deleted?
        Provider.prototype.delete = function () {
            return __awaiter(this, void 0, void 0, function () {
                var services;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            services = Array.from(this.instances.values());
                            return [4 /*yield*/, Promise.all(__spreadArray(__spreadArray([], __read(services
                                    .filter(function (service) { return 'INTERNAL' in service; }) // legacy services
                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    .map(function (service) { return service.INTERNAL.delete(); }))), __read(services
                                    .filter(function (service) { return '_delete' in service; }) // modularized services
                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    .map(function (service) { return service._delete(); }))))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Provider.prototype.isComponentSet = function () {
            return this.component != null;
        };
        Provider.prototype.isInitialized = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME$2; }
            return this.instances.has(identifier);
        };
        Provider.prototype.initialize = function (opts) {
            var e_2, _a;
            if (opts === void 0) { opts = {}; }
            var _b = opts.options, options = _b === void 0 ? {} : _b;
            var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
            if (this.isInitialized(normalizedIdentifier)) {
                throw Error(this.name + "(" + normalizedIdentifier + ") has already been initialized");
            }
            if (!this.isComponentSet()) {
                throw Error("Component " + this.name + " has not been registered yet");
            }
            var instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier,
                options: options
            });
            try {
                // resolve any pending promise waiting for the service instance
                for (var _c = __values$1(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var _e = __read(_d.value, 2), instanceIdentifier = _e[0], instanceDeferred = _e[1];
                    var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                    if (normalizedIdentifier === normalizedDeferredIdentifier) {
                        instanceDeferred.resolve(instance);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return instance;
        };
        /**
         *
         * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
         * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
         *
         * @param identifier An optional instance identifier
         * @returns a function to unregister the callback
         */
        Provider.prototype.onInit = function (callback, identifier) {
            var _a;
            var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
            existingCallbacks.add(callback);
            this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
            var existingInstance = this.instances.get(normalizedIdentifier);
            if (existingInstance) {
                callback(existingInstance, normalizedIdentifier);
            }
            return function () {
                existingCallbacks.delete(callback);
            };
        };
        /**
         * Invoke onInit callbacks synchronously
         * @param instance the service instance`
         */
        Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {
            var e_3, _a;
            var callbacks = this.onInitCallbacks.get(identifier);
            if (!callbacks) {
                return;
            }
            try {
                for (var callbacks_1 = __values$1(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
                    var callback = callbacks_1_1.value;
                    try {
                        callback(instance, identifier);
                    }
                    catch (_b) {
                        // ignore errors in the onInit callback
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        Provider.prototype.getOrInitializeService = function (_a) {
            var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options = _b === void 0 ? {} : _b;
            var instance = this.instances.get(instanceIdentifier);
            if (!instance && this.component) {
                instance = this.component.instanceFactory(this.container, {
                    instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                    options: options
                });
                this.instances.set(instanceIdentifier, instance);
                /**
                 * Invoke onInit listeners.
                 * Note this.component.onInstanceCreated is different, which is used by the component creator,
                 * while onInit listeners are registered by consumers of the provider.
                 */
                this.invokeOnInitCallbacks(instance, instanceIdentifier);
                /**
                 * Order is important
                 * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
                 * makes `isInitialized()` return true.
                 */
                if (this.component.onInstanceCreated) {
                    try {
                        this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
                    }
                    catch (_c) {
                        // ignore errors in the onInstanceCreatedCallback
                    }
                }
            }
            return instance || null;
        };
        Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME$2; }
            if (this.component) {
                return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$2;
            }
            else {
                return identifier; // assume multiple instances are supported before the component is provided.
            }
        };
        Provider.prototype.shouldAutoInitialize = function () {
            return (!!this.component &&
                this.component.instantiationMode !== "EXPLICIT" /* EXPLICIT */);
        };
        return Provider;
    }());
    // undefined should be passed to the service factory for the default instance
    function normalizeIdentifierForFactory(identifier) {
        return identifier === DEFAULT_ENTRY_NAME$2 ? undefined : identifier;
    }
    function isComponentEager(component) {
        return component.instantiationMode === "EAGER" /* EAGER */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
     */
    var ComponentContainer = /** @class */ (function () {
        function ComponentContainer(name) {
            this.name = name;
            this.providers = new Map();
        }
        /**
         *
         * @param component Component being added
         * @param overwrite When a component with the same name has already been registered,
         * if overwrite is true: overwrite the existing component with the new component and create a new
         * provider with the new component. It can be useful in tests where you want to use different mocks
         * for different tests.
         * if overwrite is false: throw an exception
         */
        ComponentContainer.prototype.addComponent = function (component) {
            var provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                throw new Error("Component " + component.name + " has already been registered with " + this.name);
            }
            provider.setComponent(component);
        };
        ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
            var provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                // delete the existing provider from the container, so we can register the new component
                this.providers.delete(component.name);
            }
            this.addComponent(component);
        };
        /**
         * getProvider provides a type safe interface where it can only be called with a field name
         * present in NameServiceMapping interface.
         *
         * Firebase SDKs providing services should extend NameServiceMapping interface to register
         * themselves.
         */
        ComponentContainer.prototype.getProvider = function (name) {
            if (this.providers.has(name)) {
                return this.providers.get(name);
            }
            // create a Provider for a service that hasn't registered with Firebase
            var provider = new Provider(name, this);
            this.providers.set(name, provider);
            return provider;
        };
        ComponentContainer.prototype.getProviders = function () {
            return Array.from(this.providers.values());
        };
        return ComponentContainer;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$5;
    /**
     * A container for all of the Logger instances
     */
    var instances = [];
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a$5 = {},
        _a$5[LogLevel.DEBUG] = 'log',
        _a$5[LogLevel.VERBOSE] = 'log',
        _a$5[LogLevel.INFO] = 'info',
        _a$5[LogLevel.WARN] = 'warn',
        _a$5[LogLevel.ERROR] = 'error',
        _a$5);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
            /**
             * Capture the current instance for later use
             */
            instances.push(this);
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());
    function setLogLevel(level) {
        instances.forEach(function (inst) {
            inst.setLogLevel(level);
        });
    }
    function setUserLogHandler(logCallback, options) {
        var _loop_1 = function (instance) {
            var customLogLevel = null;
            if (options && options.level) {
                customLogLevel = levelStringToEnum[options.level];
            }
            if (logCallback === null) {
                instance.userLogHandler = null;
            }
            else {
                instance.userLogHandler = function (instance, level) {
                    var args = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        args[_i - 2] = arguments[_i];
                    }
                    var message = args
                        .map(function (arg) {
                        if (arg == null) {
                            return null;
                        }
                        else if (typeof arg === 'string') {
                            return arg;
                        }
                        else if (typeof arg === 'number' || typeof arg === 'boolean') {
                            return arg.toString();
                        }
                        else if (arg instanceof Error) {
                            return arg.message;
                        }
                        else {
                            try {
                                return JSON.stringify(arg);
                            }
                            catch (ignored) {
                                return null;
                            }
                        }
                    })
                        .filter(function (arg) { return arg; })
                        .join(' ');
                    if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                        logCallback({
                            level: LogLevel[level].toLowerCase(),
                            message: message,
                            args: args,
                            type: instance.name
                        });
                    }
                };
            }
        };
        for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
            var instance = instances_1[_i];
            _loop_1(instance);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1$1;
    var ERRORS$1 = (_a$1$1 = {},
        _a$1$1["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
            'call Firebase App.initializeApp()',
        _a$1$1["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
        _a$1$1["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
        _a$1$1["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
        _a$1$1["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
            'Firebase App instance.',
        _a$1$1["invalid-log-argument" /* INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.',
        _a$1$1);
    var ERROR_FACTORY$3 = new ErrorFactory('app', 'Firebase', ERRORS$1);

    var name$c = "@firebase/app";
    var version$1$1 = "0.6.28";

    var name$b = "@firebase/analytics";

    var name$a = "@firebase/app-check";

    var name$9 = "@firebase/auth";

    var name$8 = "@firebase/database";

    var name$7 = "@firebase/functions";

    var name$6 = "@firebase/installations";

    var name$5 = "@firebase/messaging";

    var name$4 = "@firebase/performance";

    var name$3$1 = "@firebase/remote-config";

    var name$2$1 = "@firebase/storage";

    var name$1$1 = "@firebase/firestore";

    var name$d = "firebase-wrapper";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$4;
    var DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';
    var PLATFORM_LOG_STRING = (_a$4 = {},
        _a$4[name$c] = 'fire-core',
        _a$4[name$b] = 'fire-analytics',
        _a$4[name$a] = 'fire-app-check',
        _a$4[name$9] = 'fire-auth',
        _a$4[name$8] = 'fire-rtdb',
        _a$4[name$7] = 'fire-fn',
        _a$4[name$6] = 'fire-iid',
        _a$4[name$5] = 'fire-fcm',
        _a$4[name$4] = 'fire-perf',
        _a$4[name$3$1] = 'fire-rc',
        _a$4[name$2$1] = 'fire-gcs',
        _a$4[name$1$1] = 'fire-fst',
        _a$4['fire-js'] = 'fire-js',
        _a$4[name$d] = 'fire-js-all',
        _a$4);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger$2 = new Logger('@firebase/app');

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Global context object for a collection of services using
     * a shared authentication state.
     */
    var FirebaseAppImpl = /** @class */ (function () {
        function FirebaseAppImpl(options, config, firebase_) {
            var _this = this;
            this.firebase_ = firebase_;
            this.isDeleted_ = false;
            this.name_ = config.name;
            this.automaticDataCollectionEnabled_ =
                config.automaticDataCollectionEnabled || false;
            this.options_ = deepCopy(options);
            this.container = new ComponentContainer(config.name);
            // add itself to container
            this._addComponent(new Component('app', function () { return _this; }, "PUBLIC" /* PUBLIC */));
            // populate ComponentContainer with existing components
            this.firebase_.INTERNAL.components.forEach(function (component) {
                return _this._addComponent(component);
            });
        }
        Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
            get: function () {
                this.checkDestroyed_();
                return this.automaticDataCollectionEnabled_;
            },
            set: function (val) {
                this.checkDestroyed_();
                this.automaticDataCollectionEnabled_ = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "name", {
            get: function () {
                this.checkDestroyed_();
                return this.name_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "options", {
            get: function () {
                this.checkDestroyed_();
                return this.options_;
            },
            enumerable: false,
            configurable: true
        });
        FirebaseAppImpl.prototype.delete = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.checkDestroyed_();
                resolve();
            })
                .then(function () {
                _this.firebase_.INTERNAL.removeApp(_this.name_);
                return Promise.all(_this.container.getProviders().map(function (provider) { return provider.delete(); }));
            })
                .then(function () {
                _this.isDeleted_ = true;
            });
        };
        /**
         * Return a service instance associated with this app (creating it
         * on demand), identified by the passed instanceIdentifier.
         *
         * NOTE: Currently storage and functions are the only ones that are leveraging this
         * functionality. They invoke it by calling:
         *
         * ```javascript
         * firebase.app().storage('STORAGE BUCKET ID')
         * ```
         *
         * The service name is passed to this already
         * @internal
         */
        FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
            var _a;
            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME$1; }
            this.checkDestroyed_();
            // Initialize instance if InstatiationMode is `EXPLICIT`.
            var provider = this.container.getProvider(name);
            if (!provider.isInitialized() &&
                ((_a = provider.getComponent()) === null || _a === void 0 ? void 0 : _a.instantiationMode) === "EXPLICIT" /* EXPLICIT */) {
                provider.initialize();
            }
            // getImmediate will always succeed because _getService is only called for registered components.
            return provider.getImmediate({
                identifier: instanceIdentifier
            });
        };
        /**
         * Remove a service instance from the cache, so we will create a new instance for this service
         * when people try to get this service again.
         *
         * NOTE: currently only firestore is using this functionality to support firestore shutdown.
         *
         * @param name The service name
         * @param instanceIdentifier instance identifier in case multiple instances are allowed
         * @internal
         */
        FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME$1; }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.container.getProvider(name).clearInstance(instanceIdentifier);
        };
        /**
         * @param component the component being added to this app's container
         */
        FirebaseAppImpl.prototype._addComponent = function (component) {
            try {
                this.container.addComponent(component);
            }
            catch (e) {
                logger$2.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
            }
        };
        FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
            this.container.addOrOverwriteComponent(component);
        };
        FirebaseAppImpl.prototype.toJSON = function () {
            return {
                name: this.name,
                automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,
                options: this.options
            };
        };
        /**
         * This function will throw an Error if the App has already been deleted -
         * use before performing API actions on the App.
         */
        FirebaseAppImpl.prototype.checkDestroyed_ = function () {
            if (this.isDeleted_) {
                throw ERROR_FACTORY$3.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
            }
        };
        return FirebaseAppImpl;
    }());
    // Prevent dead-code elimination of these methods w/o invalid property
    // copying.
    (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
        FirebaseAppImpl.prototype.delete ||
        console.log('dc');

    var version$4 = "8.7.0";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Because auth can't share code with other components, we attach the utility functions
     * in an internal namespace to share code.
     * This function return a firebase namespace object without
     * any utility functions, so it can be shared between the regular firebaseNamespace and
     * the lite version.
     */
    function createFirebaseNamespaceCore(firebaseAppImpl) {
        var apps = {};
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var components = new Map();
        // A namespace is a plain JavaScript Object.
        var namespace = {
            // Hack to prevent Babel from modifying the object returned
            // as the firebase namespace.
            // @ts-ignore
            __esModule: true,
            initializeApp: initializeApp,
            // @ts-ignore
            app: app,
            registerVersion: registerVersion,
            setLogLevel: setLogLevel,
            onLog: onLog,
            // @ts-ignore
            apps: null,
            SDK_VERSION: version$4,
            INTERNAL: {
                registerComponent: registerComponent,
                removeApp: removeApp,
                components: components,
                useAsService: useAsService
            }
        };
        // Inject a circular default export to allow Babel users who were previously
        // using:
        //
        //   import firebase from 'firebase';
        //   which becomes: var firebase = require('firebase').default;
        //
        // instead of
        //
        //   import * as firebase from 'firebase';
        //   which becomes: var firebase = require('firebase');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        namespace['default'] = namespace;
        // firebase.apps is a read-only getter.
        Object.defineProperty(namespace, 'apps', {
            get: getApps
        });
        /**
         * Called by App.delete() - but before any services associated with the App
         * are deleted.
         */
        function removeApp(name) {
            delete apps[name];
        }
        /**
         * Get the App object for a given name (or DEFAULT).
         */
        function app(name) {
            name = name || DEFAULT_ENTRY_NAME$1;
            if (!contains(apps, name)) {
                throw ERROR_FACTORY$3.create("no-app" /* NO_APP */, { appName: name });
            }
            return apps[name];
        }
        // @ts-ignore
        app['App'] = firebaseAppImpl;
        function initializeApp(options, rawConfig) {
            if (rawConfig === void 0) { rawConfig = {}; }
            if (typeof rawConfig !== 'object' || rawConfig === null) {
                var name_1 = rawConfig;
                rawConfig = { name: name_1 };
            }
            var config = rawConfig;
            if (config.name === undefined) {
                config.name = DEFAULT_ENTRY_NAME$1;
            }
            var name = config.name;
            if (typeof name !== 'string' || !name) {
                throw ERROR_FACTORY$3.create("bad-app-name" /* BAD_APP_NAME */, {
                    appName: String(name)
                });
            }
            if (contains(apps, name)) {
                throw ERROR_FACTORY$3.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
            }
            var app = new firebaseAppImpl(options, config, namespace);
            apps[name] = app;
            return app;
        }
        /*
         * Return an array of all the non-deleted FirebaseApps.
         */
        function getApps() {
            // Make a copy so caller cannot mutate the apps list.
            return Object.keys(apps).map(function (name) { return apps[name]; });
        }
        function registerComponent(component) {
            var componentName = component.name;
            if (components.has(componentName)) {
                logger$2.debug("There were multiple attempts to register component " + componentName + ".");
                return component.type === "PUBLIC" /* PUBLIC */
                    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        namespace[componentName]
                    : null;
            }
            components.set(componentName, component);
            // create service namespace for public components
            if (component.type === "PUBLIC" /* PUBLIC */) {
                // The Service namespace is an accessor function ...
                var serviceNamespace = function (appArg) {
                    if (appArg === void 0) { appArg = app(); }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    if (typeof appArg[componentName] !== 'function') {
                        // Invalid argument.
                        // This happens in the following case: firebase.storage('gs:/')
                        throw ERROR_FACTORY$3.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                            appName: componentName
                        });
                    }
                    // Forward service instance lookup to the FirebaseApp.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return appArg[componentName]();
                };
                // ... and a container for service-level properties.
                if (component.serviceProps !== undefined) {
                    deepExtend(serviceNamespace, component.serviceProps);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                namespace[componentName] = serviceNamespace;
                // Patch the FirebaseAppImpl prototype
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                firebaseAppImpl.prototype[componentName] =
                    // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
                    // option added to the no-explicit-any rule when ESlint releases it.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var serviceFxn = this._getService.bind(this, componentName);
                        return serviceFxn.apply(this, component.multipleInstances ? args : []);
                    };
            }
            // add the component to existing app instances
            for (var _i = 0, _a = Object.keys(apps); _i < _a.length; _i++) {
                var appName = _a[_i];
                apps[appName]._addComponent(component);
            }
            return component.type === "PUBLIC" /* PUBLIC */
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    namespace[componentName]
                : null;
        }
        function registerVersion(libraryKeyOrName, version, variant) {
            var _a;
            // TODO: We can use this check to whitelist strings when/if we set up
            // a good whitelist system.
            var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
            if (variant) {
                library += "-" + variant;
            }
            var libraryMismatch = library.match(/\s|\//);
            var versionMismatch = version.match(/\s|\//);
            if (libraryMismatch || versionMismatch) {
                var warning = [
                    "Unable to register library \"" + library + "\" with version \"" + version + "\":"
                ];
                if (libraryMismatch) {
                    warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
                }
                if (libraryMismatch && versionMismatch) {
                    warning.push('and');
                }
                if (versionMismatch) {
                    warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
                }
                logger$2.warn(warning.join(' '));
                return;
            }
            registerComponent(new Component(library + "-version", function () { return ({ library: library, version: version }); }, "VERSION" /* VERSION */));
        }
        function onLog(logCallback, options) {
            if (logCallback !== null && typeof logCallback !== 'function') {
                throw ERROR_FACTORY$3.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */);
            }
            setUserLogHandler(logCallback, options);
        }
        // Map the requested service to a registered service name
        // (used to map auth to serverAuth service when needed).
        function useAsService(app, name) {
            if (name === 'serverAuth') {
                return null;
            }
            var useService = name;
            return useService;
        }
        return namespace;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Return a firebase namespace object.
     *
     * In production, this will be called exactly once and the result
     * assigned to the 'firebase' global.  It may be called multiple times
     * in unit tests.
     */
    function createFirebaseNamespace() {
        var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
        namespace.INTERNAL = __assign(__assign({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
            extendNamespace: extendNamespace,
            createSubscribe: createSubscribe,
            ErrorFactory: ErrorFactory,
            deepExtend: deepExtend });
        /**
         * Patch the top-level firebase namespace with additional properties.
         *
         * firebase.INTERNAL.extendNamespace()
         */
        function extendNamespace(props) {
            deepExtend(namespace, props);
        }
        return namespace;
    }
    var firebase$1 = createFirebaseNamespace();

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PlatformLoggerService = /** @class */ (function () {
        function PlatformLoggerService(container) {
            this.container = container;
        }
        // In initial implementation, this will be called by installations on
        // auth token refresh, and installations will send this string.
        PlatformLoggerService.prototype.getPlatformInfoString = function () {
            var providers = this.container.getProviders();
            // Loop through providers and get library/version pairs from any that are
            // version components.
            return providers
                .map(function (provider) {
                if (isVersionServiceProvider(provider)) {
                    var service = provider.getImmediate();
                    return service.library + "/" + service.version;
                }
                else {
                    return null;
                }
            })
                .filter(function (logString) { return logString; })
                .join(' ');
        };
        return PlatformLoggerService;
    }());
    /**
     *
     * @param provider check if this provider provides a VersionService
     *
     * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
     * provides VersionService. The provider is not necessarily a 'app-version'
     * provider.
     */
    function isVersionServiceProvider(provider) {
        var component = provider.getComponent();
        return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerCoreComponents(firebase, variant) {
        firebase.INTERNAL.registerComponent(new Component('platform-logger', function (container) { return new PlatformLoggerService(container); }, "PRIVATE" /* PRIVATE */));
        // Register `app` package.
        firebase.registerVersion(name$c, version$1$1, variant);
        // Register platform SDK identifier (no version).
        firebase.registerVersion('fire-js', '');
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Firebase Lite detection test
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (isBrowser() && self.firebase !== undefined) {
        logger$2.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
        // eslint-disable-next-line
        var sdkVersion = self.firebase.SDK_VERSION;
        if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
            logger$2.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
        }
    }
    var initializeApp = firebase$1.initializeApp;
    // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
    // the no-explicit-any rule when ESlint releases it.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    firebase$1.initializeApp = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // Environment check before initializing app
        // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
        // in @firebase/logger
        if (isNode()) {
            logger$2.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      ");
        }
        return initializeApp.apply(undefined, args);
    };
    var firebase = firebase$1;
    registerCoreComponents(firebase);

    /* eslint-disable no-param-reassign */

    /**
     * Options for customizing ripples
     */
    const defaults = {
      color: 'currentColor',
      class: '',
      opacity: 0.1,
      centered: false,
      spreadingDuration: '.4s',
      spreadingDelay: '0s',
      spreadingTimingFunction: 'linear',
      clearingDuration: '1s',
      clearingDelay: '0s',
      clearingTimingFunction: 'ease-in-out',
    };

    /**
     * Creates a ripple element but does not destroy it (use RippleStop for that)
     *
     * @param {Event} e
     * @param {*} options
     * @returns Ripple element
     */
    function RippleStart(e, options = {}) {
      e.stopImmediatePropagation();
      const opts = { ...defaults, ...options };

      const isTouchEvent = e.touches ? !!e.touches[0] : false;
      // Parent element
      const target = isTouchEvent ? e.touches[0].currentTarget : e.currentTarget;

      // Create ripple
      const ripple = document.createElement('div');
      const rippleStyle = ripple.style;

      // Adding default stuff
      ripple.className = `material-ripple ${opts.class}`;
      rippleStyle.position = 'absolute';
      rippleStyle.color = 'inherit';
      rippleStyle.borderRadius = '50%';
      rippleStyle.pointerEvents = 'none';
      rippleStyle.width = '100px';
      rippleStyle.height = '100px';
      rippleStyle.marginTop = '-50px';
      rippleStyle.marginLeft = '-50px';
      target.appendChild(ripple);
      rippleStyle.opacity = opts.opacity;
      rippleStyle.transition = `transform ${opts.spreadingDuration} ${opts.spreadingTimingFunction} ${opts.spreadingDelay},opacity ${opts.clearingDuration} ${opts.clearingTimingFunction} ${opts.clearingDelay}`;
      rippleStyle.transform = 'scale(0) translate(0,0)';
      rippleStyle.background = opts.color;

      // Positioning ripple
      const targetRect = target.getBoundingClientRect();
      if (opts.centered) {
        rippleStyle.top = `${targetRect.height / 2}px`;
        rippleStyle.left = `${targetRect.width / 2}px`;
      } else {
        const distY = isTouchEvent ? e.touches[0].clientY : e.clientY;
        const distX = isTouchEvent ? e.touches[0].clientX : e.clientX;
        rippleStyle.top = `${distY - targetRect.top}px`;
        rippleStyle.left = `${distX - targetRect.left}px`;
      }

      // Enlarge ripple
      rippleStyle.transform = `scale(${
    Math.max(targetRect.width, targetRect.height) * 0.02
  }) translate(0,0)`;
      return ripple;
    }

    /**
     * Destroys the ripple, slowly fading it out.
     *
     * @param {Element} ripple
     */
    function RippleStop(ripple) {
      if (ripple) {
        ripple.addEventListener('transitionend', (e) => {
          if (e.propertyName === 'opacity') ripple.remove();
        });
        ripple.style.opacity = 0;
      }
    }

    /**
     * @param node {Element}
     */
    var Ripple = (node, _options = {}) => {
      let options = _options;
      let destroyed = false;
      let ripple;
      let keyboardActive = false;
      const handleStart = (e) => {
        ripple = RippleStart(e, options);
      };
      const handleStop = () => RippleStop(ripple);
      const handleKeyboardStart = (e) => {
        if (!keyboardActive && (e.keyCode === 13 || e.keyCode === 32)) {
          ripple = RippleStart(e, { ...options, centered: true });
          keyboardActive = true;
        }
      };
      const handleKeyboardStop = () => {
        keyboardActive = false;
        handleStop();
      };

      function setup() {
        node.classList.add('s-ripple-container');
        node.addEventListener('pointerdown', handleStart);
        node.addEventListener('pointerup', handleStop);
        node.addEventListener('pointerleave', handleStop);
        node.addEventListener('keydown', handleKeyboardStart);
        node.addEventListener('keyup', handleKeyboardStop);
        destroyed = false;
      }

      function destroy() {
        node.classList.remove('s-ripple-container');
        node.removeEventListener('pointerdown', handleStart);
        node.removeEventListener('pointerup', handleStop);
        node.removeEventListener('pointerleave', handleStop);
        node.removeEventListener('keydown', handleKeyboardStart);
        node.removeEventListener('keyup', handleKeyboardStop);
        destroyed = true;
      }

      if (options) setup();

      return {
        update(newOptions) {
          options = newOptions;
          if (options && destroyed) setup();
          else if (!(options || destroyed)) destroy();
        },
        destroy,
      };
    };

    /**
     * Click Outside
     * @param {Node} node
     */
    var ClickOutside = (node, _options = {}) => {
      const options = { include: [], ..._options };

      function detect({ target }) {
        if (!node.contains(target) || options.include.some((i) => target.isSameNode(i))) {
          node.dispatchEvent(new CustomEvent('clickOutside'));
        }
      }
      document.addEventListener('click', detect, { passive: true, capture: true });
      return {
        destroy() {
          document.removeEventListener('click', detect);
        },
      };
    };

    /* node_modules\svelte-materialify\dist\components\MaterialApp\MaterialApp.svelte generated by Svelte v3.40.0 */

    const file$D = "node_modules\\svelte-materialify\\dist\\components\\MaterialApp\\MaterialApp.svelte";

    function create_fragment$J(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-app theme--" + /*theme*/ ctx[0]);
    			add_location(div, file$D, 13088, 0, 248639);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*theme*/ 1 && div_class_value !== (div_class_value = "s-app theme--" + /*theme*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$J($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MaterialApp', slots, ['default']);
    	let { theme = 'light' } = $$props;
    	const writable_props = ['theme'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MaterialApp> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ theme });

    	$$self.$inject_state = $$props => {
    		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [theme, $$scope, slots];
    }

    class MaterialApp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$J, create_fragment$J, safe_not_equal, { theme: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MaterialApp",
    			options,
    			id: create_fragment$J.name
    		});
    	}

    	get theme() {
    		throw new Error("<MaterialApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set theme(value) {
    		throw new Error("<MaterialApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function format$1(input) {
      if (typeof input === 'number') return `${input}px`;
      return input;
    }

    /**
     * @param node {Element}
     * @param styles {Object}
     */
    var Style = (node, _styles) => {
      let styles = _styles;
      Object.entries(styles).forEach(([key, value]) => {
        if (value) node.style.setProperty(`--s-${key}`, format$1(value));
      });

      return {
        update(newStyles) {
          Object.entries(newStyles).forEach(([key, value]) => {
            if (value) {
              node.style.setProperty(`--s-${key}`, format$1(value));
              delete styles[key];
            }
          });

          Object.keys(styles).forEach((name) => node.style.removeProperty(`--s-${name}`));

          styles = newStyles;
        },
      };
    };

    /* node_modules\svelte-materialify\dist\components\Icon\Icon.svelte generated by Svelte v3.40.0 */
    const file$C = "node_modules\\svelte-materialify\\dist\\components\\Icon\\Icon.svelte";

    // (73:2) {#if path}
    function create_if_block$k(ctx) {
    	let svg;
    	let path_1;
    	let svg_viewBox_value;
    	let if_block = /*label*/ ctx[10] && create_if_block_1$8(ctx);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path_1 = svg_element("path");
    			if (if_block) if_block.c();
    			attr_dev(path_1, "d", /*path*/ ctx[9]);
    			add_location(path_1, file$C, 78, 6, 1726);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", /*width*/ ctx[0]);
    			attr_dev(svg, "height", /*height*/ ctx[1]);
    			attr_dev(svg, "viewBox", svg_viewBox_value = "0 0 " + /*viewWidth*/ ctx[4] + " " + /*viewHeight*/ ctx[5]);
    			add_location(svg, file$C, 73, 4, 1594);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path_1);
    			if (if_block) if_block.m(path_1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*label*/ ctx[10]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$8(ctx);
    					if_block.c();
    					if_block.m(path_1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*path*/ 512) {
    				attr_dev(path_1, "d", /*path*/ ctx[9]);
    			}

    			if (dirty & /*width*/ 1) {
    				attr_dev(svg, "width", /*width*/ ctx[0]);
    			}

    			if (dirty & /*height*/ 2) {
    				attr_dev(svg, "height", /*height*/ ctx[1]);
    			}

    			if (dirty & /*viewWidth, viewHeight*/ 48 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " + /*viewWidth*/ ctx[4] + " " + /*viewHeight*/ ctx[5])) {
    				attr_dev(svg, "viewBox", svg_viewBox_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(73:2) {#if path}",
    		ctx
    	});

    	return block;
    }

    // (80:8) {#if label}
    function create_if_block_1$8(ctx) {
    	let title;
    	let t;

    	const block = {
    		c: function create() {
    			title = svg_element("title");
    			t = text(/*label*/ ctx[10]);
    			add_location(title, file$C, 80, 10, 1774);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, title, anchor);
    			append_dev(title, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 1024) set_data_dev(t, /*label*/ ctx[10]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(title);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(80:8) {#if label}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$I(ctx) {
    	let i;
    	let t;
    	let i_class_value;
    	let Style_action;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*path*/ ctx[9] && create_if_block$k(ctx);
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	const block = {
    		c: function create() {
    			i = element("i");
    			if (if_block) if_block.c();
    			t = space();
    			if (default_slot) default_slot.c();
    			attr_dev(i, "aria-hidden", "true");
    			attr_dev(i, "class", i_class_value = "s-icon " + /*klass*/ ctx[2]);
    			attr_dev(i, "aria-label", /*label*/ ctx[10]);
    			attr_dev(i, "aria-disabled", /*disabled*/ ctx[8]);
    			attr_dev(i, "style", /*style*/ ctx[11]);
    			toggle_class(i, "spin", /*spin*/ ctx[7]);
    			toggle_class(i, "disabled", /*disabled*/ ctx[8]);
    			add_location(i, file$C, 63, 0, 1362);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    			if (if_block) if_block.m(i, null);
    			append_dev(i, t);

    			if (default_slot) {
    				default_slot.m(i, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(Style_action = Style.call(null, i, {
    					'icon-size': /*size*/ ctx[3],
    					'icon-rotate': `${/*rotate*/ ctx[6]}deg`
    				}));

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*path*/ ctx[9]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$k(ctx);
    					if_block.c();
    					if_block.m(i, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*klass*/ 4 && i_class_value !== (i_class_value = "s-icon " + /*klass*/ ctx[2])) {
    				attr_dev(i, "class", i_class_value);
    			}

    			if (!current || dirty & /*label*/ 1024) {
    				attr_dev(i, "aria-label", /*label*/ ctx[10]);
    			}

    			if (!current || dirty & /*disabled*/ 256) {
    				attr_dev(i, "aria-disabled", /*disabled*/ ctx[8]);
    			}

    			if (!current || dirty & /*style*/ 2048) {
    				attr_dev(i, "style", /*style*/ ctx[11]);
    			}

    			if (Style_action && is_function(Style_action.update) && dirty & /*size, rotate*/ 72) Style_action.update.call(null, {
    				'icon-size': /*size*/ ctx[3],
    				'icon-rotate': `${/*rotate*/ ctx[6]}deg`
    			});

    			if (dirty & /*klass, spin*/ 132) {
    				toggle_class(i, "spin", /*spin*/ ctx[7]);
    			}

    			if (dirty & /*klass, disabled*/ 260) {
    				toggle_class(i, "disabled", /*disabled*/ ctx[8]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$I($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Icon', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { size = '24px' } = $$props;
    	let { width = size } = $$props;
    	let { height = size } = $$props;
    	let { viewWidth = '24' } = $$props;
    	let { viewHeight = '24' } = $$props;
    	let { rotate = 0 } = $$props;
    	let { spin = false } = $$props;
    	let { disabled = false } = $$props;
    	let { path = null } = $$props;
    	let { label = null } = $$props;
    	let { style = null } = $$props;

    	const writable_props = [
    		'class',
    		'size',
    		'width',
    		'height',
    		'viewWidth',
    		'viewHeight',
    		'rotate',
    		'spin',
    		'disabled',
    		'path',
    		'label',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Icon> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(2, klass = $$props.class);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('viewWidth' in $$props) $$invalidate(4, viewWidth = $$props.viewWidth);
    		if ('viewHeight' in $$props) $$invalidate(5, viewHeight = $$props.viewHeight);
    		if ('rotate' in $$props) $$invalidate(6, rotate = $$props.rotate);
    		if ('spin' in $$props) $$invalidate(7, spin = $$props.spin);
    		if ('disabled' in $$props) $$invalidate(8, disabled = $$props.disabled);
    		if ('path' in $$props) $$invalidate(9, path = $$props.path);
    		if ('label' in $$props) $$invalidate(10, label = $$props.label);
    		if ('style' in $$props) $$invalidate(11, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Style,
    		klass,
    		size,
    		width,
    		height,
    		viewWidth,
    		viewHeight,
    		rotate,
    		spin,
    		disabled,
    		path,
    		label,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(2, klass = $$props.klass);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('viewWidth' in $$props) $$invalidate(4, viewWidth = $$props.viewWidth);
    		if ('viewHeight' in $$props) $$invalidate(5, viewHeight = $$props.viewHeight);
    		if ('rotate' in $$props) $$invalidate(6, rotate = $$props.rotate);
    		if ('spin' in $$props) $$invalidate(7, spin = $$props.spin);
    		if ('disabled' in $$props) $$invalidate(8, disabled = $$props.disabled);
    		if ('path' in $$props) $$invalidate(9, path = $$props.path);
    		if ('label' in $$props) $$invalidate(10, label = $$props.label);
    		if ('style' in $$props) $$invalidate(11, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*size*/ 8) {
    			{
    				$$invalidate(0, width = size);
    				$$invalidate(1, height = size);
    			}
    		}
    	};

    	return [
    		width,
    		height,
    		klass,
    		size,
    		viewWidth,
    		viewHeight,
    		rotate,
    		spin,
    		disabled,
    		path,
    		label,
    		style,
    		$$scope,
    		slots
    	];
    }

    class Icon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$I, create_fragment$I, safe_not_equal, {
    			class: 2,
    			size: 3,
    			width: 0,
    			height: 1,
    			viewWidth: 4,
    			viewHeight: 5,
    			rotate: 6,
    			spin: 7,
    			disabled: 8,
    			path: 9,
    			label: 10,
    			style: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Icon",
    			options,
    			id: create_fragment$I.name
    		});
    	}

    	get class() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewWidth() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewWidth(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewHeight() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewHeight(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get spin() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set spin(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get path() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const filter = (classes) => classes.filter((x) => !!x);
    const format = (classes) => classes.split(' ').filter((x) => !!x);

    /**
     * @param node {Element}
     * @param classes {Array<string>}
     */
    var Class = (node, _classes) => {
      let classes = _classes;
      node.classList.add(...format(filter(classes).join(' ')));
      return {
        update(_newClasses) {
          const newClasses = _newClasses;
          newClasses.forEach((klass, i) => {
            if (klass) node.classList.add(...format(klass));
            else if (classes[i]) node.classList.remove(...format(classes[i]));
          });
          classes = newClasses;
        },
      };
    };

    /* node_modules\svelte-materialify\dist\components\Button\Button.svelte generated by Svelte v3.40.0 */
    const file$B = "node_modules\\svelte-materialify\\dist\\components\\Button\\Button.svelte";

    function create_fragment$H(ctx) {
    	let button_1;
    	let span;
    	let button_1_class_value;
    	let Class_action;
    	let Ripple_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[19].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

    	let button_1_levels = [
    		{
    			class: button_1_class_value = "s-btn size-" + /*size*/ ctx[5] + " " + /*klass*/ ctx[1]
    		},
    		{ type: /*type*/ ctx[14] },
    		{ style: /*style*/ ctx[16] },
    		{ disabled: /*disabled*/ ctx[11] },
    		{ "aria-disabled": /*disabled*/ ctx[11] },
    		/*$$restProps*/ ctx[17]
    	];

    	let button_1_data = {};

    	for (let i = 0; i < button_1_levels.length; i += 1) {
    		button_1_data = assign(button_1_data, button_1_levels[i]);
    	}

    	const block_1 = {
    		c: function create() {
    			button_1 = element("button");
    			span = element("span");
    			if (default_slot) default_slot.c();
    			attr_dev(span, "class", "s-btn__content");
    			add_location(span, file$B, 272, 2, 5902);
    			set_attributes(button_1, button_1_data);
    			toggle_class(button_1, "s-btn--fab", /*fab*/ ctx[2]);
    			toggle_class(button_1, "icon", /*icon*/ ctx[3]);
    			toggle_class(button_1, "block", /*block*/ ctx[4]);
    			toggle_class(button_1, "tile", /*tile*/ ctx[6]);
    			toggle_class(button_1, "text", /*text*/ ctx[7] || /*icon*/ ctx[3]);
    			toggle_class(button_1, "depressed", /*depressed*/ ctx[8] || /*text*/ ctx[7] || /*disabled*/ ctx[11] || /*outlined*/ ctx[9] || /*icon*/ ctx[3]);
    			toggle_class(button_1, "outlined", /*outlined*/ ctx[9]);
    			toggle_class(button_1, "rounded", /*rounded*/ ctx[10]);
    			toggle_class(button_1, "disabled", /*disabled*/ ctx[11]);
    			add_location(button_1, file$B, 252, 0, 5452);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button_1, anchor);
    			append_dev(button_1, span);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			/*button_1_binding*/ ctx[21](button_1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(Class_action = Class.call(null, button_1, [/*active*/ ctx[12] && /*activeClass*/ ctx[13]])),
    					action_destroyer(Ripple_action = Ripple.call(null, button_1, /*ripple*/ ctx[15])),
    					listen_dev(button_1, "click", /*click_handler*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 262144)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[18], !current ? -1 : dirty, null, null);
    				}
    			}

    			set_attributes(button_1, button_1_data = get_spread_update(button_1_levels, [
    				(!current || dirty & /*size, klass*/ 34 && button_1_class_value !== (button_1_class_value = "s-btn size-" + /*size*/ ctx[5] + " " + /*klass*/ ctx[1])) && { class: button_1_class_value },
    				(!current || dirty & /*type*/ 16384) && { type: /*type*/ ctx[14] },
    				(!current || dirty & /*style*/ 65536) && { style: /*style*/ ctx[16] },
    				(!current || dirty & /*disabled*/ 2048) && { disabled: /*disabled*/ ctx[11] },
    				(!current || dirty & /*disabled*/ 2048) && { "aria-disabled": /*disabled*/ ctx[11] },
    				dirty & /*$$restProps*/ 131072 && /*$$restProps*/ ctx[17]
    			]));

    			if (Class_action && is_function(Class_action.update) && dirty & /*active, activeClass*/ 12288) Class_action.update.call(null, [/*active*/ ctx[12] && /*activeClass*/ ctx[13]]);
    			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*ripple*/ 32768) Ripple_action.update.call(null, /*ripple*/ ctx[15]);
    			toggle_class(button_1, "s-btn--fab", /*fab*/ ctx[2]);
    			toggle_class(button_1, "icon", /*icon*/ ctx[3]);
    			toggle_class(button_1, "block", /*block*/ ctx[4]);
    			toggle_class(button_1, "tile", /*tile*/ ctx[6]);
    			toggle_class(button_1, "text", /*text*/ ctx[7] || /*icon*/ ctx[3]);
    			toggle_class(button_1, "depressed", /*depressed*/ ctx[8] || /*text*/ ctx[7] || /*disabled*/ ctx[11] || /*outlined*/ ctx[9] || /*icon*/ ctx[3]);
    			toggle_class(button_1, "outlined", /*outlined*/ ctx[9]);
    			toggle_class(button_1, "rounded", /*rounded*/ ctx[10]);
    			toggle_class(button_1, "disabled", /*disabled*/ ctx[11]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button_1);
    			if (default_slot) default_slot.d(detaching);
    			/*button_1_binding*/ ctx[21](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: create_fragment$H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block_1;
    }

    function instance$H($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"class","fab","icon","block","size","tile","text","depressed","outlined","rounded","disabled","active","activeClass","type","ripple","style","button"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { fab = false } = $$props;
    	let { icon = false } = $$props;
    	let { block = false } = $$props;
    	let { size = 'default' } = $$props;
    	let { tile = false } = $$props;
    	let { text = false } = $$props;
    	let { depressed = false } = $$props;
    	let { outlined = false } = $$props;
    	let { rounded = false } = $$props;
    	let { disabled = null } = $$props;
    	let { active = false } = $$props;
    	let { activeClass = 'active' } = $$props;
    	let { type = 'button' } = $$props;
    	let { ripple = {} } = $$props;
    	let { style = null } = $$props;
    	let { button = null } = $$props;

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function button_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			button = $$value;
    			$$invalidate(0, button);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(17, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('class' in $$new_props) $$invalidate(1, klass = $$new_props.class);
    		if ('fab' in $$new_props) $$invalidate(2, fab = $$new_props.fab);
    		if ('icon' in $$new_props) $$invalidate(3, icon = $$new_props.icon);
    		if ('block' in $$new_props) $$invalidate(4, block = $$new_props.block);
    		if ('size' in $$new_props) $$invalidate(5, size = $$new_props.size);
    		if ('tile' in $$new_props) $$invalidate(6, tile = $$new_props.tile);
    		if ('text' in $$new_props) $$invalidate(7, text = $$new_props.text);
    		if ('depressed' in $$new_props) $$invalidate(8, depressed = $$new_props.depressed);
    		if ('outlined' in $$new_props) $$invalidate(9, outlined = $$new_props.outlined);
    		if ('rounded' in $$new_props) $$invalidate(10, rounded = $$new_props.rounded);
    		if ('disabled' in $$new_props) $$invalidate(11, disabled = $$new_props.disabled);
    		if ('active' in $$new_props) $$invalidate(12, active = $$new_props.active);
    		if ('activeClass' in $$new_props) $$invalidate(13, activeClass = $$new_props.activeClass);
    		if ('type' in $$new_props) $$invalidate(14, type = $$new_props.type);
    		if ('ripple' in $$new_props) $$invalidate(15, ripple = $$new_props.ripple);
    		if ('style' in $$new_props) $$invalidate(16, style = $$new_props.style);
    		if ('button' in $$new_props) $$invalidate(0, button = $$new_props.button);
    		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Ripple,
    		Class,
    		klass,
    		fab,
    		icon,
    		block,
    		size,
    		tile,
    		text,
    		depressed,
    		outlined,
    		rounded,
    		disabled,
    		active,
    		activeClass,
    		type,
    		ripple,
    		style,
    		button
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('klass' in $$props) $$invalidate(1, klass = $$new_props.klass);
    		if ('fab' in $$props) $$invalidate(2, fab = $$new_props.fab);
    		if ('icon' in $$props) $$invalidate(3, icon = $$new_props.icon);
    		if ('block' in $$props) $$invalidate(4, block = $$new_props.block);
    		if ('size' in $$props) $$invalidate(5, size = $$new_props.size);
    		if ('tile' in $$props) $$invalidate(6, tile = $$new_props.tile);
    		if ('text' in $$props) $$invalidate(7, text = $$new_props.text);
    		if ('depressed' in $$props) $$invalidate(8, depressed = $$new_props.depressed);
    		if ('outlined' in $$props) $$invalidate(9, outlined = $$new_props.outlined);
    		if ('rounded' in $$props) $$invalidate(10, rounded = $$new_props.rounded);
    		if ('disabled' in $$props) $$invalidate(11, disabled = $$new_props.disabled);
    		if ('active' in $$props) $$invalidate(12, active = $$new_props.active);
    		if ('activeClass' in $$props) $$invalidate(13, activeClass = $$new_props.activeClass);
    		if ('type' in $$props) $$invalidate(14, type = $$new_props.type);
    		if ('ripple' in $$props) $$invalidate(15, ripple = $$new_props.ripple);
    		if ('style' in $$props) $$invalidate(16, style = $$new_props.style);
    		if ('button' in $$props) $$invalidate(0, button = $$new_props.button);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		button,
    		klass,
    		fab,
    		icon,
    		block,
    		size,
    		tile,
    		text,
    		depressed,
    		outlined,
    		rounded,
    		disabled,
    		active,
    		activeClass,
    		type,
    		ripple,
    		style,
    		$$restProps,
    		$$scope,
    		slots,
    		click_handler,
    		button_1_binding
    	];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$H, create_fragment$H, safe_not_equal, {
    			class: 1,
    			fab: 2,
    			icon: 3,
    			block: 4,
    			size: 5,
    			tile: 6,
    			text: 7,
    			depressed: 8,
    			outlined: 9,
    			rounded: 10,
    			disabled: 11,
    			active: 12,
    			activeClass: 13,
    			type: 14,
    			ripple: 15,
    			style: 16,
    			button: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$H.name
    		});
    	}

    	get class() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fab() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fab(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get block() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set block(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tile() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tile(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get depressed() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set depressed(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rounded() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rounded(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get button() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set button(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\ItemGroup\ItemGroup.svelte generated by Svelte v3.40.0 */
    const file$A = "node_modules\\svelte-materialify\\dist\\components\\ItemGroup\\ItemGroup.svelte";

    function create_fragment$G(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-item-group " + /*klass*/ ctx[0]);
    			attr_dev(div, "role", /*role*/ ctx[1]);
    			attr_dev(div, "style", /*style*/ ctx[2]);
    			add_location(div, file$A, 58, 0, 1536);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-item-group " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*role*/ 2) {
    				attr_dev(div, "role", /*role*/ ctx[1]);
    			}

    			if (!current || dirty & /*style*/ 4) {
    				attr_dev(div, "style", /*style*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const ITEM_GROUP = {};

    function instance$G($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ItemGroup', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { activeClass = '' } = $$props;
    	let { value = [] } = $$props;
    	let { multiple = false } = $$props;
    	let { mandatory = false } = $$props;
    	let { max = Infinity } = $$props;
    	let { role = null } = $$props;
    	let { style = null } = $$props;
    	const dispatch = createEventDispatcher();
    	const valueStore = writable(value);
    	let startIndex = -1;

    	setContext(ITEM_GROUP, {
    		select: val => {
    			if (multiple) {
    				if (value.includes(val)) {
    					if (!mandatory || value.length > 1) {
    						value.splice(value.indexOf(val), 1);
    						$$invalidate(3, value);
    					}
    				} else if (value.length < max) $$invalidate(3, value = [...value, val]);
    			} else if (value === val) {
    				if (!mandatory) $$invalidate(3, value = null);
    			} else $$invalidate(3, value = val);
    		},
    		register: setValue => {
    			const u = valueStore.subscribe(val => {
    				setValue(multiple ? val : [val]);
    			});

    			onDestroy(u);
    		},
    		index: () => {
    			startIndex += 1;
    			return startIndex;
    		},
    		activeClass
    	});

    	const writable_props = [
    		'class',
    		'activeClass',
    		'value',
    		'multiple',
    		'mandatory',
    		'max',
    		'role',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ItemGroup> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('activeClass' in $$props) $$invalidate(4, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(3, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(5, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(6, mandatory = $$props.mandatory);
    		if ('max' in $$props) $$invalidate(7, max = $$props.max);
    		if ('role' in $$props) $$invalidate(1, role = $$props.role);
    		if ('style' in $$props) $$invalidate(2, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		ITEM_GROUP,
    		setContext,
    		createEventDispatcher,
    		onDestroy,
    		writable,
    		klass,
    		activeClass,
    		value,
    		multiple,
    		mandatory,
    		max,
    		role,
    		style,
    		dispatch,
    		valueStore,
    		startIndex
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('activeClass' in $$props) $$invalidate(4, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(3, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(5, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(6, mandatory = $$props.mandatory);
    		if ('max' in $$props) $$invalidate(7, max = $$props.max);
    		if ('role' in $$props) $$invalidate(1, role = $$props.role);
    		if ('style' in $$props) $$invalidate(2, style = $$props.style);
    		if ('startIndex' in $$props) startIndex = $$props.startIndex;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 8) {
    			valueStore.set(value);
    		}

    		if ($$self.$$.dirty & /*value*/ 8) {
    			dispatch('change', value);
    		}
    	};

    	return [
    		klass,
    		role,
    		style,
    		value,
    		activeClass,
    		multiple,
    		mandatory,
    		max,
    		$$scope,
    		slots
    	];
    }

    class ItemGroup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$G, create_fragment$G, safe_not_equal, {
    			class: 0,
    			activeClass: 4,
    			value: 3,
    			multiple: 5,
    			mandatory: 6,
    			max: 7,
    			role: 1,
    			style: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ItemGroup",
    			options,
    			id: create_fragment$G.name
    		});
    	}

    	get class() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mandatory() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mandatory(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get role() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set role(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* eslint-disable no-param-reassign */

    /**
     * @param {string} klass
     */
    function formatClass(klass) {
      return klass.split(' ').map((i) => {
        if (/^(lighten|darken|accent)-/.test(i)) {
          return `text-${i}`;
        }
        return `${i}-text`;
      });
    }

    function setTextColor(node, text) {
      if (/^(#|rgb|hsl|currentColor)/.test(text)) {
        // This is a CSS hex.
        node.style.color = text;
        return false;
      }
      if (text.startsWith('--')) {
        // This is a CSS variable.
        node.style.color = `var(${text})`;
        return false;
      }
      const klass = formatClass(text);
      node.classList.add(...klass);
      return klass;
    }

    /**
     * @param node {Element}
     * @param text {string|boolean}
     */
    var TextColor = (node, text) => {
      let klass;
      if (typeof text === 'string') {
        klass = setTextColor(node, text);
      }

      return {
        update(newText) {
          if (klass) {
            node.classList.remove(...klass);
          } else {
            node.style.color = null;
          }

          if (typeof newText === 'string') {
            klass = setTextColor(node, newText);
          }
        },
      };
    };

    /* node_modules\svelte-materialify\dist\components\Input\Input.svelte generated by Svelte v3.40.0 */
    const file$z = "node_modules\\svelte-materialify\\dist\\components\\Input\\Input.svelte";
    const get_append_outer_slot_changes$3 = dirty => ({});
    const get_append_outer_slot_context$3 = ctx => ({});
    const get_messages_slot_changes = dirty => ({});
    const get_messages_slot_context = ctx => ({});
    const get_prepend_outer_slot_changes$3 = dirty => ({});
    const get_prepend_outer_slot_context$3 = ctx => ({});

    function create_fragment$F(ctx) {
    	let div3;
    	let t0;
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let t2;
    	let div3_class_value;
    	let TextColor_action;
    	let current;
    	let mounted;
    	let dispose;
    	const prepend_outer_slot_template = /*#slots*/ ctx[9]["prepend-outer"];
    	const prepend_outer_slot = create_slot(prepend_outer_slot_template, ctx, /*$$scope*/ ctx[8], get_prepend_outer_slot_context$3);
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
    	const messages_slot_template = /*#slots*/ ctx[9].messages;
    	const messages_slot = create_slot(messages_slot_template, ctx, /*$$scope*/ ctx[8], get_messages_slot_context);
    	const append_outer_slot_template = /*#slots*/ ctx[9]["append-outer"];
    	const append_outer_slot = create_slot(append_outer_slot_template, ctx, /*$$scope*/ ctx[8], get_append_outer_slot_context$3);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			if (prepend_outer_slot) prepend_outer_slot.c();
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			div1 = element("div");
    			if (messages_slot) messages_slot.c();
    			t2 = space();
    			if (append_outer_slot) append_outer_slot.c();
    			attr_dev(div0, "class", "s-input__slot");
    			add_location(div0, file$z, 386, 4, 9721);
    			attr_dev(div1, "class", "s-input__details");
    			add_location(div1, file$z, 389, 4, 9779);
    			attr_dev(div2, "class", "s-input__control");
    			add_location(div2, file$z, 385, 2, 9686);
    			attr_dev(div3, "class", div3_class_value = "s-input " + /*klass*/ ctx[0]);
    			attr_dev(div3, "style", /*style*/ ctx[7]);
    			toggle_class(div3, "dense", /*dense*/ ctx[2]);
    			toggle_class(div3, "error", /*error*/ ctx[5]);
    			toggle_class(div3, "success", /*success*/ ctx[6]);
    			toggle_class(div3, "readonly", /*readonly*/ ctx[3]);
    			toggle_class(div3, "disabled", /*disabled*/ ctx[4]);
    			add_location(div3, file$z, 375, 0, 9468);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);

    			if (prepend_outer_slot) {
    				prepend_outer_slot.m(div3, null);
    			}

    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			append_dev(div2, t1);
    			append_dev(div2, div1);

    			if (messages_slot) {
    				messages_slot.m(div1, null);
    			}

    			append_dev(div3, t2);

    			if (append_outer_slot) {
    				append_outer_slot.m(div3, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(TextColor_action = TextColor.call(null, div3, /*success*/ ctx[6]
    				? 'success'
    				: /*error*/ ctx[5] ? 'error' : /*color*/ ctx[1]));

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (prepend_outer_slot) {
    				if (prepend_outer_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot(prepend_outer_slot, prepend_outer_slot_template, ctx, /*$$scope*/ ctx[8], !current ? -1 : dirty, get_prepend_outer_slot_changes$3, get_prepend_outer_slot_context$3);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (messages_slot) {
    				if (messages_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot(messages_slot, messages_slot_template, ctx, /*$$scope*/ ctx[8], !current ? -1 : dirty, get_messages_slot_changes, get_messages_slot_context);
    				}
    			}

    			if (append_outer_slot) {
    				if (append_outer_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot(append_outer_slot, append_outer_slot_template, ctx, /*$$scope*/ ctx[8], !current ? -1 : dirty, get_append_outer_slot_changes$3, get_append_outer_slot_context$3);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div3_class_value !== (div3_class_value = "s-input " + /*klass*/ ctx[0])) {
    				attr_dev(div3, "class", div3_class_value);
    			}

    			if (!current || dirty & /*style*/ 128) {
    				attr_dev(div3, "style", /*style*/ ctx[7]);
    			}

    			if (TextColor_action && is_function(TextColor_action.update) && dirty & /*success, error, color*/ 98) TextColor_action.update.call(null, /*success*/ ctx[6]
    			? 'success'
    			: /*error*/ ctx[5] ? 'error' : /*color*/ ctx[1]);

    			if (dirty & /*klass, dense*/ 5) {
    				toggle_class(div3, "dense", /*dense*/ ctx[2]);
    			}

    			if (dirty & /*klass, error*/ 33) {
    				toggle_class(div3, "error", /*error*/ ctx[5]);
    			}

    			if (dirty & /*klass, success*/ 65) {
    				toggle_class(div3, "success", /*success*/ ctx[6]);
    			}

    			if (dirty & /*klass, readonly*/ 9) {
    				toggle_class(div3, "readonly", /*readonly*/ ctx[3]);
    			}

    			if (dirty & /*klass, disabled*/ 17) {
    				toggle_class(div3, "disabled", /*disabled*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_outer_slot, local);
    			transition_in(default_slot, local);
    			transition_in(messages_slot, local);
    			transition_in(append_outer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_outer_slot, local);
    			transition_out(default_slot, local);
    			transition_out(messages_slot, local);
    			transition_out(append_outer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (prepend_outer_slot) prepend_outer_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			if (messages_slot) messages_slot.d(detaching);
    			if (append_outer_slot) append_outer_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$F($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Input', slots, ['prepend-outer','default','messages','append-outer']);
    	let { class: klass = '' } = $$props;
    	let { color = null } = $$props;
    	let { dense = false } = $$props;
    	let { readonly = false } = $$props;
    	let { disabled = false } = $$props;
    	let { error = false } = $$props;
    	let { success = false } = $$props;
    	let { style = null } = $$props;
    	const writable_props = ['class', 'color', 'dense', 'readonly', 'disabled', 'error', 'success', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Input> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('dense' in $$props) $$invalidate(2, dense = $$props.dense);
    		if ('readonly' in $$props) $$invalidate(3, readonly = $$props.readonly);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('error' in $$props) $$invalidate(5, error = $$props.error);
    		if ('success' in $$props) $$invalidate(6, success = $$props.success);
    		if ('style' in $$props) $$invalidate(7, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		TextColor,
    		klass,
    		color,
    		dense,
    		readonly,
    		disabled,
    		error,
    		success,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('dense' in $$props) $$invalidate(2, dense = $$props.dense);
    		if ('readonly' in $$props) $$invalidate(3, readonly = $$props.readonly);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('error' in $$props) $$invalidate(5, error = $$props.error);
    		if ('success' in $$props) $$invalidate(6, success = $$props.success);
    		if ('style' in $$props) $$invalidate(7, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, color, dense, readonly, disabled, error, success, style, $$scope, slots];
    }

    class Input extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$F, create_fragment$F, safe_not_equal, {
    			class: 0,
    			color: 1,
    			dense: 2,
    			readonly: 3,
    			disabled: 4,
    			error: 5,
    			success: 6,
    			style: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Input",
    			options,
    			id: create_fragment$F.name
    		});
    	}

    	get class() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get error() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set error(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get success() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set success(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* eslint-disable */
    // Shamefully ripped from https://github.com/lukeed/uid
    let IDX = 36;
    let HEX = '';
    while (IDX--) HEX += IDX.toString(36);

    var uid = (len) => {
      let str = '';
      let num = len || 11;
      while (num--) str += HEX[(Math.random() * 36) | 0];
      return str;
    };

    var closeIcon = 'M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z';

    /* node_modules\svelte-materialify\dist\components\TextField\TextField.svelte generated by Svelte v3.40.0 */
    const file$y = "node_modules\\svelte-materialify\\dist\\components\\TextField\\TextField.svelte";
    const get_append_slot_changes$2 = dirty => ({});
    const get_append_slot_context$2 = ctx => ({});
    const get_clear_icon_slot_changes$1 = dirty => ({});
    const get_clear_icon_slot_context$1 = ctx => ({});
    const get_content_slot_changes = dirty => ({});
    const get_content_slot_context = ctx => ({});
    const get_prepend_slot_changes$2 = dirty => ({});
    const get_prepend_slot_context$2 = ctx => ({});
    const get_prepend_outer_slot_changes$2 = dirty => ({});
    const get_prepend_outer_slot_context$2 = ctx => ({ slot: "prepend-outer" });

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[45] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[45] = list[i];
    	return child_ctx;
    }

    const get_append_outer_slot_changes$2 = dirty => ({});
    const get_append_outer_slot_context$2 = ctx => ({ slot: "append-outer" });

    // (113:4) {#if clearable && value !== ''}
    function create_if_block_1$7(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const clear_icon_slot_template = /*#slots*/ ctx[34]["clear-icon"];
    	const clear_icon_slot = create_slot(clear_icon_slot_template, ctx, /*$$scope*/ ctx[44], get_clear_icon_slot_context$1);
    	const clear_icon_slot_or_fallback = clear_icon_slot || fallback_block$6(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (clear_icon_slot_or_fallback) clear_icon_slot_or_fallback.c();
    			set_style(div, "cursor", "pointer");
    			add_location(div, file$y, 113, 6, 2751);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (clear_icon_slot_or_fallback) {
    				clear_icon_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*clear*/ ctx[26], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (clear_icon_slot) {
    				if (clear_icon_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot(clear_icon_slot, clear_icon_slot_template, ctx, /*$$scope*/ ctx[44], !current ? [-1, -1] : dirty, get_clear_icon_slot_changes$1, get_clear_icon_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(clear_icon_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(clear_icon_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (clear_icon_slot_or_fallback) clear_icon_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(113:4) {#if clearable && value !== ''}",
    		ctx
    	});

    	return block;
    }

    // (116:32)             
    function fallback_block$6(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { path: closeIcon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$6.name,
    		type: "fallback",
    		source: "(116:32)             ",
    		ctx
    	});

    	return block;
    }

    // (65:0) <Input    class="s-text-field {klass}"    {color}    {dense}    {readonly}    {disabled}    {error}    {success}    {style}>
    function create_default_slot$d(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let label;
    	let t1;
    	let t2;
    	let input;
    	let t3;
    	let t4;
    	let current;
    	let mounted;
    	let dispose;
    	const prepend_slot_template = /*#slots*/ ctx[34].prepend;
    	const prepend_slot = create_slot(prepend_slot_template, ctx, /*$$scope*/ ctx[44], get_prepend_slot_context$2);
    	const default_slot_template = /*#slots*/ ctx[34].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);
    	const content_slot_template = /*#slots*/ ctx[34].content;
    	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[44], get_content_slot_context);

    	let input_levels = [
    		{ type: "text" },
    		{ placeholder: /*placeholder*/ ctx[14] },
    		{ id: /*id*/ ctx[20] },
    		{ readOnly: /*readonly*/ ctx[12] },
    		{ disabled: /*disabled*/ ctx[13] },
    		/*$$restProps*/ ctx[28]
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	let if_block = /*clearable*/ ctx[11] && /*value*/ ctx[0] !== '' && create_if_block_1$7(ctx);
    	const append_slot_template = /*#slots*/ ctx[34].append;
    	const append_slot = create_slot(append_slot_template, ctx, /*$$scope*/ ctx[44], get_append_slot_context$2);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (prepend_slot) prepend_slot.c();
    			t0 = space();
    			div0 = element("div");
    			label = element("label");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (content_slot) content_slot.c();
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			if (if_block) if_block.c();
    			t4 = space();
    			if (append_slot) append_slot.c();
    			attr_dev(label, "for", /*id*/ ctx[20]);
    			toggle_class(label, "active", /*labelActive*/ ctx[23]);
    			add_location(label, file$y, 86, 6, 2101);
    			set_attributes(input, input_data);
    			add_location(input, file$y, 91, 6, 2292);
    			attr_dev(div0, "class", "s-text-field__input");
    			add_location(div0, file$y, 85, 4, 2060);
    			attr_dev(div1, "class", "s-text-field__wrapper");
    			toggle_class(div1, "filled", /*filled*/ ctx[5]);
    			toggle_class(div1, "solo", /*solo*/ ctx[6]);
    			toggle_class(div1, "outlined", /*outlined*/ ctx[7]);
    			toggle_class(div1, "flat", /*flat*/ ctx[8]);
    			toggle_class(div1, "rounded", /*rounded*/ ctx[10]);
    			add_location(div1, file$y, 75, 2, 1845);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);

    			if (prepend_slot) {
    				prepend_slot.m(div1, null);
    			}

    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, label);

    			if (default_slot) {
    				default_slot.m(label, null);
    			}

    			append_dev(div0, t1);

    			if (content_slot) {
    				content_slot.m(div0, null);
    			}

    			append_dev(div0, t2);
    			append_dev(div0, input);
    			/*input_binding*/ ctx[42](input);
    			set_input_value(input, /*value*/ ctx[0]);
    			append_dev(div1, t3);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t4);

    			if (append_slot) {
    				append_slot.m(div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[43]),
    					listen_dev(input, "focus", /*onFocus*/ ctx[24], false, false, false),
    					listen_dev(input, "blur", /*onBlur*/ ctx[25], false, false, false),
    					listen_dev(input, "input", /*onInput*/ ctx[27], false, false, false),
    					listen_dev(input, "focus", /*focus_handler*/ ctx[35], false, false, false),
    					listen_dev(input, "blur", /*blur_handler*/ ctx[36], false, false, false),
    					listen_dev(input, "input", /*input_handler*/ ctx[37], false, false, false),
    					listen_dev(input, "change", /*change_handler*/ ctx[38], false, false, false),
    					listen_dev(input, "keypress", /*keypress_handler*/ ctx[39], false, false, false),
    					listen_dev(input, "keydown", /*keydown_handler*/ ctx[40], false, false, false),
    					listen_dev(input, "keyup", /*keyup_handler*/ ctx[41], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (prepend_slot) {
    				if (prepend_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot(prepend_slot, prepend_slot_template, ctx, /*$$scope*/ ctx[44], !current ? [-1, -1] : dirty, get_prepend_slot_changes$2, get_prepend_slot_context$2);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[44], !current ? [-1, -1] : dirty, null, null);
    				}
    			}

    			if (!current || dirty[0] & /*id*/ 1048576) {
    				attr_dev(label, "for", /*id*/ ctx[20]);
    			}

    			if (dirty[0] & /*labelActive*/ 8388608) {
    				toggle_class(label, "active", /*labelActive*/ ctx[23]);
    			}

    			if (content_slot) {
    				if (content_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[44], !current ? [-1, -1] : dirty, get_content_slot_changes, get_content_slot_context);
    				}
    			}

    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				{ type: "text" },
    				(!current || dirty[0] & /*placeholder*/ 16384) && { placeholder: /*placeholder*/ ctx[14] },
    				(!current || dirty[0] & /*id*/ 1048576) && { id: /*id*/ ctx[20] },
    				(!current || dirty[0] & /*readonly*/ 4096) && { readOnly: /*readonly*/ ctx[12] },
    				(!current || dirty[0] & /*disabled*/ 8192) && { disabled: /*disabled*/ ctx[13] },
    				dirty[0] & /*$$restProps*/ 268435456 && /*$$restProps*/ ctx[28]
    			]));

    			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
    				set_input_value(input, /*value*/ ctx[0]);
    			}

    			if (/*clearable*/ ctx[11] && /*value*/ ctx[0] !== '') {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*clearable, value*/ 2049) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t4);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (append_slot) {
    				if (append_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot(append_slot, append_slot_template, ctx, /*$$scope*/ ctx[44], !current ? [-1, -1] : dirty, get_append_slot_changes$2, get_append_slot_context$2);
    				}
    			}

    			if (dirty[0] & /*filled*/ 32) {
    				toggle_class(div1, "filled", /*filled*/ ctx[5]);
    			}

    			if (dirty[0] & /*solo*/ 64) {
    				toggle_class(div1, "solo", /*solo*/ ctx[6]);
    			}

    			if (dirty[0] & /*outlined*/ 128) {
    				toggle_class(div1, "outlined", /*outlined*/ ctx[7]);
    			}

    			if (dirty[0] & /*flat*/ 256) {
    				toggle_class(div1, "flat", /*flat*/ ctx[8]);
    			}

    			if (dirty[0] & /*rounded*/ 1024) {
    				toggle_class(div1, "rounded", /*rounded*/ ctx[10]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_slot, local);
    			transition_in(default_slot, local);
    			transition_in(content_slot, local);
    			transition_in(if_block);
    			transition_in(append_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_slot, local);
    			transition_out(default_slot, local);
    			transition_out(content_slot, local);
    			transition_out(if_block);
    			transition_out(append_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (prepend_slot) prepend_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			if (content_slot) content_slot.d(detaching);
    			/*input_binding*/ ctx[42](null);
    			if (if_block) if_block.d();
    			if (append_slot) append_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$d.name,
    		type: "slot",
    		source: "(65:0) <Input    class=\\\"s-text-field {klass}\\\"    {color}    {dense}    {readonly}    {disabled}    {error}    {success}    {style}>",
    		ctx
    	});

    	return block;
    }

    // (75:2) 
    function create_prepend_outer_slot$2(ctx) {
    	let current;
    	const prepend_outer_slot_template = /*#slots*/ ctx[34]["prepend-outer"];
    	const prepend_outer_slot = create_slot(prepend_outer_slot_template, ctx, /*$$scope*/ ctx[44], get_prepend_outer_slot_context$2);

    	const block = {
    		c: function create() {
    			if (prepend_outer_slot) prepend_outer_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (prepend_outer_slot) {
    				prepend_outer_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (prepend_outer_slot) {
    				if (prepend_outer_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot(prepend_outer_slot, prepend_outer_slot_template, ctx, /*$$scope*/ ctx[44], !current ? [-1, -1] : dirty, get_prepend_outer_slot_changes$2, get_prepend_outer_slot_context$2);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_outer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_outer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (prepend_outer_slot) prepend_outer_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_prepend_outer_slot$2.name,
    		type: "slot",
    		source: "(75:2) ",
    		ctx
    	});

    	return block;
    }

    // (129:6) {#each messages as message}
    function create_each_block_1$3(ctx) {
    	let span;
    	let t_value = /*message*/ ctx[45] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			add_location(span, file$y, 129, 8, 3169);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*messages*/ 131072 && t_value !== (t_value = /*message*/ ctx[45] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(129:6) {#each messages as message}",
    		ctx
    	});

    	return block;
    }

    // (132:6) {#each errorMessages.slice(0, errorCount) as message}
    function create_each_block$b(ctx) {
    	let span;
    	let t_value = /*message*/ ctx[45] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			add_location(span, file$y, 132, 8, 3277);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*errorMessages, errorCount*/ 4456448 && t_value !== (t_value = /*message*/ ctx[45] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(132:6) {#each errorMessages.slice(0, errorCount) as message}",
    		ctx
    	});

    	return block;
    }

    // (136:4) {#if counter}
    function create_if_block$j(ctx) {
    	let span;
    	let t0_value = /*value*/ ctx[0].length + "";
    	let t0;
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = text(" / ");
    			t2 = text(/*counter*/ ctx[16]);
    			add_location(span, file$y, 136, 6, 3353);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			append_dev(span, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*value*/ 1 && t0_value !== (t0_value = /*value*/ ctx[0].length + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*counter*/ 65536) set_data_dev(t2, /*counter*/ ctx[16]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(136:4) {#if counter}",
    		ctx
    	});

    	return block;
    }

    // (126:2) 
    function create_messages_slot$1(ctx) {
    	let div1;
    	let div0;
    	let span;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let each_value_1 = /*messages*/ ctx[17];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	let each_value = /*errorMessages*/ ctx[22].slice(0, /*errorCount*/ ctx[18]);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	let if_block = /*counter*/ ctx[16] && create_if_block$j(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span = element("span");
    			t0 = text(/*hint*/ ctx[15]);
    			t1 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t2 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			if (if_block) if_block.c();
    			add_location(span, file$y, 127, 6, 3105);
    			add_location(div0, file$y, 126, 4, 3092);
    			attr_dev(div1, "slot", "messages");
    			add_location(div1, file$y, 125, 2, 3065);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span);
    			append_dev(span, t0);
    			append_dev(div0, t1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div0, null);
    			}

    			append_dev(div0, t2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t3);
    			if (if_block) if_block.m(div1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*hint*/ 32768) set_data_dev(t0, /*hint*/ ctx[15]);

    			if (dirty[0] & /*messages*/ 131072) {
    				each_value_1 = /*messages*/ ctx[17];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$3(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div0, t2);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*errorMessages, errorCount*/ 4456448) {
    				each_value = /*errorMessages*/ ctx[22].slice(0, /*errorCount*/ ctx[18]);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*counter*/ ctx[16]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$j(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_messages_slot$1.name,
    		type: "slot",
    		source: "(126:2) ",
    		ctx
    	});

    	return block;
    }

    // (142:2) 
    function create_append_outer_slot$2(ctx) {
    	let current;
    	const append_outer_slot_template = /*#slots*/ ctx[34]["append-outer"];
    	const append_outer_slot = create_slot(append_outer_slot_template, ctx, /*$$scope*/ ctx[44], get_append_outer_slot_context$2);

    	const block = {
    		c: function create() {
    			if (append_outer_slot) append_outer_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (append_outer_slot) {
    				append_outer_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (append_outer_slot) {
    				if (append_outer_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot(append_outer_slot, append_outer_slot_template, ctx, /*$$scope*/ ctx[44], !current ? [-1, -1] : dirty, get_append_outer_slot_changes$2, get_append_outer_slot_context$2);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(append_outer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(append_outer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (append_outer_slot) append_outer_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_append_outer_slot$2.name,
    		type: "slot",
    		source: "(142:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$E(ctx) {
    	let input;
    	let current;

    	input = new Input({
    			props: {
    				class: "s-text-field " + /*klass*/ ctx[3],
    				color: /*color*/ ctx[4],
    				dense: /*dense*/ ctx[9],
    				readonly: /*readonly*/ ctx[12],
    				disabled: /*disabled*/ ctx[13],
    				error: /*error*/ ctx[1],
    				success: /*success*/ ctx[19],
    				style: /*style*/ ctx[21],
    				$$slots: {
    					"append-outer": [create_append_outer_slot$2],
    					messages: [create_messages_slot$1],
    					"prepend-outer": [create_prepend_outer_slot$2],
    					default: [create_default_slot$d]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(input.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(input, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const input_changes = {};
    			if (dirty[0] & /*klass*/ 8) input_changes.class = "s-text-field " + /*klass*/ ctx[3];
    			if (dirty[0] & /*color*/ 16) input_changes.color = /*color*/ ctx[4];
    			if (dirty[0] & /*dense*/ 512) input_changes.dense = /*dense*/ ctx[9];
    			if (dirty[0] & /*readonly*/ 4096) input_changes.readonly = /*readonly*/ ctx[12];
    			if (dirty[0] & /*disabled*/ 8192) input_changes.disabled = /*disabled*/ ctx[13];
    			if (dirty[0] & /*error*/ 2) input_changes.error = /*error*/ ctx[1];
    			if (dirty[0] & /*success*/ 524288) input_changes.success = /*success*/ ctx[19];
    			if (dirty[0] & /*style*/ 2097152) input_changes.style = /*style*/ ctx[21];

    			if (dirty[0] & /*counter, value, errorMessages, errorCount, messages, hint, filled, solo, outlined, flat, rounded, clearable, placeholder, id, readonly, disabled, $$restProps, inputElement, labelActive*/ 282590693 | dirty[1] & /*$$scope*/ 8192) {
    				input_changes.$$scope = { dirty, ctx };
    			}

    			input.$set(input_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(input.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(input.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(input, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let labelActive;

    	const omit_props_names = [
    		"class","value","color","filled","solo","outlined","flat","dense","rounded","clearable","readonly","disabled","placeholder","hint","counter","messages","rules","errorCount","validateOnBlur","error","success","id","style","inputElement","validation","validate"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;

    	validate_slots('TextField', slots, [
    		'append-outer','prepend-outer','prepend','default','content','clear-icon','append'
    	]);

    	let { class: klass = "" } = $$props;
    	let { value = "" } = $$props;
    	let { color = "primary" } = $$props;
    	let { filled = false } = $$props;
    	let { solo = false } = $$props;
    	let { outlined = false } = $$props;
    	let { flat = false } = $$props;
    	let { dense = false } = $$props;
    	let { rounded = false } = $$props;
    	let { clearable = false } = $$props;
    	let { readonly = false } = $$props;
    	let { disabled = false } = $$props;
    	let { placeholder = null } = $$props;
    	let { hint = "" } = $$props;
    	let { counter = false } = $$props;
    	let { messages = [] } = $$props;
    	let { rules = [] } = $$props;
    	let { errorCount = 1 } = $$props;
    	let { validateOnBlur = false } = $$props;
    	let { error = false } = $$props;
    	let { success = false } = $$props;
    	let { id = `s-input-${uid(5)}` } = $$props;
    	let { style = null } = $$props;
    	let { inputElement = null } = $$props;
    	let { validation = false } = $$props;
    	let focused = false;
    	let errorMessages = [];

    	function validate() {
    		$$invalidate(22, errorMessages = rules.map(r => r(value)).filter(r => typeof r === "string"));

    		if (errorMessages.length) ($$invalidate(1, error = true), $$invalidate(29, validation = false)); else {
    			($$invalidate(1, error = false), $$invalidate(29, validation = true));
    		}

    		return error;
    	}

    	function onFocus() {
    		$$invalidate(33, focused = true);
    	}

    	function onBlur() {
    		$$invalidate(33, focused = false);
    		if (validateOnBlur) validate();
    	}

    	function clear() {
    		$$invalidate(0, value = "");
    	}

    	function onInput() {
    		if (!validateOnBlur) validate();
    	}

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function blur_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function change_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keypress_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keydown_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keyup_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			inputElement = $$value;
    			$$invalidate(2, inputElement);
    		});
    	}

    	function input_input_handler() {
    		value = this.value;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(28, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('class' in $$new_props) $$invalidate(3, klass = $$new_props.class);
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('color' in $$new_props) $$invalidate(4, color = $$new_props.color);
    		if ('filled' in $$new_props) $$invalidate(5, filled = $$new_props.filled);
    		if ('solo' in $$new_props) $$invalidate(6, solo = $$new_props.solo);
    		if ('outlined' in $$new_props) $$invalidate(7, outlined = $$new_props.outlined);
    		if ('flat' in $$new_props) $$invalidate(8, flat = $$new_props.flat);
    		if ('dense' in $$new_props) $$invalidate(9, dense = $$new_props.dense);
    		if ('rounded' in $$new_props) $$invalidate(10, rounded = $$new_props.rounded);
    		if ('clearable' in $$new_props) $$invalidate(11, clearable = $$new_props.clearable);
    		if ('readonly' in $$new_props) $$invalidate(12, readonly = $$new_props.readonly);
    		if ('disabled' in $$new_props) $$invalidate(13, disabled = $$new_props.disabled);
    		if ('placeholder' in $$new_props) $$invalidate(14, placeholder = $$new_props.placeholder);
    		if ('hint' in $$new_props) $$invalidate(15, hint = $$new_props.hint);
    		if ('counter' in $$new_props) $$invalidate(16, counter = $$new_props.counter);
    		if ('messages' in $$new_props) $$invalidate(17, messages = $$new_props.messages);
    		if ('rules' in $$new_props) $$invalidate(30, rules = $$new_props.rules);
    		if ('errorCount' in $$new_props) $$invalidate(18, errorCount = $$new_props.errorCount);
    		if ('validateOnBlur' in $$new_props) $$invalidate(31, validateOnBlur = $$new_props.validateOnBlur);
    		if ('error' in $$new_props) $$invalidate(1, error = $$new_props.error);
    		if ('success' in $$new_props) $$invalidate(19, success = $$new_props.success);
    		if ('id' in $$new_props) $$invalidate(20, id = $$new_props.id);
    		if ('style' in $$new_props) $$invalidate(21, style = $$new_props.style);
    		if ('inputElement' in $$new_props) $$invalidate(2, inputElement = $$new_props.inputElement);
    		if ('validation' in $$new_props) $$invalidate(29, validation = $$new_props.validation);
    		if ('$$scope' in $$new_props) $$invalidate(44, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Input,
    		Icon,
    		uid,
    		clearIcon: closeIcon,
    		klass,
    		value,
    		color,
    		filled,
    		solo,
    		outlined,
    		flat,
    		dense,
    		rounded,
    		clearable,
    		readonly,
    		disabled,
    		placeholder,
    		hint,
    		counter,
    		messages,
    		rules,
    		errorCount,
    		validateOnBlur,
    		error,
    		success,
    		id,
    		style,
    		inputElement,
    		validation,
    		focused,
    		errorMessages,
    		validate,
    		onFocus,
    		onBlur,
    		clear,
    		onInput,
    		labelActive
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('klass' in $$props) $$invalidate(3, klass = $$new_props.klass);
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('color' in $$props) $$invalidate(4, color = $$new_props.color);
    		if ('filled' in $$props) $$invalidate(5, filled = $$new_props.filled);
    		if ('solo' in $$props) $$invalidate(6, solo = $$new_props.solo);
    		if ('outlined' in $$props) $$invalidate(7, outlined = $$new_props.outlined);
    		if ('flat' in $$props) $$invalidate(8, flat = $$new_props.flat);
    		if ('dense' in $$props) $$invalidate(9, dense = $$new_props.dense);
    		if ('rounded' in $$props) $$invalidate(10, rounded = $$new_props.rounded);
    		if ('clearable' in $$props) $$invalidate(11, clearable = $$new_props.clearable);
    		if ('readonly' in $$props) $$invalidate(12, readonly = $$new_props.readonly);
    		if ('disabled' in $$props) $$invalidate(13, disabled = $$new_props.disabled);
    		if ('placeholder' in $$props) $$invalidate(14, placeholder = $$new_props.placeholder);
    		if ('hint' in $$props) $$invalidate(15, hint = $$new_props.hint);
    		if ('counter' in $$props) $$invalidate(16, counter = $$new_props.counter);
    		if ('messages' in $$props) $$invalidate(17, messages = $$new_props.messages);
    		if ('rules' in $$props) $$invalidate(30, rules = $$new_props.rules);
    		if ('errorCount' in $$props) $$invalidate(18, errorCount = $$new_props.errorCount);
    		if ('validateOnBlur' in $$props) $$invalidate(31, validateOnBlur = $$new_props.validateOnBlur);
    		if ('error' in $$props) $$invalidate(1, error = $$new_props.error);
    		if ('success' in $$props) $$invalidate(19, success = $$new_props.success);
    		if ('id' in $$props) $$invalidate(20, id = $$new_props.id);
    		if ('style' in $$props) $$invalidate(21, style = $$new_props.style);
    		if ('inputElement' in $$props) $$invalidate(2, inputElement = $$new_props.inputElement);
    		if ('validation' in $$props) $$invalidate(29, validation = $$new_props.validation);
    		if ('focused' in $$props) $$invalidate(33, focused = $$new_props.focused);
    		if ('errorMessages' in $$props) $$invalidate(22, errorMessages = $$new_props.errorMessages);
    		if ('labelActive' in $$props) $$invalidate(23, labelActive = $$new_props.labelActive);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*placeholder, value*/ 16385 | $$self.$$.dirty[1] & /*focused*/ 4) {
    			$$invalidate(23, labelActive = !!placeholder || value || focused);
    		}
    	};

    	return [
    		value,
    		error,
    		inputElement,
    		klass,
    		color,
    		filled,
    		solo,
    		outlined,
    		flat,
    		dense,
    		rounded,
    		clearable,
    		readonly,
    		disabled,
    		placeholder,
    		hint,
    		counter,
    		messages,
    		errorCount,
    		success,
    		id,
    		style,
    		errorMessages,
    		labelActive,
    		onFocus,
    		onBlur,
    		clear,
    		onInput,
    		$$restProps,
    		validation,
    		rules,
    		validateOnBlur,
    		validate,
    		focused,
    		slots,
    		focus_handler,
    		blur_handler,
    		input_handler,
    		change_handler,
    		keypress_handler,
    		keydown_handler,
    		keyup_handler,
    		input_binding,
    		input_input_handler,
    		$$scope
    	];
    }

    class TextField extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$E,
    			create_fragment$E,
    			safe_not_equal,
    			{
    				class: 3,
    				value: 0,
    				color: 4,
    				filled: 5,
    				solo: 6,
    				outlined: 7,
    				flat: 8,
    				dense: 9,
    				rounded: 10,
    				clearable: 11,
    				readonly: 12,
    				disabled: 13,
    				placeholder: 14,
    				hint: 15,
    				counter: 16,
    				messages: 17,
    				rules: 30,
    				errorCount: 18,
    				validateOnBlur: 31,
    				error: 1,
    				success: 19,
    				id: 20,
    				style: 21,
    				inputElement: 2,
    				validation: 29,
    				validate: 32
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TextField",
    			options,
    			id: create_fragment$E.name
    		});
    	}

    	get class() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filled() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filled(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get solo() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set solo(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flat() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flat(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rounded() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rounded(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get clearable() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clearable(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hint() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hint(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get counter() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set counter(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get messages() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set messages(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rules() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rules(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get errorCount() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set errorCount(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validateOnBlur() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validateOnBlur(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get error() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set error(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get success() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set success(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputElement() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputElement(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validation() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validation(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validate() {
    		return this.$$.ctx[32];
    	}

    	set validate(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Textarea\Textarea.svelte generated by Svelte v3.40.0 */
    const file$x = "node_modules\\svelte-materialify\\dist\\components\\Textarea\\Textarea.svelte";
    const get_append_slot_changes$1 = dirty => ({});
    const get_append_slot_context$1 = ctx => ({});
    const get_clear_icon_slot_changes = dirty => ({});
    const get_clear_icon_slot_context = ctx => ({});
    const get_prepend_slot_changes$1 = dirty => ({});
    const get_prepend_slot_context$1 = ctx => ({});
    const get_prepend_outer_slot_changes$1 = dirty => ({});
    const get_prepend_outer_slot_context$1 = ctx => ({ slot: "prepend-outer" });

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[42] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[42] = list[i];
    	return child_ctx;
    }

    const get_append_outer_slot_changes$1 = dirty => ({});
    const get_append_outer_slot_context$1 = ctx => ({ slot: "append-outer" });

    // (115:4) {#if clearable && value !== ''}
    function create_if_block_1$6(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const clear_icon_slot_template = /*#slots*/ ctx[33]["clear-icon"];
    	const clear_icon_slot = create_slot(clear_icon_slot_template, ctx, /*$$scope*/ ctx[40], get_clear_icon_slot_context);
    	const clear_icon_slot_or_fallback = clear_icon_slot || fallback_block$5(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (clear_icon_slot_or_fallback) clear_icon_slot_or_fallback.c();
    			set_style(div, "cursor", "pointer");
    			add_location(div, file$x, 115, 6, 2839);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (clear_icon_slot_or_fallback) {
    				clear_icon_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*clear*/ ctx[27], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (clear_icon_slot) {
    				if (clear_icon_slot.p && (!current || dirty[1] & /*$$scope*/ 512)) {
    					update_slot(clear_icon_slot, clear_icon_slot_template, ctx, /*$$scope*/ ctx[40], !current ? [-1, -1] : dirty, get_clear_icon_slot_changes, get_clear_icon_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(clear_icon_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(clear_icon_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (clear_icon_slot_or_fallback) clear_icon_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(115:4) {#if clearable && value !== ''}",
    		ctx
    	});

    	return block;
    }

    // (118:32)             
    function fallback_block$5(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { path: closeIcon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$5.name,
    		type: "fallback",
    		source: "(118:32)             ",
    		ctx
    	});

    	return block;
    }

    // (70:0) <Input    class="s-text-field s-textarea"    {color}    {readonly}    {disabled}    {error}    {success}    {style}>
    function create_default_slot$c(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let label;
    	let t1;
    	let textarea_1;
    	let t2;
    	let t3;
    	let current;
    	let mounted;
    	let dispose;
    	const prepend_slot_template = /*#slots*/ ctx[33].prepend;
    	const prepend_slot = create_slot(prepend_slot_template, ctx, /*$$scope*/ ctx[40], get_prepend_slot_context$1);
    	const default_slot_template = /*#slots*/ ctx[33].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[40], null);

    	let textarea_1_levels = [
    		{ type: "text" },
    		{ rows: /*rows*/ ctx[11] },
    		{ placeholder: /*placeholder*/ ctx[15] },
    		{ id: /*id*/ ctx[21] },
    		{ readOnly: /*readonly*/ ctx[10] },
    		{ disabled: /*disabled*/ ctx[14] },
    		/*$$restProps*/ ctx[29]
    	];

    	let textarea_1_data = {};

    	for (let i = 0; i < textarea_1_levels.length; i += 1) {
    		textarea_1_data = assign(textarea_1_data, textarea_1_levels[i]);
    	}

    	let if_block = /*clearable*/ ctx[9] && /*value*/ ctx[0] !== '' && create_if_block_1$6(ctx);
    	const append_slot_template = /*#slots*/ ctx[33].append;
    	const append_slot = create_slot(append_slot_template, ctx, /*$$scope*/ ctx[40], get_append_slot_context$1);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (prepend_slot) prepend_slot.c();
    			t0 = space();
    			div0 = element("div");
    			label = element("label");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			textarea_1 = element("textarea");
    			t2 = space();
    			if (if_block) if_block.c();
    			t3 = space();
    			if (append_slot) append_slot.c();
    			attr_dev(label, "for", /*id*/ ctx[21]);
    			toggle_class(label, "active", /*labelActive*/ ctx[23]);
    			add_location(label, file$x, 92, 6, 2339);
    			set_attributes(textarea_1, textarea_1_data);
    			add_location(textarea_1, file$x, 95, 6, 2424);
    			attr_dev(div0, "class", "s-text-field__input");
    			add_location(div0, file$x, 91, 4, 2298);
    			attr_dev(div1, "class", "s-text-field__wrapper");
    			toggle_class(div1, "filled", /*filled*/ ctx[4]);
    			toggle_class(div1, "solo", /*solo*/ ctx[5]);
    			toggle_class(div1, "outlined", /*outlined*/ ctx[6]);
    			toggle_class(div1, "flat", /*flat*/ ctx[7]);
    			toggle_class(div1, "rounded", /*rounded*/ ctx[8]);
    			toggle_class(div1, "autogrow", /*autogrow*/ ctx[12]);
    			toggle_class(div1, "no-resize", /*noResize*/ ctx[13] || /*autogrow*/ ctx[12]);
    			add_location(div1, file$x, 79, 2, 2019);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);

    			if (prepend_slot) {
    				prepend_slot.m(div1, null);
    			}

    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, label);

    			if (default_slot) {
    				default_slot.m(label, null);
    			}

    			append_dev(div0, t1);
    			append_dev(div0, textarea_1);
    			/*textarea_1_binding*/ ctx[38](textarea_1);
    			set_input_value(textarea_1, /*value*/ ctx[0]);
    			append_dev(div1, t2);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t3);

    			if (append_slot) {
    				append_slot.m(div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(textarea_1, "input", /*textarea_1_input_handler*/ ctx[39]),
    					listen_dev(textarea_1, "focus", /*onFocus*/ ctx[25], false, false, false),
    					listen_dev(textarea_1, "blur", /*onBlur*/ ctx[26], false, false, false),
    					listen_dev(textarea_1, "input", /*onInput*/ ctx[28], false, false, false),
    					listen_dev(textarea_1, "focus", /*focus_handler*/ ctx[34], false, false, false),
    					listen_dev(textarea_1, "blur", /*blur_handler*/ ctx[35], false, false, false),
    					listen_dev(textarea_1, "input", /*input_handler*/ ctx[36], false, false, false),
    					listen_dev(textarea_1, "change", /*change_handler*/ ctx[37], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (prepend_slot) {
    				if (prepend_slot.p && (!current || dirty[1] & /*$$scope*/ 512)) {
    					update_slot(prepend_slot, prepend_slot_template, ctx, /*$$scope*/ ctx[40], !current ? [-1, -1] : dirty, get_prepend_slot_changes$1, get_prepend_slot_context$1);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 512)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[40], !current ? [-1, -1] : dirty, null, null);
    				}
    			}

    			if (!current || dirty[0] & /*id*/ 2097152) {
    				attr_dev(label, "for", /*id*/ ctx[21]);
    			}

    			if (dirty[0] & /*labelActive*/ 8388608) {
    				toggle_class(label, "active", /*labelActive*/ ctx[23]);
    			}

    			set_attributes(textarea_1, textarea_1_data = get_spread_update(textarea_1_levels, [
    				{ type: "text" },
    				(!current || dirty[0] & /*rows*/ 2048) && { rows: /*rows*/ ctx[11] },
    				(!current || dirty[0] & /*placeholder*/ 32768) && { placeholder: /*placeholder*/ ctx[15] },
    				(!current || dirty[0] & /*id*/ 2097152) && { id: /*id*/ ctx[21] },
    				(!current || dirty[0] & /*readonly*/ 1024) && { readOnly: /*readonly*/ ctx[10] },
    				(!current || dirty[0] & /*disabled*/ 16384) && { disabled: /*disabled*/ ctx[14] },
    				dirty[0] & /*$$restProps*/ 536870912 && /*$$restProps*/ ctx[29]
    			]));

    			if (dirty[0] & /*value*/ 1) {
    				set_input_value(textarea_1, /*value*/ ctx[0]);
    			}

    			if (/*clearable*/ ctx[9] && /*value*/ ctx[0] !== '') {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*clearable, value*/ 513) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t3);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (append_slot) {
    				if (append_slot.p && (!current || dirty[1] & /*$$scope*/ 512)) {
    					update_slot(append_slot, append_slot_template, ctx, /*$$scope*/ ctx[40], !current ? [-1, -1] : dirty, get_append_slot_changes$1, get_append_slot_context$1);
    				}
    			}

    			if (dirty[0] & /*filled*/ 16) {
    				toggle_class(div1, "filled", /*filled*/ ctx[4]);
    			}

    			if (dirty[0] & /*solo*/ 32) {
    				toggle_class(div1, "solo", /*solo*/ ctx[5]);
    			}

    			if (dirty[0] & /*outlined*/ 64) {
    				toggle_class(div1, "outlined", /*outlined*/ ctx[6]);
    			}

    			if (dirty[0] & /*flat*/ 128) {
    				toggle_class(div1, "flat", /*flat*/ ctx[7]);
    			}

    			if (dirty[0] & /*rounded*/ 256) {
    				toggle_class(div1, "rounded", /*rounded*/ ctx[8]);
    			}

    			if (dirty[0] & /*autogrow*/ 4096) {
    				toggle_class(div1, "autogrow", /*autogrow*/ ctx[12]);
    			}

    			if (dirty[0] & /*noResize, autogrow*/ 12288) {
    				toggle_class(div1, "no-resize", /*noResize*/ ctx[13] || /*autogrow*/ ctx[12]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_slot, local);
    			transition_in(default_slot, local);
    			transition_in(if_block);
    			transition_in(append_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_slot, local);
    			transition_out(default_slot, local);
    			transition_out(if_block);
    			transition_out(append_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (prepend_slot) prepend_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			/*textarea_1_binding*/ ctx[38](null);
    			if (if_block) if_block.d();
    			if (append_slot) append_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$c.name,
    		type: "slot",
    		source: "(70:0) <Input    class=\\\"s-text-field s-textarea\\\"    {color}    {readonly}    {disabled}    {error}    {success}    {style}>",
    		ctx
    	});

    	return block;
    }

    // (79:2) 
    function create_prepend_outer_slot$1(ctx) {
    	let current;
    	const prepend_outer_slot_template = /*#slots*/ ctx[33]["prepend-outer"];
    	const prepend_outer_slot = create_slot(prepend_outer_slot_template, ctx, /*$$scope*/ ctx[40], get_prepend_outer_slot_context$1);

    	const block = {
    		c: function create() {
    			if (prepend_outer_slot) prepend_outer_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (prepend_outer_slot) {
    				prepend_outer_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (prepend_outer_slot) {
    				if (prepend_outer_slot.p && (!current || dirty[1] & /*$$scope*/ 512)) {
    					update_slot(prepend_outer_slot, prepend_outer_slot_template, ctx, /*$$scope*/ ctx[40], !current ? [-1, -1] : dirty, get_prepend_outer_slot_changes$1, get_prepend_outer_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_outer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_outer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (prepend_outer_slot) prepend_outer_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_prepend_outer_slot$1.name,
    		type: "slot",
    		source: "(79:2) ",
    		ctx
    	});

    	return block;
    }

    // (131:6) {#each messages as message}
    function create_each_block_1$2(ctx) {
    	let span;
    	let t_value = /*message*/ ctx[42] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			add_location(span, file$x, 131, 8, 3257);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*messages*/ 524288 && t_value !== (t_value = /*message*/ ctx[42] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(131:6) {#each messages as message}",
    		ctx
    	});

    	return block;
    }

    // (134:6) {#each errorMessages.slice(0, errorCount) as message}
    function create_each_block$a(ctx) {
    	let span;
    	let t_value = /*message*/ ctx[42] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			add_location(span, file$x, 134, 8, 3365);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*errorMessages, errorCount*/ 17039360 && t_value !== (t_value = /*message*/ ctx[42] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(134:6) {#each errorMessages.slice(0, errorCount) as message}",
    		ctx
    	});

    	return block;
    }

    // (138:4) {#if counter}
    function create_if_block$i(ctx) {
    	let span;
    	let t0_value = /*value*/ ctx[0].length + "";
    	let t0;
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = text(" / ");
    			t2 = text(/*counter*/ ctx[17]);
    			add_location(span, file$x, 138, 6, 3441);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			append_dev(span, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*value*/ 1 && t0_value !== (t0_value = /*value*/ ctx[0].length + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*counter*/ 131072) set_data_dev(t2, /*counter*/ ctx[17]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(138:4) {#if counter}",
    		ctx
    	});

    	return block;
    }

    // (128:2) 
    function create_messages_slot(ctx) {
    	let div1;
    	let div0;
    	let span;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let each_value_1 = /*messages*/ ctx[19];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	let each_value = /*errorMessages*/ ctx[24].slice(0, /*errorCount*/ ctx[18]);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	let if_block = /*counter*/ ctx[17] && create_if_block$i(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span = element("span");
    			t0 = text(/*hint*/ ctx[16]);
    			t1 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t2 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			if (if_block) if_block.c();
    			add_location(span, file$x, 129, 6, 3193);
    			add_location(div0, file$x, 128, 4, 3180);
    			attr_dev(div1, "slot", "messages");
    			add_location(div1, file$x, 127, 2, 3153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span);
    			append_dev(span, t0);
    			append_dev(div0, t1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div0, null);
    			}

    			append_dev(div0, t2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t3);
    			if (if_block) if_block.m(div1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*hint*/ 65536) set_data_dev(t0, /*hint*/ ctx[16]);

    			if (dirty[0] & /*messages*/ 524288) {
    				each_value_1 = /*messages*/ ctx[19];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div0, t2);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*errorMessages, errorCount*/ 17039360) {
    				each_value = /*errorMessages*/ ctx[24].slice(0, /*errorCount*/ ctx[18]);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*counter*/ ctx[17]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$i(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_messages_slot.name,
    		type: "slot",
    		source: "(128:2) ",
    		ctx
    	});

    	return block;
    }

    // (144:2) 
    function create_append_outer_slot$1(ctx) {
    	let current;
    	const append_outer_slot_template = /*#slots*/ ctx[33]["append-outer"];
    	const append_outer_slot = create_slot(append_outer_slot_template, ctx, /*$$scope*/ ctx[40], get_append_outer_slot_context$1);

    	const block = {
    		c: function create() {
    			if (append_outer_slot) append_outer_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (append_outer_slot) {
    				append_outer_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (append_outer_slot) {
    				if (append_outer_slot.p && (!current || dirty[1] & /*$$scope*/ 512)) {
    					update_slot(append_outer_slot, append_outer_slot_template, ctx, /*$$scope*/ ctx[40], !current ? [-1, -1] : dirty, get_append_outer_slot_changes$1, get_append_outer_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(append_outer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(append_outer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (append_outer_slot) append_outer_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_append_outer_slot$1.name,
    		type: "slot",
    		source: "(144:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$D(ctx) {
    	let input;
    	let current;

    	input = new Input({
    			props: {
    				class: "s-text-field s-textarea",
    				color: /*color*/ ctx[3],
    				readonly: /*readonly*/ ctx[10],
    				disabled: /*disabled*/ ctx[14],
    				error: /*error*/ ctx[1],
    				success: /*success*/ ctx[20],
    				style: /*style*/ ctx[22],
    				$$slots: {
    					"append-outer": [create_append_outer_slot$1],
    					messages: [create_messages_slot],
    					"prepend-outer": [create_prepend_outer_slot$1],
    					default: [create_default_slot$c]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(input.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(input, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const input_changes = {};
    			if (dirty[0] & /*color*/ 8) input_changes.color = /*color*/ ctx[3];
    			if (dirty[0] & /*readonly*/ 1024) input_changes.readonly = /*readonly*/ ctx[10];
    			if (dirty[0] & /*disabled*/ 16384) input_changes.disabled = /*disabled*/ ctx[14];
    			if (dirty[0] & /*error*/ 2) input_changes.error = /*error*/ ctx[1];
    			if (dirty[0] & /*success*/ 1048576) input_changes.success = /*success*/ ctx[20];
    			if (dirty[0] & /*style*/ 4194304) input_changes.style = /*style*/ ctx[22];

    			if (dirty[0] & /*counter, value, errorMessages, errorCount, messages, hint, filled, solo, outlined, flat, rounded, autogrow, noResize, clearable, rows, placeholder, id, readonly, disabled, $$restProps, textarea, labelActive*/ 565182453 | dirty[1] & /*$$scope*/ 512) {
    				input_changes.$$scope = { dirty, ctx };
    			}

    			input.$set(input_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(input.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(input.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(input, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$D($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"value","color","filled","solo","outlined","flat","rounded","clearable","readonly","rows","autogrow","noResize","disabled","placeholder","hint","counter","rules","errorCount","messages","validateOnBlur","error","success","id","style","textarea","validation"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Textarea', slots, ['append-outer','prepend-outer','prepend','default','clear-icon','append']);
    	let { value = "" } = $$props;
    	let { color = "primary" } = $$props;
    	let { filled = false } = $$props;
    	let { solo = false } = $$props;
    	let { outlined = false } = $$props;
    	let { flat = false } = $$props;
    	let { rounded = false } = $$props;
    	let { clearable = false } = $$props;
    	let { readonly = false } = $$props;
    	let { rows = 5 } = $$props;
    	let { autogrow = false } = $$props;
    	let { noResize = false } = $$props;
    	let { disabled = false } = $$props;
    	let { placeholder = null } = $$props;
    	let { hint = "" } = $$props;
    	let { counter = false } = $$props;
    	let { rules = [] } = $$props;
    	let { errorCount = 1 } = $$props;
    	let { messages = [] } = $$props;
    	let { validateOnBlur = false } = $$props;
    	let { error = false } = $$props;
    	let { success = false } = $$props;
    	let { id = `s-input-${uid(5)}` } = $$props;
    	let { style = null } = $$props;
    	let { textarea = null } = $$props;
    	let { validation = false } = $$props;
    	let labelActive = !!placeholder || value;
    	let errorMessages = [];

    	function checkRules() {
    		$$invalidate(24, errorMessages = rules.map(r => r(value)).filter(r => typeof r === "string"));

    		if (errorMessages.length) ($$invalidate(1, error = true), $$invalidate(30, validation = false)); else {
    			$$invalidate(1, error = false);
    			$$invalidate(30, validation = true);
    		}

    		return error;
    	}

    	function onFocus() {
    		$$invalidate(23, labelActive = true);
    	}

    	function onBlur() {
    		if (!value && !placeholder) $$invalidate(23, labelActive = false);
    		if (validateOnBlur) checkRules();
    	}

    	function clear() {
    		$$invalidate(0, value = "");
    		if (!placeholder) $$invalidate(23, labelActive = false);
    	}

    	function onInput() {
    		if (!validateOnBlur) checkRules();

    		if (autogrow) {
    			$$invalidate(2, textarea.style.height = "auto", textarea);
    			$$invalidate(2, textarea.style.height = `${textarea.scrollHeight}px`, textarea);
    		}
    	}

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function blur_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function change_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function textarea_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			textarea = $$value;
    			$$invalidate(2, textarea);
    		});
    	}

    	function textarea_1_input_handler() {
    		value = this.value;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(29, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('color' in $$new_props) $$invalidate(3, color = $$new_props.color);
    		if ('filled' in $$new_props) $$invalidate(4, filled = $$new_props.filled);
    		if ('solo' in $$new_props) $$invalidate(5, solo = $$new_props.solo);
    		if ('outlined' in $$new_props) $$invalidate(6, outlined = $$new_props.outlined);
    		if ('flat' in $$new_props) $$invalidate(7, flat = $$new_props.flat);
    		if ('rounded' in $$new_props) $$invalidate(8, rounded = $$new_props.rounded);
    		if ('clearable' in $$new_props) $$invalidate(9, clearable = $$new_props.clearable);
    		if ('readonly' in $$new_props) $$invalidate(10, readonly = $$new_props.readonly);
    		if ('rows' in $$new_props) $$invalidate(11, rows = $$new_props.rows);
    		if ('autogrow' in $$new_props) $$invalidate(12, autogrow = $$new_props.autogrow);
    		if ('noResize' in $$new_props) $$invalidate(13, noResize = $$new_props.noResize);
    		if ('disabled' in $$new_props) $$invalidate(14, disabled = $$new_props.disabled);
    		if ('placeholder' in $$new_props) $$invalidate(15, placeholder = $$new_props.placeholder);
    		if ('hint' in $$new_props) $$invalidate(16, hint = $$new_props.hint);
    		if ('counter' in $$new_props) $$invalidate(17, counter = $$new_props.counter);
    		if ('rules' in $$new_props) $$invalidate(31, rules = $$new_props.rules);
    		if ('errorCount' in $$new_props) $$invalidate(18, errorCount = $$new_props.errorCount);
    		if ('messages' in $$new_props) $$invalidate(19, messages = $$new_props.messages);
    		if ('validateOnBlur' in $$new_props) $$invalidate(32, validateOnBlur = $$new_props.validateOnBlur);
    		if ('error' in $$new_props) $$invalidate(1, error = $$new_props.error);
    		if ('success' in $$new_props) $$invalidate(20, success = $$new_props.success);
    		if ('id' in $$new_props) $$invalidate(21, id = $$new_props.id);
    		if ('style' in $$new_props) $$invalidate(22, style = $$new_props.style);
    		if ('textarea' in $$new_props) $$invalidate(2, textarea = $$new_props.textarea);
    		if ('validation' in $$new_props) $$invalidate(30, validation = $$new_props.validation);
    		if ('$$scope' in $$new_props) $$invalidate(40, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Input,
    		Icon,
    		uid,
    		clearIcon: closeIcon,
    		value,
    		color,
    		filled,
    		solo,
    		outlined,
    		flat,
    		rounded,
    		clearable,
    		readonly,
    		rows,
    		autogrow,
    		noResize,
    		disabled,
    		placeholder,
    		hint,
    		counter,
    		rules,
    		errorCount,
    		messages,
    		validateOnBlur,
    		error,
    		success,
    		id,
    		style,
    		textarea,
    		validation,
    		labelActive,
    		errorMessages,
    		checkRules,
    		onFocus,
    		onBlur,
    		clear,
    		onInput
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('color' in $$props) $$invalidate(3, color = $$new_props.color);
    		if ('filled' in $$props) $$invalidate(4, filled = $$new_props.filled);
    		if ('solo' in $$props) $$invalidate(5, solo = $$new_props.solo);
    		if ('outlined' in $$props) $$invalidate(6, outlined = $$new_props.outlined);
    		if ('flat' in $$props) $$invalidate(7, flat = $$new_props.flat);
    		if ('rounded' in $$props) $$invalidate(8, rounded = $$new_props.rounded);
    		if ('clearable' in $$props) $$invalidate(9, clearable = $$new_props.clearable);
    		if ('readonly' in $$props) $$invalidate(10, readonly = $$new_props.readonly);
    		if ('rows' in $$props) $$invalidate(11, rows = $$new_props.rows);
    		if ('autogrow' in $$props) $$invalidate(12, autogrow = $$new_props.autogrow);
    		if ('noResize' in $$props) $$invalidate(13, noResize = $$new_props.noResize);
    		if ('disabled' in $$props) $$invalidate(14, disabled = $$new_props.disabled);
    		if ('placeholder' in $$props) $$invalidate(15, placeholder = $$new_props.placeholder);
    		if ('hint' in $$props) $$invalidate(16, hint = $$new_props.hint);
    		if ('counter' in $$props) $$invalidate(17, counter = $$new_props.counter);
    		if ('rules' in $$props) $$invalidate(31, rules = $$new_props.rules);
    		if ('errorCount' in $$props) $$invalidate(18, errorCount = $$new_props.errorCount);
    		if ('messages' in $$props) $$invalidate(19, messages = $$new_props.messages);
    		if ('validateOnBlur' in $$props) $$invalidate(32, validateOnBlur = $$new_props.validateOnBlur);
    		if ('error' in $$props) $$invalidate(1, error = $$new_props.error);
    		if ('success' in $$props) $$invalidate(20, success = $$new_props.success);
    		if ('id' in $$props) $$invalidate(21, id = $$new_props.id);
    		if ('style' in $$props) $$invalidate(22, style = $$new_props.style);
    		if ('textarea' in $$props) $$invalidate(2, textarea = $$new_props.textarea);
    		if ('validation' in $$props) $$invalidate(30, validation = $$new_props.validation);
    		if ('labelActive' in $$props) $$invalidate(23, labelActive = $$new_props.labelActive);
    		if ('errorMessages' in $$props) $$invalidate(24, errorMessages = $$new_props.errorMessages);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		error,
    		textarea,
    		color,
    		filled,
    		solo,
    		outlined,
    		flat,
    		rounded,
    		clearable,
    		readonly,
    		rows,
    		autogrow,
    		noResize,
    		disabled,
    		placeholder,
    		hint,
    		counter,
    		errorCount,
    		messages,
    		success,
    		id,
    		style,
    		labelActive,
    		errorMessages,
    		onFocus,
    		onBlur,
    		clear,
    		onInput,
    		$$restProps,
    		validation,
    		rules,
    		validateOnBlur,
    		slots,
    		focus_handler,
    		blur_handler,
    		input_handler,
    		change_handler,
    		textarea_1_binding,
    		textarea_1_input_handler,
    		$$scope
    	];
    }

    class Textarea extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$D,
    			create_fragment$D,
    			safe_not_equal,
    			{
    				value: 0,
    				color: 3,
    				filled: 4,
    				solo: 5,
    				outlined: 6,
    				flat: 7,
    				rounded: 8,
    				clearable: 9,
    				readonly: 10,
    				rows: 11,
    				autogrow: 12,
    				noResize: 13,
    				disabled: 14,
    				placeholder: 15,
    				hint: 16,
    				counter: 17,
    				rules: 31,
    				errorCount: 18,
    				messages: 19,
    				validateOnBlur: 32,
    				error: 1,
    				success: 20,
    				id: 21,
    				style: 22,
    				textarea: 2,
    				validation: 30
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Textarea",
    			options,
    			id: create_fragment$D.name
    		});
    	}

    	get value() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filled() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filled(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get solo() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set solo(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flat() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flat(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rounded() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rounded(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get clearable() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clearable(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rows() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rows(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get autogrow() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set autogrow(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noResize() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noResize(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hint() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hint(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get counter() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set counter(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rules() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rules(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get errorCount() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set errorCount(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get messages() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set messages(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validateOnBlur() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validateOnBlur(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get error() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set error(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get success() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set success(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textarea() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textarea(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validation() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validation(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
        };
    }
    function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const height = parseFloat(style.height);
        const padding_top = parseFloat(style.paddingTop);
        const padding_bottom = parseFloat(style.paddingBottom);
        const margin_top = parseFloat(style.marginTop);
        const margin_bottom = parseFloat(style.marginBottom);
        const border_top_width = parseFloat(style.borderTopWidth);
        const border_bottom_width = parseFloat(style.borderBottomWidth);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `height: ${t * height}px;` +
                `padding-top: ${t * padding_top}px;` +
                `padding-bottom: ${t * padding_bottom}px;` +
                `margin-top: ${t * margin_top}px;` +
                `margin-bottom: ${t * margin_bottom}px;` +
                `border-top-width: ${t * border_top_width}px;` +
                `border-bottom-width: ${t * border_bottom_width}px;`
        };
    }

    /* node_modules\svelte-materialify\dist\components\Menu\Menu.svelte generated by Svelte v3.40.0 */
    const file$w = "node_modules\\svelte-materialify\\dist\\components\\Menu\\Menu.svelte";
    const get_activator_slot_changes = dirty => ({});
    const get_activator_slot_context = ctx => ({});

    // (145:2) {#if active}
    function create_if_block$h(ctx) {
    	let div;
    	let div_class_value;
    	let div_style_value;
    	let div_intro;
    	let div_outro;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[26].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[25], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-menu " + /*klass*/ ctx[1]);
    			attr_dev(div, "role", "menu");
    			attr_dev(div, "style", div_style_value = "" + (/*position*/ ctx[9] + ";transform-origin:" + /*origin*/ ctx[8] + ";z-index:" + /*index*/ ctx[6] + ";" + /*style*/ ctx[7]));
    			toggle_class(div, "tile", /*tile*/ ctx[5]);
    			add_location(div, file$w, 145, 4, 3668);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*menuClick*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[25], !current ? [-1, -1] : dirty, null, null);
    				}
    			}

    			if (!current || dirty[0] & /*klass*/ 2 && div_class_value !== (div_class_value = "s-menu " + /*klass*/ ctx[1])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty[0] & /*position, origin, index, style*/ 960 && div_style_value !== (div_style_value = "" + (/*position*/ ctx[9] + ";transform-origin:" + /*origin*/ ctx[8] + ";z-index:" + /*index*/ ctx[6] + ";" + /*style*/ ctx[7]))) {
    				attr_dev(div, "style", div_style_value);
    			}

    			if (dirty[0] & /*klass, tile*/ 34) {
    				toggle_class(div, "tile", /*tile*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, /*transition*/ ctx[2], /*inOpts*/ ctx[3]);
    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, /*transition*/ ctx[2], /*outOpts*/ ctx[4]);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching && div_outro) div_outro.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(145:2) {#if active}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$C(ctx) {
    	let div;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	const activator_slot_template = /*#slots*/ ctx[26].activator;
    	const activator_slot = create_slot(activator_slot_template, ctx, /*$$scope*/ ctx[25], get_activator_slot_context);
    	let if_block = /*active*/ ctx[0] && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (activator_slot) activator_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "s-menu__wrapper");
    			add_location(div, file$w, 136, 0, 3467);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (activator_slot) {
    				activator_slot.m(div, null);
    			}

    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    			/*div_binding*/ ctx[27](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(ClickOutside.call(null, div)),
    					listen_dev(div, "clickOutside", /*clickOutsideMenu*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (activator_slot) {
    				if (activator_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
    					update_slot(activator_slot, activator_slot_template, ctx, /*$$scope*/ ctx[25], !current ? [-1, -1] : dirty, get_activator_slot_changes, get_activator_slot_context);
    				}
    			}

    			if (/*active*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*active*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$h(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(activator_slot, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(activator_slot, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (activator_slot) activator_slot.d(detaching);
    			if (if_block) if_block.d();
    			/*div_binding*/ ctx[27](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$C($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Menu', slots, ['activator','default']);
    	let { class: klass = '' } = $$props;
    	let { active = false } = $$props;
    	let { absolute = false } = $$props;
    	let { transition = fade } = $$props;
    	let { inOpts = { duration: 250 } } = $$props;
    	let { outOpts = { duration: 200 } } = $$props;
    	let { offsetX = false } = $$props;
    	let { offsetY = true } = $$props;
    	let { nudgeX = 0 } = $$props;
    	let { nudgeY = 0 } = $$props;
    	let { openOnClick = true } = $$props;
    	let { hover = false } = $$props;
    	let { closeOnClickOutside = true } = $$props;
    	let { closeOnClick = true } = $$props;
    	let { bottom = false } = $$props;
    	let { right = false } = $$props;
    	let { tile = false } = $$props;
    	let { disabled = false } = $$props;
    	let { index = 8 } = $$props;
    	let { style = '' } = $$props;
    	let origin = 'top left';
    	let position;
    	let wrapper;
    	const dispatch = createEventDispatcher();

    	const align = {
    		x: right ? 'right' : 'left',
    		y: bottom ? 'bottom' : 'top'
    	};

    	setContext('S_ListItemRole', 'menuitem');
    	setContext('S_ListItemRipple', true);

    	// For opening the menu
    	function open(posX = 0, posY = 0) {
    		$$invalidate(0, active = true);
    		const rect = wrapper.getBoundingClientRect();
    		let x = nudgeX;
    		let y = nudgeY;

    		if (absolute) {
    			x += posX;
    			y += posY;
    		} else {
    			if (offsetX) x += rect.width;
    			if (offsetY) y += rect.height;
    		}

    		$$invalidate(9, position = `${align.y}:${y}px;${align.x}:${x}px`);
    		$$invalidate(8, origin = `${align.y} ${align.x}`);

    		/**
     * Event when menu is opened.
     * @returns Nothing
     */
    		dispatch('open');
    	}

    	// For closing the menu.
    	function close() {
    		$$invalidate(0, active = false);

    		/**
     * Event when menu is closed.
     * @returns Nothing
     */
    		dispatch('close');
    	}

    	// When the activator slot is clicked.
    	function triggerClick(e) {
    		if (!disabled) {
    			if (active) {
    				close();
    			} else if (openOnClick) {
    				open(e.offsetX, e.offsetY);
    			}
    		}
    	}

    	// When the menu itself is clicked.
    	function menuClick() {
    		if (active && closeOnClick) close();
    	}

    	// When user clicked somewhere outside the menu.
    	function clickOutsideMenu() {
    		if (active && closeOnClickOutside) close();
    	}

    	onMount(() => {
    		const trigger = wrapper.querySelector("[slot='activator']");

    		// Opening the menu if active is set to true.
    		if (active) open();

    		trigger.addEventListener('click', triggerClick, { passive: true });

    		if (hover) {
    			wrapper.addEventListener('mouseenter', open, { passive: true });
    			wrapper.addEventListener('mouseleave', close, { passive: true });
    		}

    		return () => {
    			trigger.removeEventListener('click', triggerClick);

    			if (hover) {
    				wrapper.removeEventListener('mouseenter', open);
    				wrapper.removeEventListener('mouseleave', close);
    			}
    		};
    	});

    	const writable_props = [
    		'class',
    		'active',
    		'absolute',
    		'transition',
    		'inOpts',
    		'outOpts',
    		'offsetX',
    		'offsetY',
    		'nudgeX',
    		'nudgeY',
    		'openOnClick',
    		'hover',
    		'closeOnClickOutside',
    		'closeOnClick',
    		'bottom',
    		'right',
    		'tile',
    		'disabled',
    		'index',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Menu> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			wrapper = $$value;
    			$$invalidate(10, wrapper);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(1, klass = $$props.class);
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    		if ('absolute' in $$props) $$invalidate(13, absolute = $$props.absolute);
    		if ('transition' in $$props) $$invalidate(2, transition = $$props.transition);
    		if ('inOpts' in $$props) $$invalidate(3, inOpts = $$props.inOpts);
    		if ('outOpts' in $$props) $$invalidate(4, outOpts = $$props.outOpts);
    		if ('offsetX' in $$props) $$invalidate(14, offsetX = $$props.offsetX);
    		if ('offsetY' in $$props) $$invalidate(15, offsetY = $$props.offsetY);
    		if ('nudgeX' in $$props) $$invalidate(16, nudgeX = $$props.nudgeX);
    		if ('nudgeY' in $$props) $$invalidate(17, nudgeY = $$props.nudgeY);
    		if ('openOnClick' in $$props) $$invalidate(18, openOnClick = $$props.openOnClick);
    		if ('hover' in $$props) $$invalidate(19, hover = $$props.hover);
    		if ('closeOnClickOutside' in $$props) $$invalidate(20, closeOnClickOutside = $$props.closeOnClickOutside);
    		if ('closeOnClick' in $$props) $$invalidate(21, closeOnClick = $$props.closeOnClick);
    		if ('bottom' in $$props) $$invalidate(22, bottom = $$props.bottom);
    		if ('right' in $$props) $$invalidate(23, right = $$props.right);
    		if ('tile' in $$props) $$invalidate(5, tile = $$props.tile);
    		if ('disabled' in $$props) $$invalidate(24, disabled = $$props.disabled);
    		if ('index' in $$props) $$invalidate(6, index = $$props.index);
    		if ('style' in $$props) $$invalidate(7, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(25, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		ClickOutside,
    		onMount,
    		setContext,
    		createEventDispatcher,
    		fade,
    		klass,
    		active,
    		absolute,
    		transition,
    		inOpts,
    		outOpts,
    		offsetX,
    		offsetY,
    		nudgeX,
    		nudgeY,
    		openOnClick,
    		hover,
    		closeOnClickOutside,
    		closeOnClick,
    		bottom,
    		right,
    		tile,
    		disabled,
    		index,
    		style,
    		origin,
    		position,
    		wrapper,
    		dispatch,
    		align,
    		open,
    		close,
    		triggerClick,
    		menuClick,
    		clickOutsideMenu
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(1, klass = $$props.klass);
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    		if ('absolute' in $$props) $$invalidate(13, absolute = $$props.absolute);
    		if ('transition' in $$props) $$invalidate(2, transition = $$props.transition);
    		if ('inOpts' in $$props) $$invalidate(3, inOpts = $$props.inOpts);
    		if ('outOpts' in $$props) $$invalidate(4, outOpts = $$props.outOpts);
    		if ('offsetX' in $$props) $$invalidate(14, offsetX = $$props.offsetX);
    		if ('offsetY' in $$props) $$invalidate(15, offsetY = $$props.offsetY);
    		if ('nudgeX' in $$props) $$invalidate(16, nudgeX = $$props.nudgeX);
    		if ('nudgeY' in $$props) $$invalidate(17, nudgeY = $$props.nudgeY);
    		if ('openOnClick' in $$props) $$invalidate(18, openOnClick = $$props.openOnClick);
    		if ('hover' in $$props) $$invalidate(19, hover = $$props.hover);
    		if ('closeOnClickOutside' in $$props) $$invalidate(20, closeOnClickOutside = $$props.closeOnClickOutside);
    		if ('closeOnClick' in $$props) $$invalidate(21, closeOnClick = $$props.closeOnClick);
    		if ('bottom' in $$props) $$invalidate(22, bottom = $$props.bottom);
    		if ('right' in $$props) $$invalidate(23, right = $$props.right);
    		if ('tile' in $$props) $$invalidate(5, tile = $$props.tile);
    		if ('disabled' in $$props) $$invalidate(24, disabled = $$props.disabled);
    		if ('index' in $$props) $$invalidate(6, index = $$props.index);
    		if ('style' in $$props) $$invalidate(7, style = $$props.style);
    		if ('origin' in $$props) $$invalidate(8, origin = $$props.origin);
    		if ('position' in $$props) $$invalidate(9, position = $$props.position);
    		if ('wrapper' in $$props) $$invalidate(10, wrapper = $$props.wrapper);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		active,
    		klass,
    		transition,
    		inOpts,
    		outOpts,
    		tile,
    		index,
    		style,
    		origin,
    		position,
    		wrapper,
    		menuClick,
    		clickOutsideMenu,
    		absolute,
    		offsetX,
    		offsetY,
    		nudgeX,
    		nudgeY,
    		openOnClick,
    		hover,
    		closeOnClickOutside,
    		closeOnClick,
    		bottom,
    		right,
    		disabled,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class Menu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$C,
    			create_fragment$C,
    			safe_not_equal,
    			{
    				class: 1,
    				active: 0,
    				absolute: 13,
    				transition: 2,
    				inOpts: 3,
    				outOpts: 4,
    				offsetX: 14,
    				offsetY: 15,
    				nudgeX: 16,
    				nudgeY: 17,
    				openOnClick: 18,
    				hover: 19,
    				closeOnClickOutside: 20,
    				closeOnClick: 21,
    				bottom: 22,
    				right: 23,
    				tile: 5,
    				disabled: 24,
    				index: 6,
    				style: 7
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Menu",
    			options,
    			id: create_fragment$C.name
    		});
    	}

    	get class() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get absolute() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set absolute(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inOpts() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inOpts(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outOpts() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outOpts(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get offsetX() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set offsetX(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get offsetY() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set offsetY(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nudgeX() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nudgeX(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nudgeY() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nudgeY(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get openOnClick() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set openOnClick(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hover() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hover(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeOnClickOutside() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeOnClickOutside(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeOnClick() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeOnClick(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bottom() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bottom(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get right() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set right(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tile() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tile(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\List\List.svelte generated by Svelte v3.40.0 */
    const file$v = "node_modules\\svelte-materialify\\dist\\components\\List\\List.svelte";

    function create_fragment$B(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "role", /*role*/ ctx[8]);
    			attr_dev(div, "class", div_class_value = "s-list " + /*klass*/ ctx[0]);
    			attr_dev(div, "aria-disabled", /*disabled*/ ctx[2]);
    			attr_dev(div, "style", /*style*/ ctx[7]);
    			toggle_class(div, "dense", /*dense*/ ctx[1]);
    			toggle_class(div, "disabled", /*disabled*/ ctx[2]);
    			toggle_class(div, "flat", /*flat*/ ctx[3]);
    			toggle_class(div, "nav", /*nav*/ ctx[5]);
    			toggle_class(div, "outlined", /*outlined*/ ctx[6]);
    			toggle_class(div, "rounded", /*rounded*/ ctx[4]);
    			add_location(div, file$v, 83, 0, 1801);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*role*/ 256) {
    				attr_dev(div, "role", /*role*/ ctx[8]);
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-list " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*disabled*/ 4) {
    				attr_dev(div, "aria-disabled", /*disabled*/ ctx[2]);
    			}

    			if (!current || dirty & /*style*/ 128) {
    				attr_dev(div, "style", /*style*/ ctx[7]);
    			}

    			if (dirty & /*klass, dense*/ 3) {
    				toggle_class(div, "dense", /*dense*/ ctx[1]);
    			}

    			if (dirty & /*klass, disabled*/ 5) {
    				toggle_class(div, "disabled", /*disabled*/ ctx[2]);
    			}

    			if (dirty & /*klass, flat*/ 9) {
    				toggle_class(div, "flat", /*flat*/ ctx[3]);
    			}

    			if (dirty & /*klass, nav*/ 33) {
    				toggle_class(div, "nav", /*nav*/ ctx[5]);
    			}

    			if (dirty & /*klass, outlined*/ 65) {
    				toggle_class(div, "outlined", /*outlined*/ ctx[6]);
    			}

    			if (dirty & /*klass, rounded*/ 17) {
    				toggle_class(div, "rounded", /*rounded*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('List', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { dense = null } = $$props;
    	let { disabled = null } = $$props;
    	let { flat = false } = $$props;
    	let { rounded = false } = $$props;
    	let { nav = false } = $$props;
    	let { outlined = false } = $$props;
    	let { style = null } = $$props;
    	let role = null;

    	if (!getContext('S_ListItemRole')) {
    		setContext('S_ListItemRole', 'listitem');
    		role = 'list';
    	}

    	const writable_props = ['class', 'dense', 'disabled', 'flat', 'rounded', 'nav', 'outlined', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<List> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('dense' in $$props) $$invalidate(1, dense = $$props.dense);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ('flat' in $$props) $$invalidate(3, flat = $$props.flat);
    		if ('rounded' in $$props) $$invalidate(4, rounded = $$props.rounded);
    		if ('nav' in $$props) $$invalidate(5, nav = $$props.nav);
    		if ('outlined' in $$props) $$invalidate(6, outlined = $$props.outlined);
    		if ('style' in $$props) $$invalidate(7, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		setContext,
    		getContext,
    		klass,
    		dense,
    		disabled,
    		flat,
    		rounded,
    		nav,
    		outlined,
    		style,
    		role
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('dense' in $$props) $$invalidate(1, dense = $$props.dense);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ('flat' in $$props) $$invalidate(3, flat = $$props.flat);
    		if ('rounded' in $$props) $$invalidate(4, rounded = $$props.rounded);
    		if ('nav' in $$props) $$invalidate(5, nav = $$props.nav);
    		if ('outlined' in $$props) $$invalidate(6, outlined = $$props.outlined);
    		if ('style' in $$props) $$invalidate(7, style = $$props.style);
    		if ('role' in $$props) $$invalidate(8, role = $$props.role);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		klass,
    		dense,
    		disabled,
    		flat,
    		rounded,
    		nav,
    		outlined,
    		style,
    		role,
    		$$scope,
    		slots
    	];
    }

    class List extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$B, create_fragment$B, safe_not_equal, {
    			class: 0,
    			dense: 1,
    			disabled: 2,
    			flat: 3,
    			rounded: 4,
    			nav: 5,
    			outlined: 6,
    			style: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "List",
    			options,
    			id: create_fragment$B.name
    		});
    	}

    	get class() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flat() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flat(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rounded() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rounded(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nav() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nav(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\List\ListItem.svelte generated by Svelte v3.40.0 */
    const file$u = "node_modules\\svelte-materialify\\dist\\components\\List\\ListItem.svelte";
    const get_append_slot_changes = dirty => ({});
    const get_append_slot_context = ctx => ({});
    const get_subtitle_slot_changes = dirty => ({});
    const get_subtitle_slot_context = ctx => ({});
    const get_prepend_slot_changes = dirty => ({});
    const get_prepend_slot_context = ctx => ({});

    function create_fragment$A(ctx) {
    	let div3;
    	let t0;
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let t2;
    	let div3_class_value;
    	let div3_tabindex_value;
    	let div3_aria_selected_value;
    	let Class_action;
    	let Ripple_action;
    	let current;
    	let mounted;
    	let dispose;
    	const prepend_slot_template = /*#slots*/ ctx[14].prepend;
    	const prepend_slot = create_slot(prepend_slot_template, ctx, /*$$scope*/ ctx[13], get_prepend_slot_context);
    	const default_slot_template = /*#slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);
    	const subtitle_slot_template = /*#slots*/ ctx[14].subtitle;
    	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[13], get_subtitle_slot_context);
    	const append_slot_template = /*#slots*/ ctx[14].append;
    	const append_slot = create_slot(append_slot_template, ctx, /*$$scope*/ ctx[13], get_append_slot_context);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			if (prepend_slot) prepend_slot.c();
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			div1 = element("div");
    			if (subtitle_slot) subtitle_slot.c();
    			t2 = space();
    			if (append_slot) append_slot.c();
    			attr_dev(div0, "class", "s-list-item__title");
    			add_location(div0, file$u, 213, 4, 5437);
    			attr_dev(div1, "class", "s-list-item__subtitle");
    			add_location(div1, file$u, 216, 4, 5503);
    			attr_dev(div2, "class", "s-list-item__content");
    			add_location(div2, file$u, 212, 2, 5397);
    			attr_dev(div3, "class", div3_class_value = "s-list-item " + /*klass*/ ctx[1]);
    			attr_dev(div3, "role", /*role*/ ctx[10]);
    			attr_dev(div3, "tabindex", div3_tabindex_value = /*link*/ ctx[6] ? 0 : -1);
    			attr_dev(div3, "aria-selected", div3_aria_selected_value = /*role*/ ctx[10] === 'option' ? /*active*/ ctx[0] : null);
    			attr_dev(div3, "style", /*style*/ ctx[9]);
    			toggle_class(div3, "dense", /*dense*/ ctx[3]);
    			toggle_class(div3, "disabled", /*disabled*/ ctx[4]);
    			toggle_class(div3, "multiline", /*multiline*/ ctx[5]);
    			toggle_class(div3, "link", /*link*/ ctx[6]);
    			toggle_class(div3, "selectable", /*selectable*/ ctx[7]);
    			add_location(div3, file$u, 195, 0, 5033);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);

    			if (prepend_slot) {
    				prepend_slot.m(div3, null);
    			}

    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			append_dev(div2, t1);
    			append_dev(div2, div1);

    			if (subtitle_slot) {
    				subtitle_slot.m(div1, null);
    			}

    			append_dev(div3, t2);

    			if (append_slot) {
    				append_slot.m(div3, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(Class_action = Class.call(null, div3, [/*active*/ ctx[0] && /*activeClass*/ ctx[2]])),
    					action_destroyer(Ripple_action = Ripple.call(null, div3, /*ripple*/ ctx[8])),
    					listen_dev(div3, "click", /*click*/ ctx[11], false, false, false),
    					listen_dev(div3, "click", /*click_handler*/ ctx[15], false, false, false),
    					listen_dev(div3, "dblclick", /*dblclick_handler*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (prepend_slot) {
    				if (prepend_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot(prepend_slot, prepend_slot_template, ctx, /*$$scope*/ ctx[13], !current ? -1 : dirty, get_prepend_slot_changes, get_prepend_slot_context);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[13], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (subtitle_slot) {
    				if (subtitle_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot(subtitle_slot, subtitle_slot_template, ctx, /*$$scope*/ ctx[13], !current ? -1 : dirty, get_subtitle_slot_changes, get_subtitle_slot_context);
    				}
    			}

    			if (append_slot) {
    				if (append_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot(append_slot, append_slot_template, ctx, /*$$scope*/ ctx[13], !current ? -1 : dirty, get_append_slot_changes, get_append_slot_context);
    				}
    			}

    			if (!current || dirty & /*klass*/ 2 && div3_class_value !== (div3_class_value = "s-list-item " + /*klass*/ ctx[1])) {
    				attr_dev(div3, "class", div3_class_value);
    			}

    			if (!current || dirty & /*link*/ 64 && div3_tabindex_value !== (div3_tabindex_value = /*link*/ ctx[6] ? 0 : -1)) {
    				attr_dev(div3, "tabindex", div3_tabindex_value);
    			}

    			if (!current || dirty & /*active*/ 1 && div3_aria_selected_value !== (div3_aria_selected_value = /*role*/ ctx[10] === 'option' ? /*active*/ ctx[0] : null)) {
    				attr_dev(div3, "aria-selected", div3_aria_selected_value);
    			}

    			if (!current || dirty & /*style*/ 512) {
    				attr_dev(div3, "style", /*style*/ ctx[9]);
    			}

    			if (Class_action && is_function(Class_action.update) && dirty & /*active, activeClass*/ 5) Class_action.update.call(null, [/*active*/ ctx[0] && /*activeClass*/ ctx[2]]);
    			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*ripple*/ 256) Ripple_action.update.call(null, /*ripple*/ ctx[8]);

    			if (dirty & /*klass, dense*/ 10) {
    				toggle_class(div3, "dense", /*dense*/ ctx[3]);
    			}

    			if (dirty & /*klass, disabled*/ 18) {
    				toggle_class(div3, "disabled", /*disabled*/ ctx[4]);
    			}

    			if (dirty & /*klass, multiline*/ 34) {
    				toggle_class(div3, "multiline", /*multiline*/ ctx[5]);
    			}

    			if (dirty & /*klass, link*/ 66) {
    				toggle_class(div3, "link", /*link*/ ctx[6]);
    			}

    			if (dirty & /*klass, selectable*/ 130) {
    				toggle_class(div3, "selectable", /*selectable*/ ctx[7]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_slot, local);
    			transition_in(default_slot, local);
    			transition_in(subtitle_slot, local);
    			transition_in(append_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_slot, local);
    			transition_out(default_slot, local);
    			transition_out(subtitle_slot, local);
    			transition_out(append_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (prepend_slot) prepend_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			if (subtitle_slot) subtitle_slot.d(detaching);
    			if (append_slot) append_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ListItem', slots, ['prepend','default','subtitle','append']);
    	const role = getContext('S_ListItemRole');
    	const ITEM_GROUP = getContext('S_ListItemGroup');

    	const DEFAULTS = {
    		select: () => null,
    		register: () => null,
    		index: () => null,
    		activeClass: 'active'
    	};

    	const ITEM = ITEM_GROUP ? getContext(ITEM_GROUP) : DEFAULTS;
    	let { class: klass = '' } = $$props;
    	let { activeClass = ITEM.activeClass } = $$props;
    	let { value = ITEM.index() } = $$props;
    	let { active = false } = $$props;
    	let { dense = false } = $$props;
    	let { disabled = null } = $$props;
    	let { multiline = false } = $$props;
    	let { link = role } = $$props;
    	let { selectable = !link } = $$props;
    	let { ripple = getContext('S_ListItemRipple') || role || false } = $$props;
    	let { style = null } = $$props;

    	ITEM.register(values => {
    		$$invalidate(0, active = values.includes(value));
    	});

    	function click() {
    		if (!disabled) ITEM.select(value);
    	}

    	const writable_props = [
    		'class',
    		'activeClass',
    		'value',
    		'active',
    		'dense',
    		'disabled',
    		'multiline',
    		'link',
    		'selectable',
    		'ripple',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ListItem> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function dblclick_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(1, klass = $$props.class);
    		if ('activeClass' in $$props) $$invalidate(2, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(12, value = $$props.value);
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    		if ('dense' in $$props) $$invalidate(3, dense = $$props.dense);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('multiline' in $$props) $$invalidate(5, multiline = $$props.multiline);
    		if ('link' in $$props) $$invalidate(6, link = $$props.link);
    		if ('selectable' in $$props) $$invalidate(7, selectable = $$props.selectable);
    		if ('ripple' in $$props) $$invalidate(8, ripple = $$props.ripple);
    		if ('style' in $$props) $$invalidate(9, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(13, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		Ripple,
    		Class,
    		role,
    		ITEM_GROUP,
    		DEFAULTS,
    		ITEM,
    		klass,
    		activeClass,
    		value,
    		active,
    		dense,
    		disabled,
    		multiline,
    		link,
    		selectable,
    		ripple,
    		style,
    		click
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(1, klass = $$props.klass);
    		if ('activeClass' in $$props) $$invalidate(2, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(12, value = $$props.value);
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    		if ('dense' in $$props) $$invalidate(3, dense = $$props.dense);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('multiline' in $$props) $$invalidate(5, multiline = $$props.multiline);
    		if ('link' in $$props) $$invalidate(6, link = $$props.link);
    		if ('selectable' in $$props) $$invalidate(7, selectable = $$props.selectable);
    		if ('ripple' in $$props) $$invalidate(8, ripple = $$props.ripple);
    		if ('style' in $$props) $$invalidate(9, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		active,
    		klass,
    		activeClass,
    		dense,
    		disabled,
    		multiline,
    		link,
    		selectable,
    		ripple,
    		style,
    		role,
    		click,
    		value,
    		$$scope,
    		slots,
    		click_handler,
    		dblclick_handler
    	];
    }

    class ListItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$A, create_fragment$A, safe_not_equal, {
    			class: 1,
    			activeClass: 2,
    			value: 12,
    			active: 0,
    			dense: 3,
    			disabled: 4,
    			multiline: 5,
    			link: 6,
    			selectable: 7,
    			ripple: 8,
    			style: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ListItem",
    			options,
    			id: create_fragment$A.name
    		});
    	}

    	get class() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiline() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiline(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get link() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set link(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectable() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectable(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\List\ListItemGroup.svelte generated by Svelte v3.40.0 */

    // (22:0) <ItemGroup   class="s-list-item-group {klass}"   role="listbox"   bind:value   {activeClass}   {multiple}   {mandatory}   {max}   {style}>
    function create_default_slot$b(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], !current ? -1 : dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$b.name,
    		type: "slot",
    		source: "(22:0) <ItemGroup   class=\\\"s-list-item-group {klass}\\\"   role=\\\"listbox\\\"   bind:value   {activeClass}   {multiple}   {mandatory}   {max}   {style}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$z(ctx) {
    	let itemgroup;
    	let updating_value;
    	let current;

    	function itemgroup_value_binding(value) {
    		/*itemgroup_value_binding*/ ctx[8](value);
    	}

    	let itemgroup_props = {
    		class: "s-list-item-group " + /*klass*/ ctx[1],
    		role: "listbox",
    		activeClass: /*activeClass*/ ctx[2],
    		multiple: /*multiple*/ ctx[3],
    		mandatory: /*mandatory*/ ctx[4],
    		max: /*max*/ ctx[5],
    		style: /*style*/ ctx[6],
    		$$slots: { default: [create_default_slot$b] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		itemgroup_props.value = /*value*/ ctx[0];
    	}

    	itemgroup = new ItemGroup({ props: itemgroup_props, $$inline: true });
    	binding_callbacks.push(() => bind(itemgroup, 'value', itemgroup_value_binding));

    	const block = {
    		c: function create() {
    			create_component(itemgroup.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(itemgroup, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const itemgroup_changes = {};
    			if (dirty & /*klass*/ 2) itemgroup_changes.class = "s-list-item-group " + /*klass*/ ctx[1];
    			if (dirty & /*activeClass*/ 4) itemgroup_changes.activeClass = /*activeClass*/ ctx[2];
    			if (dirty & /*multiple*/ 8) itemgroup_changes.multiple = /*multiple*/ ctx[3];
    			if (dirty & /*mandatory*/ 16) itemgroup_changes.mandatory = /*mandatory*/ ctx[4];
    			if (dirty & /*max*/ 32) itemgroup_changes.max = /*max*/ ctx[5];
    			if (dirty & /*style*/ 64) itemgroup_changes.style = /*style*/ ctx[6];

    			if (dirty & /*$$scope*/ 512) {
    				itemgroup_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				itemgroup_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			itemgroup.$set(itemgroup_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(itemgroup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(itemgroup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(itemgroup, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ListItemGroup', slots, ['default']);
    	setContext('S_ListItemRole', 'option');
    	setContext('S_ListItemGroup', ITEM_GROUP);
    	let { class: klass = 'primary-text' } = $$props;
    	let { value = [] } = $$props;
    	let { activeClass = 'active' } = $$props;
    	let { multiple = false } = $$props;
    	let { mandatory = false } = $$props;
    	let { max = Infinity } = $$props;
    	let { style = null } = $$props;
    	const writable_props = ['class', 'value', 'activeClass', 'multiple', 'mandatory', 'max', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ListItemGroup> was created with unknown prop '${key}'`);
    	});

    	function itemgroup_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(1, klass = $$props.class);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('activeClass' in $$props) $$invalidate(2, activeClass = $$props.activeClass);
    		if ('multiple' in $$props) $$invalidate(3, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(4, mandatory = $$props.mandatory);
    		if ('max' in $$props) $$invalidate(5, max = $$props.max);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		setContext,
    		ItemGroup,
    		ITEM_GROUP,
    		klass,
    		value,
    		activeClass,
    		multiple,
    		mandatory,
    		max,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(1, klass = $$props.klass);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('activeClass' in $$props) $$invalidate(2, activeClass = $$props.activeClass);
    		if ('multiple' in $$props) $$invalidate(3, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(4, mandatory = $$props.mandatory);
    		if ('max' in $$props) $$invalidate(5, max = $$props.max);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		klass,
    		activeClass,
    		multiple,
    		mandatory,
    		max,
    		style,
    		slots,
    		itemgroup_value_binding,
    		$$scope
    	];
    }

    class ListItemGroup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$z, create_fragment$z, safe_not_equal, {
    			class: 1,
    			value: 0,
    			activeClass: 2,
    			multiple: 3,
    			mandatory: 4,
    			max: 5,
    			style: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ListItemGroup",
    			options,
    			id: create_fragment$z.name
    		});
    	}

    	get class() {
    		throw new Error("<ListItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ListItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ListItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ListItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<ListItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<ListItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<ListItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<ListItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mandatory() {
    		throw new Error("<ListItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mandatory(value) {
    		throw new Error("<ListItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<ListItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<ListItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ListItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ListItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Chip\Chip.svelte generated by Svelte v3.40.0 */
    const file$t = "node_modules\\svelte-materialify\\dist\\components\\Chip\\Chip.svelte";
    const get_close_icon_slot_changes = dirty => ({});
    const get_close_icon_slot_context = ctx => ({});

    // (189:0) {#if active}
    function create_if_block$g(ctx) {
    	let span;
    	let t;
    	let span_class_value;
    	let Ripple_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
    	let if_block = /*close*/ ctx[8] && create_if_block_1$5(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(span, "class", span_class_value = "s-chip " + /*klass*/ ctx[1] + " size-" + /*size*/ ctx[3]);
    			toggle_class(span, "outlined", /*outlined*/ ctx[4]);
    			toggle_class(span, "pill", /*pill*/ ctx[5]);
    			toggle_class(span, "link", /*link*/ ctx[6]);
    			toggle_class(span, "label", /*label*/ ctx[7]);
    			toggle_class(span, "selected", /*selected*/ ctx[2]);
    			add_location(span, file$t, 189, 2, 4007);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			append_dev(span, t);
    			if (if_block) if_block.m(span, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(Ripple_action = Ripple.call(null, span, /*link*/ ctx[6])),
    					listen_dev(span, "click", /*click_handler*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (/*close*/ ctx[8]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*close*/ 256) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$5(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(span, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*klass, size*/ 10 && span_class_value !== (span_class_value = "s-chip " + /*klass*/ ctx[1] + " size-" + /*size*/ ctx[3])) {
    				attr_dev(span, "class", span_class_value);
    			}

    			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*link*/ 64) Ripple_action.update.call(null, /*link*/ ctx[6]);

    			if (dirty & /*klass, size, outlined*/ 26) {
    				toggle_class(span, "outlined", /*outlined*/ ctx[4]);
    			}

    			if (dirty & /*klass, size, pill*/ 42) {
    				toggle_class(span, "pill", /*pill*/ ctx[5]);
    			}

    			if (dirty & /*klass, size, link*/ 74) {
    				toggle_class(span, "link", /*link*/ ctx[6]);
    			}

    			if (dirty & /*klass, size, label*/ 138) {
    				toggle_class(span, "label", /*label*/ ctx[7]);
    			}

    			if (dirty & /*klass, size, selected*/ 14) {
    				toggle_class(span, "selected", /*selected*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(189:0) {#if active}",
    		ctx
    	});

    	return block;
    }

    // (200:4) {#if close}
    function create_if_block_1$5(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const close_icon_slot_template = /*#slots*/ ctx[11]["close-icon"];
    	const close_icon_slot = create_slot(close_icon_slot_template, ctx, /*$$scope*/ ctx[10], get_close_icon_slot_context);
    	const close_icon_slot_or_fallback = close_icon_slot || fallback_block$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (close_icon_slot_or_fallback) close_icon_slot_or_fallback.c();
    			attr_dev(div, "class", "s-chip__close");
    			add_location(div, file$t, 200, 6, 4207);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (close_icon_slot_or_fallback) {
    				close_icon_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*onClose*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (close_icon_slot) {
    				if (close_icon_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot(close_icon_slot, close_icon_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, get_close_icon_slot_changes, get_close_icon_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(close_icon_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(close_icon_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (close_icon_slot_or_fallback) close_icon_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(200:4) {#if close}",
    		ctx
    	});

    	return block;
    }

    // (202:32)            
    function fallback_block$4(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { path: closeIcon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$4.name,
    		type: "fallback",
    		source: "(202:32)            ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*active*/ ctx[0] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*active*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*active*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Chip', slots, ['default','close-icon']);
    	let { class: klass = '' } = $$props;
    	let { active = true } = $$props;
    	let { selected = false } = $$props;
    	let { size = 'default' } = $$props;
    	let { outlined = false } = $$props;
    	let { pill = false } = $$props;
    	let { link = false } = $$props;
    	let { label = false } = $$props;
    	let { close = false } = $$props;
    	const dispatch = createEventDispatcher();

    	function onClose(e) {
    		$$invalidate(0, active = false);
    		dispatch('close', e);
    	}

    	const writable_props = [
    		'class',
    		'active',
    		'selected',
    		'size',
    		'outlined',
    		'pill',
    		'link',
    		'label',
    		'close'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Chip> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(1, klass = $$props.class);
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('outlined' in $$props) $$invalidate(4, outlined = $$props.outlined);
    		if ('pill' in $$props) $$invalidate(5, pill = $$props.pill);
    		if ('link' in $$props) $$invalidate(6, link = $$props.link);
    		if ('label' in $$props) $$invalidate(7, label = $$props.label);
    		if ('close' in $$props) $$invalidate(8, close = $$props.close);
    		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Ripple,
    		Icon,
    		closeIcon,
    		createEventDispatcher,
    		klass,
    		active,
    		selected,
    		size,
    		outlined,
    		pill,
    		link,
    		label,
    		close,
    		dispatch,
    		onClose
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(1, klass = $$props.klass);
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('outlined' in $$props) $$invalidate(4, outlined = $$props.outlined);
    		if ('pill' in $$props) $$invalidate(5, pill = $$props.pill);
    		if ('link' in $$props) $$invalidate(6, link = $$props.link);
    		if ('label' in $$props) $$invalidate(7, label = $$props.label);
    		if ('close' in $$props) $$invalidate(8, close = $$props.close);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		active,
    		klass,
    		selected,
    		size,
    		outlined,
    		pill,
    		link,
    		label,
    		close,
    		onClose,
    		$$scope,
    		slots,
    		click_handler
    	];
    }

    class Chip extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$y, create_fragment$y, safe_not_equal, {
    			class: 1,
    			active: 0,
    			selected: 2,
    			size: 3,
    			outlined: 4,
    			pill: 5,
    			link: 6,
    			label: 7,
    			close: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Chip",
    			options,
    			id: create_fragment$y.name
    		});
    	}

    	get class() {
    		throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pill() {
    		throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pill(value) {
    		throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get link() {
    		throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set link(value) {
    		throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get close() {
    		throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set close(value) {
    		throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Checkbox\Checkbox.svelte generated by Svelte v3.40.0 */
    const file$s = "node_modules\\svelte-materialify\\dist\\components\\Checkbox\\Checkbox.svelte";

    // (178:6) {#if checked || indeterminate}
    function create_if_block$f(ctx) {
    	let svg;
    	let path;
    	let path_d_value;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", path_d_value = /*checked*/ ctx[0] ? check : dash);
    			add_location(path, file$s, 183, 10, 4208);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$s, 178, 8, 4069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*checked*/ 1 && path_d_value !== (path_d_value = /*checked*/ ctx[0] ? check : dash)) {
    				attr_dev(path, "d", path_d_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(178:6) {#if checked || indeterminate}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$x(ctx) {
    	let div2;
    	let div1;
    	let input;
    	let t0;
    	let div0;
    	let div1_class_value;
    	let TextColor_action;
    	let t1;
    	let label;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = (/*checked*/ ctx[0] || /*indeterminate*/ ctx[1]) && create_if_block$f(ctx);
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			input = element("input");
    			t0 = space();
    			div0 = element("div");
    			if (if_block) if_block.c();
    			t1 = space();
    			label = element("label");
    			if (default_slot) default_slot.c();
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "role", "checkbox");
    			attr_dev(input, "aria-checked", /*checked*/ ctx[0]);
    			attr_dev(input, "id", /*id*/ ctx[2]);
    			input.disabled = /*disabled*/ ctx[6];
    			input.__value = /*value*/ ctx[7];
    			input.value = input.__value;
    			if (/*checked*/ ctx[0] === void 0 || /*indeterminate*/ ctx[1] === void 0) add_render_callback(() => /*input_change_handler*/ ctx[16].call(input));
    			add_location(input, file$s, 164, 4, 3704);
    			attr_dev(div0, "class", "s-checkbox__background");
    			attr_dev(div0, "aria-hidden", "true");
    			add_location(div0, file$s, 176, 4, 3966);
    			attr_dev(div1, "class", div1_class_value = "s-checkbox__wrapper " + /*klass*/ ctx[4]);
    			toggle_class(div1, "disabled", /*disabled*/ ctx[6]);
    			add_location(div1, file$s, 159, 2, 3533);
    			attr_dev(label, "for", /*id*/ ctx[2]);
    			add_location(label, file$s, 188, 2, 4298);
    			attr_dev(div2, "class", "s-checkbox");
    			attr_dev(div2, "style", /*style*/ ctx[8]);
    			add_location(div2, file$s, 158, 0, 3497);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, input);
    			/*input_binding*/ ctx[15](input);
    			input.checked = /*checked*/ ctx[0];
    			input.indeterminate = /*indeterminate*/ ctx[1];
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			if (if_block) if_block.m(div0, null);
    			append_dev(div2, t1);
    			append_dev(div2, label);

    			if (default_slot) {
    				default_slot.m(label, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*input_change_handler*/ ctx[16]),
    					listen_dev(input, "change", /*groupUpdate*/ ctx[9], false, false, false),
    					listen_dev(input, "change", /*change_handler*/ ctx[14], false, false, false),
    					action_destroyer(Ripple.call(null, div1, { centered: true })),
    					action_destroyer(TextColor_action = TextColor.call(null, div1, /*checked*/ ctx[0] || /*indeterminate*/ ctx[1]
    					? /*color*/ ctx[5]
    					: false))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*checked*/ 1) {
    				attr_dev(input, "aria-checked", /*checked*/ ctx[0]);
    			}

    			if (!current || dirty & /*id*/ 4) {
    				attr_dev(input, "id", /*id*/ ctx[2]);
    			}

    			if (!current || dirty & /*disabled*/ 64) {
    				prop_dev(input, "disabled", /*disabled*/ ctx[6]);
    			}

    			if (!current || dirty & /*value*/ 128) {
    				prop_dev(input, "__value", /*value*/ ctx[7]);
    				input.value = input.__value;
    			}

    			if (dirty & /*checked*/ 1) {
    				input.checked = /*checked*/ ctx[0];
    			}

    			if (dirty & /*indeterminate*/ 2) {
    				input.indeterminate = /*indeterminate*/ ctx[1];
    			}

    			if (/*checked*/ ctx[0] || /*indeterminate*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$f(ctx);
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (!current || dirty & /*klass*/ 16 && div1_class_value !== (div1_class_value = "s-checkbox__wrapper " + /*klass*/ ctx[4])) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (TextColor_action && is_function(TextColor_action.update) && dirty & /*checked, indeterminate, color*/ 35) TextColor_action.update.call(null, /*checked*/ ctx[0] || /*indeterminate*/ ctx[1]
    			? /*color*/ ctx[5]
    			: false);

    			if (dirty & /*klass, disabled*/ 80) {
    				toggle_class(div1, "disabled", /*disabled*/ ctx[6]);
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*id*/ 4) {
    				attr_dev(label, "for", /*id*/ ctx[2]);
    			}

    			if (!current || dirty & /*style*/ 256) {
    				attr_dev(div2, "style", /*style*/ ctx[8]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			/*input_binding*/ ctx[15](null);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const check = 'M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z';
    const dash = 'M4,11L4,13L20,13L20,11L4,11Z';

    function instance$x($$self, $$props, $$invalidate) {
    	let hasValidGroup;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Checkbox', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { color = 'primary' } = $$props;
    	let { checked = false } = $$props;
    	let { indeterminate = false } = $$props;
    	let { disabled = false } = $$props;
    	let { value = null } = $$props;
    	let { group = null } = $$props;
    	let { id = null } = $$props;
    	let { style = null } = $$props;
    	let { inputElement = null } = $$props;
    	id = id || `s-checkbox-${uid(5)}`;

    	function groupUpdate() {
    		if (hasValidGroup && value != null) {
    			const i = group.indexOf(value);

    			if (i < 0) {
    				group.push(value);
    			} else {
    				group.splice(i, 1);
    			}

    			$$invalidate(10, group);
    		}
    	}

    	const writable_props = [
    		'class',
    		'color',
    		'checked',
    		'indeterminate',
    		'disabled',
    		'value',
    		'group',
    		'id',
    		'style',
    		'inputElement'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Checkbox> was created with unknown prop '${key}'`);
    	});

    	function change_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			inputElement = $$value;
    			$$invalidate(3, inputElement);
    		});
    	}

    	function input_change_handler() {
    		checked = this.checked;
    		indeterminate = this.indeterminate;
    		((($$invalidate(0, checked), $$invalidate(11, hasValidGroup)), $$invalidate(7, value)), $$invalidate(10, group));
    		$$invalidate(1, indeterminate);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(4, klass = $$props.class);
    		if ('color' in $$props) $$invalidate(5, color = $$props.color);
    		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
    		if ('indeterminate' in $$props) $$invalidate(1, indeterminate = $$props.indeterminate);
    		if ('disabled' in $$props) $$invalidate(6, disabled = $$props.disabled);
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('group' in $$props) $$invalidate(10, group = $$props.group);
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    		if ('style' in $$props) $$invalidate(8, style = $$props.style);
    		if ('inputElement' in $$props) $$invalidate(3, inputElement = $$props.inputElement);
    		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		uid,
    		check,
    		dash,
    		Ripple,
    		TextColor,
    		klass,
    		color,
    		checked,
    		indeterminate,
    		disabled,
    		value,
    		group,
    		id,
    		style,
    		inputElement,
    		groupUpdate,
    		hasValidGroup
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(4, klass = $$props.klass);
    		if ('color' in $$props) $$invalidate(5, color = $$props.color);
    		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
    		if ('indeterminate' in $$props) $$invalidate(1, indeterminate = $$props.indeterminate);
    		if ('disabled' in $$props) $$invalidate(6, disabled = $$props.disabled);
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('group' in $$props) $$invalidate(10, group = $$props.group);
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    		if ('style' in $$props) $$invalidate(8, style = $$props.style);
    		if ('inputElement' in $$props) $$invalidate(3, inputElement = $$props.inputElement);
    		if ('hasValidGroup' in $$props) $$invalidate(11, hasValidGroup = $$props.hasValidGroup);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*group*/ 1024) {
    			$$invalidate(11, hasValidGroup = Array.isArray(group));
    		}

    		if ($$self.$$.dirty & /*hasValidGroup, value, group*/ 3200) {
    			if (hasValidGroup && value != null) {
    				$$invalidate(0, checked = group.indexOf(value) >= 0);
    			}
    		}
    	};

    	return [
    		checked,
    		indeterminate,
    		id,
    		inputElement,
    		klass,
    		color,
    		disabled,
    		value,
    		style,
    		groupUpdate,
    		group,
    		hasValidGroup,
    		$$scope,
    		slots,
    		change_handler,
    		input_binding,
    		input_change_handler
    	];
    }

    class Checkbox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$x, create_fragment$x, safe_not_equal, {
    			class: 4,
    			color: 5,
    			checked: 0,
    			indeterminate: 1,
    			disabled: 6,
    			value: 7,
    			group: 10,
    			id: 2,
    			style: 8,
    			inputElement: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Checkbox",
    			options,
    			id: create_fragment$x.name
    		});
    	}

    	get class() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get checked() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checked(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indeterminate() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indeterminate(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get group() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set group(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputElement() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputElement(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var down = 'M7,10L12,15L17,10H7Z';

    /* node_modules\svelte-materialify\dist\components\Select\Select.svelte generated by Svelte v3.40.0 */
    const file$r = "node_modules\\svelte-materialify\\dist\\components\\Select\\Select.svelte";

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[28] = list[i];
    	return child_ctx;
    }

    const get_item_slot_changes = dirty => ({ item: dirty & /*items*/ 8 });
    const get_item_slot_context = ctx => ({ item: /*item*/ ctx[28] });
    const get_prepend_outer_slot_changes = dirty => ({});
    const get_prepend_outer_slot_context = ctx => ({ slot: "prepend-outer" });

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[25] = list[i];
    	return child_ctx;
    }

    const get_append_outer_slot_changes = dirty => ({});
    const get_append_outer_slot_context = ctx => ({ slot: "append-outer" });

    // (100:10) <ListItem {dense} value={item.value ? item.value : item}>
    function create_default_slot_4$4(ctx) {
    	let t_value = (/*item*/ ctx[28].name
    	? /*item*/ ctx[28].name
    	: /*item*/ ctx[28]) + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*items*/ 8 && t_value !== (t_value = (/*item*/ ctx[28].name
    			? /*item*/ ctx[28].name
    			: /*item*/ ctx[28]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$4.name,
    		type: "slot",
    		source: "(100:10) <ListItem {dense} value={item.value ? item.value : item}>",
    		ctx
    	});

    	return block;
    }

    // (102:14) {#if multiple}
    function create_if_block_1$4(ctx) {
    	let checkbox;
    	let current;

    	checkbox = new Checkbox({
    			props: {
    				checked: /*value*/ ctx[0].includes(/*item*/ ctx[28].value
    				? /*item*/ ctx[28].value
    				: /*item*/ ctx[28])
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(checkbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(checkbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const checkbox_changes = {};

    			if (dirty & /*value, items*/ 9) checkbox_changes.checked = /*value*/ ctx[0].includes(/*item*/ ctx[28].value
    			? /*item*/ ctx[28].value
    			: /*item*/ ctx[28]);

    			checkbox.$set(checkbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(checkbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(checkbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(checkbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(102:14) {#if multiple}",
    		ctx
    	});

    	return block;
    }

    // (101:12) 
    function create_prepend_slot$1(ctx) {
    	let span;
    	let current;
    	let if_block = /*multiple*/ ctx[11] && create_if_block_1$4(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (if_block) if_block.c();
    			attr_dev(span, "slot", "prepend");
    			add_location(span, file$r, 100, 12, 3149);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			if (if_block) if_block.m(span, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*multiple*/ ctx[11]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*multiple*/ 2048) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(span, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_prepend_slot$1.name,
    		type: "slot",
    		source: "(101:12) ",
    		ctx
    	});

    	return block;
    }

    // (99:33)             
    function fallback_block$3(ctx) {
    	let listitem;
    	let t;
    	let current;

    	listitem = new ListItem({
    			props: {
    				dense: /*dense*/ ctx[7],
    				value: /*item*/ ctx[28].value
    				? /*item*/ ctx[28].value
    				: /*item*/ ctx[28],
    				$$slots: {
    					prepend: [create_prepend_slot$1],
    					default: [create_default_slot_4$4]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(listitem.$$.fragment);
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(listitem, target, anchor);
    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const listitem_changes = {};
    			if (dirty & /*dense*/ 128) listitem_changes.dense = /*dense*/ ctx[7];

    			if (dirty & /*items*/ 8) listitem_changes.value = /*item*/ ctx[28].value
    			? /*item*/ ctx[28].value
    			: /*item*/ ctx[28];

    			if (dirty & /*$$scope, value, items, multiple*/ 8390665) {
    				listitem_changes.$$scope = { dirty, ctx };
    			}

    			listitem.$set(listitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(listitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(listitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(listitem, detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$3.name,
    		type: "fallback",
    		source: "(99:33)             ",
    		ctx
    	});

    	return block;
    }

    // (98:6) {#each items as item}
    function create_each_block_1$1(ctx) {
    	let current;
    	const item_slot_template = /*#slots*/ ctx[19].item;
    	const item_slot = create_slot(item_slot_template, ctx, /*$$scope*/ ctx[23], get_item_slot_context);
    	const item_slot_or_fallback = item_slot || fallback_block$3(ctx);

    	const block = {
    		c: function create() {
    			if (item_slot_or_fallback) item_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (item_slot_or_fallback) {
    				item_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (item_slot) {
    				if (item_slot.p && (!current || dirty & /*$$scope, items*/ 8388616)) {
    					update_slot(item_slot, item_slot_template, ctx, /*$$scope*/ ctx[23], !current ? -1 : dirty, get_item_slot_changes, get_item_slot_context);
    				}
    			} else {
    				if (item_slot_or_fallback && item_slot_or_fallback.p && (!current || dirty & /*dense, items, value, multiple*/ 2185)) {
    					item_slot_or_fallback.p(ctx, !current ? -1 : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (item_slot_or_fallback) item_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(98:6) {#each items as item}",
    		ctx
    	});

    	return block;
    }

    // (97:4) <ListItemGroup bind:value {mandatory} {multiple} {max}>
    function create_default_slot_3$5(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_1 = /*items*/ ctx[3];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*dense, items, value, multiple, $$scope*/ 8390793) {
    				each_value_1 = /*items*/ ctx[3];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$5.name,
    		type: "slot",
    		source: "(97:4) <ListItemGroup bind:value {mandatory} {multiple} {max}>",
    		ctx
    	});

    	return block;
    }

    // (67:2) <Menu offsetY={false} bind:active {disabled} {closeOnClick}>
    function create_default_slot_2$5(ctx) {
    	let listitemgroup;
    	let updating_value;
    	let current;

    	function listitemgroup_value_binding(value) {
    		/*listitemgroup_value_binding*/ ctx[21](value);
    	}

    	let listitemgroup_props = {
    		mandatory: /*mandatory*/ ctx[10],
    		multiple: /*multiple*/ ctx[11],
    		max: /*max*/ ctx[12],
    		$$slots: { default: [create_default_slot_3$5] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		listitemgroup_props.value = /*value*/ ctx[0];
    	}

    	listitemgroup = new ListItemGroup({
    			props: listitemgroup_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(listitemgroup, 'value', listitemgroup_value_binding));

    	const block = {
    		c: function create() {
    			create_component(listitemgroup.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(listitemgroup, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const listitemgroup_changes = {};
    			if (dirty & /*mandatory*/ 1024) listitemgroup_changes.mandatory = /*mandatory*/ ctx[10];
    			if (dirty & /*multiple*/ 2048) listitemgroup_changes.multiple = /*multiple*/ ctx[11];
    			if (dirty & /*max*/ 4096) listitemgroup_changes.max = /*max*/ ctx[12];

    			if (dirty & /*$$scope, items, dense, value, multiple*/ 8390793) {
    				listitemgroup_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				listitemgroup_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			listitemgroup.$set(listitemgroup_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(listitemgroup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(listitemgroup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(listitemgroup, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$5.name,
    		type: "slot",
    		source: "(67:2) <Menu offsetY={false} bind:active {disabled} {closeOnClick}>",
    		ctx
    	});

    	return block;
    }

    // (69:6) <TextField          {filled}          {outlined}          {solo}          {dense}          {disabled}          value={items && format(value)}          {placeholder}          {hint}          readonly>
    function create_default_slot_1$7(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[19].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[23], !current ? -1 : dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$7.name,
    		type: "slot",
    		source: "(69:6) <TextField          {filled}          {outlined}          {solo}          {dense}          {disabled}          value={items && format(value)}          {placeholder}          {hint}          readonly>",
    		ctx
    	});

    	return block;
    }

    // (79:8) 
    function create_prepend_outer_slot(ctx) {
    	let current;
    	const prepend_outer_slot_template = /*#slots*/ ctx[19]["prepend-outer"];
    	const prepend_outer_slot = create_slot(prepend_outer_slot_template, ctx, /*$$scope*/ ctx[23], get_prepend_outer_slot_context);

    	const block = {
    		c: function create() {
    			if (prepend_outer_slot) prepend_outer_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (prepend_outer_slot) {
    				prepend_outer_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (prepend_outer_slot) {
    				if (prepend_outer_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
    					update_slot(prepend_outer_slot, prepend_outer_slot_template, ctx, /*$$scope*/ ctx[23], !current ? -1 : dirty, get_prepend_outer_slot_changes, get_prepend_outer_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_outer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_outer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (prepend_outer_slot) prepend_outer_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_prepend_outer_slot.name,
    		type: "slot",
    		source: "(79:8) ",
    		ctx
    	});

    	return block;
    }

    // (83:10) {#if chips && value}
    function create_if_block$e(ctx) {
    	let span;
    	let current;

    	let each_value = Array.isArray(/*value*/ ctx[0])
    	? /*value*/ ctx[0].map(/*func*/ ctx[20])
    	: [/*getSelectString*/ ctx[17](/*value*/ ctx[0])];

    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			span = element("span");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span, "class", "s-select__chips");
    			add_location(span, file$r, 83, 12, 2480);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(span, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*Array, value, getSelectString*/ 131073) {
    				each_value = Array.isArray(/*value*/ ctx[0])
    				? /*value*/ ctx[0].map(/*func*/ ctx[20])
    				: [/*getSelectString*/ ctx[17](/*value*/ ctx[0])];

    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(span, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(83:10) {#if chips && value}",
    		ctx
    	});

    	return block;
    }

    // (86:16) <Chip>
    function create_default_slot$a(ctx) {
    	let t_value = /*val*/ ctx[25] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*value*/ 1 && t_value !== (t_value = /*val*/ ctx[25] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$a.name,
    		type: "slot",
    		source: "(86:16) <Chip>",
    		ctx
    	});

    	return block;
    }

    // (85:14) {#each Array.isArray(value) ? value.map((v) => getSelectString(v)) : [getSelectString(value)] as val}
    function create_each_block$9(ctx) {
    	let chip;
    	let current;

    	chip = new Chip({
    			props: {
    				$$slots: { default: [create_default_slot$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(chip.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(chip, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const chip_changes = {};

    			if (dirty & /*$$scope, value*/ 8388609) {
    				chip_changes.$$scope = { dirty, ctx };
    			}

    			chip.$set(chip_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(chip.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(chip.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(chip, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(85:14) {#each Array.isArray(value) ? value.map((v) => getSelectString(v)) : [getSelectString(value)] as val}",
    		ctx
    	});

    	return block;
    }

    // (82:8) 
    function create_content_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*chips*/ ctx[13] && /*value*/ ctx[0] && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "content");
    			add_location(div, file$r, 81, 8, 2414);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*chips*/ ctx[13] && /*value*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*chips, value*/ 8193) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot.name,
    		type: "slot",
    		source: "(82:8) ",
    		ctx
    	});

    	return block;
    }

    // (91:8) 
    function create_append_slot(ctx) {
    	let span;
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				path: down,
    				rotate: /*active*/ ctx[1] ? 180 : 0
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(icon.$$.fragment);
    			attr_dev(span, "slot", "append");
    			add_location(span, file$r, 90, 8, 2750);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(icon, span, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*active*/ 2) icon_changes.rotate = /*active*/ ctx[1] ? 180 : 0;
    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(icon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_append_slot.name,
    		type: "slot",
    		source: "(91:8) ",
    		ctx
    	});

    	return block;
    }

    // (94:8) 
    function create_append_outer_slot(ctx) {
    	let current;
    	const append_outer_slot_template = /*#slots*/ ctx[19]["append-outer"];
    	const append_outer_slot = create_slot(append_outer_slot_template, ctx, /*$$scope*/ ctx[23], get_append_outer_slot_context);

    	const block = {
    		c: function create() {
    			if (append_outer_slot) append_outer_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (append_outer_slot) {
    				append_outer_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (append_outer_slot) {
    				if (append_outer_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
    					update_slot(append_outer_slot, append_outer_slot_template, ctx, /*$$scope*/ ctx[23], !current ? -1 : dirty, get_append_outer_slot_changes, get_append_outer_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(append_outer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(append_outer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (append_outer_slot) append_outer_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_append_outer_slot.name,
    		type: "slot",
    		source: "(94:8) ",
    		ctx
    	});

    	return block;
    }

    // (68:4) 
    function create_activator_slot(ctx) {
    	let span;
    	let textfield;
    	let current;

    	textfield = new TextField({
    			props: {
    				filled: /*filled*/ ctx[4],
    				outlined: /*outlined*/ ctx[5],
    				solo: /*solo*/ ctx[6],
    				dense: /*dense*/ ctx[7],
    				disabled: /*disabled*/ ctx[14],
    				value: /*items*/ ctx[3] && /*format*/ ctx[16](/*value*/ ctx[0]),
    				placeholder: /*placeholder*/ ctx[8],
    				hint: /*hint*/ ctx[9],
    				readonly: true,
    				$$slots: {
    					"append-outer": [create_append_outer_slot],
    					append: [create_append_slot],
    					content: [create_content_slot],
    					"prepend-outer": [create_prepend_outer_slot],
    					default: [create_default_slot_1$7]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(textfield.$$.fragment);
    			attr_dev(span, "slot", "activator");
    			add_location(span, file$r, 67, 4, 2094);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(textfield, span, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*filled*/ 16) textfield_changes.filled = /*filled*/ ctx[4];
    			if (dirty & /*outlined*/ 32) textfield_changes.outlined = /*outlined*/ ctx[5];
    			if (dirty & /*solo*/ 64) textfield_changes.solo = /*solo*/ ctx[6];
    			if (dirty & /*dense*/ 128) textfield_changes.dense = /*dense*/ ctx[7];
    			if (dirty & /*disabled*/ 16384) textfield_changes.disabled = /*disabled*/ ctx[14];
    			if (dirty & /*items, format, value*/ 65545) textfield_changes.value = /*items*/ ctx[3] && /*format*/ ctx[16](/*value*/ ctx[0]);
    			if (dirty & /*placeholder*/ 256) textfield_changes.placeholder = /*placeholder*/ ctx[8];
    			if (dirty & /*hint*/ 512) textfield_changes.hint = /*hint*/ ctx[9];

    			if (dirty & /*$$scope, active, value, chips*/ 8396803) {
    				textfield_changes.$$scope = { dirty, ctx };
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(textfield);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_activator_slot.name,
    		type: "slot",
    		source: "(68:4) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$w(ctx) {
    	let div;
    	let menu;
    	let updating_active;
    	let div_class_value;
    	let current;

    	function menu_active_binding(value) {
    		/*menu_active_binding*/ ctx[22](value);
    	}

    	let menu_props = {
    		offsetY: false,
    		disabled: /*disabled*/ ctx[14],
    		closeOnClick: /*closeOnClick*/ ctx[15],
    		$$slots: {
    			activator: [create_activator_slot],
    			default: [create_default_slot_2$5]
    		},
    		$$scope: { ctx }
    	};

    	if (/*active*/ ctx[1] !== void 0) {
    		menu_props.active = /*active*/ ctx[1];
    	}

    	menu = new Menu({ props: menu_props, $$inline: true });
    	binding_callbacks.push(() => bind(menu, 'active', menu_active_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(menu.$$.fragment);
    			attr_dev(div, "class", div_class_value = "s-select " + /*klass*/ ctx[2]);
    			toggle_class(div, "disabled", /*disabled*/ ctx[14]);
    			toggle_class(div, "chips", /*chips*/ ctx[13]);
    			add_location(div, file$r, 65, 0, 1967);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(menu, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const menu_changes = {};
    			if (dirty & /*disabled*/ 16384) menu_changes.disabled = /*disabled*/ ctx[14];
    			if (dirty & /*closeOnClick*/ 32768) menu_changes.closeOnClick = /*closeOnClick*/ ctx[15];

    			if (dirty & /*$$scope, filled, outlined, solo, dense, disabled, items, format, value, placeholder, hint, active, chips, mandatory, multiple, max*/ 8486907) {
    				menu_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_active && dirty & /*active*/ 2) {
    				updating_active = true;
    				menu_changes.active = /*active*/ ctx[1];
    				add_flush_callback(() => updating_active = false);
    			}

    			menu.$set(menu_changes);

    			if (!current || dirty & /*klass*/ 4 && div_class_value !== (div_class_value = "s-select " + /*klass*/ ctx[2])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (dirty & /*klass, disabled*/ 16388) {
    				toggle_class(div, "disabled", /*disabled*/ ctx[14]);
    			}

    			if (dirty & /*klass, chips*/ 8196) {
    				toggle_class(div, "chips", /*chips*/ ctx[13]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(menu);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Select', slots, ['append-outer','prepend-outer','default','item']);
    	let { class: klass = '' } = $$props;
    	let { active = false } = $$props;
    	let { value = [] } = $$props;
    	let { items = [] } = $$props;
    	let { filled = false } = $$props;
    	let { outlined = false } = $$props;
    	let { solo = false } = $$props;
    	let { dense = false } = $$props;
    	let { placeholder = null } = $$props;
    	let { hint = '' } = $$props;
    	let { mandatory = false } = $$props;
    	let { multiple = false } = $$props;
    	let { max = Infinity } = $$props;
    	let { chips = false } = $$props;
    	let { disabled = null } = $$props;
    	let { closeOnClick = !multiple } = $$props;
    	let { emptyString = '' } = $$props;

    	const getSelectString = v => {
    		// We could also use `return items[0].value ? find.. : v` or provide a `basic` prop
    		const item = items.find(i => i.value === v);

    		return item ? item.name ? item.name : item : v || emptyString;
    	};

    	let { format = val => Array.isArray(val)
    	? val.map(v => getSelectString(v)).join(', ')
    	: getSelectString(val) } = $$props;

    	const dispatch = createEventDispatcher();

    	const writable_props = [
    		'class',
    		'active',
    		'value',
    		'items',
    		'filled',
    		'outlined',
    		'solo',
    		'dense',
    		'placeholder',
    		'hint',
    		'mandatory',
    		'multiple',
    		'max',
    		'chips',
    		'disabled',
    		'closeOnClick',
    		'emptyString',
    		'format'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Select> was created with unknown prop '${key}'`);
    	});

    	const func = v => getSelectString(v);

    	function listitemgroup_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	function menu_active_binding(value) {
    		active = value;
    		$$invalidate(1, active);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(2, klass = $$props.class);
    		if ('active' in $$props) $$invalidate(1, active = $$props.active);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('items' in $$props) $$invalidate(3, items = $$props.items);
    		if ('filled' in $$props) $$invalidate(4, filled = $$props.filled);
    		if ('outlined' in $$props) $$invalidate(5, outlined = $$props.outlined);
    		if ('solo' in $$props) $$invalidate(6, solo = $$props.solo);
    		if ('dense' in $$props) $$invalidate(7, dense = $$props.dense);
    		if ('placeholder' in $$props) $$invalidate(8, placeholder = $$props.placeholder);
    		if ('hint' in $$props) $$invalidate(9, hint = $$props.hint);
    		if ('mandatory' in $$props) $$invalidate(10, mandatory = $$props.mandatory);
    		if ('multiple' in $$props) $$invalidate(11, multiple = $$props.multiple);
    		if ('max' in $$props) $$invalidate(12, max = $$props.max);
    		if ('chips' in $$props) $$invalidate(13, chips = $$props.chips);
    		if ('disabled' in $$props) $$invalidate(14, disabled = $$props.disabled);
    		if ('closeOnClick' in $$props) $$invalidate(15, closeOnClick = $$props.closeOnClick);
    		if ('emptyString' in $$props) $$invalidate(18, emptyString = $$props.emptyString);
    		if ('format' in $$props) $$invalidate(16, format = $$props.format);
    		if ('$$scope' in $$props) $$invalidate(23, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		TextField,
    		Menu,
    		ListItemGroup,
    		ListItem,
    		Chip,
    		Checkbox,
    		Icon,
    		DOWN_ICON: down,
    		klass,
    		active,
    		value,
    		items,
    		filled,
    		outlined,
    		solo,
    		dense,
    		placeholder,
    		hint,
    		mandatory,
    		multiple,
    		max,
    		chips,
    		disabled,
    		closeOnClick,
    		emptyString,
    		getSelectString,
    		format,
    		dispatch
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(2, klass = $$props.klass);
    		if ('active' in $$props) $$invalidate(1, active = $$props.active);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('items' in $$props) $$invalidate(3, items = $$props.items);
    		if ('filled' in $$props) $$invalidate(4, filled = $$props.filled);
    		if ('outlined' in $$props) $$invalidate(5, outlined = $$props.outlined);
    		if ('solo' in $$props) $$invalidate(6, solo = $$props.solo);
    		if ('dense' in $$props) $$invalidate(7, dense = $$props.dense);
    		if ('placeholder' in $$props) $$invalidate(8, placeholder = $$props.placeholder);
    		if ('hint' in $$props) $$invalidate(9, hint = $$props.hint);
    		if ('mandatory' in $$props) $$invalidate(10, mandatory = $$props.mandatory);
    		if ('multiple' in $$props) $$invalidate(11, multiple = $$props.multiple);
    		if ('max' in $$props) $$invalidate(12, max = $$props.max);
    		if ('chips' in $$props) $$invalidate(13, chips = $$props.chips);
    		if ('disabled' in $$props) $$invalidate(14, disabled = $$props.disabled);
    		if ('closeOnClick' in $$props) $$invalidate(15, closeOnClick = $$props.closeOnClick);
    		if ('emptyString' in $$props) $$invalidate(18, emptyString = $$props.emptyString);
    		if ('format' in $$props) $$invalidate(16, format = $$props.format);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 1) {
    			dispatch('change', value);
    		}
    	};

    	return [
    		value,
    		active,
    		klass,
    		items,
    		filled,
    		outlined,
    		solo,
    		dense,
    		placeholder,
    		hint,
    		mandatory,
    		multiple,
    		max,
    		chips,
    		disabled,
    		closeOnClick,
    		format,
    		getSelectString,
    		emptyString,
    		slots,
    		func,
    		listitemgroup_value_binding,
    		menu_active_binding,
    		$$scope
    	];
    }

    class Select extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {
    			class: 2,
    			active: 1,
    			value: 0,
    			items: 3,
    			filled: 4,
    			outlined: 5,
    			solo: 6,
    			dense: 7,
    			placeholder: 8,
    			hint: 9,
    			mandatory: 10,
    			multiple: 11,
    			max: 12,
    			chips: 13,
    			disabled: 14,
    			closeOnClick: 15,
    			emptyString: 18,
    			format: 16
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Select",
    			options,
    			id: create_fragment$w.name
    		});
    	}

    	get class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get items() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filled() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filled(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get solo() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set solo(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hint() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hint(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mandatory() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mandatory(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get chips() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set chips(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeOnClick() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeOnClick(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get emptyString() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set emptyString(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get format() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set format(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Divider\Divider.svelte generated by Svelte v3.40.0 */

    const file$q = "node_modules\\svelte-materialify\\dist\\components\\Divider\\Divider.svelte";

    function create_fragment$v(ctx) {
    	let hr;
    	let hr_class_value;
    	let hr_aria_orientation_value;

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			attr_dev(hr, "class", hr_class_value = "s-divider " + /*klass*/ ctx[0] + " svelte-228x9f");
    			attr_dev(hr, "role", "separator");
    			attr_dev(hr, "aria-orientation", hr_aria_orientation_value = /*vertical*/ ctx[2] ? 'vertical' : 'horizontal');
    			attr_dev(hr, "style", /*style*/ ctx[3]);
    			toggle_class(hr, "inset", /*inset*/ ctx[1]);
    			toggle_class(hr, "vertical", /*vertical*/ ctx[2]);
    			add_location(hr, file$q, 44, 0, 829);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*klass*/ 1 && hr_class_value !== (hr_class_value = "s-divider " + /*klass*/ ctx[0] + " svelte-228x9f")) {
    				attr_dev(hr, "class", hr_class_value);
    			}

    			if (dirty & /*vertical*/ 4 && hr_aria_orientation_value !== (hr_aria_orientation_value = /*vertical*/ ctx[2] ? 'vertical' : 'horizontal')) {
    				attr_dev(hr, "aria-orientation", hr_aria_orientation_value);
    			}

    			if (dirty & /*style*/ 8) {
    				attr_dev(hr, "style", /*style*/ ctx[3]);
    			}

    			if (dirty & /*klass, inset*/ 3) {
    				toggle_class(hr, "inset", /*inset*/ ctx[1]);
    			}

    			if (dirty & /*klass, vertical*/ 5) {
    				toggle_class(hr, "vertical", /*vertical*/ ctx[2]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Divider', slots, []);
    	let { class: klass = '' } = $$props;
    	let { inset = false } = $$props;
    	let { vertical = false } = $$props;
    	let { style = null } = $$props;
    	const writable_props = ['class', 'inset', 'vertical', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Divider> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('inset' in $$props) $$invalidate(1, inset = $$props.inset);
    		if ('vertical' in $$props) $$invalidate(2, vertical = $$props.vertical);
    		if ('style' in $$props) $$invalidate(3, style = $$props.style);
    	};

    	$$self.$capture_state = () => ({ klass, inset, vertical, style });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('inset' in $$props) $$invalidate(1, inset = $$props.inset);
    		if ('vertical' in $$props) $$invalidate(2, vertical = $$props.vertical);
    		if ('style' in $$props) $$invalidate(3, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, inset, vertical, style];
    }

    class Divider extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {
    			class: 0,
    			inset: 1,
    			vertical: 2,
    			style: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Divider",
    			options,
    			id: create_fragment$v.name
    		});
    	}

    	get class() {
    		throw new Error("<Divider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Divider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inset() {
    		throw new Error("<Divider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inset(value) {
    		throw new Error("<Divider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vertical() {
    		throw new Error("<Divider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vertical(value) {
    		throw new Error("<Divider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Divider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Divider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\ExpansionPanels\ExpansionPanels.svelte generated by Svelte v3.40.0 */
    const file$p = "node_modules\\svelte-materialify\\dist\\components\\ExpansionPanels\\ExpansionPanels.svelte";

    function create_fragment$u(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-expansion-panels " + /*klass*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[6]);
    			toggle_class(div, "accordion", /*accordion*/ ctx[1]);
    			toggle_class(div, "popout", /*popout*/ ctx[2]);
    			toggle_class(div, "inset", /*inset*/ ctx[3]);
    			toggle_class(div, "flat", /*flat*/ ctx[4]);
    			toggle_class(div, "tile", /*tile*/ ctx[5]);
    			add_location(div, file$p, 148, 0, 3668);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-expansion-panels " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 64) {
    				attr_dev(div, "style", /*style*/ ctx[6]);
    			}

    			if (dirty & /*klass, accordion*/ 3) {
    				toggle_class(div, "accordion", /*accordion*/ ctx[1]);
    			}

    			if (dirty & /*klass, popout*/ 5) {
    				toggle_class(div, "popout", /*popout*/ ctx[2]);
    			}

    			if (dirty & /*klass, inset*/ 9) {
    				toggle_class(div, "inset", /*inset*/ ctx[3]);
    			}

    			if (dirty & /*klass, flat*/ 17) {
    				toggle_class(div, "flat", /*flat*/ ctx[4]);
    			}

    			if (dirty & /*klass, tile*/ 33) {
    				toggle_class(div, "tile", /*tile*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const EXPANSION_PANELS = {};

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ExpansionPanels', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { value = [] } = $$props;
    	let { multiple = false } = $$props;
    	let { mandatory = false } = $$props;
    	let { accordion = false } = $$props;
    	let { popout = false } = $$props;
    	let { inset = false } = $$props;
    	let { flat = false } = $$props;
    	let { tile = false } = $$props;
    	let { disabled = null } = $$props;
    	let { style = null } = $$props;
    	const dispatch = createEventDispatcher();
    	const values = writable(value);
    	const Disabled = writable(disabled);
    	let startIndex = -1;

    	setContext(EXPANSION_PANELS, {
    		values,
    		Disabled,
    		selectPanel: index => {
    			if (value.includes(index)) {
    				if (!(mandatory && value.length === 1)) {
    					value.splice(value.indexOf(index), 1);
    					$$invalidate(7, value);
    					dispatch('change', { index, active: false });
    				}
    			} else {
    				if (multiple) {
    					value.push(index);
    					$$invalidate(7, value);
    				} else {
    					$$invalidate(7, value = [index]);
    				}

    				dispatch('change', { index, active: true });
    			}
    		},
    		index: () => {
    			startIndex += 1;
    			return startIndex;
    		}
    	});

    	const writable_props = [
    		'class',
    		'value',
    		'multiple',
    		'mandatory',
    		'accordion',
    		'popout',
    		'inset',
    		'flat',
    		'tile',
    		'disabled',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExpansionPanels> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(8, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(9, mandatory = $$props.mandatory);
    		if ('accordion' in $$props) $$invalidate(1, accordion = $$props.accordion);
    		if ('popout' in $$props) $$invalidate(2, popout = $$props.popout);
    		if ('inset' in $$props) $$invalidate(3, inset = $$props.inset);
    		if ('flat' in $$props) $$invalidate(4, flat = $$props.flat);
    		if ('tile' in $$props) $$invalidate(5, tile = $$props.tile);
    		if ('disabled' in $$props) $$invalidate(10, disabled = $$props.disabled);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		EXPANSION_PANELS,
    		createEventDispatcher,
    		setContext,
    		writable,
    		klass,
    		value,
    		multiple,
    		mandatory,
    		accordion,
    		popout,
    		inset,
    		flat,
    		tile,
    		disabled,
    		style,
    		dispatch,
    		values,
    		Disabled,
    		startIndex
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(8, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(9, mandatory = $$props.mandatory);
    		if ('accordion' in $$props) $$invalidate(1, accordion = $$props.accordion);
    		if ('popout' in $$props) $$invalidate(2, popout = $$props.popout);
    		if ('inset' in $$props) $$invalidate(3, inset = $$props.inset);
    		if ('flat' in $$props) $$invalidate(4, flat = $$props.flat);
    		if ('tile' in $$props) $$invalidate(5, tile = $$props.tile);
    		if ('disabled' in $$props) $$invalidate(10, disabled = $$props.disabled);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    		if ('startIndex' in $$props) startIndex = $$props.startIndex;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 128) {
    			values.set(value);
    		}

    		if ($$self.$$.dirty & /*disabled*/ 1024) {
    			Disabled.set(disabled);
    		}
    	};

    	return [
    		klass,
    		accordion,
    		popout,
    		inset,
    		flat,
    		tile,
    		style,
    		value,
    		multiple,
    		mandatory,
    		disabled,
    		$$scope,
    		slots
    	];
    }

    class ExpansionPanels extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$u, create_fragment$u, safe_not_equal, {
    			class: 0,
    			value: 7,
    			multiple: 8,
    			mandatory: 9,
    			accordion: 1,
    			popout: 2,
    			inset: 3,
    			flat: 4,
    			tile: 5,
    			disabled: 10,
    			style: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExpansionPanels",
    			options,
    			id: create_fragment$u.name
    		});
    	}

    	get class() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mandatory() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mandatory(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get accordion() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set accordion(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get popout() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set popout(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inset() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inset(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flat() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flat(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tile() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tile(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\ExpansionPanels\ExpansionPanel.svelte generated by Svelte v3.40.0 */
    const file$o = "node_modules\\svelte-materialify\\dist\\components\\ExpansionPanels\\ExpansionPanel.svelte";
    const get_icon_slot_changes$1 = dirty => ({ active: dirty & /*active*/ 32 });
    const get_icon_slot_context$1 = ctx => ({ active: /*active*/ ctx[5] });
    const get_header_slot_changes = dirty => ({});
    const get_header_slot_context = ctx => ({});

    // (162:33)           
    function fallback_block$2(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				disabled: /*disabled*/ ctx[0],
    				path: down,
    				rotate: /*active*/ ctx[5] ? 180 : 0
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*disabled*/ 1) icon_changes.disabled = /*disabled*/ ctx[0];
    			if (dirty & /*active*/ 32) icon_changes.rotate = /*active*/ ctx[5] ? 180 : 0;
    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$2.name,
    		type: "fallback",
    		source: "(162:33)           ",
    		ctx
    	});

    	return block;
    }

    // (167:2) {#if active}
    function create_if_block$d(ctx) {
    	let div;
    	let div_transition;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "s-expansion-panel__content");
    			add_location(div, file$o, 167, 4, 4239);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "introstart", /*introstart_handler*/ ctx[13], false, false, false),
    					listen_dev(div, "outrostart", /*outrostart_handler*/ ctx[14], false, false, false),
    					listen_dev(div, "introend", /*introend_handler*/ ctx[15], false, false, false),
    					listen_dev(div, "outroend", /*outroend_handler*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], !current ? -1 : dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, /*slideOpts*/ ctx[2], true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, /*slideOpts*/ ctx[2], false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching && div_transition) div_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(167:2) {#if active}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$t(ctx) {
    	let div1;
    	let button;
    	let t0;
    	let div0;
    	let button_tabindex_value;
    	let t1;
    	let div1_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const header_slot_template = /*#slots*/ ctx[12].header;
    	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[11], get_header_slot_context);
    	const icon_slot_template = /*#slots*/ ctx[12].icon;
    	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[11], get_icon_slot_context$1);
    	const icon_slot_or_fallback = icon_slot || fallback_block$2(ctx);
    	let if_block = /*active*/ ctx[5] && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			button = element("button");
    			if (header_slot) header_slot.c();
    			t0 = space();
    			div0 = element("div");
    			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "s-expansion-panel__icon");
    			add_location(div0, file$o, 159, 4, 3976);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "s-expansion-panel__header");
    			attr_dev(button, "tabindex", button_tabindex_value = /*disabled*/ ctx[0] ? -1 : null);
    			add_location(button, file$o, 152, 2, 3773);
    			attr_dev(div1, "class", div1_class_value = "s-expansion-panel " + /*klass*/ ctx[1]);
    			attr_dev(div1, "aria-expanded", /*active*/ ctx[5]);
    			attr_dev(div1, "style", /*style*/ ctx[4]);
    			toggle_class(div1, "active", /*active*/ ctx[5]);
    			toggle_class(div1, "readonly", /*readonly*/ ctx[3]);
    			toggle_class(div1, "disabled", /*disabled*/ ctx[0]);
    			add_location(div1, file$o, 145, 0, 3638);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button);

    			if (header_slot) {
    				header_slot.m(button, null);
    			}

    			append_dev(button, t0);
    			append_dev(button, div0);

    			if (icon_slot_or_fallback) {
    				icon_slot_or_fallback.m(div0, null);
    			}

    			append_dev(div1, t1);
    			if (if_block) if_block.m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*toggle*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (header_slot) {
    				if (header_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[11], !current ? -1 : dirty, get_header_slot_changes, get_header_slot_context);
    				}
    			}

    			if (icon_slot) {
    				if (icon_slot.p && (!current || dirty & /*$$scope, active*/ 2080)) {
    					update_slot(icon_slot, icon_slot_template, ctx, /*$$scope*/ ctx[11], !current ? -1 : dirty, get_icon_slot_changes$1, get_icon_slot_context$1);
    				}
    			} else {
    				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*disabled, active*/ 33)) {
    					icon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
    				}
    			}

    			if (!current || dirty & /*disabled*/ 1 && button_tabindex_value !== (button_tabindex_value = /*disabled*/ ctx[0] ? -1 : null)) {
    				attr_dev(button, "tabindex", button_tabindex_value);
    			}

    			if (/*active*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*active*/ 32) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$d(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*klass*/ 2 && div1_class_value !== (div1_class_value = "s-expansion-panel " + /*klass*/ ctx[1])) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (!current || dirty & /*active*/ 32) {
    				attr_dev(div1, "aria-expanded", /*active*/ ctx[5]);
    			}

    			if (!current || dirty & /*style*/ 16) {
    				attr_dev(div1, "style", /*style*/ ctx[4]);
    			}

    			if (dirty & /*klass, active*/ 34) {
    				toggle_class(div1, "active", /*active*/ ctx[5]);
    			}

    			if (dirty & /*klass, readonly*/ 10) {
    				toggle_class(div1, "readonly", /*readonly*/ ctx[3]);
    			}

    			if (dirty & /*klass, disabled*/ 3) {
    				toggle_class(div1, "disabled", /*disabled*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header_slot, local);
    			transition_in(icon_slot_or_fallback, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header_slot, local);
    			transition_out(icon_slot_or_fallback, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (header_slot) header_slot.d(detaching);
    			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let $values;
    	let $Disabled;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ExpansionPanel', slots, ['header','icon','default']);
    	const { values, Disabled, selectPanel, index } = getContext(EXPANSION_PANELS);
    	validate_store(values, 'values');
    	component_subscribe($$self, values, value => $$invalidate(9, $values = value));
    	validate_store(Disabled, 'Disabled');
    	component_subscribe($$self, Disabled, value => $$invalidate(10, $Disabled = value));

    	// Classes to add to the panel.
    	let { class: klass = '' } = $$props;

    	let { slideOpts = {} } = $$props;
    	let { readonly = false } = $$props;
    	let { disabled = false } = $$props;
    	let { style = null } = $$props;
    	const value = index();
    	let active = false;

    	function toggle() {
    		selectPanel(value);
    	}

    	const writable_props = ['class', 'slideOpts', 'readonly', 'disabled', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExpansionPanel> was created with unknown prop '${key}'`);
    	});

    	function introstart_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function outrostart_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function introend_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function outroend_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(1, klass = $$props.class);
    		if ('slideOpts' in $$props) $$invalidate(2, slideOpts = $$props.slideOpts);
    		if ('readonly' in $$props) $$invalidate(3, readonly = $$props.readonly);
    		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ('style' in $$props) $$invalidate(4, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		EXPANSION_PANELS,
    		slide,
    		Icon,
    		down,
    		values,
    		Disabled,
    		selectPanel,
    		index,
    		klass,
    		slideOpts,
    		readonly,
    		disabled,
    		style,
    		value,
    		active,
    		toggle,
    		$values,
    		$Disabled
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(1, klass = $$props.klass);
    		if ('slideOpts' in $$props) $$invalidate(2, slideOpts = $$props.slideOpts);
    		if ('readonly' in $$props) $$invalidate(3, readonly = $$props.readonly);
    		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ('style' in $$props) $$invalidate(4, style = $$props.style);
    		if ('active' in $$props) $$invalidate(5, active = $$props.active);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$Disabled, disabled*/ 1025) {
    			// Inheriting the disabled value from parent.
    			$$invalidate(0, disabled = $Disabled == null ? disabled : $Disabled);
    		}

    		if ($$self.$$.dirty & /*$values*/ 512) {
    			// Checking if panel is active everytime the value has changed.
    			$$invalidate(5, active = $values.includes(value));
    		}
    	};

    	return [
    		disabled,
    		klass,
    		slideOpts,
    		readonly,
    		style,
    		active,
    		values,
    		Disabled,
    		toggle,
    		$values,
    		$Disabled,
    		$$scope,
    		slots,
    		introstart_handler,
    		outrostart_handler,
    		introend_handler,
    		outroend_handler
    	];
    }

    class ExpansionPanel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$t, create_fragment$t, safe_not_equal, {
    			class: 1,
    			slideOpts: 2,
    			readonly: 3,
    			disabled: 0,
    			style: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExpansionPanel",
    			options,
    			id: create_fragment$t.name
    		});
    	}

    	get class() {
    		throw new Error("<ExpansionPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ExpansionPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get slideOpts() {
    		throw new Error("<ExpansionPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set slideOpts(value) {
    		throw new Error("<ExpansionPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<ExpansionPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<ExpansionPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<ExpansionPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<ExpansionPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ExpansionPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ExpansionPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\AppBar\AppBar.svelte generated by Svelte v3.40.0 */
    const file$n = "node_modules\\svelte-materialify\\dist\\components\\AppBar\\AppBar.svelte";
    const get_extension_slot_changes = dirty => ({});
    const get_extension_slot_context = ctx => ({});
    const get_title_slot_changes = dirty => ({});
    const get_title_slot_context = ctx => ({});
    const get_icon_slot_changes = dirty => ({});
    const get_icon_slot_context = ctx => ({});

    // (107:4) {#if !collapsed}
    function create_if_block$c(ctx) {
    	let div;
    	let current;
    	const title_slot_template = /*#slots*/ ctx[11].title;
    	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[10], get_title_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (title_slot) title_slot.c();
    			attr_dev(div, "class", "s-app-bar__title");
    			add_location(div, file$n, 107, 6, 2257);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (title_slot) {
    				title_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (title_slot) {
    				if (title_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, get_title_slot_changes, get_title_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(title_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(title_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (title_slot) title_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(107:4) {#if !collapsed}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let header;
    	let div;
    	let t0;
    	let t1;
    	let t2;
    	let header_class_value;
    	let Style_action;
    	let current;
    	let mounted;
    	let dispose;
    	const icon_slot_template = /*#slots*/ ctx[11].icon;
    	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[10], get_icon_slot_context);
    	let if_block = !/*collapsed*/ ctx[8] && create_if_block$c(ctx);
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
    	const extension_slot_template = /*#slots*/ ctx[11].extension;
    	const extension_slot = create_slot(extension_slot_template, ctx, /*$$scope*/ ctx[10], get_extension_slot_context);

    	const block = {
    		c: function create() {
    			header = element("header");
    			div = element("div");
    			if (icon_slot) icon_slot.c();
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			if (default_slot) default_slot.c();
    			t2 = space();
    			if (extension_slot) extension_slot.c();
    			attr_dev(div, "class", "s-app-bar__wrapper");
    			add_location(div, file$n, 104, 2, 2172);
    			attr_dev(header, "class", header_class_value = "s-app-bar " + /*klass*/ ctx[0]);
    			attr_dev(header, "style", /*style*/ ctx[9]);
    			toggle_class(header, "tile", /*tile*/ ctx[2]);
    			toggle_class(header, "flat", /*flat*/ ctx[3]);
    			toggle_class(header, "dense", /*dense*/ ctx[4]);
    			toggle_class(header, "prominent", /*prominent*/ ctx[5]);
    			toggle_class(header, "fixed", /*fixed*/ ctx[6]);
    			toggle_class(header, "absolute", /*absolute*/ ctx[7]);
    			toggle_class(header, "collapsed", /*collapsed*/ ctx[8]);
    			add_location(header, file$n, 93, 0, 1973);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			append_dev(header, div);

    			if (icon_slot) {
    				icon_slot.m(div, null);
    			}

    			append_dev(div, t0);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t1);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(header, t2);

    			if (extension_slot) {
    				extension_slot.m(header, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(Style_action = Style.call(null, header, { 'app-bar-height': /*height*/ ctx[1] }));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (icon_slot) {
    				if (icon_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot(icon_slot, icon_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, get_icon_slot_changes, get_icon_slot_context);
    				}
    			}

    			if (!/*collapsed*/ ctx[8]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*collapsed*/ 256) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (extension_slot) {
    				if (extension_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot(extension_slot, extension_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, get_extension_slot_changes, get_extension_slot_context);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && header_class_value !== (header_class_value = "s-app-bar " + /*klass*/ ctx[0])) {
    				attr_dev(header, "class", header_class_value);
    			}

    			if (!current || dirty & /*style*/ 512) {
    				attr_dev(header, "style", /*style*/ ctx[9]);
    			}

    			if (Style_action && is_function(Style_action.update) && dirty & /*height*/ 2) Style_action.update.call(null, { 'app-bar-height': /*height*/ ctx[1] });

    			if (dirty & /*klass, tile*/ 5) {
    				toggle_class(header, "tile", /*tile*/ ctx[2]);
    			}

    			if (dirty & /*klass, flat*/ 9) {
    				toggle_class(header, "flat", /*flat*/ ctx[3]);
    			}

    			if (dirty & /*klass, dense*/ 17) {
    				toggle_class(header, "dense", /*dense*/ ctx[4]);
    			}

    			if (dirty & /*klass, prominent*/ 33) {
    				toggle_class(header, "prominent", /*prominent*/ ctx[5]);
    			}

    			if (dirty & /*klass, fixed*/ 65) {
    				toggle_class(header, "fixed", /*fixed*/ ctx[6]);
    			}

    			if (dirty & /*klass, absolute*/ 129) {
    				toggle_class(header, "absolute", /*absolute*/ ctx[7]);
    			}

    			if (dirty & /*klass, collapsed*/ 257) {
    				toggle_class(header, "collapsed", /*collapsed*/ ctx[8]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon_slot, local);
    			transition_in(if_block);
    			transition_in(default_slot, local);
    			transition_in(extension_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon_slot, local);
    			transition_out(if_block);
    			transition_out(default_slot, local);
    			transition_out(extension_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			if (icon_slot) icon_slot.d(detaching);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    			if (extension_slot) extension_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AppBar', slots, ['icon','title','default','extension']);
    	let { class: klass = '' } = $$props;
    	let { height = '56px' } = $$props;
    	let { tile = false } = $$props;
    	let { flat = false } = $$props;
    	let { dense = false } = $$props;
    	let { prominent = false } = $$props;
    	let { fixed = false } = $$props;
    	let { absolute = false } = $$props;
    	let { collapsed = false } = $$props;
    	let { style = '' } = $$props;

    	const writable_props = [
    		'class',
    		'height',
    		'tile',
    		'flat',
    		'dense',
    		'prominent',
    		'fixed',
    		'absolute',
    		'collapsed',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AppBar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('tile' in $$props) $$invalidate(2, tile = $$props.tile);
    		if ('flat' in $$props) $$invalidate(3, flat = $$props.flat);
    		if ('dense' in $$props) $$invalidate(4, dense = $$props.dense);
    		if ('prominent' in $$props) $$invalidate(5, prominent = $$props.prominent);
    		if ('fixed' in $$props) $$invalidate(6, fixed = $$props.fixed);
    		if ('absolute' in $$props) $$invalidate(7, absolute = $$props.absolute);
    		if ('collapsed' in $$props) $$invalidate(8, collapsed = $$props.collapsed);
    		if ('style' in $$props) $$invalidate(9, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Style,
    		klass,
    		height,
    		tile,
    		flat,
    		dense,
    		prominent,
    		fixed,
    		absolute,
    		collapsed,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('tile' in $$props) $$invalidate(2, tile = $$props.tile);
    		if ('flat' in $$props) $$invalidate(3, flat = $$props.flat);
    		if ('dense' in $$props) $$invalidate(4, dense = $$props.dense);
    		if ('prominent' in $$props) $$invalidate(5, prominent = $$props.prominent);
    		if ('fixed' in $$props) $$invalidate(6, fixed = $$props.fixed);
    		if ('absolute' in $$props) $$invalidate(7, absolute = $$props.absolute);
    		if ('collapsed' in $$props) $$invalidate(8, collapsed = $$props.collapsed);
    		if ('style' in $$props) $$invalidate(9, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		klass,
    		height,
    		tile,
    		flat,
    		dense,
    		prominent,
    		fixed,
    		absolute,
    		collapsed,
    		style,
    		$$scope,
    		slots
    	];
    }

    class AppBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$s, create_fragment$s, safe_not_equal, {
    			class: 0,
    			height: 1,
    			tile: 2,
    			flat: 3,
    			dense: 4,
    			prominent: 5,
    			fixed: 6,
    			absolute: 7,
    			collapsed: 8,
    			style: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AppBar",
    			options,
    			id: create_fragment$s.name
    		});
    	}

    	get class() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tile() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tile(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flat() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flat(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prominent() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prominent(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixed() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixed(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get absolute() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set absolute(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get collapsed() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set collapsed(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\ProgressCircular\ProgressCircular.svelte generated by Svelte v3.40.0 */
    const file$m = "node_modules\\svelte-materialify\\dist\\components\\ProgressCircular\\ProgressCircular.svelte";

    // (116:4) {#if !indeterminate}
    function create_if_block$b(ctx) {
    	let circle;
    	let circle_levels = [{ class: "underlay" }, /*circleProps*/ ctx[9], { "stroke-dashoffset": "0" }];
    	let circle_data = {};

    	for (let i = 0; i < circle_levels.length; i += 1) {
    		circle_data = assign(circle_data, circle_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			circle = svg_element("circle");
    			set_svg_attributes(circle, circle_data);
    			toggle_class(circle, "svelte-kiaiot", true);
    			add_location(circle, file$m, 116, 6, 2491);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, circle, anchor);
    		},
    		p: function update(ctx, dirty) {
    			set_svg_attributes(circle, circle_data = get_spread_update(circle_levels, [
    				{ class: "underlay" },
    				/*circleProps*/ ctx[9],
    				{ "stroke-dashoffset": "0" }
    			]));

    			toggle_class(circle, "svelte-kiaiot", true);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(circle);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(116:4) {#if !indeterminate}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let div1;
    	let svg;
    	let circle;
    	let t;
    	let div0;
    	let div1_class_value;
    	let div1_style_value;
    	let TextColor_action;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = !/*indeterminate*/ ctx[1] && create_if_block$b(ctx);

    	let circle_levels = [
    		{ class: "overlay" },
    		/*circleProps*/ ctx[9],
    		{
    			"stroke-dashoffset": /*strokeDashOffset*/ ctx[8]
    		}
    	];

    	let circle_data = {};

    	for (let i = 0; i < circle_levels.length; i += 1) {
    		circle_data = assign(circle_data, circle_levels[i]);
    	}

    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			svg = svg_element("svg");
    			if (if_block) if_block.c();
    			circle = svg_element("circle");
    			t = space();
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			set_svg_attributes(circle, circle_data);
    			toggle_class(circle, "svelte-kiaiot", true);
    			add_location(circle, file$m, 119, 4, 2573);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "" + (/*viewBoxSize*/ ctx[7] + "\n    " + /*viewBoxSize*/ ctx[7] + "\n    " + 2 * /*viewBoxSize*/ ctx[7] + "\n    " + 2 * /*viewBoxSize*/ ctx[7]));
    			set_style(svg, "transform", "rotate(" + /*rotate*/ ctx[3] + "deg)");
    			attr_dev(svg, "class", "svelte-kiaiot");
    			add_location(svg, file$m, 108, 2, 2282);
    			attr_dev(div0, "class", "s-progress-circular__content svelte-kiaiot");
    			add_location(div0, file$m, 122, 2, 2666);
    			attr_dev(div1, "role", "progressbar");
    			attr_dev(div1, "aria-valuemin", "0");
    			attr_dev(div1, "aria-valuemax", "100");
    			attr_dev(div1, "aria-valuenow", /*value*/ ctx[5]);
    			attr_dev(div1, "class", div1_class_value = "s-progress-circular " + /*klass*/ ctx[0] + " svelte-kiaiot");
    			attr_dev(div1, "style", div1_style_value = "width:" + /*size*/ ctx[4] + "px;height:" + /*size*/ ctx[4] + "px;" + /*style*/ ctx[6]);
    			toggle_class(div1, "indeterminate", /*indeterminate*/ ctx[1]);
    			add_location(div1, file$m, 99, 0, 2054);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, svg);
    			if (if_block) if_block.m(svg, null);
    			append_dev(svg, circle);
    			append_dev(div1, t);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(TextColor_action = TextColor.call(null, div1, /*color*/ ctx[2]));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*indeterminate*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$b(ctx);
    					if_block.c();
    					if_block.m(svg, circle);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			set_svg_attributes(circle, circle_data = get_spread_update(circle_levels, [
    				{ class: "overlay" },
    				/*circleProps*/ ctx[9],
    				{
    					"stroke-dashoffset": /*strokeDashOffset*/ ctx[8]
    				}
    			]));

    			toggle_class(circle, "svelte-kiaiot", true);

    			if (!current || dirty & /*rotate*/ 8) {
    				set_style(svg, "transform", "rotate(" + /*rotate*/ ctx[3] + "deg)");
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*value*/ 32) {
    				attr_dev(div1, "aria-valuenow", /*value*/ ctx[5]);
    			}

    			if (!current || dirty & /*klass*/ 1 && div1_class_value !== (div1_class_value = "s-progress-circular " + /*klass*/ ctx[0] + " svelte-kiaiot")) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (!current || dirty & /*size, style*/ 80 && div1_style_value !== (div1_style_value = "width:" + /*size*/ ctx[4] + "px;height:" + /*size*/ ctx[4] + "px;" + /*style*/ ctx[6])) {
    				attr_dev(div1, "style", div1_style_value);
    			}

    			if (TextColor_action && is_function(TextColor_action.update) && dirty & /*color*/ 4) TextColor_action.update.call(null, /*color*/ ctx[2]);

    			if (dirty & /*klass, indeterminate*/ 3) {
    				toggle_class(div1, "indeterminate", /*indeterminate*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const radius = 20;

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProgressCircular', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { indeterminate = false } = $$props;
    	let { color = 'secondary' } = $$props;
    	let { rotate = 0 } = $$props;
    	let { size = 32 } = $$props;
    	let { value = 0 } = $$props;
    	let { width = 4 } = $$props;
    	let { style = '' } = $$props;
    	const circumference = 2 * 3.1416 * radius;
    	const viewBoxSize = radius / (1 - Number(width) / +size);
    	const strokeWidth = Number(width) / +size * viewBoxSize * 2;
    	const strokeDashOffset = (100 - value) / 100 * circumference;

    	const circleProps = {
    		fill: 'transparent',
    		cx: 2 * viewBoxSize,
    		cy: 2 * viewBoxSize,
    		r: radius,
    		'stroke-width': strokeWidth,
    		'stroke-dasharray': circumference
    	};

    	const writable_props = ['class', 'indeterminate', 'color', 'rotate', 'size', 'value', 'width', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProgressCircular> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('indeterminate' in $$props) $$invalidate(1, indeterminate = $$props.indeterminate);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('rotate' in $$props) $$invalidate(3, rotate = $$props.rotate);
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('value' in $$props) $$invalidate(5, value = $$props.value);
    		if ('width' in $$props) $$invalidate(10, width = $$props.width);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		TextColor,
    		klass,
    		indeterminate,
    		color,
    		rotate,
    		size,
    		value,
    		width,
    		style,
    		radius,
    		circumference,
    		viewBoxSize,
    		strokeWidth,
    		strokeDashOffset,
    		circleProps
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('indeterminate' in $$props) $$invalidate(1, indeterminate = $$props.indeterminate);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('rotate' in $$props) $$invalidate(3, rotate = $$props.rotate);
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('value' in $$props) $$invalidate(5, value = $$props.value);
    		if ('width' in $$props) $$invalidate(10, width = $$props.width);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		klass,
    		indeterminate,
    		color,
    		rotate,
    		size,
    		value,
    		style,
    		viewBoxSize,
    		strokeDashOffset,
    		circleProps,
    		width,
    		$$scope,
    		slots
    	];
    }

    class ProgressCircular extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$r, create_fragment$r, safe_not_equal, {
    			class: 0,
    			indeterminate: 1,
    			color: 2,
    			rotate: 3,
    			size: 4,
    			value: 5,
    			width: 10,
    			style: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProgressCircular",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get class() {
    		throw new Error("<ProgressCircular>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ProgressCircular>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indeterminate() {
    		throw new Error("<ProgressCircular>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indeterminate(value) {
    		throw new Error("<ProgressCircular>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<ProgressCircular>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<ProgressCircular>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<ProgressCircular>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<ProgressCircular>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<ProgressCircular>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<ProgressCircular>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ProgressCircular>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ProgressCircular>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<ProgressCircular>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<ProgressCircular>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ProgressCircular>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ProgressCircular>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Subheader\Subheader.svelte generated by Svelte v3.40.0 */

    const file$l = "node_modules\\svelte-materialify\\dist\\components\\Subheader\\Subheader.svelte";

    function create_fragment$q(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-subheader " + /*klass*/ ctx[0] + " svelte-fn81cc");
    			attr_dev(div, "style", /*style*/ ctx[2]);
    			toggle_class(div, "inset", /*inset*/ ctx[1]);
    			add_location(div, file$l, 21, 0, 391);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-subheader " + /*klass*/ ctx[0] + " svelte-fn81cc")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 4) {
    				attr_dev(div, "style", /*style*/ ctx[2]);
    			}

    			if (dirty & /*klass, inset*/ 3) {
    				toggle_class(div, "inset", /*inset*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Subheader', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { inset = false } = $$props;
    	let { style = null } = $$props;
    	const writable_props = ['class', 'inset', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Subheader> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('inset' in $$props) $$invalidate(1, inset = $$props.inset);
    		if ('style' in $$props) $$invalidate(2, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ klass, inset, style });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('inset' in $$props) $$invalidate(1, inset = $$props.inset);
    		if ('style' in $$props) $$invalidate(2, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, inset, style, $$scope, slots];
    }

    class Subheader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { class: 0, inset: 1, style: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Subheader",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get class() {
    		throw new Error("<Subheader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Subheader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inset() {
    		throw new Error("<Subheader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inset(value) {
    		throw new Error("<Subheader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Subheader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Subheader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Grid\Row.svelte generated by Svelte v3.40.0 */

    const file$k = "node_modules\\svelte-materialify\\dist\\components\\Grid\\Row.svelte";

    function create_fragment$p(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-row " + /*klass*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[3]);
    			toggle_class(div, "dense", /*dense*/ ctx[1]);
    			toggle_class(div, "no-gutters", /*noGutters*/ ctx[2]);
    			add_location(div, file$k, 34, 0, 589);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-row " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 8) {
    				attr_dev(div, "style", /*style*/ ctx[3]);
    			}

    			if (dirty & /*klass, dense*/ 3) {
    				toggle_class(div, "dense", /*dense*/ ctx[1]);
    			}

    			if (dirty & /*klass, noGutters*/ 5) {
    				toggle_class(div, "no-gutters", /*noGutters*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Row', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { dense = false } = $$props;
    	let { noGutters = false } = $$props;
    	let { style = null } = $$props;
    	const writable_props = ['class', 'dense', 'noGutters', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Row> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('dense' in $$props) $$invalidate(1, dense = $$props.dense);
    		if ('noGutters' in $$props) $$invalidate(2, noGutters = $$props.noGutters);
    		if ('style' in $$props) $$invalidate(3, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ klass, dense, noGutters, style });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('dense' in $$props) $$invalidate(1, dense = $$props.dense);
    		if ('noGutters' in $$props) $$invalidate(2, noGutters = $$props.noGutters);
    		if ('style' in $$props) $$invalidate(3, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, dense, noGutters, style, $$scope, slots];
    }

    class Row extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {
    			class: 0,
    			dense: 1,
    			noGutters: 2,
    			style: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Row",
    			options,
    			id: create_fragment$p.name
    		});
    	}

    	get class() {
    		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noGutters() {
    		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noGutters(value) {
    		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Grid\Col.svelte generated by Svelte v3.40.0 */
    const file$j = "node_modules\\svelte-materialify\\dist\\components\\Grid\\Col.svelte";

    function create_fragment$o(ctx) {
    	let div;
    	let div_class_value;
    	let Class_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-col " + /*klass*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[11]);
    			add_location(div, file$j, 597, 0, 9978);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(Class_action = Class.call(null, div, [
    					/*cols*/ ctx[1] && `col-${/*cols*/ ctx[1]}`,
    					/*sm*/ ctx[2] && `sm-${/*sm*/ ctx[2]}`,
    					/*md*/ ctx[3] && `md-${/*md*/ ctx[3]}`,
    					/*lg*/ ctx[4] && `lg-${/*lg*/ ctx[4]}`,
    					/*xl*/ ctx[5] && `xl-${/*xl*/ ctx[5]}`,
    					/*offset*/ ctx[6] && `offset-${/*offset*/ ctx[6]}`,
    					/*offset_sm*/ ctx[7] && `offset-sm-${/*offset_sm*/ ctx[7]}`,
    					/*offset_md*/ ctx[8] && `offset-md-${/*offset_md*/ ctx[8]}`,
    					/*offset_lg*/ ctx[9] && `offset-lg-${/*offset_lg*/ ctx[9]}`,
    					/*offset_xl*/ ctx[10] && `offset-xl-${/*offset_xl*/ ctx[10]}`
    				]));

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-col " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 2048) {
    				attr_dev(div, "style", /*style*/ ctx[11]);
    			}

    			if (Class_action && is_function(Class_action.update) && dirty & /*cols, sm, md, lg, xl, offset, offset_sm, offset_md, offset_lg, offset_xl*/ 2046) Class_action.update.call(null, [
    				/*cols*/ ctx[1] && `col-${/*cols*/ ctx[1]}`,
    				/*sm*/ ctx[2] && `sm-${/*sm*/ ctx[2]}`,
    				/*md*/ ctx[3] && `md-${/*md*/ ctx[3]}`,
    				/*lg*/ ctx[4] && `lg-${/*lg*/ ctx[4]}`,
    				/*xl*/ ctx[5] && `xl-${/*xl*/ ctx[5]}`,
    				/*offset*/ ctx[6] && `offset-${/*offset*/ ctx[6]}`,
    				/*offset_sm*/ ctx[7] && `offset-sm-${/*offset_sm*/ ctx[7]}`,
    				/*offset_md*/ ctx[8] && `offset-md-${/*offset_md*/ ctx[8]}`,
    				/*offset_lg*/ ctx[9] && `offset-lg-${/*offset_lg*/ ctx[9]}`,
    				/*offset_xl*/ ctx[10] && `offset-xl-${/*offset_xl*/ ctx[10]}`
    			]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Col', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { cols = false } = $$props;
    	let { sm = false } = $$props;
    	let { md = false } = $$props;
    	let { lg = false } = $$props;
    	let { xl = false } = $$props;
    	let { offset = false } = $$props;
    	let { offset_sm = false } = $$props;
    	let { offset_md = false } = $$props;
    	let { offset_lg = false } = $$props;
    	let { offset_xl = false } = $$props;
    	let { style = null } = $$props;

    	const writable_props = [
    		'class',
    		'cols',
    		'sm',
    		'md',
    		'lg',
    		'xl',
    		'offset',
    		'offset_sm',
    		'offset_md',
    		'offset_lg',
    		'offset_xl',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Col> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('cols' in $$props) $$invalidate(1, cols = $$props.cols);
    		if ('sm' in $$props) $$invalidate(2, sm = $$props.sm);
    		if ('md' in $$props) $$invalidate(3, md = $$props.md);
    		if ('lg' in $$props) $$invalidate(4, lg = $$props.lg);
    		if ('xl' in $$props) $$invalidate(5, xl = $$props.xl);
    		if ('offset' in $$props) $$invalidate(6, offset = $$props.offset);
    		if ('offset_sm' in $$props) $$invalidate(7, offset_sm = $$props.offset_sm);
    		if ('offset_md' in $$props) $$invalidate(8, offset_md = $$props.offset_md);
    		if ('offset_lg' in $$props) $$invalidate(9, offset_lg = $$props.offset_lg);
    		if ('offset_xl' in $$props) $$invalidate(10, offset_xl = $$props.offset_xl);
    		if ('style' in $$props) $$invalidate(11, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Class,
    		klass,
    		cols,
    		sm,
    		md,
    		lg,
    		xl,
    		offset,
    		offset_sm,
    		offset_md,
    		offset_lg,
    		offset_xl,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('cols' in $$props) $$invalidate(1, cols = $$props.cols);
    		if ('sm' in $$props) $$invalidate(2, sm = $$props.sm);
    		if ('md' in $$props) $$invalidate(3, md = $$props.md);
    		if ('lg' in $$props) $$invalidate(4, lg = $$props.lg);
    		if ('xl' in $$props) $$invalidate(5, xl = $$props.xl);
    		if ('offset' in $$props) $$invalidate(6, offset = $$props.offset);
    		if ('offset_sm' in $$props) $$invalidate(7, offset_sm = $$props.offset_sm);
    		if ('offset_md' in $$props) $$invalidate(8, offset_md = $$props.offset_md);
    		if ('offset_lg' in $$props) $$invalidate(9, offset_lg = $$props.offset_lg);
    		if ('offset_xl' in $$props) $$invalidate(10, offset_xl = $$props.offset_xl);
    		if ('style' in $$props) $$invalidate(11, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		klass,
    		cols,
    		sm,
    		md,
    		lg,
    		xl,
    		offset,
    		offset_sm,
    		offset_md,
    		offset_lg,
    		offset_xl,
    		style,
    		$$scope,
    		slots
    	];
    }

    class Col extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {
    			class: 0,
    			cols: 1,
    			sm: 2,
    			md: 3,
    			lg: 4,
    			xl: 5,
    			offset: 6,
    			offset_sm: 7,
    			offset_md: 8,
    			offset_lg: 9,
    			offset_xl: 10,
    			style: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Col",
    			options,
    			id: create_fragment$o.name
    		});
    	}

    	get class() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get cols() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set cols(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sm() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sm(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get md() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set md(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lg() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lg(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xl() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xl(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get offset() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set offset(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get offset_sm() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set offset_sm(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get offset_md() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set offset_md(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get offset_lg() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set offset_lg(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get offset_xl() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set offset_xl(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var prevIcon = 'M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z';

    var nextIcon = 'M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z';

    /* node_modules\svelte-materialify\dist\components\SlideGroup\SlideGroup.svelte generated by Svelte v3.40.0 */
    const file$i = "node_modules\\svelte-materialify\\dist\\components\\SlideGroup\\SlideGroup.svelte";
    const get_next_slot_changes = dirty => ({});
    const get_next_slot_context = ctx => ({});
    const get_previous_slot_changes = dirty => ({});
    const get_previous_slot_context = ctx => ({});

    // (111:2) {#if arrowsVisible}
    function create_if_block_1$3(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const previous_slot_template = /*#slots*/ ctx[17].previous;
    	const previous_slot = create_slot(previous_slot_template, ctx, /*$$scope*/ ctx[22], get_previous_slot_context);
    	const previous_slot_or_fallback = previous_slot || fallback_block_1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (previous_slot_or_fallback) previous_slot_or_fallback.c();
    			attr_dev(div, "class", "s-slide-group__prev");
    			toggle_class(div, "disabled", /*x*/ ctx[9] === 0);
    			toggle_class(div, "hide-disabled-arrows", /*hideDisabledArrows*/ ctx[2]);
    			add_location(div, file$i, 111, 4, 2532);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (previous_slot_or_fallback) {
    				previous_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*prev*/ ctx[12], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (previous_slot) {
    				if (previous_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
    					update_slot(previous_slot, previous_slot_template, ctx, /*$$scope*/ ctx[22], !current ? -1 : dirty, get_previous_slot_changes, get_previous_slot_context);
    				}
    			}

    			if (dirty & /*x*/ 512) {
    				toggle_class(div, "disabled", /*x*/ ctx[9] === 0);
    			}

    			if (dirty & /*hideDisabledArrows*/ 4) {
    				toggle_class(div, "hide-disabled-arrows", /*hideDisabledArrows*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(previous_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(previous_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (previous_slot_or_fallback) previous_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(111:2) {#if arrowsVisible}",
    		ctx
    	});

    	return block;
    }

    // (117:28)          
    function fallback_block_1(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { path: prevIcon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1.name,
    		type: "fallback",
    		source: "(117:28)          ",
    		ctx
    	});

    	return block;
    }

    // (134:2) {#if arrowsVisible}
    function create_if_block$a(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const next_slot_template = /*#slots*/ ctx[17].next;
    	const next_slot = create_slot(next_slot_template, ctx, /*$$scope*/ ctx[22], get_next_slot_context);
    	const next_slot_or_fallback = next_slot || fallback_block$1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (next_slot_or_fallback) next_slot_or_fallback.c();
    			attr_dev(div, "class", "s-slide-group__next");
    			toggle_class(div, "disabled", /*x*/ ctx[9] === /*contentWidth*/ ctx[7] - /*wrapperWidth*/ ctx[8]);
    			toggle_class(div, "show-arrows", /*hideDisabledArrows*/ ctx[2]);
    			add_location(div, file$i, 134, 4, 3117);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (next_slot_or_fallback) {
    				next_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*next*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (next_slot) {
    				if (next_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
    					update_slot(next_slot, next_slot_template, ctx, /*$$scope*/ ctx[22], !current ? -1 : dirty, get_next_slot_changes, get_next_slot_context);
    				}
    			}

    			if (dirty & /*x, contentWidth, wrapperWidth*/ 896) {
    				toggle_class(div, "disabled", /*x*/ ctx[9] === /*contentWidth*/ ctx[7] - /*wrapperWidth*/ ctx[8]);
    			}

    			if (dirty & /*hideDisabledArrows*/ 4) {
    				toggle_class(div, "show-arrows", /*hideDisabledArrows*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(next_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(next_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (next_slot_or_fallback) next_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(134:2) {#if arrowsVisible}",
    		ctx
    	});

    	return block;
    }

    // (140:24)          
    function fallback_block$1(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { path: nextIcon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$1.name,
    		type: "fallback",
    		source: "(140:24)          ",
    		ctx
    	});

    	return block;
    }

    // (103:0) <ItemGroup   class="s-slide-group {klass}"   on:change   bind:value   {activeClass}   {multiple}   {mandatory}   {max}>
    function create_default_slot$9(ctx) {
    	let t0;
    	let div1;
    	let div0;
    	let div0_resize_listener;
    	let div1_resize_listener;
    	let t1;
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*arrowsVisible*/ ctx[10] && create_if_block_1$3(ctx);
    	const default_slot_template = /*#slots*/ ctx[17].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);
    	let if_block1 = /*arrowsVisible*/ ctx[10] && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(div0, "class", "s-slide-group__content");
    			set_style(div0, "transform", "translate(-" + /*x*/ ctx[9] + "px)");
    			add_render_callback(() => /*div0_elementresize_handler*/ ctx[18].call(div0));
    			add_location(div0, file$i, 126, 4, 2933);
    			attr_dev(div1, "class", "s-slide-group__wrapper");
    			add_render_callback(() => /*div1_elementresize_handler*/ ctx[19].call(div1));
    			add_location(div1, file$i, 121, 2, 2776);
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			div0_resize_listener = add_resize_listener(div0, /*div0_elementresize_handler*/ ctx[18].bind(div0));
    			div1_resize_listener = add_resize_listener(div1, /*div1_elementresize_handler*/ ctx[19].bind(div1));
    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "touchstart", /*touchstart*/ ctx[13], { passive: true }, false, false),
    					listen_dev(div1, "touchmove", /*touchmove*/ ctx[14], { passive: true }, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*arrowsVisible*/ ctx[10]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*arrowsVisible*/ 1024) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[22], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*x*/ 512) {
    				set_style(div0, "transform", "translate(-" + /*x*/ ctx[9] + "px)");
    			}

    			if (/*arrowsVisible*/ ctx[10]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*arrowsVisible*/ 1024) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$a(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(default_slot, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(default_slot, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			div0_resize_listener();
    			div1_resize_listener();
    			if (detaching) detach_dev(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$9.name,
    		type: "slot",
    		source: "(103:0) <ItemGroup   class=\\\"s-slide-group {klass}\\\"   on:change   bind:value   {activeClass}   {multiple}   {mandatory}   {max}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let itemgroup;
    	let updating_value;
    	let current;

    	function itemgroup_value_binding(value) {
    		/*itemgroup_value_binding*/ ctx[20](value);
    	}

    	let itemgroup_props = {
    		class: "s-slide-group " + /*klass*/ ctx[1],
    		activeClass: /*activeClass*/ ctx[3],
    		multiple: /*multiple*/ ctx[4],
    		mandatory: /*mandatory*/ ctx[5],
    		max: /*max*/ ctx[6],
    		$$slots: { default: [create_default_slot$9] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		itemgroup_props.value = /*value*/ ctx[0];
    	}

    	itemgroup = new ItemGroup({ props: itemgroup_props, $$inline: true });
    	binding_callbacks.push(() => bind(itemgroup, 'value', itemgroup_value_binding));
    	itemgroup.$on("change", /*change_handler*/ ctx[21]);

    	const block = {
    		c: function create() {
    			create_component(itemgroup.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(itemgroup, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const itemgroup_changes = {};
    			if (dirty & /*klass*/ 2) itemgroup_changes.class = "s-slide-group " + /*klass*/ ctx[1];
    			if (dirty & /*activeClass*/ 8) itemgroup_changes.activeClass = /*activeClass*/ ctx[3];
    			if (dirty & /*multiple*/ 16) itemgroup_changes.multiple = /*multiple*/ ctx[4];
    			if (dirty & /*mandatory*/ 32) itemgroup_changes.mandatory = /*mandatory*/ ctx[5];
    			if (dirty & /*max*/ 64) itemgroup_changes.max = /*max*/ ctx[6];

    			if (dirty & /*$$scope, x, contentWidth, wrapperWidth, hideDisabledArrows, arrowsVisible*/ 4196228) {
    				itemgroup_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				itemgroup_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			itemgroup.$set(itemgroup_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(itemgroup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(itemgroup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(itemgroup, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const SLIDE_GROUP = {};

    function instance$n($$self, $$props, $$invalidate) {
    	let arrowsVisible;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SlideGroup', slots, ['previous','default','next']);
    	let contentWidth;
    	let wrapperWidth;
    	let { class: klass = '' } = $$props;
    	let { showArrows = true } = $$props;
    	let { hideDisabledArrows = false } = $$props;
    	let { centerActive = false } = $$props;
    	let { activeClass = '' } = $$props;
    	let { value = [] } = $$props;
    	let { multiple = false } = $$props;
    	let { mandatory = false } = $$props;
    	let { max = Infinity } = $$props;
    	let x = 0;

    	setContext(SLIDE_GROUP, item => {
    		const left = item.offsetLeft;
    		const width = item.offsetWidth;

    		if (centerActive) $$invalidate(9, x = left + (width - wrapperWidth) / 2); else if (left + 1.25 * width > wrapperWidth + x) {
    			$$invalidate(9, x = left + 1.25 * width - wrapperWidth);
    		} else if (left < x + width / 4) {
    			$$invalidate(9, x = left - width / 4);
    		}
    	});

    	afterUpdate(() => {
    		if (x + wrapperWidth > contentWidth) $$invalidate(9, x = contentWidth - wrapperWidth); else if (x < 0) $$invalidate(9, x = 0);
    	});

    	function next() {
    		$$invalidate(9, x += wrapperWidth);
    	}

    	function prev() {
    		$$invalidate(9, x -= wrapperWidth);
    	}

    	let touchStartX;

    	function touchstart({ touches }) {
    		touchStartX = x + touches[0].clientX;
    	}

    	function touchmove({ touches }) {
    		$$invalidate(9, x = touchStartX - touches[0].clientX);
    	}

    	const writable_props = [
    		'class',
    		'showArrows',
    		'hideDisabledArrows',
    		'centerActive',
    		'activeClass',
    		'value',
    		'multiple',
    		'mandatory',
    		'max'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SlideGroup> was created with unknown prop '${key}'`);
    	});

    	function div0_elementresize_handler() {
    		contentWidth = this.clientWidth;
    		$$invalidate(7, contentWidth);
    	}

    	function div1_elementresize_handler() {
    		wrapperWidth = this.clientWidth;
    		$$invalidate(8, wrapperWidth);
    	}

    	function itemgroup_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	function change_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(1, klass = $$props.class);
    		if ('showArrows' in $$props) $$invalidate(15, showArrows = $$props.showArrows);
    		if ('hideDisabledArrows' in $$props) $$invalidate(2, hideDisabledArrows = $$props.hideDisabledArrows);
    		if ('centerActive' in $$props) $$invalidate(16, centerActive = $$props.centerActive);
    		if ('activeClass' in $$props) $$invalidate(3, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(4, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(5, mandatory = $$props.mandatory);
    		if ('max' in $$props) $$invalidate(6, max = $$props.max);
    		if ('$$scope' in $$props) $$invalidate(22, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		SLIDE_GROUP,
    		setContext,
    		afterUpdate,
    		ItemGroup,
    		prevIcon,
    		nextIcon,
    		Icon,
    		contentWidth,
    		wrapperWidth,
    		klass,
    		showArrows,
    		hideDisabledArrows,
    		centerActive,
    		activeClass,
    		value,
    		multiple,
    		mandatory,
    		max,
    		x,
    		next,
    		prev,
    		touchStartX,
    		touchstart,
    		touchmove,
    		arrowsVisible
    	});

    	$$self.$inject_state = $$props => {
    		if ('contentWidth' in $$props) $$invalidate(7, contentWidth = $$props.contentWidth);
    		if ('wrapperWidth' in $$props) $$invalidate(8, wrapperWidth = $$props.wrapperWidth);
    		if ('klass' in $$props) $$invalidate(1, klass = $$props.klass);
    		if ('showArrows' in $$props) $$invalidate(15, showArrows = $$props.showArrows);
    		if ('hideDisabledArrows' in $$props) $$invalidate(2, hideDisabledArrows = $$props.hideDisabledArrows);
    		if ('centerActive' in $$props) $$invalidate(16, centerActive = $$props.centerActive);
    		if ('activeClass' in $$props) $$invalidate(3, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(4, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(5, mandatory = $$props.mandatory);
    		if ('max' in $$props) $$invalidate(6, max = $$props.max);
    		if ('x' in $$props) $$invalidate(9, x = $$props.x);
    		if ('touchStartX' in $$props) touchStartX = $$props.touchStartX;
    		if ('arrowsVisible' in $$props) $$invalidate(10, arrowsVisible = $$props.arrowsVisible);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*wrapperWidth, contentWidth, showArrows*/ 33152) {
    			$$invalidate(10, arrowsVisible = wrapperWidth < contentWidth && showArrows);
    		}
    	};

    	return [
    		value,
    		klass,
    		hideDisabledArrows,
    		activeClass,
    		multiple,
    		mandatory,
    		max,
    		contentWidth,
    		wrapperWidth,
    		x,
    		arrowsVisible,
    		next,
    		prev,
    		touchstart,
    		touchmove,
    		showArrows,
    		centerActive,
    		slots,
    		div0_elementresize_handler,
    		div1_elementresize_handler,
    		itemgroup_value_binding,
    		change_handler,
    		$$scope
    	];
    }

    class SlideGroup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
    			class: 1,
    			showArrows: 15,
    			hideDisabledArrows: 2,
    			centerActive: 16,
    			activeClass: 3,
    			value: 0,
    			multiple: 4,
    			mandatory: 5,
    			max: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SlideGroup",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get class() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArrows() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArrows(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideDisabledArrows() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideDisabledArrows(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get centerActive() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set centerActive(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mandatory() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mandatory(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Window\Window.svelte generated by Svelte v3.40.0 */
    const file$h = "node_modules\\svelte-materialify\\dist\\components\\Window\\Window.svelte";

    function create_fragment$m(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-window " + /*klass*/ ctx[0]);
    			toggle_class(div, "horizontal", !/*vertical*/ ctx[1]);
    			toggle_class(div, "vertical", /*vertical*/ ctx[1]);
    			toggle_class(div, "reverse", /*reverse*/ ctx[2]);
    			add_location(div, file$h, 126, 0, 3562);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[12](div);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-window " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (dirty & /*klass, vertical*/ 3) {
    				toggle_class(div, "horizontal", !/*vertical*/ ctx[1]);
    			}

    			if (dirty & /*klass, vertical*/ 3) {
    				toggle_class(div, "vertical", /*vertical*/ ctx[1]);
    			}

    			if (dirty & /*klass, reverse*/ 5) {
    				toggle_class(div, "reverse", /*reverse*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[12](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const WINDOW = {};

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Window', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { activeClass = 'active' } = $$props;
    	let { value = 0 } = $$props;
    	let { vertical = false } = $$props;
    	let { reverse = false } = $$props;
    	let { continuous = true } = $$props;
    	let container;
    	const windowItems = [];
    	let moving = false;

    	setContext(WINDOW, window => {
    		windowItems.push(window);
    	});

    	function set(index) {
    		const prevIndex = windowItems.findIndex(i => i.classList.contains(activeClass));

    		if (!moving && windowItems[index] && index !== prevIndex) {
    			moving = true;
    			let direction;
    			let position;

    			if (index > prevIndex) {
    				direction = 'left';
    				position = 'next';
    			} else {
    				direction = 'right';
    				position = 'prev';
    			}

    			const prev = windowItems[prevIndex];
    			prev.classList.add(direction);
    			$$invalidate(3, container.style.height = `${prev.offsetHeight}px`, container);
    			const active = windowItems[index];
    			active.classList.add(position);
    			$$invalidate(3, container.style.height = `${active.offsetHeight}px`, container);
    			active.classList.add(direction);

    			setTimeout(
    				() => {
    					prev.classList.remove('active', direction);
    					active.classList.add('active');
    					active.classList.remove(position, direction);
    					$$invalidate(3, container.style.height = null, container);
    					moving = false;
    					$$invalidate(4, value = index);
    				},
    				300
    			);
    		}
    	}

    	function next() {
    		if (value === windowItems.length - 1) {
    			if (continuous) set(0);
    		} else {
    			set(value + 1);
    		}
    	}

    	function previous() {
    		if (value === 0) {
    			if (continuous) set(windowItems.length - 1);
    		} else {
    			set(value - 1);
    		}
    	}

    	onMount(() => {
    		const activeItem = windowItems[value];
    		if (activeItem) activeItem.classList.add(activeClass);
    	});

    	const writable_props = ['class', 'activeClass', 'value', 'vertical', 'reverse', 'continuous'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Window> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(3, container);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('activeClass' in $$props) $$invalidate(5, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(4, value = $$props.value);
    		if ('vertical' in $$props) $$invalidate(1, vertical = $$props.vertical);
    		if ('reverse' in $$props) $$invalidate(2, reverse = $$props.reverse);
    		if ('continuous' in $$props) $$invalidate(6, continuous = $$props.continuous);
    		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		WINDOW,
    		onMount,
    		setContext,
    		klass,
    		activeClass,
    		value,
    		vertical,
    		reverse,
    		continuous,
    		container,
    		windowItems,
    		moving,
    		set,
    		next,
    		previous
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('activeClass' in $$props) $$invalidate(5, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(4, value = $$props.value);
    		if ('vertical' in $$props) $$invalidate(1, vertical = $$props.vertical);
    		if ('reverse' in $$props) $$invalidate(2, reverse = $$props.reverse);
    		if ('continuous' in $$props) $$invalidate(6, continuous = $$props.continuous);
    		if ('container' in $$props) $$invalidate(3, container = $$props.container);
    		if ('moving' in $$props) moving = $$props.moving;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 16) {
    			set(value);
    		}
    	};

    	return [
    		klass,
    		vertical,
    		reverse,
    		container,
    		value,
    		activeClass,
    		continuous,
    		set,
    		next,
    		previous,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class Window extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
    			class: 0,
    			activeClass: 5,
    			value: 4,
    			vertical: 1,
    			reverse: 2,
    			continuous: 6,
    			set: 7,
    			next: 8,
    			previous: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Window",
    			options,
    			id: create_fragment$m.name
    		});
    	}

    	get class() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vertical() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vertical(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get reverse() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set reverse(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get continuous() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set continuous(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get set() {
    		return this.$$.ctx[7];
    	}

    	set set(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		return this.$$.ctx[8];
    	}

    	set next(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get previous() {
    		return this.$$.ctx[9];
    	}

    	set previous(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Window\WindowItem.svelte generated by Svelte v3.40.0 */
    const file$g = "node_modules\\svelte-materialify\\dist\\components\\Window\\WindowItem.svelte";

    function create_fragment$l(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-window-item " + /*klass*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[1]);
    			add_location(div, file$g, 31, 0, 699);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[5](div);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-window-item " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(div, "style", /*style*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[5](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('WindowItem', slots, ['default']);
    	let window;
    	const registerWindow = getContext(WINDOW);
    	let { class: klass = '' } = $$props;
    	let { style = null } = $$props;

    	onMount(() => {
    		registerWindow(window);
    	});

    	const writable_props = ['class', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<WindowItem> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			window = $$value;
    			$$invalidate(2, window);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		onMount,
    		WINDOW,
    		window,
    		registerWindow,
    		klass,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('window' in $$props) $$invalidate(2, window = $$props.window);
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, style, window, $$scope, slots, div_binding];
    }

    class WindowItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, { class: 0, style: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WindowItem",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get class() {
    		throw new Error("<WindowItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<WindowItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<WindowItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<WindowItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Tabs\Tabs.svelte generated by Svelte v3.40.0 */
    const file$f = "node_modules\\svelte-materialify\\dist\\components\\Tabs\\Tabs.svelte";
    const get_tabs_slot_changes = dirty => ({});
    const get_tabs_slot_context = ctx => ({});

    // (169:6) {#if slider}
    function create_if_block$9(ctx) {
    	let div;
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", div_class_value = "s-tab-slider " + /*sliderClass*/ ctx[10]);
    			add_location(div, file$f, 169, 8, 3566);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[17](div);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*sliderClass*/ 1024 && div_class_value !== (div_class_value = "s-tab-slider " + /*sliderClass*/ ctx[10])) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[17](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(169:6) {#if slider}",
    		ctx
    	});

    	return block;
    }

    // (161:4) <SlideGroup       bind:value       mandatory       {centerActive}       {showArrows}       on:change={moveSlider}       on:change>
    function create_default_slot_1$6(ctx) {
    	let t;
    	let if_block_anchor;
    	let current;
    	const tabs_slot_template = /*#slots*/ ctx[16].tabs;
    	const tabs_slot = create_slot(tabs_slot_template, ctx, /*$$scope*/ ctx[21], get_tabs_slot_context);
    	let if_block = /*slider*/ ctx[9] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			if (tabs_slot) tabs_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (tabs_slot) {
    				tabs_slot.m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (tabs_slot) {
    				if (tabs_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot(tabs_slot, tabs_slot_template, ctx, /*$$scope*/ ctx[21], !current ? -1 : dirty, get_tabs_slot_changes, get_tabs_slot_context);
    				}
    			}

    			if (/*slider*/ ctx[9]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabs_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabs_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (tabs_slot) tabs_slot.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$6.name,
    		type: "slot",
    		source: "(161:4) <SlideGroup       bind:value       mandatory       {centerActive}       {showArrows}       on:change={moveSlider}       on:change>",
    		ctx
    	});

    	return block;
    }

    // (174:2) <Window bind:this={windowComponent}>
    function create_default_slot$8(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[16].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[21], !current ? -1 : dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(174:2) <Window bind:this={windowComponent}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let div1;
    	let div0;
    	let slidegroup;
    	let updating_value;
    	let div0_class_value;
    	let t;
    	let window;
    	let current;

    	function slidegroup_value_binding(value) {
    		/*slidegroup_value_binding*/ ctx[18](value);
    	}

    	let slidegroup_props = {
    		mandatory: true,
    		centerActive: /*centerActive*/ ctx[2],
    		showArrows: /*showArrows*/ ctx[3],
    		$$slots: { default: [create_default_slot_1$6] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		slidegroup_props.value = /*value*/ ctx[0];
    	}

    	slidegroup = new SlideGroup({ props: slidegroup_props, $$inline: true });
    	binding_callbacks.push(() => bind(slidegroup, 'value', slidegroup_value_binding));
    	slidegroup.$on("change", /*moveSlider*/ ctx[14]);
    	slidegroup.$on("change", /*change_handler*/ ctx[19]);

    	let window_props = {
    		$$slots: { default: [create_default_slot$8] },
    		$$scope: { ctx }
    	};

    	window = new Window({ props: window_props, $$inline: true });
    	/*window_binding*/ ctx[20](window);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(slidegroup.$$.fragment);
    			t = space();
    			create_component(window.$$.fragment);
    			attr_dev(div0, "class", div0_class_value = "s-tabs-bar " + /*klass*/ ctx[1]);
    			attr_dev(div0, "role", "tablist");
    			toggle_class(div0, "fixed-tabs", /*fixedTabs*/ ctx[4]);
    			toggle_class(div0, "grow", /*grow*/ ctx[5]);
    			toggle_class(div0, "centered", /*centered*/ ctx[6]);
    			toggle_class(div0, "right", /*right*/ ctx[7]);
    			toggle_class(div0, "icons", /*icons*/ ctx[8]);
    			add_location(div0, file$f, 152, 2, 3222);
    			attr_dev(div1, "class", "s-tabs");
    			attr_dev(div1, "role", "tablist");
    			toggle_class(div1, "vertical", /*vertical*/ ctx[11]);
    			add_location(div1, file$f, 151, 0, 3169);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(slidegroup, div0, null);
    			append_dev(div1, t);
    			mount_component(window, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const slidegroup_changes = {};
    			if (dirty & /*centerActive*/ 4) slidegroup_changes.centerActive = /*centerActive*/ ctx[2];
    			if (dirty & /*showArrows*/ 8) slidegroup_changes.showArrows = /*showArrows*/ ctx[3];

    			if (dirty & /*$$scope, sliderClass, sliderElement, slider*/ 2102784) {
    				slidegroup_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				slidegroup_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			slidegroup.$set(slidegroup_changes);

    			if (!current || dirty & /*klass*/ 2 && div0_class_value !== (div0_class_value = "s-tabs-bar " + /*klass*/ ctx[1])) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (dirty & /*klass, fixedTabs*/ 18) {
    				toggle_class(div0, "fixed-tabs", /*fixedTabs*/ ctx[4]);
    			}

    			if (dirty & /*klass, grow*/ 34) {
    				toggle_class(div0, "grow", /*grow*/ ctx[5]);
    			}

    			if (dirty & /*klass, centered*/ 66) {
    				toggle_class(div0, "centered", /*centered*/ ctx[6]);
    			}

    			if (dirty & /*klass, right*/ 130) {
    				toggle_class(div0, "right", /*right*/ ctx[7]);
    			}

    			if (dirty & /*klass, icons*/ 258) {
    				toggle_class(div0, "icons", /*icons*/ ctx[8]);
    			}

    			const window_changes = {};

    			if (dirty & /*$$scope*/ 2097152) {
    				window_changes.$$scope = { dirty, ctx };
    			}

    			window.$set(window_changes);

    			if (dirty & /*vertical*/ 2048) {
    				toggle_class(div1, "vertical", /*vertical*/ ctx[11]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(slidegroup.$$.fragment, local);
    			transition_in(window.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(slidegroup.$$.fragment, local);
    			transition_out(window.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(slidegroup);
    			/*window_binding*/ ctx[20](null);
    			destroy_component(window);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const TABS = {};

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tabs', slots, ['tabs','default']);
    	let sliderElement;
    	let windowComponent;
    	const tabs = [];
    	let { class: klass = '' } = $$props;
    	let { value = 0 } = $$props;
    	let { centerActive = false } = $$props;
    	let { showArrows = true } = $$props;
    	let { fixedTabs = false } = $$props;
    	let { grow = false } = $$props;
    	let { centered = false } = $$props;
    	let { right = false } = $$props;
    	let { icons = false } = $$props;
    	let { slider = true } = $$props;
    	let { sliderClass = '' } = $$props;
    	let { ripple = {} } = $$props;
    	let { vertical = false } = $$props;

    	setContext(TABS, {
    		ripple,
    		registerTab: tab => {
    			tabs.push(tab);
    		}
    	});

    	function moveSlider({ detail }) {
    		if (slider) {
    			const activeTab = tabs[detail];

    			if (vertical) {
    				$$invalidate(12, sliderElement.style.top = `${activeTab.offsetTop}px`, sliderElement);
    				$$invalidate(12, sliderElement.style.height = `${activeTab.offsetHeight}px`, sliderElement);
    			} else {
    				$$invalidate(12, sliderElement.style.left = `${activeTab.offsetLeft}px`, sliderElement);
    				$$invalidate(12, sliderElement.style.width = `${activeTab.offsetWidth}px`, sliderElement);
    			}
    		}

    		windowComponent.set(value);
    	}

    	onMount(() => {
    		moveSlider({ detail: value });
    	});

    	const writable_props = [
    		'class',
    		'value',
    		'centerActive',
    		'showArrows',
    		'fixedTabs',
    		'grow',
    		'centered',
    		'right',
    		'icons',
    		'slider',
    		'sliderClass',
    		'ripple',
    		'vertical'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tabs> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			sliderElement = $$value;
    			$$invalidate(12, sliderElement);
    		});
    	}

    	function slidegroup_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	function change_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function window_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			windowComponent = $$value;
    			$$invalidate(13, windowComponent);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(1, klass = $$props.class);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('centerActive' in $$props) $$invalidate(2, centerActive = $$props.centerActive);
    		if ('showArrows' in $$props) $$invalidate(3, showArrows = $$props.showArrows);
    		if ('fixedTabs' in $$props) $$invalidate(4, fixedTabs = $$props.fixedTabs);
    		if ('grow' in $$props) $$invalidate(5, grow = $$props.grow);
    		if ('centered' in $$props) $$invalidate(6, centered = $$props.centered);
    		if ('right' in $$props) $$invalidate(7, right = $$props.right);
    		if ('icons' in $$props) $$invalidate(8, icons = $$props.icons);
    		if ('slider' in $$props) $$invalidate(9, slider = $$props.slider);
    		if ('sliderClass' in $$props) $$invalidate(10, sliderClass = $$props.sliderClass);
    		if ('ripple' in $$props) $$invalidate(15, ripple = $$props.ripple);
    		if ('vertical' in $$props) $$invalidate(11, vertical = $$props.vertical);
    		if ('$$scope' in $$props) $$invalidate(21, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		TABS,
    		SlideGroup,
    		Window,
    		onMount,
    		setContext,
    		sliderElement,
    		windowComponent,
    		tabs,
    		klass,
    		value,
    		centerActive,
    		showArrows,
    		fixedTabs,
    		grow,
    		centered,
    		right,
    		icons,
    		slider,
    		sliderClass,
    		ripple,
    		vertical,
    		moveSlider
    	});

    	$$self.$inject_state = $$props => {
    		if ('sliderElement' in $$props) $$invalidate(12, sliderElement = $$props.sliderElement);
    		if ('windowComponent' in $$props) $$invalidate(13, windowComponent = $$props.windowComponent);
    		if ('klass' in $$props) $$invalidate(1, klass = $$props.klass);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('centerActive' in $$props) $$invalidate(2, centerActive = $$props.centerActive);
    		if ('showArrows' in $$props) $$invalidate(3, showArrows = $$props.showArrows);
    		if ('fixedTabs' in $$props) $$invalidate(4, fixedTabs = $$props.fixedTabs);
    		if ('grow' in $$props) $$invalidate(5, grow = $$props.grow);
    		if ('centered' in $$props) $$invalidate(6, centered = $$props.centered);
    		if ('right' in $$props) $$invalidate(7, right = $$props.right);
    		if ('icons' in $$props) $$invalidate(8, icons = $$props.icons);
    		if ('slider' in $$props) $$invalidate(9, slider = $$props.slider);
    		if ('sliderClass' in $$props) $$invalidate(10, sliderClass = $$props.sliderClass);
    		if ('ripple' in $$props) $$invalidate(15, ripple = $$props.ripple);
    		if ('vertical' in $$props) $$invalidate(11, vertical = $$props.vertical);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		klass,
    		centerActive,
    		showArrows,
    		fixedTabs,
    		grow,
    		centered,
    		right,
    		icons,
    		slider,
    		sliderClass,
    		vertical,
    		sliderElement,
    		windowComponent,
    		moveSlider,
    		ripple,
    		slots,
    		div_binding,
    		slidegroup_value_binding,
    		change_handler,
    		window_binding,
    		$$scope
    	];
    }

    class Tabs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
    			class: 1,
    			value: 0,
    			centerActive: 2,
    			showArrows: 3,
    			fixedTabs: 4,
    			grow: 5,
    			centered: 6,
    			right: 7,
    			icons: 8,
    			slider: 9,
    			sliderClass: 10,
    			ripple: 15,
    			vertical: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tabs",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get class() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get centerActive() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set centerActive(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArrows() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArrows(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixedTabs() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixedTabs(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get grow() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set grow(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get centered() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set centered(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get right() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set right(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icons() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icons(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get slider() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set slider(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sliderClass() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sliderClass(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vertical() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vertical(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Tabs\Tab.svelte generated by Svelte v3.40.0 */
    const file$e = "node_modules\\svelte-materialify\\dist\\components\\Tabs\\Tab.svelte";

    function create_fragment$j(ctx) {
    	let button;
    	let button_class_value;
    	let button_tabindex_value;
    	let Class_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot) default_slot.c();
    			attr_dev(button, "class", button_class_value = "s-tab s-slide-item " + /*klass*/ ctx[0]);
    			attr_dev(button, "role", "tab");
    			attr_dev(button, "aria-selected", /*active*/ ctx[4]);
    			attr_dev(button, "tabindex", button_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0);
    			toggle_class(button, "disabled", /*disabled*/ ctx[2]);
    			toggle_class(button, "active", /*active*/ ctx[4]);
    			add_location(button, file$e, 92, 0, 2031);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			/*button_binding*/ ctx[11](button);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(Class_action = Class.call(null, button, [/*active*/ ctx[4] && /*activeClass*/ ctx[1]])),
    					listen_dev(button, "click", /*selectTab*/ ctx[6], false, false, false),
    					listen_dev(button, "click", /*click_handler*/ ctx[10], false, false, false),
    					action_destroyer(Ripple.call(null, button, /*ripple*/ ctx[5]))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], !current ? -1 : dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && button_class_value !== (button_class_value = "s-tab s-slide-item " + /*klass*/ ctx[0])) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (!current || dirty & /*active*/ 16) {
    				attr_dev(button, "aria-selected", /*active*/ ctx[4]);
    			}

    			if (!current || dirty & /*disabled*/ 4 && button_tabindex_value !== (button_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0)) {
    				attr_dev(button, "tabindex", button_tabindex_value);
    			}

    			if (Class_action && is_function(Class_action.update) && dirty & /*active, activeClass*/ 18) Class_action.update.call(null, [/*active*/ ctx[4] && /*activeClass*/ ctx[1]]);

    			if (dirty & /*klass, disabled*/ 5) {
    				toggle_class(button, "disabled", /*disabled*/ ctx[2]);
    			}

    			if (dirty & /*klass, active*/ 17) {
    				toggle_class(button, "active", /*active*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot) default_slot.d(detaching);
    			/*button_binding*/ ctx[11](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tab', slots, ['default']);
    	let tab;
    	const click = getContext(SLIDE_GROUP);
    	const ITEM = getContext(ITEM_GROUP);
    	const { ripple, registerTab } = getContext(TABS);
    	let { class: klass = '' } = $$props;
    	let { value = ITEM.index() } = $$props;
    	let { activeClass = ITEM.activeClass } = $$props;
    	let { disabled = false } = $$props;
    	let active;

    	ITEM.register(values => {
    		$$invalidate(4, active = values.includes(value));
    	});

    	function selectTab({ target }) {
    		if (!disabled) {
    			click(target);
    			ITEM.select(value);
    		}
    	}

    	onMount(() => {
    		registerTab(tab);
    	});

    	const writable_props = ['class', 'value', 'activeClass', 'disabled'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tab> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function button_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			tab = $$value;
    			$$invalidate(3, tab);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('activeClass' in $$props) $$invalidate(1, activeClass = $$props.activeClass);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		onMount,
    		SLIDE_GROUP,
    		ITEM_GROUP,
    		TABS,
    		Class,
    		Ripple,
    		tab,
    		click,
    		ITEM,
    		ripple,
    		registerTab,
    		klass,
    		value,
    		activeClass,
    		disabled,
    		active,
    		selectTab
    	});

    	$$self.$inject_state = $$props => {
    		if ('tab' in $$props) $$invalidate(3, tab = $$props.tab);
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('activeClass' in $$props) $$invalidate(1, activeClass = $$props.activeClass);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ('active' in $$props) $$invalidate(4, active = $$props.active);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		klass,
    		activeClass,
    		disabled,
    		tab,
    		active,
    		ripple,
    		selectTab,
    		value,
    		$$scope,
    		slots,
    		click_handler,
    		button_binding
    	];
    }

    class Tab extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {
    			class: 0,
    			value: 7,
    			activeClass: 1,
    			disabled: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tab",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get class() {
    		throw new Error("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\Admin.svelte generated by Svelte v3.40.0 */

    const { console: console_1$5 } = globals;
    const file$d = "src\\Admin.svelte";

    // (55:6) <TextField          clearable          {rules}          bind:validation={validationArray[0]}          bind:value={courseCode}>
    function create_default_slot_16(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Course Code");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16.name,
    		type: "slot",
    		source: "(55:6) <TextField          clearable          {rules}          bind:validation={validationArray[0]}          bind:value={courseCode}>",
    		ctx
    	});

    	return block;
    }

    // (54:4) <Col>
    function create_default_slot_15$1(ctx) {
    	let textfield;
    	let updating_validation;
    	let updating_value;
    	let current;

    	function textfield_validation_binding(value) {
    		/*textfield_validation_binding*/ ctx[11](value);
    	}

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[12](value);
    	}

    	let textfield_props = {
    		clearable: true,
    		rules: /*rules*/ ctx[8],
    		$$slots: { default: [create_default_slot_16] },
    		$$scope: { ctx }
    	};

    	if (/*validationArray*/ ctx[0][0] !== void 0) {
    		textfield_props.validation = /*validationArray*/ ctx[0][0];
    	}

    	if (/*courseCode*/ ctx[1] !== void 0) {
    		textfield_props.value = /*courseCode*/ ctx[1];
    	}

    	textfield = new TextField({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'validation', textfield_validation_binding));
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				textfield_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_validation && dirty & /*validationArray*/ 1) {
    				updating_validation = true;
    				textfield_changes.validation = /*validationArray*/ ctx[0][0];
    				add_flush_callback(() => updating_validation = false);
    			}

    			if (!updating_value && dirty & /*courseCode*/ 2) {
    				updating_value = true;
    				textfield_changes.value = /*courseCode*/ ctx[1];
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$1.name,
    		type: "slot",
    		source: "(54:4) <Col>",
    		ctx
    	});

    	return block;
    }

    // (63:4) <TextField        clearable        {rules}        bind:validation={validationArray[1]}        bind:value={courseName}>
    function create_default_slot_14$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Course Name");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$1.name,
    		type: "slot",
    		source: "(63:4) <TextField        clearable        {rules}        bind:validation={validationArray[1]}        bind:value={courseName}>",
    		ctx
    	});

    	return block;
    }

    // (53:2) <Row>
    function create_default_slot_13$2(ctx) {
    	let col;
    	let t;
    	let textfield;
    	let updating_validation;
    	let updating_value;
    	let current;

    	col = new Col({
    			props: {
    				$$slots: { default: [create_default_slot_15$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function textfield_validation_binding_1(value) {
    		/*textfield_validation_binding_1*/ ctx[13](value);
    	}

    	function textfield_value_binding_1(value) {
    		/*textfield_value_binding_1*/ ctx[14](value);
    	}

    	let textfield_props = {
    		clearable: true,
    		rules: /*rules*/ ctx[8],
    		$$slots: { default: [create_default_slot_14$1] },
    		$$scope: { ctx }
    	};

    	if (/*validationArray*/ ctx[0][1] !== void 0) {
    		textfield_props.validation = /*validationArray*/ ctx[0][1];
    	}

    	if (/*courseName*/ ctx[2] !== void 0) {
    		textfield_props.value = /*courseName*/ ctx[2];
    	}

    	textfield = new TextField({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'validation', textfield_validation_binding_1));
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(col.$$.fragment);
    			t = space();
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(col, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const col_changes = {};

    			if (dirty & /*$$scope, validationArray, courseCode*/ 1048579) {
    				col_changes.$$scope = { dirty, ctx };
    			}

    			col.$set(col_changes);
    			const textfield_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				textfield_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_validation && dirty & /*validationArray*/ 1) {
    				updating_validation = true;
    				textfield_changes.validation = /*validationArray*/ ctx[0][1];
    				add_flush_callback(() => updating_validation = false);
    			}

    			if (!updating_value && dirty & /*courseName*/ 4) {
    				updating_value = true;
    				textfield_changes.value = /*courseName*/ ctx[2];
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(col.$$.fragment, local);
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(col.$$.fragment, local);
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(col, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$2.name,
    		type: "slot",
    		source: "(53:2) <Row>",
    		ctx
    	});

    	return block;
    }

    // (73:6) <TextField          clearable          {rules}          bind:validation={validationArray[2]}          bind:value={credits}>
    function create_default_slot_12$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Credits");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$2.name,
    		type: "slot",
    		source: "(73:6) <TextField          clearable          {rules}          bind:validation={validationArray[2]}          bind:value={credits}>",
    		ctx
    	});

    	return block;
    }

    // (72:4) <Col>
    function create_default_slot_11$2(ctx) {
    	let textfield;
    	let updating_validation;
    	let updating_value;
    	let current;

    	function textfield_validation_binding_2(value) {
    		/*textfield_validation_binding_2*/ ctx[15](value);
    	}

    	function textfield_value_binding_2(value) {
    		/*textfield_value_binding_2*/ ctx[16](value);
    	}

    	let textfield_props = {
    		clearable: true,
    		rules: /*rules*/ ctx[8],
    		$$slots: { default: [create_default_slot_12$2] },
    		$$scope: { ctx }
    	};

    	if (/*validationArray*/ ctx[0][2] !== void 0) {
    		textfield_props.validation = /*validationArray*/ ctx[0][2];
    	}

    	if (/*credits*/ ctx[4] !== void 0) {
    		textfield_props.value = /*credits*/ ctx[4];
    	}

    	textfield = new TextField({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'validation', textfield_validation_binding_2));
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_2));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				textfield_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_validation && dirty & /*validationArray*/ 1) {
    				updating_validation = true;
    				textfield_changes.validation = /*validationArray*/ ctx[0][2];
    				add_flush_callback(() => updating_validation = false);
    			}

    			if (!updating_value && dirty & /*credits*/ 16) {
    				updating_value = true;
    				textfield_changes.value = /*credits*/ ctx[4];
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$2.name,
    		type: "slot",
    		source: "(72:4) <Col>",
    		ctx
    	});

    	return block;
    }

    // (82:6) <Select bind:value={subject} items={subjects} mandatory={true}>
    function create_default_slot_10$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Subject");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$2.name,
    		type: "slot",
    		source: "(82:6) <Select bind:value={subject} items={subjects} mandatory={true}>",
    		ctx
    	});

    	return block;
    }

    // (81:4) <Col>
    function create_default_slot_9$2(ctx) {
    	let select;
    	let updating_value;
    	let current;

    	function select_value_binding(value) {
    		/*select_value_binding*/ ctx[17](value);
    	}

    	let select_props = {
    		items: subjects,
    		mandatory: true,
    		$$slots: { default: [create_default_slot_10$2] },
    		$$scope: { ctx }
    	};

    	if (/*subject*/ ctx[5] !== void 0) {
    		select_props.value = /*subject*/ ctx[5];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'value', select_value_binding));

    	const block = {
    		c: function create() {
    			create_component(select.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(select, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const select_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				select_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*subject*/ 32) {
    				updating_value = true;
    				select_changes.value = /*subject*/ ctx[5];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(select, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$2.name,
    		type: "slot",
    		source: "(81:4) <Col>",
    		ctx
    	});

    	return block;
    }

    // (87:6) <Select bind:value={GERCategory} items={GERCategories}>
    function create_default_slot_8$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("GER Category (if any)");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$3.name,
    		type: "slot",
    		source: "(87:6) <Select bind:value={GERCategory} items={GERCategories}>",
    		ctx
    	});

    	return block;
    }

    // (86:4) <Col>
    function create_default_slot_7$3(ctx) {
    	let select;
    	let updating_value;
    	let current;

    	function select_value_binding_1(value) {
    		/*select_value_binding_1*/ ctx[18](value);
    	}

    	let select_props = {
    		items: GERCategories,
    		$$slots: { default: [create_default_slot_8$3] },
    		$$scope: { ctx }
    	};

    	if (/*GERCategory*/ ctx[6] !== void 0) {
    		select_props.value = /*GERCategory*/ ctx[6];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'value', select_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(select.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(select, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const select_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				select_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*GERCategory*/ 64) {
    				updating_value = true;
    				select_changes.value = /*GERCategory*/ ctx[6];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(select, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$3.name,
    		type: "slot",
    		source: "(86:4) <Col>",
    		ctx
    	});

    	return block;
    }

    // (71:2) <Row>
    function create_default_slot_6$3(ctx) {
    	let col0;
    	let t0;
    	let col1;
    	let t1;
    	let col2;
    	let current;

    	col0 = new Col({
    			props: {
    				$$slots: { default: [create_default_slot_11$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	col1 = new Col({
    			props: {
    				$$slots: { default: [create_default_slot_9$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	col2 = new Col({
    			props: {
    				$$slots: { default: [create_default_slot_7$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(col0.$$.fragment);
    			t0 = space();
    			create_component(col1.$$.fragment);
    			t1 = space();
    			create_component(col2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(col0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(col1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(col2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const col0_changes = {};

    			if (dirty & /*$$scope, validationArray, credits*/ 1048593) {
    				col0_changes.$$scope = { dirty, ctx };
    			}

    			col0.$set(col0_changes);
    			const col1_changes = {};

    			if (dirty & /*$$scope, subject*/ 1048608) {
    				col1_changes.$$scope = { dirty, ctx };
    			}

    			col1.$set(col1_changes);
    			const col2_changes = {};

    			if (dirty & /*$$scope, GERCategory*/ 1048640) {
    				col2_changes.$$scope = { dirty, ctx };
    			}

    			col2.$set(col2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(col0.$$.fragment, local);
    			transition_in(col1.$$.fragment, local);
    			transition_in(col2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(col0.$$.fragment, local);
    			transition_out(col1.$$.fragment, local);
    			transition_out(col2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(col0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(col1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(col2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$3.name,
    		type: "slot",
    		source: "(71:2) <Row>",
    		ctx
    	});

    	return block;
    }

    // (93:4) <Textarea autogrow {rules} counter={1000} bind:value={courseDesc}>
    function create_default_slot_5$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Course Description");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$3.name,
    		type: "slot",
    		source: "(93:4) <Textarea autogrow {rules} counter={1000} bind:value={courseDesc}>",
    		ctx
    	});

    	return block;
    }

    // (92:2) <Row style="padding:20px;">
    function create_default_slot_4$3(ctx) {
    	let textarea;
    	let updating_value;
    	let current;

    	function textarea_value_binding(value) {
    		/*textarea_value_binding*/ ctx[19](value);
    	}

    	let textarea_props = {
    		autogrow: true,
    		rules: /*rules*/ ctx[8],
    		counter: 1000,
    		$$slots: { default: [create_default_slot_5$3] },
    		$$scope: { ctx }
    	};

    	if (/*courseDesc*/ ctx[3] !== void 0) {
    		textarea_props.value = /*courseDesc*/ ctx[3];
    	}

    	textarea = new Textarea({ props: textarea_props, $$inline: true });
    	binding_callbacks.push(() => bind(textarea, 'value', textarea_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textarea.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textarea, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textarea_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				textarea_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*courseDesc*/ 8) {
    				updating_value = true;
    				textarea_changes.value = /*courseDesc*/ ctx[3];
    				add_flush_callback(() => updating_value = false);
    			}

    			textarea.$set(textarea_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textarea.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textarea.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textarea, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$3.name,
    		type: "slot",
    		source: "(92:2) <Row style=\\\"padding:20px;\\\">",
    		ctx
    	});

    	return block;
    }

    // (102:2) {:else}
    function create_else_block$6(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				noGutters: true,
    				$$slots: { default: [create_default_slot_2$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(102:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (97:2) {#if validationError}
    function create_if_block$8(ctx) {
    	let row;
    	let t0;
    	let div;
    	let current;

    	row = new Row({
    			props: {
    				noGutters: true,
    				$$slots: { default: [create_default_slot$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    			t0 = space();
    			div = element("div");
    			div.textContent = "Please fill in all required fields.";
    			set_style(div, "color", "red");
    			add_location(div, file$d, 100, 4, 2442);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(97:2) {#if validationError}",
    		ctx
    	});

    	return block;
    }

    // (104:6) <Button class="green white-text" on:click={addCourse}>
    function create_default_slot_3$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Add Course");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$4.name,
    		type: "slot",
    		source: "(104:6) <Button class=\\\"green white-text\\\" on:click={addCourse}>",
    		ctx
    	});

    	return block;
    }

    // (103:4) <Row noGutters>
    function create_default_slot_2$4(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				class: "green white-text",
    				$$slots: { default: [create_default_slot_3$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*addCourse*/ ctx[9]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$4.name,
    		type: "slot",
    		source: "(103:4) <Row noGutters>",
    		ctx
    	});

    	return block;
    }

    // (99:6) <Button class="red white-text" on:click={addCourse}>
    function create_default_slot_1$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Add Course");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$5.name,
    		type: "slot",
    		source: "(99:6) <Button class=\\\"red white-text\\\" on:click={addCourse}>",
    		ctx
    	});

    	return block;
    }

    // (98:4) <Row noGutters>
    function create_default_slot$7(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				class: "red white-text",
    				$$slots: { default: [create_default_slot_1$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*addCourse*/ ctx[9]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(98:4) <Row noGutters>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div;
    	let row0;
    	let t0;
    	let row1;
    	let t1;
    	let row2;
    	let t2;
    	let current_block_type_index;
    	let if_block;
    	let current;

    	row0 = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_13$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	row1 = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_6$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	row2 = new Row({
    			props: {
    				style: "padding:20px;",
    				$$slots: { default: [create_default_slot_4$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block$8, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*validationError*/ ctx[7]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(row0.$$.fragment);
    			t0 = space();
    			create_component(row1.$$.fragment);
    			t1 = space();
    			create_component(row2.$$.fragment);
    			t2 = space();
    			if_block.c();
    			attr_dev(div, "class", "container svelte-7cu5ng");
    			add_location(div, file$d, 51, 0, 1270);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(row0, div, null);
    			append_dev(div, t0);
    			mount_component(row1, div, null);
    			append_dev(div, t1);
    			mount_component(row2, div, null);
    			append_dev(div, t2);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const row0_changes = {};

    			if (dirty & /*$$scope, validationArray, courseName, courseCode*/ 1048583) {
    				row0_changes.$$scope = { dirty, ctx };
    			}

    			row0.$set(row0_changes);
    			const row1_changes = {};

    			if (dirty & /*$$scope, GERCategory, subject, validationArray, credits*/ 1048689) {
    				row1_changes.$$scope = { dirty, ctx };
    			}

    			row1.$set(row1_changes);
    			const row2_changes = {};

    			if (dirty & /*$$scope, courseDesc*/ 1048584) {
    				row2_changes.$$scope = { dirty, ctx };
    			}

    			row2.$set(row2_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row0.$$.fragment, local);
    			transition_in(row1.$$.fragment, local);
    			transition_in(row2.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row0.$$.fragment, local);
    			transition_out(row1.$$.fragment, local);
    			transition_out(row2.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(row0);
    			destroy_component(row1);
    			destroy_component(row2);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Admin', slots, []);
    	let { coursesRef } = $$props;
    	let courseCode, courseName, courseDesc, credits, subject, GERCategory;

    	//validation of all fields
    	let validationArray = new Array(10).fill(false);

    	//declare rules for required fields
    	const rules = [v => !!v || "Required"];

    	//variable to handle button UI
    	let validationError = false;

    	function addCourse() {
    		if (!validationArray.includes(false)) {
    			let newCourseRef = coursesRef.doc();

    			newCourseRef.set({
    				code: courseCode,
    				name: courseName,
    				credits: parseFloat(credits),
    				subject,
    				description: courseDesc,
    				GERCategory,
    				courseId: newCourse.id,
    				createdTime: firebase.firestore.Timestamp.fromDate(new Date())
    			});
    		} else {
    			$$invalidate(7, validationError = true);

    			setTimeout(
    				function () {
    					$$invalidate(7, validationError = false);
    				},
    				1000
    			);
    		}
    	}

    	const writable_props = ['coursesRef'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<Admin> was created with unknown prop '${key}'`);
    	});

    	function textfield_validation_binding(value) {
    		if ($$self.$$.not_equal(validationArray[0], value)) {
    			validationArray[0] = value;
    			$$invalidate(0, validationArray);
    		}
    	}

    	function textfield_value_binding(value) {
    		courseCode = value;
    		$$invalidate(1, courseCode);
    	}

    	function textfield_validation_binding_1(value) {
    		if ($$self.$$.not_equal(validationArray[1], value)) {
    			validationArray[1] = value;
    			$$invalidate(0, validationArray);
    		}
    	}

    	function textfield_value_binding_1(value) {
    		courseName = value;
    		$$invalidate(2, courseName);
    	}

    	function textfield_validation_binding_2(value) {
    		if ($$self.$$.not_equal(validationArray[2], value)) {
    			validationArray[2] = value;
    			$$invalidate(0, validationArray);
    		}
    	}

    	function textfield_value_binding_2(value) {
    		credits = value;
    		$$invalidate(4, credits);
    	}

    	function select_value_binding(value) {
    		subject = value;
    		$$invalidate(5, subject);
    	}

    	function select_value_binding_1(value) {
    		GERCategory = value;
    		$$invalidate(6, GERCategory);
    	}

    	function textarea_value_binding(value) {
    		courseDesc = value;
    		$$invalidate(3, courseDesc);
    	}

    	$$self.$$set = $$props => {
    		if ('coursesRef' in $$props) $$invalidate(10, coursesRef = $$props.coursesRef);
    	};

    	$$self.$capture_state = () => ({
    		subjects,
    		GERCategories,
    		firebase,
    		Row,
    		Col,
    		Select,
    		TextField,
    		Textarea,
    		Button,
    		coursesRef,
    		courseCode,
    		courseName,
    		courseDesc,
    		credits,
    		subject,
    		GERCategory,
    		validationArray,
    		rules,
    		validationError,
    		addCourse
    	});

    	$$self.$inject_state = $$props => {
    		if ('coursesRef' in $$props) $$invalidate(10, coursesRef = $$props.coursesRef);
    		if ('courseCode' in $$props) $$invalidate(1, courseCode = $$props.courseCode);
    		if ('courseName' in $$props) $$invalidate(2, courseName = $$props.courseName);
    		if ('courseDesc' in $$props) $$invalidate(3, courseDesc = $$props.courseDesc);
    		if ('credits' in $$props) $$invalidate(4, credits = $$props.credits);
    		if ('subject' in $$props) $$invalidate(5, subject = $$props.subject);
    		if ('GERCategory' in $$props) $$invalidate(6, GERCategory = $$props.GERCategory);
    		if ('validationArray' in $$props) $$invalidate(0, validationArray = $$props.validationArray);
    		if ('validationError' in $$props) $$invalidate(7, validationError = $$props.validationError);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*validationArray*/ 1) {
    			console.log(validationArray);
    		}
    	};

    	return [
    		validationArray,
    		courseCode,
    		courseName,
    		courseDesc,
    		credits,
    		subject,
    		GERCategory,
    		validationError,
    		rules,
    		addCourse,
    		coursesRef,
    		textfield_validation_binding,
    		textfield_value_binding,
    		textfield_validation_binding_1,
    		textfield_value_binding_1,
    		textfield_validation_binding_2,
    		textfield_value_binding_2,
    		select_value_binding,
    		select_value_binding_1,
    		textarea_value_binding
    	];
    }

    class Admin extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { coursesRef: 10 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Admin",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*coursesRef*/ ctx[10] === undefined && !('coursesRef' in props)) {
    			console_1$5.warn("<Admin> was created without expected prop 'coursesRef'");
    		}
    	}

    	get coursesRef() {
    		throw new Error("<Admin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set coursesRef(value) {
    		throw new Error("<Admin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-rate-it\Rate.svelte generated by Svelte v3.40.0 */
    const file$c = "node_modules\\svelte-rate-it\\Rate.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[25] = list[i];
    	return child_ctx;
    }

    // (141:0) {#if length > 0}
    function create_if_block$7(ctx) {
    	let div1;
    	let svg;
    	let defs;
    	let symbol;
    	let title;
    	let t0;
    	let path;
    	let t1;
    	let t2;
    	let div0;
    	let t3;
    	let each_value = /*arr*/ ctx[6];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	let if_block0 = /*showCount*/ ctx[1] && /*over*/ ctx[5] > 0 && create_if_block_2(ctx);
    	let if_block1 = /*ratedesc*/ ctx[2].length > 0 && /*over*/ ctx[5] > 0 && create_if_block_1$2(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			svg = svg_element("svg");
    			defs = svg_element("defs");
    			symbol = svg_element("symbol");
    			title = svg_element("title");
    			t0 = text("star-full");
    			path = svg_element("path");
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t3 = space();
    			if (if_block1) if_block1.c();
    			add_location(title, file$c, 151, 10, 3208);
    			attr_dev(path, "d", "M32 12.408l-11.056-1.607-4.944-10.018-4.944 10.018-11.056 1.607 8\r\n            7.798-1.889 11.011 9.889-5.199 9.889 5.199-1.889-11.011 8-7.798z");
    			add_location(path, file$c, 152, 10, 3244);
    			attr_dev(symbol, "id", "icon-star-full");
    			attr_dev(symbol, "viewBox", "0 0 32 32");
    			add_location(symbol, file$c, 150, 8, 3148);
    			add_location(defs, file$c, 149, 6, 3132);
    			set_style(svg, "position", "absolute");
    			set_style(svg, "width", "0");
    			set_style(svg, "height", "0");
    			attr_dev(svg, "width", "0");
    			attr_dev(svg, "height", "0");
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			add_location(svg, file$c, 142, 4, 2915);
    			attr_dev(div0, "class", "Rate__view svelte-1clwh5j");
    			toggle_class(div0, ":disabled", /*disabled*/ ctx[3]);
    			add_location(div0, file$c, 186, 4, 4116);
    			attr_dev(div1, "class", "Rate svelte-1clwh5j");
    			add_location(div1, file$c, 141, 2, 2891);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, svg);
    			append_dev(svg, defs);
    			append_dev(defs, symbol);
    			append_dev(symbol, title);
    			append_dev(title, t0);
    			append_dev(symbol, path);
    			append_dev(div1, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t3);
    			if (if_block1) if_block1.m(div0, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*arr, disabled, over, rate, isFilled, onOver, onOut, setRate*/ 2040) {
    				each_value = /*arr*/ ctx[6];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, t2);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*showCount*/ ctx[1] && /*over*/ ctx[5] > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2(ctx);
    					if_block0.c();
    					if_block0.m(div0, t3);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*ratedesc*/ ctx[2].length > 0 && /*over*/ ctx[5] > 0) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$2(ctx);
    					if_block1.c();
    					if_block1.m(div0, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*disabled*/ 8) {
    				toggle_class(div0, ":disabled", /*disabled*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(141:0) {#if length > 0}",
    		ctx
    	});

    	return block;
    }

    // (159:4) {#each arr as n}
    function create_each_block$8(ctx) {
    	let button;
    	let svg;
    	let use;
    	let mounted;
    	let dispose;

    	function mouseover_handler() {
    		return /*mouseover_handler*/ ctx[17](/*n*/ ctx[25]);
    	}

    	function mouseout_handler() {
    		return /*mouseout_handler*/ ctx[18](/*n*/ ctx[25]);
    	}

    	function click_handler() {
    		return /*click_handler*/ ctx[19](/*n*/ ctx[25]);
    	}

    	function keyup_handler() {
    		return /*keyup_handler*/ ctx[20](/*n*/ ctx[25]);
    	}

    	function keyup_enter_handler() {
    		return /*keyup_enter_handler*/ ctx[21](/*n*/ ctx[25]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			svg = svg_element("svg");
    			use = svg_element("use");
    			xlink_attr(use, "xlink:href", "#icon-star-full");
    			add_location(use, file$c, 182, 10, 4028);
    			attr_dev(svg, "class", "icon svelte-1clwh5j");
    			add_location(svg, file$c, 181, 8, 3998);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "key", /*n*/ ctx[25]);
    			attr_dev(button, "class", "" + (null_to_empty('Rate__star') + " svelte-1clwh5j"));
    			button.disabled = /*disabled*/ ctx[3];
    			toggle_class(button, "hover", /*n*/ ctx[25] <= /*over*/ ctx[5]);
    			toggle_class(button, "filled", /*n*/ ctx[25] <= /*rate*/ ctx[4] || /*isFilled*/ ctx[10](/*n*/ ctx[25]));
    			add_location(button, file$c, 159, 6, 3489);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, svg);
    			append_dev(svg, use);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "mouseover", mouseover_handler, false, false, false),
    					listen_dev(button, "mouseout", mouseout_handler, false, false, false),
    					listen_dev(button, "click", click_handler, false, false, false),
    					listen_dev(button, "keyup", keyup_handler, false, false, false),
    					listen_dev(button, "keyup.enter", keyup_enter_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*disabled*/ 8) {
    				prop_dev(button, "disabled", /*disabled*/ ctx[3]);
    			}

    			if (dirty & /*arr, over*/ 96) {
    				toggle_class(button, "hover", /*n*/ ctx[25] <= /*over*/ ctx[5]);
    			}

    			if (dirty & /*arr, rate, isFilled*/ 1104) {
    				toggle_class(button, "filled", /*n*/ ctx[25] <= /*rate*/ ctx[4] || /*isFilled*/ ctx[10](/*n*/ ctx[25]));
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(159:4) {#each arr as n}",
    		ctx
    	});

    	return block;
    }

    // (188:6) {#if showCount && over > 0}
    function create_if_block_2(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*over*/ ctx[5]);
    			attr_dev(span, "class", "count svelte-1clwh5j");
    			add_location(span, file$c, 188, 8, 4212);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*over*/ 32) set_data_dev(t, /*over*/ ctx[5]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(188:6) {#if showCount && over > 0}",
    		ctx
    	});

    	return block;
    }

    // (191:6) {#if ratedesc.length > 0 && over > 0}
    function create_if_block_1$2(ctx) {
    	let span;
    	let t_value = /*ratedesc*/ ctx[2][/*over*/ ctx[5] - 1] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "class", "desc svelte-1clwh5j");
    			add_location(span, file$c, 191, 8, 4313);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*ratedesc, over*/ 36 && t_value !== (t_value = /*ratedesc*/ ctx[2][/*over*/ ctx[5] - 1] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(191:6) {#if ratedesc.length > 0 && over > 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let if_block_anchor;
    	let if_block = /*length*/ ctx[0] > 0 && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*length*/ ctx[0] > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Rate', slots, []);
    	let { value = null } = $$props;
    	let { name = "rate" } = $$props;
    	let { length = 5 } = $$props;
    	let { showCount = false } = $$props;
    	let { required = false } = $$props;
    	let { ratedesc = [] } = $$props;
    	let { beforeRate } = $$props;
    	let { afterRate } = $$props;
    	let { disabled = false } = $$props;
    	let { readonly = false } = $$props;
    	let arr = [];
    	let rate = 0;
    	let over = 0;

    	const convertValue = val => {
    		if (val >= length) {
    			val = length;
    		} else if (val < 0) {
    			val = 0;
    		}

    		return val;
    	};

    	const onOver = index => {
    		if (!readonly) $$invalidate(5, over = index);
    	};

    	const onOut = () => {
    		if (!readonly) $$invalidate(5, over = rate);
    	};

    	const setRate = index => {
    		if (readonly) return false;
    		$$invalidate(11, value = index);

    		if (typeof beforeRate === "function") {
    			beforeRate(rate);
    		}

    		$$invalidate(4, rate = index);

    		if (typeof afterRate === "function") {
    			afterRate(rate);
    		}
    	};

    	const isFilled = index => {
    		return index <= over;
    	};

    	const isEmpty = index => {
    		return index > over || !value && !over;
    	};

    	const createArray = () => {
    		for (let i = 1; i <= length; i++) {
    			arr.push(i);
    		}
    	};

    	beforeUpdate(() => {
    		if (arr.length === 0) {
    			createArray();
    		}
    	});

    	onMount(() => {
    		$$invalidate(11, value = convertValue(value));
    		$$invalidate(4, rate = convertValue(value));
    		$$invalidate(5, over = convertValue(value));
    	});

    	const writable_props = [
    		'value',
    		'name',
    		'length',
    		'showCount',
    		'required',
    		'ratedesc',
    		'beforeRate',
    		'afterRate',
    		'disabled',
    		'readonly'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Rate> was created with unknown prop '${key}'`);
    	});

    	const mouseover_handler = n => {
    		onOver(n);
    	};

    	const mouseout_handler = n => {
    		onOut();
    	};

    	const click_handler = n => {
    		setRate(n);
    	};

    	const keyup_handler = n => {
    		onOver(n);
    	};

    	const keyup_enter_handler = n => {
    		setRate(n);
    	};

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(11, value = $$props.value);
    		if ('name' in $$props) $$invalidate(12, name = $$props.name);
    		if ('length' in $$props) $$invalidate(0, length = $$props.length);
    		if ('showCount' in $$props) $$invalidate(1, showCount = $$props.showCount);
    		if ('required' in $$props) $$invalidate(13, required = $$props.required);
    		if ('ratedesc' in $$props) $$invalidate(2, ratedesc = $$props.ratedesc);
    		if ('beforeRate' in $$props) $$invalidate(14, beforeRate = $$props.beforeRate);
    		if ('afterRate' in $$props) $$invalidate(15, afterRate = $$props.afterRate);
    		if ('disabled' in $$props) $$invalidate(3, disabled = $$props.disabled);
    		if ('readonly' in $$props) $$invalidate(16, readonly = $$props.readonly);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		beforeUpdate,
    		value,
    		name,
    		length,
    		showCount,
    		required,
    		ratedesc,
    		beforeRate,
    		afterRate,
    		disabled,
    		readonly,
    		arr,
    		rate,
    		over,
    		convertValue,
    		onOver,
    		onOut,
    		setRate,
    		isFilled,
    		isEmpty,
    		createArray
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(11, value = $$props.value);
    		if ('name' in $$props) $$invalidate(12, name = $$props.name);
    		if ('length' in $$props) $$invalidate(0, length = $$props.length);
    		if ('showCount' in $$props) $$invalidate(1, showCount = $$props.showCount);
    		if ('required' in $$props) $$invalidate(13, required = $$props.required);
    		if ('ratedesc' in $$props) $$invalidate(2, ratedesc = $$props.ratedesc);
    		if ('beforeRate' in $$props) $$invalidate(14, beforeRate = $$props.beforeRate);
    		if ('afterRate' in $$props) $$invalidate(15, afterRate = $$props.afterRate);
    		if ('disabled' in $$props) $$invalidate(3, disabled = $$props.disabled);
    		if ('readonly' in $$props) $$invalidate(16, readonly = $$props.readonly);
    		if ('arr' in $$props) $$invalidate(6, arr = $$props.arr);
    		if ('rate' in $$props) $$invalidate(4, rate = $$props.rate);
    		if ('over' in $$props) $$invalidate(5, over = $$props.over);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 2048) {
    			if (value) {
    				$$invalidate(4, rate = convertValue(value));
    				$$invalidate(5, over = convertValue(value));
    			}
    		}
    	};

    	return [
    		length,
    		showCount,
    		ratedesc,
    		disabled,
    		rate,
    		over,
    		arr,
    		onOver,
    		onOut,
    		setRate,
    		isFilled,
    		value,
    		name,
    		required,
    		beforeRate,
    		afterRate,
    		readonly,
    		mouseover_handler,
    		mouseout_handler,
    		click_handler,
    		keyup_handler,
    		keyup_enter_handler
    	];
    }

    class Rate extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
    			value: 11,
    			name: 12,
    			length: 0,
    			showCount: 1,
    			required: 13,
    			ratedesc: 2,
    			beforeRate: 14,
    			afterRate: 15,
    			disabled: 3,
    			readonly: 16
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Rate",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*beforeRate*/ ctx[14] === undefined && !('beforeRate' in props)) {
    			console.warn("<Rate> was created without expected prop 'beforeRate'");
    		}

    		if (/*afterRate*/ ctx[15] === undefined && !('afterRate' in props)) {
    			console.warn("<Rate> was created without expected prop 'afterRate'");
    		}
    	}

    	get value() {
    		throw new Error("<Rate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Rate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<Rate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Rate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get length() {
    		throw new Error("<Rate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set length(value) {
    		throw new Error("<Rate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showCount() {
    		throw new Error("<Rate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showCount(value) {
    		throw new Error("<Rate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get required() {
    		throw new Error("<Rate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set required(value) {
    		throw new Error("<Rate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ratedesc() {
    		throw new Error("<Rate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ratedesc(value) {
    		throw new Error("<Rate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get beforeRate() {
    		throw new Error("<Rate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set beforeRate(value) {
    		throw new Error("<Rate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get afterRate() {
    		throw new Error("<Rate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set afterRate(value) {
    		throw new Error("<Rate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Rate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Rate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<Rate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<Rate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\CourseAccordian.svelte generated by Svelte v3.40.0 */

    const { console: console_1$4 } = globals;
    const file$b = "src\\CourseAccordian.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (75:10) {:else}
    function create_else_block$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("No professors assigned...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(75:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (73:10) {#each userCourse.professors as professor}
    function create_each_block$7(ctx) {
    	let li;
    	let t_value = /*professor*/ ctx[5] + "";
    	let t;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			add_location(li, file$b, 73, 12, 1959);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*userCourse*/ 1 && t_value !== (t_value = /*professor*/ ctx[5] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(73:10) {#each userCourse.professors as professor}",
    		ctx
    	});

    	return block;
    }

    // (70:6) <ExpansionPanel>
    function create_default_slot_3$3(ctx) {
    	let div;
    	let each_value = /*userCourse*/ ctx[0].professors;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block$5(ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			set_style(div, "display", "flex");
    			set_style(div, "flex-direction", "column");
    			add_location(div, file$b, 71, 8, 1842);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*userCourse*/ 1) {
    				each_value = /*userCourse*/ ctx[0].professors;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;

    				if (each_value.length) {
    					if (each_1_else) {
    						each_1_else.d(1);
    						each_1_else = null;
    					}
    				} else if (!each_1_else) {
    					each_1_else = create_else_block$5(ctx);
    					each_1_else.c();
    					each_1_else.m(div, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$3.name,
    		type: "slot",
    		source: "(70:6) <ExpansionPanel>",
    		ctx
    	});

    	return block;
    }

    // (71:8) 
    function create_header_slot_1$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Professors";
    			attr_dev(span, "slot", "header");
    			add_location(span, file$b, 70, 8, 1795);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot_1$1.name,
    		type: "slot",
    		source: "(71:8) ",
    		ctx
    	});

    	return block;
    }

    // (69:4) <ExpansionPanels accordion>
    function create_default_slot_2$3(ctx) {
    	let expansionpanel;
    	let current;

    	expansionpanel = new ExpansionPanel({
    			props: {
    				$$slots: {
    					header: [create_header_slot_1$1],
    					default: [create_default_slot_3$3]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(expansionpanel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(expansionpanel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const expansionpanel_changes = {};

    			if (dirty & /*$$scope, userCourse*/ 257) {
    				expansionpanel_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanel.$set(expansionpanel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(expansionpanel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$3.name,
    		type: "slot",
    		source: "(69:4) <ExpansionPanels accordion>",
    		ctx
    	});

    	return block;
    }

    // (80:6) <Button on:click={removeCourse(userCourse.code)}>
    function create_default_slot_1$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Remove");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$4.name,
    		type: "slot",
    		source: "(80:6) <Button on:click={removeCourse(userCourse.code)}>",
    		ctx
    	});

    	return block;
    }

    // (63:0) <ExpansionPanel>
    function create_default_slot$6(ctx) {
    	let div2;
    	let div0;
    	let t0_value = /*userCourse*/ ctx[0].description + "";
    	let t0;
    	let t1;
    	let expansionpanels;
    	let t2;
    	let div1;
    	let button;
    	let t3;
    	let rate;
    	let current;

    	expansionpanels = new ExpansionPanels({
    			props: {
    				accordion: true,
    				$$slots: { default: [create_default_slot_2$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button = new Button({
    			props: {
    				$$slots: { default: [create_default_slot_1$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", function () {
    		if (is_function(/*removeCourse*/ ctx[1](/*userCourse*/ ctx[0].code))) /*removeCourse*/ ctx[1](/*userCourse*/ ctx[0].code).apply(this, arguments);
    	});

    	rate = new Rate({
    			props: { afterRate: /*afterRate*/ ctx[2] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			create_component(expansionpanels.$$.fragment);
    			t2 = space();
    			div1 = element("div");
    			create_component(button.$$.fragment);
    			t3 = space();
    			create_component(rate.$$.fragment);
    			add_location(div0, file$b, 65, 4, 1656);
    			add_location(div1, file$b, 78, 4, 2101);
    			set_style(div2, "display", "flex");
    			set_style(div2, "flex-direction", "column");
    			add_location(div2, file$b, 64, 2, 1601);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, t0);
    			append_dev(div2, t1);
    			mount_component(expansionpanels, div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			mount_component(button, div1, null);
    			append_dev(div1, t3);
    			mount_component(rate, div1, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*userCourse*/ 1) && t0_value !== (t0_value = /*userCourse*/ ctx[0].description + "")) set_data_dev(t0, t0_value);
    			const expansionpanels_changes = {};

    			if (dirty & /*$$scope, userCourse*/ 257) {
    				expansionpanels_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanels.$set(expansionpanels_changes);
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanels.$$.fragment, local);
    			transition_in(button.$$.fragment, local);
    			transition_in(rate.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanels.$$.fragment, local);
    			transition_out(button.$$.fragment, local);
    			transition_out(rate.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(expansionpanels);
    			destroy_component(button);
    			destroy_component(rate);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(63:0) <ExpansionPanel>",
    		ctx
    	});

    	return block;
    }

    // (64:2) 
    function create_header_slot$1(ctx) {
    	let span;
    	let t0_value = /*userCourse*/ ctx[0].code + "";
    	let t0;
    	let t1;
    	let t2_value = /*userCourse*/ ctx[0].name + "";
    	let t2;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = text(": ");
    			t2 = text(t2_value);
    			attr_dev(span, "slot", "header");
    			add_location(span, file$b, 63, 2, 1534);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			append_dev(span, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*userCourse*/ 1 && t0_value !== (t0_value = /*userCourse*/ ctx[0].code + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*userCourse*/ 1 && t2_value !== (t2_value = /*userCourse*/ ctx[0].name + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot$1.name,
    		type: "slot",
    		source: "(64:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let expansionpanel;
    	let current;

    	expansionpanel = new ExpansionPanel({
    			props: {
    				$$slots: {
    					header: [create_header_slot$1],
    					default: [create_default_slot$6]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(expansionpanel.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(expansionpanel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const expansionpanel_changes = {};

    			if (dirty & /*$$scope, userCourse*/ 257) {
    				expansionpanel_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanel.$set(expansionpanel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(expansionpanel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CourseAccordian', slots, []);
    	let { userCourse } = $$props;
    	let { user } = $$props;
    	let { userDocRef } = $$props;

    	//function to add a course to
    	function removeCourse(courseCode) {
    		console.log(courseCode);

    		userDocRef.update(
    			{
    				courses: firebase.firestore.FieldValue.arrayRemove(courseCode)
    			},
    			{ merge: true }
    		);
    	}

    	//rating system logic
    	function afterRate(rating) {
    		var userRatingDocRef = firebase.firestore().collection("ratings").doc(user.uid);

    		userRatingDocRef.get().then(doc => {
    			//if document exists, add rating to the document
    			if (doc.exists) {
    				userRatingDocRef.update(
    					{
    						ratings: firebase.firestore.FieldValue.arrayUnion({ courseCode: userCourse.code, rating })
    					},
    					{ merge: true }
    				);
    			} else //if document does not exist, create document
    			{
    				firebase.firestore().collection("ratings").doc(user.uid).set({
    					ratings: [{ courseCode: userCourse.code, rating }]
    				});
    			}
    		});

    		console.log(rating);
    		console.log(user.uid);
    	}

    	const writable_props = ['userCourse', 'user', 'userDocRef'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<CourseAccordian> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('userCourse' in $$props) $$invalidate(0, userCourse = $$props.userCourse);
    		if ('user' in $$props) $$invalidate(3, user = $$props.user);
    		if ('userDocRef' in $$props) $$invalidate(4, userDocRef = $$props.userDocRef);
    	};

    	$$self.$capture_state = () => ({
    		ExpansionPanel,
    		ExpansionPanels,
    		Button,
    		Rate,
    		firebase,
    		userCourse,
    		user,
    		userDocRef,
    		removeCourse,
    		afterRate
    	});

    	$$self.$inject_state = $$props => {
    		if ('userCourse' in $$props) $$invalidate(0, userCourse = $$props.userCourse);
    		if ('user' in $$props) $$invalidate(3, user = $$props.user);
    		if ('userDocRef' in $$props) $$invalidate(4, userDocRef = $$props.userDocRef);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [userCourse, removeCourse, afterRate, user, userDocRef];
    }

    class CourseAccordian extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { userCourse: 0, user: 3, userDocRef: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CourseAccordian",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*userCourse*/ ctx[0] === undefined && !('userCourse' in props)) {
    			console_1$4.warn("<CourseAccordian> was created without expected prop 'userCourse'");
    		}

    		if (/*user*/ ctx[3] === undefined && !('user' in props)) {
    			console_1$4.warn("<CourseAccordian> was created without expected prop 'user'");
    		}

    		if (/*userDocRef*/ ctx[4] === undefined && !('userDocRef' in props)) {
    			console_1$4.warn("<CourseAccordian> was created without expected prop 'userDocRef'");
    		}
    	}

    	get userCourse() {
    		throw new Error("<CourseAccordian>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userCourse(value) {
    		throw new Error("<CourseAccordian>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get user() {
    		throw new Error("<CourseAccordian>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set user(value) {
    		throw new Error("<CourseAccordian>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userDocRef() {
    		throw new Error("<CourseAccordian>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userDocRef(value) {
    		throw new Error("<CourseAccordian>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\ListCourses.svelte generated by Svelte v3.40.0 */

    const { console: console_1$3 } = globals;

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (21:2) {:else}
    function create_else_block$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("No courses added yet...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(21:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (19:2) {#each $userCourses as userCourse}
    function create_each_block$6(ctx) {
    	let courseaccordian;
    	let current;

    	courseaccordian = new CourseAccordian({
    			props: {
    				userCourse: /*userCourse*/ ctx[5],
    				user: /*user*/ ctx[0],
    				userDocRef: /*userDocRef*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(courseaccordian.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(courseaccordian, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const courseaccordian_changes = {};
    			if (dirty & /*$userCourses*/ 4) courseaccordian_changes.userCourse = /*userCourse*/ ctx[5];
    			if (dirty & /*user*/ 1) courseaccordian_changes.user = /*user*/ ctx[0];
    			if (dirty & /*userDocRef*/ 2) courseaccordian_changes.userDocRef = /*userDocRef*/ ctx[1];
    			courseaccordian.$set(courseaccordian_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(courseaccordian.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(courseaccordian.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(courseaccordian, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(19:2) {#each $userCourses as userCourse}",
    		ctx
    	});

    	return block;
    }

    // (18:0) <ExpansionPanels accordion>
    function create_default_slot$5(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*$userCourses*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block$4(ctx);
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();

    			if (each_1_else) {
    				each_1_else.c();
    			}
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);

    			if (each_1_else) {
    				each_1_else.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$userCourses, user, userDocRef*/ 7) {
    				each_value = /*$userCourses*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (each_value.length) {
    					if (each_1_else) {
    						each_1_else.d(1);
    						each_1_else = null;
    					}
    				} else if (!each_1_else) {
    					each_1_else = create_else_block$4(ctx);
    					each_1_else.c();
    					each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    			if (each_1_else) each_1_else.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(18:0) <ExpansionPanels accordion>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let expansionpanels;
    	let current;

    	expansionpanels = new ExpansionPanels({
    			props: {
    				accordion: true,
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(expansionpanels.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(expansionpanels, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const expansionpanels_changes = {};

    			if (dirty & /*$$scope, $userCourses, user, userDocRef*/ 263) {
    				expansionpanels_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanels.$set(expansionpanels_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanels.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanels.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(expansionpanels, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let $userCourses;
    	validate_store(userCourses, 'userCourses');
    	component_subscribe($$self, userCourses, $$value => $$invalidate(2, $userCourses = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ListCourses', slots, []);
    	let { userCoursesCodes } = $$props;
    	let { courses } = $$props;
    	let { user } = $$props;
    	let { userDocRef } = $$props;
    	const writable_props = ['userCoursesCodes', 'courses', 'user', 'userDocRef'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<ListCourses> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('userCoursesCodes' in $$props) $$invalidate(3, userCoursesCodes = $$props.userCoursesCodes);
    		if ('courses' in $$props) $$invalidate(4, courses = $$props.courses);
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    		if ('userDocRef' in $$props) $$invalidate(1, userDocRef = $$props.userDocRef);
    	};

    	$$self.$capture_state = () => ({
    		CourseAccordian,
    		userCourses,
    		ExpansionPanels,
    		userCoursesCodes,
    		courses,
    		user,
    		userDocRef,
    		$userCourses
    	});

    	$$self.$inject_state = $$props => {
    		if ('userCoursesCodes' in $$props) $$invalidate(3, userCoursesCodes = $$props.userCoursesCodes);
    		if ('courses' in $$props) $$invalidate(4, courses = $$props.courses);
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    		if ('userDocRef' in $$props) $$invalidate(1, userDocRef = $$props.userDocRef);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*courses, userCoursesCodes*/ 24) {
    			userCourses.set(courses.filter(course => userCoursesCodes.includes(course.code)));
    		}

    		if ($$self.$$.dirty & /*$userCourses*/ 4) {
    			console.log($userCourses);
    		}
    	};

    	return [user, userDocRef, $userCourses, userCoursesCodes, courses];
    }

    class ListCourses extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
    			userCoursesCodes: 3,
    			courses: 4,
    			user: 0,
    			userDocRef: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ListCourses",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*userCoursesCodes*/ ctx[3] === undefined && !('userCoursesCodes' in props)) {
    			console_1$3.warn("<ListCourses> was created without expected prop 'userCoursesCodes'");
    		}

    		if (/*courses*/ ctx[4] === undefined && !('courses' in props)) {
    			console_1$3.warn("<ListCourses> was created without expected prop 'courses'");
    		}

    		if (/*user*/ ctx[0] === undefined && !('user' in props)) {
    			console_1$3.warn("<ListCourses> was created without expected prop 'user'");
    		}

    		if (/*userDocRef*/ ctx[1] === undefined && !('userDocRef' in props)) {
    			console_1$3.warn("<ListCourses> was created without expected prop 'userDocRef'");
    		}
    	}

    	get userCoursesCodes() {
    		throw new Error("<ListCourses>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userCoursesCodes(value) {
    		throw new Error("<ListCourses>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get courses() {
    		throw new Error("<ListCourses>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set courses(value) {
    		throw new Error("<ListCourses>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get user() {
    		throw new Error("<ListCourses>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set user(value) {
    		throw new Error("<ListCourses>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userDocRef() {
    		throw new Error("<ListCourses>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userDocRef(value) {
    		throw new Error("<ListCourses>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\CoursesAccordians.svelte generated by Svelte v3.40.0 */

    const { Object: Object_1$1, console: console_1$2 } = globals;

    const file$a = "src\\CoursesAccordians.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	child_ctx[20] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    // (118:4) <TextField clearable bind:value={searchFilter}>
    function create_default_slot_13$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Search");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$1.name,
    		type: "slot",
    		source: "(118:4) <TextField clearable bind:value={searchFilter}>",
    		ctx
    	});

    	return block;
    }

    // (117:2) <Col>
    function create_default_slot_12$1(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[13](value);
    	}

    	let textfield_props = {
    		clearable: true,
    		$$slots: { default: [create_default_slot_13$1] },
    		$$scope: { ctx }
    	};

    	if (/*searchFilter*/ ctx[3] !== void 0) {
    		textfield_props.value = /*searchFilter*/ ctx[3];
    	}

    	textfield = new TextField({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};

    			if (dirty & /*$$scope*/ 16777216) {
    				textfield_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*searchFilter*/ 8) {
    				updating_value = true;
    				textfield_changes.value = /*searchFilter*/ ctx[3];
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$1.name,
    		type: "slot",
    		source: "(117:2) <Col>",
    		ctx
    	});

    	return block;
    }

    // (121:4) <Select        chips        multiple        items={creditsFilterOptions}        bind:value={creditsFilter}>
    function create_default_slot_11$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Credits");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$1.name,
    		type: "slot",
    		source: "(121:4) <Select        chips        multiple        items={creditsFilterOptions}        bind:value={creditsFilter}>",
    		ctx
    	});

    	return block;
    }

    // (120:2) <Col>
    function create_default_slot_10$1(ctx) {
    	let select;
    	let updating_value;
    	let current;

    	function select_value_binding(value) {
    		/*select_value_binding*/ ctx[14](value);
    	}

    	let select_props = {
    		chips: true,
    		multiple: true,
    		items: /*creditsFilterOptions*/ ctx[5],
    		$$slots: { default: [create_default_slot_11$1] },
    		$$scope: { ctx }
    	};

    	if (/*creditsFilter*/ ctx[0] !== void 0) {
    		select_props.value = /*creditsFilter*/ ctx[0];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'value', select_value_binding));

    	const block = {
    		c: function create() {
    			create_component(select.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(select, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const select_changes = {};
    			if (dirty & /*creditsFilterOptions*/ 32) select_changes.items = /*creditsFilterOptions*/ ctx[5];

    			if (dirty & /*$$scope*/ 16777216) {
    				select_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*creditsFilter*/ 1) {
    				updating_value = true;
    				select_changes.value = /*creditsFilter*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(select, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$1.name,
    		type: "slot",
    		source: "(120:2) <Col>",
    		ctx
    	});

    	return block;
    }

    // (130:4) <Select chips multiple items={GERFilterOptions} bind:value={GERFilter}>
    function create_default_slot_9$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("GER Category");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$1.name,
    		type: "slot",
    		source: "(130:4) <Select chips multiple items={GERFilterOptions} bind:value={GERFilter}>",
    		ctx
    	});

    	return block;
    }

    // (129:2) <Col>
    function create_default_slot_8$2(ctx) {
    	let select;
    	let updating_value;
    	let current;

    	function select_value_binding_1(value) {
    		/*select_value_binding_1*/ ctx[15](value);
    	}

    	let select_props = {
    		chips: true,
    		multiple: true,
    		items: /*GERFilterOptions*/ ctx[7],
    		$$slots: { default: [create_default_slot_9$1] },
    		$$scope: { ctx }
    	};

    	if (/*GERFilter*/ ctx[1] !== void 0) {
    		select_props.value = /*GERFilter*/ ctx[1];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'value', select_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(select.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(select, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const select_changes = {};
    			if (dirty & /*GERFilterOptions*/ 128) select_changes.items = /*GERFilterOptions*/ ctx[7];

    			if (dirty & /*$$scope*/ 16777216) {
    				select_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*GERFilter*/ 2) {
    				updating_value = true;
    				select_changes.value = /*GERFilter*/ ctx[1];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(select, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$2.name,
    		type: "slot",
    		source: "(129:2) <Col>",
    		ctx
    	});

    	return block;
    }

    // (135:4) <Select        chips        multiple        items={subjectFilterOptions}        bind:value={subjectFilter}>
    function create_default_slot_7$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Subject");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$2.name,
    		type: "slot",
    		source: "(135:4) <Select        chips        multiple        items={subjectFilterOptions}        bind:value={subjectFilter}>",
    		ctx
    	});

    	return block;
    }

    // (134:2) <Col>
    function create_default_slot_6$2(ctx) {
    	let select;
    	let updating_value;
    	let current;

    	function select_value_binding_2(value) {
    		/*select_value_binding_2*/ ctx[16](value);
    	}

    	let select_props = {
    		chips: true,
    		multiple: true,
    		items: /*subjectFilterOptions*/ ctx[6],
    		$$slots: { default: [create_default_slot_7$2] },
    		$$scope: { ctx }
    	};

    	if (/*subjectFilter*/ ctx[2] !== void 0) {
    		select_props.value = /*subjectFilter*/ ctx[2];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'value', select_value_binding_2));

    	const block = {
    		c: function create() {
    			create_component(select.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(select, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const select_changes = {};
    			if (dirty & /*subjectFilterOptions*/ 64) select_changes.items = /*subjectFilterOptions*/ ctx[6];

    			if (dirty & /*$$scope*/ 16777216) {
    				select_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*subjectFilter*/ 4) {
    				updating_value = true;
    				select_changes.value = /*subjectFilter*/ ctx[2];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(select, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$2.name,
    		type: "slot",
    		source: "(134:2) <Col>",
    		ctx
    	});

    	return block;
    }

    // (116:0) <Row>
    function create_default_slot_5$2(ctx) {
    	let col0;
    	let t0;
    	let col1;
    	let t1;
    	let col2;
    	let t2;
    	let col3;
    	let current;

    	col0 = new Col({
    			props: {
    				$$slots: { default: [create_default_slot_12$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	col1 = new Col({
    			props: {
    				$$slots: { default: [create_default_slot_10$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	col2 = new Col({
    			props: {
    				$$slots: { default: [create_default_slot_8$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	col3 = new Col({
    			props: {
    				$$slots: { default: [create_default_slot_6$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(col0.$$.fragment);
    			t0 = space();
    			create_component(col1.$$.fragment);
    			t1 = space();
    			create_component(col2.$$.fragment);
    			t2 = space();
    			create_component(col3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(col0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(col1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(col2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(col3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const col0_changes = {};

    			if (dirty & /*$$scope, searchFilter*/ 16777224) {
    				col0_changes.$$scope = { dirty, ctx };
    			}

    			col0.$set(col0_changes);
    			const col1_changes = {};

    			if (dirty & /*$$scope, creditsFilterOptions, creditsFilter*/ 16777249) {
    				col1_changes.$$scope = { dirty, ctx };
    			}

    			col1.$set(col1_changes);
    			const col2_changes = {};

    			if (dirty & /*$$scope, GERFilterOptions, GERFilter*/ 16777346) {
    				col2_changes.$$scope = { dirty, ctx };
    			}

    			col2.$set(col2_changes);
    			const col3_changes = {};

    			if (dirty & /*$$scope, subjectFilterOptions, subjectFilter*/ 16777284) {
    				col3_changes.$$scope = { dirty, ctx };
    			}

    			col3.$set(col3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(col0.$$.fragment, local);
    			transition_in(col1.$$.fragment, local);
    			transition_in(col2.$$.fragment, local);
    			transition_in(col3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(col0.$$.fragment, local);
    			transition_out(col1.$$.fragment, local);
    			transition_out(col2.$$.fragment, local);
    			transition_out(col3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(col0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(col1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(col2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(col3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$2.name,
    		type: "slot",
    		source: "(116:0) <Row>",
    		ctx
    	});

    	return block;
    }

    // (174:2) {:else}
    function create_else_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("No courses found...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(174:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (159:14) {:else}
    function create_else_block$3(ctx) {
    	let progresscircular;
    	let current;

    	progresscircular = new ProgressCircular({
    			props: { indeterminate: true },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(progresscircular.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(progresscircular, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(progresscircular.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(progresscircular.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(progresscircular, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(159:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (157:14) {#each course.professors as professor}
    function create_each_block_1(ctx) {
    	let li;
    	let t_value = /*professor*/ ctx[21] + "";
    	let t;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			add_location(li, file$a, 157, 16, 4550);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filteredCourses*/ 256 && t_value !== (t_value = /*professor*/ ctx[21] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(157:14) {#each course.professors as professor}",
    		ctx
    	});

    	return block;
    }

    // (154:10) <ExpansionPanel>
    function create_default_slot_4$2(ctx) {
    	let div;
    	let each_value_1 = /*course*/ ctx[18].professors;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_1_else_1 = null;

    	if (!each_value_1.length) {
    		each_1_else_1 = create_else_block$3(ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else_1) {
    				each_1_else_1.c();
    			}

    			set_style(div, "display", "flex");
    			set_style(div, "flex-direction", "column");
    			add_location(div, file$a, 155, 12, 4429);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			if (each_1_else_1) {
    				each_1_else_1.m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filteredCourses*/ 256) {
    				each_value_1 = /*course*/ ctx[18].professors;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;

    				if (!each_value_1.length && each_1_else_1) {
    					each_1_else_1.p(ctx, dirty);
    				} else if (!each_value_1.length) {
    					each_1_else_1 = create_else_block$3(ctx);
    					each_1_else_1.c();
    					transition_in(each_1_else_1, 1);
    					each_1_else_1.m(div, null);
    				} else if (each_1_else_1) {
    					group_outros();

    					transition_out(each_1_else_1, 1, 1, () => {
    						each_1_else_1 = null;
    					});

    					check_outros();
    				}
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else_1) each_1_else_1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$2.name,
    		type: "slot",
    		source: "(154:10) <ExpansionPanel>",
    		ctx
    	});

    	return block;
    }

    // (155:12) 
    function create_header_slot_1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Professors";
    			attr_dev(span, "slot", "header");
    			add_location(span, file$a, 154, 12, 4378);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot_1.name,
    		type: "slot",
    		source: "(155:12) ",
    		ctx
    	});

    	return block;
    }

    // (153:8) <ExpansionPanels accordion>
    function create_default_slot_3$2(ctx) {
    	let expansionpanel;
    	let current;

    	expansionpanel = new ExpansionPanel({
    			props: {
    				$$slots: {
    					header: [create_header_slot_1],
    					default: [create_default_slot_4$2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(expansionpanel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(expansionpanel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const expansionpanel_changes = {};

    			if (dirty & /*$$scope, filteredCourses*/ 16777472) {
    				expansionpanel_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanel.$set(expansionpanel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(expansionpanel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$2.name,
    		type: "slot",
    		source: "(153:8) <ExpansionPanels accordion>",
    		ctx
    	});

    	return block;
    }

    // (167:10) <Button on:click={addCourse(course.code)}>
    function create_default_slot_2$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Add");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(167:10) <Button on:click={addCourse(course.code)}>",
    		ctx
    	});

    	return block;
    }

    // (168:10) {#if averageRatings[i]}
    function create_if_block$6(ctx) {
    	let rate;
    	let current;

    	rate = new Rate({
    			props: {
    				value: /*averageRatings*/ ctx[4][/*i*/ ctx[20]].rating,
    				readonly: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(rate.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(rate, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const rate_changes = {};
    			if (dirty & /*averageRatings*/ 16) rate_changes.value = /*averageRatings*/ ctx[4][/*i*/ ctx[20]].rating;
    			rate.$set(rate_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(rate.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(rate.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(rate, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(168:10) {#if averageRatings[i]}",
    		ctx
    	});

    	return block;
    }

    // (147:4) <ExpansionPanel>
    function create_default_slot_1$3(ctx) {
    	let div2;
    	let div0;
    	let t0_value = /*course*/ ctx[18].description + "";
    	let t0;
    	let t1;
    	let expansionpanels;
    	let t2;
    	let div1;
    	let button;
    	let t3;
    	let t4;
    	let current;

    	expansionpanels = new ExpansionPanels({
    			props: {
    				accordion: true,
    				$$slots: { default: [create_default_slot_3$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button = new Button({
    			props: {
    				$$slots: { default: [create_default_slot_2$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", function () {
    		if (is_function(/*addCourse*/ ctx[9](/*course*/ ctx[18].code))) /*addCourse*/ ctx[9](/*course*/ ctx[18].code).apply(this, arguments);
    	});

    	let if_block = /*averageRatings*/ ctx[4][/*i*/ ctx[20]] && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			create_component(expansionpanels.$$.fragment);
    			t2 = space();
    			div1 = element("div");
    			create_component(button.$$.fragment);
    			t3 = space();
    			if (if_block) if_block.c();
    			t4 = space();
    			add_location(div0, file$a, 149, 8, 4227);
    			add_location(div1, file$a, 165, 8, 4757);
    			set_style(div2, "display", "flex");
    			set_style(div2, "flex-direction", "column");
    			add_location(div2, file$a, 148, 6, 4168);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, t0);
    			append_dev(div2, t1);
    			mount_component(expansionpanels, div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			mount_component(button, div1, null);
    			append_dev(div1, t3);
    			if (if_block) if_block.m(div1, null);
    			insert_dev(target, t4, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*filteredCourses*/ 256) && t0_value !== (t0_value = /*course*/ ctx[18].description + "")) set_data_dev(t0, t0_value);
    			const expansionpanels_changes = {};

    			if (dirty & /*$$scope, filteredCourses*/ 16777472) {
    				expansionpanels_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanels.$set(expansionpanels_changes);
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 16777216) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);

    			if (/*averageRatings*/ ctx[4][/*i*/ ctx[20]]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*averageRatings*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanels.$$.fragment, local);
    			transition_in(button.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanels.$$.fragment, local);
    			transition_out(button.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(expansionpanels);
    			destroy_component(button);
    			if (if_block) if_block.d();
    			if (detaching) detach_dev(t4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$3.name,
    		type: "slot",
    		source: "(147:4) <ExpansionPanel>",
    		ctx
    	});

    	return block;
    }

    // (148:6) 
    function create_header_slot(ctx) {
    	let span;
    	let t0_value = /*course*/ ctx[18].code + "";
    	let t0;
    	let t1;
    	let t2_value = /*course*/ ctx[18].name + "";
    	let t2;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = text(": ");
    			t2 = text(t2_value);
    			attr_dev(span, "slot", "header");
    			add_location(span, file$a, 147, 6, 4105);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			append_dev(span, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filteredCourses*/ 256 && t0_value !== (t0_value = /*course*/ ctx[18].code + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*filteredCourses*/ 256 && t2_value !== (t2_value = /*course*/ ctx[18].name + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot.name,
    		type: "slot",
    		source: "(148:6) ",
    		ctx
    	});

    	return block;
    }

    // (146:2) {#each filteredCourses as course, i}
    function create_each_block$5(ctx) {
    	let expansionpanel;
    	let current;

    	expansionpanel = new ExpansionPanel({
    			props: {
    				$$slots: {
    					header: [create_header_slot],
    					default: [create_default_slot_1$3]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(expansionpanel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(expansionpanel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const expansionpanel_changes = {};

    			if (dirty & /*$$scope, filteredCourses, averageRatings*/ 16777488) {
    				expansionpanel_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanel.$set(expansionpanel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(expansionpanel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(146:2) {#each filteredCourses as course, i}",
    		ctx
    	});

    	return block;
    }

    // (145:0) <ExpansionPanels accordion>
    function create_default_slot$4(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*filteredCourses*/ ctx[8];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_1(ctx);
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();

    			if (each_1_else) {
    				each_1_else.c();
    			}
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);

    			if (each_1_else) {
    				each_1_else.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filteredCourses, averageRatings, addCourse*/ 784) {
    				each_value = /*filteredCourses*/ ctx[8];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (each_value.length) {
    					if (each_1_else) {
    						each_1_else.d(1);
    						each_1_else = null;
    					}
    				} else if (!each_1_else) {
    					each_1_else = create_else_block_1(ctx);
    					each_1_else.c();
    					each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    			if (each_1_else) each_1_else.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(145:0) <ExpansionPanels accordion>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let row;
    	let t;
    	let expansionpanels;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_5$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	expansionpanels = new ExpansionPanels({
    			props: {
    				accordion: true,
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    			t = space();
    			create_component(expansionpanels.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(expansionpanels, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const row_changes = {};

    			if (dirty & /*$$scope, subjectFilterOptions, subjectFilter, GERFilterOptions, GERFilter, creditsFilterOptions, creditsFilter, searchFilter*/ 16777455) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    			const expansionpanels_changes = {};

    			if (dirty & /*$$scope, filteredCourses, averageRatings*/ 16777488) {
    				expansionpanels_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanels.$set(expansionpanels_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			transition_in(expansionpanels.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			transition_out(expansionpanels.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(expansionpanels, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function isEmpty(array) {
    	return !(Array.isArray(array) && array.length);
    }

    //processing ratingsColl to get average ratings
    function averageArray(array) {
    	let sum = 0;
    	let i = 0;

    	for (; array[i]; i++) {
    		sum += array[i];
    	}

    	return sum / i;
    }

    /*function to find average rating.
    While the code may be complicated, 
    it is the only way to get average user ratings across multiple users
    with the fastest possible efficiency of O(n) as it uses hashtables*/
    /* takes collection of ratings (ratingsColl),
    and returns data in the following structure:
    [
      {"courseCode": "SYD393", "avgRating": 2},
      {"courseCode": "STA244", "avgRating": 4.25},
    ]
    */
    function getAverageRatings(ratingsColl) {
    	return Object.entries(ratingsColl.map(userRatings => userRatings.ratings).flat().reduce(
    		(c, i) => {
    			if (!c.hasOwnProperty(i.courseCode)) {
    				c[i.courseCode] = [];
    			}

    			c[i.courseCode].push(i.rating);
    			return c;
    		},
    		{}
    	)).map(([k, i]) => {
    		return { code: k, rating: averageArray(i) };
    	});
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let averageRatings;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CoursesAccordians', slots, []);
    	let { courses } = $$props;
    	let { userDocRef } = $$props;
    	let { ratingsColl } = $$props;
    	let creditsFilter;
    	let creditsFilterOptions;
    	let GERFilter;
    	let subjectFilter;
    	let subjectFilterOptions;
    	let GERFilterOptions;
    	let filteredCourses;
    	let searchFilter;

    	//only show options that are valid
    	function returnOptions(param) {
    		return [
    			...new Set(courses.filter(course => course[param]).map(course => course[param]))
    		];
    	}

    	//function to add a course to the database when user clicks "ADD" button
    	function addCourse(courseCode) {
    		console.log(courseCode);

    		userDocRef.update(
    			{
    				courses: firebase.firestore.FieldValue.arrayUnion(courseCode)
    			},
    			{ merge: true }
    		);
    	}

    	const writable_props = ['courses', 'userDocRef', 'ratingsColl'];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<CoursesAccordians> was created with unknown prop '${key}'`);
    	});

    	function textfield_value_binding(value) {
    		searchFilter = value;
    		$$invalidate(3, searchFilter);
    	}

    	function select_value_binding(value) {
    		creditsFilter = value;
    		$$invalidate(0, creditsFilter);
    	}

    	function select_value_binding_1(value) {
    		GERFilter = value;
    		$$invalidate(1, GERFilter);
    	}

    	function select_value_binding_2(value) {
    		subjectFilter = value;
    		$$invalidate(2, subjectFilter);
    	}

    	$$self.$$set = $$props => {
    		if ('courses' in $$props) $$invalidate(10, courses = $$props.courses);
    		if ('userDocRef' in $$props) $$invalidate(11, userDocRef = $$props.userDocRef);
    		if ('ratingsColl' in $$props) $$invalidate(12, ratingsColl = $$props.ratingsColl);
    	};

    	$$self.$capture_state = () => ({
    		Rate,
    		firebase,
    		Row,
    		Col,
    		Select,
    		ExpansionPanel,
    		ExpansionPanels,
    		ProgressCircular,
    		TextField,
    		Button,
    		courses,
    		userDocRef,
    		ratingsColl,
    		creditsFilter,
    		creditsFilterOptions,
    		GERFilter,
    		subjectFilter,
    		subjectFilterOptions,
    		GERFilterOptions,
    		filteredCourses,
    		searchFilter,
    		returnOptions,
    		isEmpty,
    		averageArray,
    		getAverageRatings,
    		addCourse,
    		averageRatings
    	});

    	$$self.$inject_state = $$props => {
    		if ('courses' in $$props) $$invalidate(10, courses = $$props.courses);
    		if ('userDocRef' in $$props) $$invalidate(11, userDocRef = $$props.userDocRef);
    		if ('ratingsColl' in $$props) $$invalidate(12, ratingsColl = $$props.ratingsColl);
    		if ('creditsFilter' in $$props) $$invalidate(0, creditsFilter = $$props.creditsFilter);
    		if ('creditsFilterOptions' in $$props) $$invalidate(5, creditsFilterOptions = $$props.creditsFilterOptions);
    		if ('GERFilter' in $$props) $$invalidate(1, GERFilter = $$props.GERFilter);
    		if ('subjectFilter' in $$props) $$invalidate(2, subjectFilter = $$props.subjectFilter);
    		if ('subjectFilterOptions' in $$props) $$invalidate(6, subjectFilterOptions = $$props.subjectFilterOptions);
    		if ('GERFilterOptions' in $$props) $$invalidate(7, GERFilterOptions = $$props.GERFilterOptions);
    		if ('filteredCourses' in $$props) $$invalidate(8, filteredCourses = $$props.filteredCourses);
    		if ('searchFilter' in $$props) $$invalidate(3, searchFilter = $$props.searchFilter);
    		if ('averageRatings' in $$props) $$invalidate(4, averageRatings = $$props.averageRatings);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*ratingsColl*/ 4096) {
    			// set average ratings to update dynamically using $: operator
    			$$invalidate(4, averageRatings = getAverageRatings(ratingsColl));
    		}

    		if ($$self.$$.dirty & /*courses, averageRatings*/ 1040) {
    			//merging courses and ratings so that each course has a rating
    			$$invalidate(10, courses = courses.map((item, i) => {
    				if (averageRatings[i] && item.code === averageRatings[i].code) {
    					//merging two objects
    					return Object.assign({}, item, averageRatings[i]);
    				} else return item;
    			}));
    		}

    		if ($$self.$$.dirty & /*courses, creditsFilter, GERFilter, subjectFilter, searchFilter*/ 1039) {
    			$$invalidate(8, filteredCourses = courses.filter(course => (isEmpty(creditsFilter) || creditsFilter.includes(course.credits)) && (isEmpty(GERFilter) || GERFilter.includes(course.GERCategory)) && (isEmpty(subjectFilter) || subjectFilter.includes(course.subjectFilter)) && (searchFilter == undefined || course.name.toLowerCase().trim().includes(searchFilter.toLowerCase().trim()))));
    		}

    		if ($$self.$$.dirty & /*courses*/ 1024) {
    			console.log(courses);
    		}
    	};

    	$$invalidate(5, creditsFilterOptions = returnOptions("credits"));
    	$$invalidate(7, GERFilterOptions = returnOptions("GERCategory"));
    	$$invalidate(6, subjectFilterOptions = returnOptions("subject"));

    	return [
    		creditsFilter,
    		GERFilter,
    		subjectFilter,
    		searchFilter,
    		averageRatings,
    		creditsFilterOptions,
    		subjectFilterOptions,
    		GERFilterOptions,
    		filteredCourses,
    		addCourse,
    		courses,
    		userDocRef,
    		ratingsColl,
    		textfield_value_binding,
    		select_value_binding,
    		select_value_binding_1,
    		select_value_binding_2
    	];
    }

    class CoursesAccordians extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
    			courses: 10,
    			userDocRef: 11,
    			ratingsColl: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CoursesAccordians",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*courses*/ ctx[10] === undefined && !('courses' in props)) {
    			console_1$2.warn("<CoursesAccordians> was created without expected prop 'courses'");
    		}

    		if (/*userDocRef*/ ctx[11] === undefined && !('userDocRef' in props)) {
    			console_1$2.warn("<CoursesAccordians> was created without expected prop 'userDocRef'");
    		}

    		if (/*ratingsColl*/ ctx[12] === undefined && !('ratingsColl' in props)) {
    			console_1$2.warn("<CoursesAccordians> was created without expected prop 'ratingsColl'");
    		}
    	}

    	get courses() {
    		throw new Error("<CoursesAccordians>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set courses(value) {
    		throw new Error("<CoursesAccordians>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userDocRef() {
    		throw new Error("<CoursesAccordians>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userDocRef(value) {
    		throw new Error("<CoursesAccordians>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ratingsColl() {
    		throw new Error("<CoursesAccordians>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ratingsColl(value) {
    		throw new Error("<CoursesAccordians>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\Todo.svelte generated by Svelte v3.40.0 */

    const { console: console_1$1 } = globals;
    const file$9 = "src\\Todo.svelte";

    // (17:0) <ListItem>
    function create_default_slot$3(ctx) {
    	let t_value = /*todo*/ ctx[0].task + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*todo*/ 1 && t_value !== (t_value = /*todo*/ ctx[0].task + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(17:0) <ListItem>",
    		ctx
    	});

    	return block;
    }

    // (18:2) 
    function create_prepend_slot(ctx) {
    	let div;
    	let checkbox;
    	let current;
    	checkbox = new Checkbox({ $$inline: true });

    	checkbox.$on("change", function () {
    		if (is_function(/*removeTodo*/ ctx[1](/*todo*/ ctx[0]))) /*removeTodo*/ ctx[1](/*todo*/ ctx[0]).apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(checkbox.$$.fragment);
    			attr_dev(div, "slot", "prepend");
    			add_location(div, file$9, 17, 2, 391);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(checkbox, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(checkbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(checkbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(checkbox);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_prepend_slot.name,
    		type: "slot",
    		source: "(18:2) ",
    		ctx
    	});

    	return block;
    }

    // (22:2) 
    function create_subtitle_slot(ctx) {
    	let span;
    	let div2;
    	let div0;
    	let t0_value = /*todo*/ ctx[0].description + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2_value = /*todo*/ ctx[0].date + "";
    	let t2;

    	const block = {
    		c: function create() {
    			span = element("span");
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");
    			t2 = text(t2_value);
    			add_location(div0, file$9, 23, 6, 574);
    			set_style(div1, "align-self", "flex-end");
    			add_location(div1, file$9, 24, 6, 611);
    			set_style(div2, "display", "flex");
    			set_style(div2, "flex-direction", "column");
    			add_location(div2, file$9, 22, 4, 515);
    			attr_dev(span, "slot", "subtitle");
    			add_location(span, file$9, 21, 2, 487);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, div2);
    			append_dev(div2, div0);
    			append_dev(div0, t0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*todo*/ 1 && t0_value !== (t0_value = /*todo*/ ctx[0].description + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*todo*/ 1 && t2_value !== (t2_value = /*todo*/ ctx[0].date + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_subtitle_slot.name,
    		type: "slot",
    		source: "(22:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let listitem;
    	let t;
    	let divider;
    	let current;

    	listitem = new ListItem({
    			props: {
    				$$slots: {
    					subtitle: [create_subtitle_slot],
    					prepend: [create_prepend_slot],
    					default: [create_default_slot$3]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	divider = new Divider({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(listitem.$$.fragment);
    			t = space();
    			create_component(divider.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(listitem, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(divider, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const listitem_changes = {};

    			if (dirty & /*$$scope, todo*/ 9) {
    				listitem_changes.$$scope = { dirty, ctx };
    			}

    			listitem.$set(listitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(listitem.$$.fragment, local);
    			transition_in(divider.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(listitem.$$.fragment, local);
    			transition_out(divider.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(listitem, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(divider, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Todo', slots, []);
    	let { todo } = $$props;
    	let { userDocRef } = $$props;

    	function removeTodo(task) {
    		console.log(task);

    		userDocRef.update(
    			{
    				todos: firebase.firestore.FieldValue.arrayRemove(task)
    			},
    			{ merge: true }
    		);
    	}

    	const writable_props = ['todo', 'userDocRef'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Todo> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('todo' in $$props) $$invalidate(0, todo = $$props.todo);
    		if ('userDocRef' in $$props) $$invalidate(2, userDocRef = $$props.userDocRef);
    	};

    	$$self.$capture_state = () => ({
    		ListItem,
    		Checkbox,
    		Divider,
    		firebase,
    		todo,
    		userDocRef,
    		removeTodo
    	});

    	$$self.$inject_state = $$props => {
    		if ('todo' in $$props) $$invalidate(0, todo = $$props.todo);
    		if ('userDocRef' in $$props) $$invalidate(2, userDocRef = $$props.userDocRef);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [todo, removeTodo, userDocRef];
    }

    class Todo extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { todo: 0, userDocRef: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Todo",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*todo*/ ctx[0] === undefined && !('todo' in props)) {
    			console_1$1.warn("<Todo> was created without expected prop 'todo'");
    		}

    		if (/*userDocRef*/ ctx[2] === undefined && !('userDocRef' in props)) {
    			console_1$1.warn("<Todo> was created without expected prop 'userDocRef'");
    		}
    	}

    	get todo() {
    		throw new Error("<Todo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set todo(value) {
    		throw new Error("<Todo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userDocRef() {
    		throw new Error("<Todo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userDocRef(value) {
    		throw new Error("<Todo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const getCalendarPage = (month, year, dayProps, weekStart = 0) => {
      let date = new Date(year, month, 1);
      date.setDate(date.getDate() - date.getDay() + weekStart);
      let nextMonth = month === 11 ? 0 : month + 1;
      // ensure days starts on Sunday
      // and end on saturday
      let weeks = [];
      while (date.getMonth() !== nextMonth || date.getDay() !== weekStart || weeks.length !== 6) {
        if (date.getDay() === weekStart) weeks.unshift({ days: [], id: `${year}${month}${year}${weeks.length}` });
        const updated = Object.assign({
          partOfMonth: date.getMonth() === month,
          day: date.getDate(),
          month: date.getMonth(),
          year: date.getFullYear(),
          date: new Date(date)
        }, dayProps(date));
        weeks[0].days.push(updated);
        date.setDate(date.getDate() + 1);
      }
      weeks.reverse();
      return { month, year, weeks };
    };

    const getDayPropsHandler = (start, end, selectableCallback) => {
      let today = new Date();
      today.setHours(0, 0, 0, 0);
      return date => {
        const isInRange = date >= start && date <= end;
        return {
          isInRange,
          selectable: isInRange && (!selectableCallback || selectableCallback(date)),
          isToday: date.getTime() === today.getTime()
        };
      };
    };

    function getMonths(start, end, selectableCallback = null, weekStart = 0) {
      start.setHours(0, 0, 0, 0);
      end.setHours(0, 0, 0, 0);
      let endDate = new Date(end.getFullYear(), end.getMonth() + 1, 1);
      let months = [];
      let date = new Date(start.getFullYear(), start.getMonth(), 1);
      let dayPropsHandler = getDayPropsHandler(start, end, selectableCallback);
      while (date < endDate) {
        months.push(getCalendarPage(date.getMonth(), date.getFullYear(), dayPropsHandler, weekStart));
        date.setMonth(date.getMonth() + 1);
      }
      return months;
    }

    const areDatesEquivalent = (a, b) => a.getDate() === b.getDate()
      && a.getMonth() === b.getMonth()
      && a.getFullYear() === b.getFullYear();

    /* node_modules\svelte-calendar\src\Components\Week.svelte generated by Svelte v3.40.0 */
    const file$8 = "node_modules\\svelte-calendar\\src\\Components\\Week.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    // (20:2) {#each days as day}
    function create_each_block$4(ctx) {
    	let div;
    	let button;
    	let t0_value = /*day*/ ctx[7].date.getDate() + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[6](/*day*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(button, "class", "day--label svelte-1f2gkwh");
    			attr_dev(button, "type", "button");
    			toggle_class(button, "selected", areDatesEquivalent(/*day*/ ctx[7].date, /*selected*/ ctx[1]));
    			toggle_class(button, "highlighted", areDatesEquivalent(/*day*/ ctx[7].date, /*highlighted*/ ctx[2]));
    			toggle_class(button, "shake-date", /*shouldShakeDate*/ ctx[3] && areDatesEquivalent(/*day*/ ctx[7].date, /*shouldShakeDate*/ ctx[3]));
    			toggle_class(button, "disabled", !/*day*/ ctx[7].selectable);
    			add_location(button, file$8, 26, 6, 652);
    			attr_dev(div, "class", "day svelte-1f2gkwh");
    			toggle_class(div, "outside-month", !/*day*/ ctx[7].partOfMonth);
    			toggle_class(div, "is-today", /*day*/ ctx[7].isToday);
    			toggle_class(div, "is-disabled", !/*day*/ ctx[7].selectable);
    			add_location(div, file$8, 20, 4, 493);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);
    			append_dev(button, t0);
    			append_dev(div, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*days*/ 1 && t0_value !== (t0_value = /*day*/ ctx[7].date.getDate() + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*areDatesEquivalent, days, selected*/ 3) {
    				toggle_class(button, "selected", areDatesEquivalent(/*day*/ ctx[7].date, /*selected*/ ctx[1]));
    			}

    			if (dirty & /*areDatesEquivalent, days, highlighted*/ 5) {
    				toggle_class(button, "highlighted", areDatesEquivalent(/*day*/ ctx[7].date, /*highlighted*/ ctx[2]));
    			}

    			if (dirty & /*shouldShakeDate, areDatesEquivalent, days*/ 9) {
    				toggle_class(button, "shake-date", /*shouldShakeDate*/ ctx[3] && areDatesEquivalent(/*day*/ ctx[7].date, /*shouldShakeDate*/ ctx[3]));
    			}

    			if (dirty & /*days*/ 1) {
    				toggle_class(button, "disabled", !/*day*/ ctx[7].selectable);
    			}

    			if (dirty & /*days*/ 1) {
    				toggle_class(div, "outside-month", !/*day*/ ctx[7].partOfMonth);
    			}

    			if (dirty & /*days*/ 1) {
    				toggle_class(div, "is-today", /*day*/ ctx[7].isToday);
    			}

    			if (dirty & /*days*/ 1) {
    				toggle_class(div, "is-disabled", !/*day*/ ctx[7].selectable);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(20:2) {#each days as day}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div;
    	let div_intro;
    	let div_outro;
    	let current;
    	let each_value = /*days*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "week svelte-1f2gkwh");
    			add_location(div, file$8, 14, 0, 341);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*days, areDatesEquivalent, selected, highlighted, shouldShakeDate, dispatch*/ 47) {
    				each_value = /*days*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			if (local) {
    				add_render_callback(() => {
    					if (div_outro) div_outro.end(1);

    					if (!div_intro) div_intro = create_in_transition(div, fly, {
    						x: /*direction*/ ctx[4] * 50,
    						duration: 180,
    						delay: 90
    					});

    					div_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();

    			if (local) {
    				div_outro = create_out_transition(div, fade, { duration: 180 });
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Week', slots, []);
    	const dispatch = createEventDispatcher();
    	let { days } = $$props;
    	let { selected } = $$props;
    	let { highlighted } = $$props;
    	let { shouldShakeDate } = $$props;
    	let { direction } = $$props;
    	const writable_props = ['days', 'selected', 'highlighted', 'shouldShakeDate', 'direction'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Week> was created with unknown prop '${key}'`);
    	});

    	const click_handler = day => dispatch('dateSelected', day.date);

    	$$self.$$set = $$props => {
    		if ('days' in $$props) $$invalidate(0, days = $$props.days);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('highlighted' in $$props) $$invalidate(2, highlighted = $$props.highlighted);
    		if ('shouldShakeDate' in $$props) $$invalidate(3, shouldShakeDate = $$props.shouldShakeDate);
    		if ('direction' in $$props) $$invalidate(4, direction = $$props.direction);
    	};

    	$$self.$capture_state = () => ({
    		areDatesEquivalent,
    		fly,
    		fade,
    		createEventDispatcher,
    		dispatch,
    		days,
    		selected,
    		highlighted,
    		shouldShakeDate,
    		direction
    	});

    	$$self.$inject_state = $$props => {
    		if ('days' in $$props) $$invalidate(0, days = $$props.days);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('highlighted' in $$props) $$invalidate(2, highlighted = $$props.highlighted);
    		if ('shouldShakeDate' in $$props) $$invalidate(3, shouldShakeDate = $$props.shouldShakeDate);
    		if ('direction' in $$props) $$invalidate(4, direction = $$props.direction);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		days,
    		selected,
    		highlighted,
    		shouldShakeDate,
    		direction,
    		dispatch,
    		click_handler
    	];
    }

    class Week extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			days: 0,
    			selected: 1,
    			highlighted: 2,
    			shouldShakeDate: 3,
    			direction: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Week",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*days*/ ctx[0] === undefined && !('days' in props)) {
    			console.warn("<Week> was created without expected prop 'days'");
    		}

    		if (/*selected*/ ctx[1] === undefined && !('selected' in props)) {
    			console.warn("<Week> was created without expected prop 'selected'");
    		}

    		if (/*highlighted*/ ctx[2] === undefined && !('highlighted' in props)) {
    			console.warn("<Week> was created without expected prop 'highlighted'");
    		}

    		if (/*shouldShakeDate*/ ctx[3] === undefined && !('shouldShakeDate' in props)) {
    			console.warn("<Week> was created without expected prop 'shouldShakeDate'");
    		}

    		if (/*direction*/ ctx[4] === undefined && !('direction' in props)) {
    			console.warn("<Week> was created without expected prop 'direction'");
    		}
    	}

    	get days() {
    		throw new Error("<Week>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set days(value) {
    		throw new Error("<Week>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Week>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Week>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get highlighted() {
    		throw new Error("<Week>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set highlighted(value) {
    		throw new Error("<Week>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shouldShakeDate() {
    		throw new Error("<Week>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shouldShakeDate(value) {
    		throw new Error("<Week>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get direction() {
    		throw new Error("<Week>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set direction(value) {
    		throw new Error("<Week>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-calendar\src\Components\Month.svelte generated by Svelte v3.40.0 */
    const file$7 = "node_modules\\svelte-calendar\\src\\Components\\Month.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (20:2) {#each visibleMonth.weeks as week (week.id) }
    function create_each_block$3(key_1, ctx) {
    	let first;
    	let week;
    	let current;

    	week = new Week({
    			props: {
    				days: /*week*/ ctx[8].days,
    				selected: /*selected*/ ctx[1],
    				highlighted: /*highlighted*/ ctx[2],
    				shouldShakeDate: /*shouldShakeDate*/ ctx[3],
    				direction: /*direction*/ ctx[4]
    			},
    			$$inline: true
    		});

    	week.$on("dateSelected", /*dateSelected_handler*/ ctx[7]);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(week.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(week, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const week_changes = {};
    			if (dirty & /*visibleMonth*/ 1) week_changes.days = /*week*/ ctx[8].days;
    			if (dirty & /*selected*/ 2) week_changes.selected = /*selected*/ ctx[1];
    			if (dirty & /*highlighted*/ 4) week_changes.highlighted = /*highlighted*/ ctx[2];
    			if (dirty & /*shouldShakeDate*/ 8) week_changes.shouldShakeDate = /*shouldShakeDate*/ ctx[3];
    			if (dirty & /*direction*/ 16) week_changes.direction = /*direction*/ ctx[4];
    			week.$set(week_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(week.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(week.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(week, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(20:2) {#each visibleMonth.weeks as week (week.id) }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*visibleMonth*/ ctx[0].weeks;
    	validate_each_argument(each_value);
    	const get_key = ctx => /*week*/ ctx[8].id;
    	validate_each_keys(ctx, each_value, get_each_context$3, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$3(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "month-container svelte-ny3kda");
    			add_location(div, file$7, 18, 0, 284);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*visibleMonth, selected, highlighted, shouldShakeDate, direction*/ 31) {
    				each_value = /*visibleMonth*/ ctx[0].weeks;
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$3, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$3, null, get_each_context$3);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Month', slots, []);
    	let { id } = $$props;
    	let { visibleMonth } = $$props;
    	let { selected } = $$props;
    	let { highlighted } = $$props;
    	let { shouldShakeDate } = $$props;
    	let lastId = id;
    	let direction;
    	const writable_props = ['id', 'visibleMonth', 'selected', 'highlighted', 'shouldShakeDate'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Month> was created with unknown prop '${key}'`);
    	});

    	function dateSelected_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(5, id = $$props.id);
    		if ('visibleMonth' in $$props) $$invalidate(0, visibleMonth = $$props.visibleMonth);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('highlighted' in $$props) $$invalidate(2, highlighted = $$props.highlighted);
    		if ('shouldShakeDate' in $$props) $$invalidate(3, shouldShakeDate = $$props.shouldShakeDate);
    	};

    	$$self.$capture_state = () => ({
    		Week,
    		id,
    		visibleMonth,
    		selected,
    		highlighted,
    		shouldShakeDate,
    		lastId,
    		direction
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(5, id = $$props.id);
    		if ('visibleMonth' in $$props) $$invalidate(0, visibleMonth = $$props.visibleMonth);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('highlighted' in $$props) $$invalidate(2, highlighted = $$props.highlighted);
    		if ('shouldShakeDate' in $$props) $$invalidate(3, shouldShakeDate = $$props.shouldShakeDate);
    		if ('lastId' in $$props) $$invalidate(6, lastId = $$props.lastId);
    		if ('direction' in $$props) $$invalidate(4, direction = $$props.direction);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*lastId, id*/ 96) {
    			{
    				$$invalidate(4, direction = lastId < id ? 1 : -1);
    				$$invalidate(6, lastId = id);
    			}
    		}
    	};

    	return [
    		visibleMonth,
    		selected,
    		highlighted,
    		shouldShakeDate,
    		direction,
    		id,
    		lastId,
    		dateSelected_handler
    	];
    }

    class Month extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			id: 5,
    			visibleMonth: 0,
    			selected: 1,
    			highlighted: 2,
    			shouldShakeDate: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Month",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[5] === undefined && !('id' in props)) {
    			console.warn("<Month> was created without expected prop 'id'");
    		}

    		if (/*visibleMonth*/ ctx[0] === undefined && !('visibleMonth' in props)) {
    			console.warn("<Month> was created without expected prop 'visibleMonth'");
    		}

    		if (/*selected*/ ctx[1] === undefined && !('selected' in props)) {
    			console.warn("<Month> was created without expected prop 'selected'");
    		}

    		if (/*highlighted*/ ctx[2] === undefined && !('highlighted' in props)) {
    			console.warn("<Month> was created without expected prop 'highlighted'");
    		}

    		if (/*shouldShakeDate*/ ctx[3] === undefined && !('shouldShakeDate' in props)) {
    			console.warn("<Month> was created without expected prop 'shouldShakeDate'");
    		}
    	}

    	get id() {
    		throw new Error("<Month>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Month>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get visibleMonth() {
    		throw new Error("<Month>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set visibleMonth(value) {
    		throw new Error("<Month>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Month>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Month>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get highlighted() {
    		throw new Error("<Month>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set highlighted(value) {
    		throw new Error("<Month>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shouldShakeDate() {
    		throw new Error("<Month>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shouldShakeDate(value) {
    		throw new Error("<Month>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-calendar\src\Components\NavBar.svelte generated by Svelte v3.40.0 */

    const { Object: Object_1 } = globals;
    const file$6 = "node_modules\\svelte-calendar\\src\\Components\\NavBar.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	child_ctx[17] = i;
    	return child_ctx;
    }

    // (64:4) {#each availableMonths as monthDefinition, index}
    function create_each_block$2(ctx) {
    	let div;
    	let span;
    	let t0_value = /*monthDefinition*/ ctx[15].abbrev + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler_2(...args) {
    		return /*click_handler_2*/ ctx[14](/*monthDefinition*/ ctx[15], /*index*/ ctx[17], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(span, "class", "svelte-1dqf106");
    			add_location(span, file$6, 70, 8, 1952);
    			attr_dev(div, "class", "month-selector--month svelte-1dqf106");
    			toggle_class(div, "selected", /*index*/ ctx[17] === /*month*/ ctx[0]);
    			toggle_class(div, "selectable", /*monthDefinition*/ ctx[15].selectable);
    			add_location(div, file$6, 64, 6, 1721);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t0);
    			append_dev(div, t1);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*availableMonths*/ 64 && t0_value !== (t0_value = /*monthDefinition*/ ctx[15].abbrev + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*month*/ 1) {
    				toggle_class(div, "selected", /*index*/ ctx[17] === /*month*/ ctx[0]);
    			}

    			if (dirty & /*availableMonths*/ 64) {
    				toggle_class(div, "selectable", /*monthDefinition*/ ctx[15].selectable);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(64:4) {#each availableMonths as monthDefinition, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div5;
    	let div3;
    	let div0;
    	let i0;
    	let t0;
    	let div1;
    	let t1_value = /*monthsOfYear*/ ctx[4][/*month*/ ctx[0]][0] + "";
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let div2;
    	let i1;
    	let t5;
    	let div4;
    	let mounted;
    	let dispose;
    	let each_value = /*availableMonths*/ ctx[6];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			i0 = element("i");
    			t0 = space();
    			div1 = element("div");
    			t1 = text(t1_value);
    			t2 = space();
    			t3 = text(/*year*/ ctx[1]);
    			t4 = space();
    			div2 = element("div");
    			i1 = element("i");
    			t5 = space();
    			div4 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(i0, "class", "arrow left svelte-1dqf106");
    			add_location(i0, file$6, 51, 6, 1279);
    			attr_dev(div0, "class", "control svelte-1dqf106");
    			toggle_class(div0, "enabled", /*canDecrementMonth*/ ctx[3]);
    			add_location(div0, file$6, 48, 4, 1156);
    			attr_dev(div1, "class", "label svelte-1dqf106");
    			add_location(div1, file$6, 53, 4, 1321);
    			attr_dev(i1, "class", "arrow right svelte-1dqf106");
    			add_location(i1, file$6, 59, 6, 1551);
    			attr_dev(div2, "class", "control svelte-1dqf106");
    			toggle_class(div2, "enabled", /*canIncrementMonth*/ ctx[2]);
    			add_location(div2, file$6, 56, 4, 1430);
    			attr_dev(div3, "class", "heading-section svelte-1dqf106");
    			add_location(div3, file$6, 47, 2, 1122);
    			attr_dev(div4, "class", "month-selector svelte-1dqf106");
    			toggle_class(div4, "open", /*monthSelectorOpen*/ ctx[5]);
    			add_location(div4, file$6, 62, 2, 1601);
    			attr_dev(div5, "class", "title");
    			add_location(div5, file$6, 46, 0, 1100);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div3);
    			append_dev(div3, div0);
    			append_dev(div0, i0);
    			append_dev(div3, t0);
    			append_dev(div3, div1);
    			append_dev(div1, t1);
    			append_dev(div1, t2);
    			append_dev(div1, t3);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, i1);
    			append_dev(div5, t5);
    			append_dev(div5, div4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div4, null);
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[12], false, false, false),
    					listen_dev(div1, "click", /*toggleMonthSelectorOpen*/ ctx[8], false, false, false),
    					listen_dev(div2, "click", /*click_handler_1*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*canDecrementMonth*/ 8) {
    				toggle_class(div0, "enabled", /*canDecrementMonth*/ ctx[3]);
    			}

    			if (dirty & /*monthsOfYear, month*/ 17 && t1_value !== (t1_value = /*monthsOfYear*/ ctx[4][/*month*/ ctx[0]][0] + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*year*/ 2) set_data_dev(t3, /*year*/ ctx[1]);

    			if (dirty & /*canIncrementMonth*/ 4) {
    				toggle_class(div2, "enabled", /*canIncrementMonth*/ ctx[2]);
    			}

    			if (dirty & /*month, availableMonths, monthSelected*/ 577) {
    				each_value = /*availableMonths*/ ctx[6];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div4, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*monthSelectorOpen*/ 32) {
    				toggle_class(div4, "open", /*monthSelectorOpen*/ ctx[5]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavBar', slots, []);
    	const dispatch = createEventDispatcher();
    	let { month } = $$props;
    	let { year } = $$props;
    	let { start } = $$props;
    	let { end } = $$props;
    	let { canIncrementMonth } = $$props;
    	let { canDecrementMonth } = $$props;
    	let { monthsOfYear } = $$props;
    	let monthSelectorOpen = false;
    	let availableMonths;

    	function toggleMonthSelectorOpen() {
    		$$invalidate(5, monthSelectorOpen = !monthSelectorOpen);
    	}

    	function monthSelected(event, { m, i }) {
    		event.stopPropagation();
    		if (!m.selectable) return;
    		dispatch('monthSelected', i);
    		toggleMonthSelectorOpen();
    	}

    	const writable_props = [
    		'month',
    		'year',
    		'start',
    		'end',
    		'canIncrementMonth',
    		'canDecrementMonth',
    		'monthsOfYear'
    	];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavBar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => dispatch('incrementMonth', -1);
    	const click_handler_1 = () => dispatch('incrementMonth', 1);
    	const click_handler_2 = (monthDefinition, index, e) => monthSelected(e, { m: monthDefinition, i: index });

    	$$self.$$set = $$props => {
    		if ('month' in $$props) $$invalidate(0, month = $$props.month);
    		if ('year' in $$props) $$invalidate(1, year = $$props.year);
    		if ('start' in $$props) $$invalidate(10, start = $$props.start);
    		if ('end' in $$props) $$invalidate(11, end = $$props.end);
    		if ('canIncrementMonth' in $$props) $$invalidate(2, canIncrementMonth = $$props.canIncrementMonth);
    		if ('canDecrementMonth' in $$props) $$invalidate(3, canDecrementMonth = $$props.canDecrementMonth);
    		if ('monthsOfYear' in $$props) $$invalidate(4, monthsOfYear = $$props.monthsOfYear);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		month,
    		year,
    		start,
    		end,
    		canIncrementMonth,
    		canDecrementMonth,
    		monthsOfYear,
    		monthSelectorOpen,
    		availableMonths,
    		toggleMonthSelectorOpen,
    		monthSelected
    	});

    	$$self.$inject_state = $$props => {
    		if ('month' in $$props) $$invalidate(0, month = $$props.month);
    		if ('year' in $$props) $$invalidate(1, year = $$props.year);
    		if ('start' in $$props) $$invalidate(10, start = $$props.start);
    		if ('end' in $$props) $$invalidate(11, end = $$props.end);
    		if ('canIncrementMonth' in $$props) $$invalidate(2, canIncrementMonth = $$props.canIncrementMonth);
    		if ('canDecrementMonth' in $$props) $$invalidate(3, canDecrementMonth = $$props.canDecrementMonth);
    		if ('monthsOfYear' in $$props) $$invalidate(4, monthsOfYear = $$props.monthsOfYear);
    		if ('monthSelectorOpen' in $$props) $$invalidate(5, monthSelectorOpen = $$props.monthSelectorOpen);
    		if ('availableMonths' in $$props) $$invalidate(6, availableMonths = $$props.availableMonths);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*start, year, end, monthsOfYear*/ 3090) {
    			{
    				let isOnLowerBoundary = start.getFullYear() === year;
    				let isOnUpperBoundary = end.getFullYear() === year;

    				$$invalidate(6, availableMonths = monthsOfYear.map((m, i) => {
    					return Object.assign({}, { name: m[0], abbrev: m[1] }, {
    						selectable: !isOnLowerBoundary && !isOnUpperBoundary || (!isOnLowerBoundary || i >= start.getMonth()) && (!isOnUpperBoundary || i <= end.getMonth())
    					});
    				}));
    			}
    		}
    	};

    	return [
    		month,
    		year,
    		canIncrementMonth,
    		canDecrementMonth,
    		monthsOfYear,
    		monthSelectorOpen,
    		availableMonths,
    		dispatch,
    		toggleMonthSelectorOpen,
    		monthSelected,
    		start,
    		end,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class NavBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			month: 0,
    			year: 1,
    			start: 10,
    			end: 11,
    			canIncrementMonth: 2,
    			canDecrementMonth: 3,
    			monthsOfYear: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavBar",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*month*/ ctx[0] === undefined && !('month' in props)) {
    			console.warn("<NavBar> was created without expected prop 'month'");
    		}

    		if (/*year*/ ctx[1] === undefined && !('year' in props)) {
    			console.warn("<NavBar> was created without expected prop 'year'");
    		}

    		if (/*start*/ ctx[10] === undefined && !('start' in props)) {
    			console.warn("<NavBar> was created without expected prop 'start'");
    		}

    		if (/*end*/ ctx[11] === undefined && !('end' in props)) {
    			console.warn("<NavBar> was created without expected prop 'end'");
    		}

    		if (/*canIncrementMonth*/ ctx[2] === undefined && !('canIncrementMonth' in props)) {
    			console.warn("<NavBar> was created without expected prop 'canIncrementMonth'");
    		}

    		if (/*canDecrementMonth*/ ctx[3] === undefined && !('canDecrementMonth' in props)) {
    			console.warn("<NavBar> was created without expected prop 'canDecrementMonth'");
    		}

    		if (/*monthsOfYear*/ ctx[4] === undefined && !('monthsOfYear' in props)) {
    			console.warn("<NavBar> was created without expected prop 'monthsOfYear'");
    		}
    	}

    	get month() {
    		throw new Error("<NavBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set month(value) {
    		throw new Error("<NavBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get year() {
    		throw new Error("<NavBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set year(value) {
    		throw new Error("<NavBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get start() {
    		throw new Error("<NavBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set start(value) {
    		throw new Error("<NavBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get end() {
    		throw new Error("<NavBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set end(value) {
    		throw new Error("<NavBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get canIncrementMonth() {
    		throw new Error("<NavBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set canIncrementMonth(value) {
    		throw new Error("<NavBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get canDecrementMonth() {
    		throw new Error("<NavBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set canDecrementMonth(value) {
    		throw new Error("<NavBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get monthsOfYear() {
    		throw new Error("<NavBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set monthsOfYear(value) {
    		throw new Error("<NavBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-calendar\src\Components\Popover.svelte generated by Svelte v3.40.0 */

    const { window: window_1 } = globals;
    const file$5 = "node_modules\\svelte-calendar\\src\\Components\\Popover.svelte";
    const get_contents_slot_changes = dirty => ({});
    const get_contents_slot_context = ctx => ({});
    const get_trigger_slot_changes = dirty => ({});
    const get_trigger_slot_context = ctx => ({});

    function create_fragment$9(ctx) {
    	let div4;
    	let div0;
    	let t;
    	let div3;
    	let div2;
    	let div1;
    	let current;
    	let mounted;
    	let dispose;
    	add_render_callback(/*onwindowresize*/ ctx[14]);
    	const trigger_slot_template = /*#slots*/ ctx[13].trigger;
    	const trigger_slot = create_slot(trigger_slot_template, ctx, /*$$scope*/ ctx[12], get_trigger_slot_context);
    	const contents_slot_template = /*#slots*/ ctx[13].contents;
    	const contents_slot = create_slot(contents_slot_template, ctx, /*$$scope*/ ctx[12], get_contents_slot_context);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			if (trigger_slot) trigger_slot.c();
    			t = space();
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			if (contents_slot) contents_slot.c();
    			attr_dev(div0, "class", "trigger");
    			add_location(div0, file$5, 103, 2, 2358);
    			attr_dev(div1, "class", "contents-inner svelte-mc1z8c");
    			add_location(div1, file$5, 114, 6, 2745);
    			attr_dev(div2, "class", "contents svelte-mc1z8c");
    			add_location(div2, file$5, 113, 4, 2687);
    			attr_dev(div3, "class", "contents-wrapper svelte-mc1z8c");
    			set_style(div3, "transform", "translate(-50%,-50%) translate(" + /*translateX*/ ctx[8] + "px, " + /*translateY*/ ctx[7] + "px)");
    			toggle_class(div3, "visible", /*open*/ ctx[0]);
    			toggle_class(div3, "shrink", /*shrink*/ ctx[1]);
    			add_location(div3, file$5, 107, 2, 2476);
    			attr_dev(div4, "class", "sc-popover svelte-mc1z8c");
    			add_location(div4, file$5, 102, 0, 2311);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);

    			if (trigger_slot) {
    				trigger_slot.m(div0, null);
    			}

    			/*div0_binding*/ ctx[15](div0);
    			append_dev(div4, t);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			if (contents_slot) {
    				contents_slot.m(div1, null);
    			}

    			/*div2_binding*/ ctx[16](div2);
    			/*div3_binding*/ ctx[17](div3);
    			/*div4_binding*/ ctx[18](div4);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window_1, "resize", /*onwindowresize*/ ctx[14]),
    					listen_dev(div0, "click", /*doOpen*/ ctx[9], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (trigger_slot) {
    				if (trigger_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot(trigger_slot, trigger_slot_template, ctx, /*$$scope*/ ctx[12], !current ? -1 : dirty, get_trigger_slot_changes, get_trigger_slot_context);
    				}
    			}

    			if (contents_slot) {
    				if (contents_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot(contents_slot, contents_slot_template, ctx, /*$$scope*/ ctx[12], !current ? -1 : dirty, get_contents_slot_changes, get_contents_slot_context);
    				}
    			}

    			if (!current || dirty & /*translateX, translateY*/ 384) {
    				set_style(div3, "transform", "translate(-50%,-50%) translate(" + /*translateX*/ ctx[8] + "px, " + /*translateY*/ ctx[7] + "px)");
    			}

    			if (dirty & /*open*/ 1) {
    				toggle_class(div3, "visible", /*open*/ ctx[0]);
    			}

    			if (dirty & /*shrink*/ 2) {
    				toggle_class(div3, "shrink", /*shrink*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(trigger_slot, local);
    			transition_in(contents_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(trigger_slot, local);
    			transition_out(contents_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if (trigger_slot) trigger_slot.d(detaching);
    			/*div0_binding*/ ctx[15](null);
    			if (contents_slot) contents_slot.d(detaching);
    			/*div2_binding*/ ctx[16](null);
    			/*div3_binding*/ ctx[17](null);
    			/*div4_binding*/ ctx[18](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Popover', slots, ['trigger','contents']);
    	const dispatch = createEventDispatcher();

    	let once = (el, evt, cb) => {
    		function handler() {
    			cb.apply(this, arguments);
    			el.removeEventListener(evt, handler);
    		}

    		el.addEventListener(evt, handler);
    	};

    	let popover;
    	let w;
    	let triggerContainer;
    	let contentsAnimated;
    	let contentsWrapper;
    	let translateY = 0;
    	let translateX = 0;
    	let { open = false } = $$props;
    	let { shrink } = $$props;
    	let { trigger } = $$props;

    	const close = () => {
    		$$invalidate(1, shrink = true);

    		once(contentsAnimated, 'animationend', () => {
    			$$invalidate(1, shrink = false);
    			$$invalidate(0, open = false);
    			dispatch('closed');
    		});
    	};

    	function checkForFocusLoss(evt) {
    		if (!open) return;
    		let el = evt.target;

    		// eslint-disable-next-line
    		do {
    			if (el === popover) return;
    		} while (el = el.parentNode); // eslint-disable-next-line

    		close();
    	}

    	onMount(() => {
    		document.addEventListener('click', checkForFocusLoss);
    		if (!trigger) return;
    		triggerContainer.appendChild(trigger.parentNode.removeChild(trigger));

    		// eslint-disable-next-line
    		return () => {
    			document.removeEventListener('click', checkForFocusLoss);
    		};
    	});

    	const getDistanceToEdges = async () => {
    		if (!open) {
    			$$invalidate(0, open = true);
    		}

    		await tick();
    		let rect = contentsWrapper.getBoundingClientRect();

    		return {
    			top: rect.top + -1 * translateY,
    			bottom: window.innerHeight - rect.bottom + translateY,
    			left: rect.left + -1 * translateX,
    			right: document.body.clientWidth - rect.right + translateX
    		};
    	};

    	const getTranslate = async () => {
    		let dist = await getDistanceToEdges();
    		let x;
    		let y;

    		if (w < 480) {
    			y = dist.bottom;
    		} else if (dist.top < 0) {
    			y = Math.abs(dist.top);
    		} else if (dist.bottom < 0) {
    			y = dist.bottom;
    		} else {
    			y = 0;
    		}

    		if (dist.left < 0) {
    			x = Math.abs(dist.left);
    		} else if (dist.right < 0) {
    			x = dist.right;
    		} else {
    			x = 0;
    		}

    		return { x, y };
    	};

    	const doOpen = async () => {
    		const { x, y } = await getTranslate();
    		$$invalidate(8, translateX = x);
    		$$invalidate(7, translateY = y);
    		$$invalidate(0, open = true);
    		dispatch('opened');
    	};

    	const writable_props = ['open', 'shrink', 'trigger'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Popover> was created with unknown prop '${key}'`);
    	});

    	function onwindowresize() {
    		$$invalidate(3, w = window_1.innerWidth);
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			triggerContainer = $$value;
    			$$invalidate(4, triggerContainer);
    		});
    	}

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			contentsAnimated = $$value;
    			$$invalidate(5, contentsAnimated);
    		});
    	}

    	function div3_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			contentsWrapper = $$value;
    			$$invalidate(6, contentsWrapper);
    		});
    	}

    	function div4_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			popover = $$value;
    			$$invalidate(2, popover);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('open' in $$props) $$invalidate(0, open = $$props.open);
    		if ('shrink' in $$props) $$invalidate(1, shrink = $$props.shrink);
    		if ('trigger' in $$props) $$invalidate(10, trigger = $$props.trigger);
    		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		createEventDispatcher,
    		tick,
    		dispatch,
    		once,
    		popover,
    		w,
    		triggerContainer,
    		contentsAnimated,
    		contentsWrapper,
    		translateY,
    		translateX,
    		open,
    		shrink,
    		trigger,
    		close,
    		checkForFocusLoss,
    		getDistanceToEdges,
    		getTranslate,
    		doOpen
    	});

    	$$self.$inject_state = $$props => {
    		if ('once' in $$props) once = $$props.once;
    		if ('popover' in $$props) $$invalidate(2, popover = $$props.popover);
    		if ('w' in $$props) $$invalidate(3, w = $$props.w);
    		if ('triggerContainer' in $$props) $$invalidate(4, triggerContainer = $$props.triggerContainer);
    		if ('contentsAnimated' in $$props) $$invalidate(5, contentsAnimated = $$props.contentsAnimated);
    		if ('contentsWrapper' in $$props) $$invalidate(6, contentsWrapper = $$props.contentsWrapper);
    		if ('translateY' in $$props) $$invalidate(7, translateY = $$props.translateY);
    		if ('translateX' in $$props) $$invalidate(8, translateX = $$props.translateX);
    		if ('open' in $$props) $$invalidate(0, open = $$props.open);
    		if ('shrink' in $$props) $$invalidate(1, shrink = $$props.shrink);
    		if ('trigger' in $$props) $$invalidate(10, trigger = $$props.trigger);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		open,
    		shrink,
    		popover,
    		w,
    		triggerContainer,
    		contentsAnimated,
    		contentsWrapper,
    		translateY,
    		translateX,
    		doOpen,
    		trigger,
    		close,
    		$$scope,
    		slots,
    		onwindowresize,
    		div0_binding,
    		div2_binding,
    		div3_binding,
    		div4_binding
    	];
    }

    class Popover extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			open: 0,
    			shrink: 1,
    			trigger: 10,
    			close: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Popover",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*shrink*/ ctx[1] === undefined && !('shrink' in props)) {
    			console.warn("<Popover> was created without expected prop 'shrink'");
    		}

    		if (/*trigger*/ ctx[10] === undefined && !('trigger' in props)) {
    			console.warn("<Popover> was created without expected prop 'trigger'");
    		}
    	}

    	get open() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set open(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shrink() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shrink(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get trigger() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set trigger(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get close() {
    		return this.$$.ctx[11];
    	}

    	set close(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * generic function to inject data into token-laden string
     * @param str {String} Required
     * @param name {String} Required
     * @param value {String|Integer} Required
     * @returns {String}
     *
     * @example
     * injectStringData("The following is a token: #{tokenName}", "tokenName", 123); 
     * @returns {String} "The following is a token: 123"
     *
     */
    const injectStringData = (str,name,value) => str
      .replace(new RegExp('#{'+name+'}','g'), value);

    /**
     * Generic function to enforce length of string. 
     * 
     * Pass a string or number to this function and specify the desired length.
     * This function will either pad the # with leading 0's (if str.length < length)
     * or remove data from the end (@fromBack==false) or beginning (@fromBack==true)
     * of the string when str.length > length.
     *
     * When length == str.length or typeof length == 'undefined', this function
     * returns the original @str parameter.
     * 
     * @param str {String} Required
     * @param length {Integer} Required
     * @param fromBack {Boolean} Optional
     * @returns {String}
     *
     */
    const enforceLength = function(str,length,fromBack) {
      str = str.toString();
      if(typeof length == 'undefined') return str;
      if(str.length == length) return str;
      fromBack = (typeof fromBack == 'undefined') ? false : fromBack;
      if(str.length < length) {
        // pad the beginning of the string w/ enough 0's to reach desired length:
        while(length - str.length > 0) str = '0' + str;
      } else if(str.length > length) {
        if(fromBack) {
          // grab the desired #/chars from end of string: ex: '2015' -> '15'
          str = str.substring(str.length-length);
        } else {
          // grab the desired #/chars from beginning of string: ex: '2015' -> '20'
          str = str.substring(0,length);
        }
      }
      return str;
    };

    const daysOfWeek = [ 
      [ 'Sunday', 'Sun' ],
      [ 'Monday', 'Mon' ],
      [ 'Tuesday', 'Tue' ],
      [ 'Wednesday', 'Wed' ],
      [ 'Thursday', 'Thu' ],
      [ 'Friday', 'Fri' ],
      [ 'Saturday', 'Sat' ]
    ];

    const monthsOfYear = [ 
      [ 'January', 'Jan' ],
      [ 'February', 'Feb' ],
      [ 'March', 'Mar' ],
      [ 'April', 'Apr' ],
      [ 'May', 'May' ],
      [ 'June', 'Jun' ],
      [ 'July', 'Jul' ],
      [ 'August', 'Aug' ],
      [ 'September', 'Sep' ],
      [ 'October', 'Oct' ],
      [ 'November', 'Nov' ],
      [ 'December', 'Dec' ]
    ];

    let dictionary = { 
      daysOfWeek, 
      monthsOfYear
    };

    const extendDictionary = (conf) => 
      Object.keys(conf).forEach(key => {
        if(dictionary[key] && dictionary[key].length == conf[key].length) {
          dictionary[key] = conf[key];
        }
      });

    var acceptedDateTokens = [
      { 
        // d: day of the month, 2 digits with leading zeros:
        key: 'd', 
        method: function(date) { return enforceLength(date.getDate(), 2); } 
      }, { 
        // D: textual representation of day, 3 letters: Sun thru Sat
        key: 'D', 
        method: function(date) { return dictionary.daysOfWeek[date.getDay()][1]; } 
      }, { 
        // j: day of month without leading 0's
        key: 'j', 
        method: function(date) { return date.getDate(); } 
      }, { 
        // l: full textual representation of day of week: Sunday thru Saturday
        key: 'l', 
        method: function(date) { return dictionary.daysOfWeek[date.getDay()][0]; } 
      }, { 
        // F: full text month: 'January' thru 'December'
        key: 'F', 
        method: function(date) { return dictionary.monthsOfYear[date.getMonth()][0]; } 
      }, { 
        // m: 2 digit numeric month: '01' - '12':
        key: 'm', 
        method: function(date) { return enforceLength(date.getMonth()+1,2); } 
      }, { 
        // M: a short textual representation of the month, 3 letters: 'Jan' - 'Dec'
        key: 'M', 
        method: function(date) { return dictionary.monthsOfYear[date.getMonth()][1]; } 
      }, { 
        // n: numeric represetation of month w/o leading 0's, '1' - '12':
        key: 'n', 
        method: function(date) { return date.getMonth() + 1; } 
      }, { 
        // Y: Full numeric year, 4 digits
        key: 'Y', 
        method: function(date) { return date.getFullYear(); } 
      }, { 
        // y: 2 digit numeric year:
        key: 'y', 
        method: function(date) { return enforceLength(date.getFullYear(),2,true); }
       }
    ];

    var acceptedTimeTokens = [
      { 
        // a: lowercase ante meridiem and post meridiem 'am' or 'pm'
        key: 'a', 
        method: function(date) { return (date.getHours() > 11) ? 'pm' : 'am'; } 
      }, { 
        // A: uppercase ante merdiiem and post meridiem 'AM' or 'PM'
        key: 'A', 
        method: function(date) { return (date.getHours() > 11) ? 'PM' : 'AM'; } 
      }, { 
        // g: 12-hour format of an hour without leading zeros 1-12
        key: 'g', 
        method: function(date) { return date.getHours() % 12 || 12; } 
      }, { 
        // G: 24-hour format of an hour without leading zeros 0-23
        key: 'G', 
        method: function(date) { return date.getHours(); } 
      }, { 
        // h: 12-hour format of an hour with leading zeros 01-12
        key: 'h', 
        method: function(date) { return enforceLength(date.getHours()%12 || 12,2); } 
      }, { 
        // H: 24-hour format of an hour with leading zeros: 00-23
        key: 'H', 
        method: function(date) { return enforceLength(date.getHours(),2); } 
      }, { 
        // i: Minutes with leading zeros 00-59
        key: 'i', 
        method: function(date) { return enforceLength(date.getMinutes(),2); } 
      }, { 
        // s: Seconds with leading zeros 00-59
        key: 's', 
        method: function(date) { return enforceLength(date.getSeconds(),2); }
       }
    ];

    /**
     * Internationalization object for timeUtils.internationalize().
     * @typedef internationalizeObj
     * @property {Array} [daysOfWeek=[ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ]] daysOfWeek Weekday labels as strings, starting with Sunday.
     * @property {Array} [monthsOfYear=[ 'January','February','March','April','May','June','July','August','September','October','November','December' ]] monthsOfYear Month labels as strings, starting with January.
     */

    /**
     * This function can be used to support additional languages by passing an object with 
     * `daysOfWeek` and `monthsOfYear` attributes.  Each attribute should be an array of
     * strings (ex: `daysOfWeek: ['monday', 'tuesday', 'wednesday'...]`)
     *
     * @param {internationalizeObj} conf
     */
    const internationalize = (conf={}) => { 
      extendDictionary(conf);
    };

    /**
     * generic formatDate function which accepts dynamic templates
     * @param date {Date} Required
     * @param template {String} Optional
     * @returns {String}
     *
     * @example
     * formatDate(new Date(), '#{M}. #{j}, #{Y}')
     * @returns {Number} Returns a formatted date
     *
     */
    const formatDate = (date,template='#{m}/#{d}/#{Y}') => {
      acceptedDateTokens.forEach(token => {
        if(template.indexOf(`#{${token.key}}`) == -1) return; 
        template = injectStringData(template,token.key,token.method(date));
      }); 
      acceptedTimeTokens.forEach(token => {
        if(template.indexOf(`#{${token.key}}`) == -1) return;
        template = injectStringData(template,token.key,token.method(date));
      });
      return template;
    };

    const keyCodes = {
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      pgup: 33,
      pgdown: 34,
      enter: 13,
      escape: 27,
      tab: 9
    };

    const keyCodesArray = Object.keys(keyCodes).map(k => keyCodes[k]);

    /* node_modules\svelte-calendar\src\Components\Datepicker.svelte generated by Svelte v3.40.0 */
    const file$4 = "node_modules\\svelte-calendar\\src\\Components\\Datepicker.svelte";

    const get_default_slot_changes$3 = dirty => ({
    	selected: dirty[0] & /*selected*/ 1,
    	formattedSelected: dirty[0] & /*formattedSelected*/ 4
    });

    const get_default_slot_context$3 = ctx => ({
    	selected: /*selected*/ ctx[0],
    	formattedSelected: /*formattedSelected*/ ctx[2]
    });

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[63] = list[i];
    	return child_ctx;
    }

    // (277:8) {#if !trigger}
    function create_if_block$5(ctx) {
    	let button;
    	let t;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(/*formattedSelected*/ ctx[2]);
    			attr_dev(button, "class", "calendar-button svelte-1lorc63");
    			attr_dev(button, "type", "button");
    			add_location(button, file$4, 277, 8, 7754);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*formattedSelected*/ 4) set_data_dev(t, /*formattedSelected*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(277:8) {#if !trigger}",
    		ctx
    	});

    	return block;
    }

    // (276:43)          
    function fallback_block(ctx) {
    	let if_block_anchor;
    	let if_block = !/*trigger*/ ctx[1] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (!/*trigger*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(276:43)          ",
    		ctx
    	});

    	return block;
    }

    // (275:4) 
    function create_trigger_slot(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[40].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[47], get_default_slot_context$3);
    	const default_slot_or_fallback = default_slot || fallback_block(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			attr_dev(div, "slot", "trigger");
    			attr_dev(div, "class", "svelte-1lorc63");
    			add_location(div, file$4, 274, 4, 7658);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*selected, formattedSelected*/ 5 | dirty[1] & /*$$scope*/ 65536)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[47], !current ? [-1, -1, -1] : dirty, get_default_slot_changes$3, get_default_slot_context$3);
    				}
    			} else {
    				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*formattedSelected, trigger*/ 6)) {
    					default_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot.name,
    		type: "slot",
    		source: "(275:4) ",
    		ctx
    	});

    	return block;
    }

    // (298:10) {#each sortedDaysOfWeek as day}
    function create_each_block$1(ctx) {
    	let span;
    	let t_value = /*day*/ ctx[63][1] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "class", "svelte-1lorc63");
    			add_location(span, file$4, 298, 10, 8321);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(298:10) {#each sortedDaysOfWeek as day}",
    		ctx
    	});

    	return block;
    }

    // (284:4) 
    function create_contents_slot(ctx) {
    	let div2;
    	let div1;
    	let navbar;
    	let t0;
    	let div0;
    	let t1;
    	let month_1;
    	let current;

    	navbar = new NavBar({
    			props: {
    				month: /*month*/ ctx[6],
    				year: /*year*/ ctx[7],
    				canIncrementMonth: /*canIncrementMonth*/ ctx[15],
    				canDecrementMonth: /*canDecrementMonth*/ ctx[14],
    				start: /*start*/ ctx[3],
    				end: /*end*/ ctx[4],
    				monthsOfYear: /*monthsOfYear*/ ctx[5]
    			},
    			$$inline: true
    		});

    	navbar.$on("monthSelected", /*monthSelected_handler*/ ctx[41]);
    	navbar.$on("incrementMonth", /*incrementMonth_handler*/ ctx[42]);
    	let each_value = /*sortedDaysOfWeek*/ ctx[18];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	month_1 = new Month({
    			props: {
    				visibleMonth: /*visibleMonth*/ ctx[8],
    				selected: /*selected*/ ctx[0],
    				highlighted: /*highlighted*/ ctx[10],
    				shouldShakeDate: /*shouldShakeDate*/ ctx[11],
    				id: /*visibleMonthId*/ ctx[17]
    			},
    			$$inline: true
    		});

    	month_1.$on("dateSelected", /*dateSelected_handler*/ ctx[43]);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			create_component(navbar.$$.fragment);
    			t0 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			create_component(month_1.$$.fragment);
    			attr_dev(div0, "class", "legend svelte-1lorc63");
    			add_location(div0, file$4, 296, 8, 8248);
    			attr_dev(div1, "class", "calendar svelte-1lorc63");
    			add_location(div1, file$4, 284, 6, 7920);
    			attr_dev(div2, "slot", "contents");
    			attr_dev(div2, "class", "svelte-1lorc63");
    			add_location(div2, file$4, 283, 4, 7892);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			mount_component(navbar, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t1);
    			mount_component(month_1, div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navbar_changes = {};
    			if (dirty[0] & /*month*/ 64) navbar_changes.month = /*month*/ ctx[6];
    			if (dirty[0] & /*year*/ 128) navbar_changes.year = /*year*/ ctx[7];
    			if (dirty[0] & /*canIncrementMonth*/ 32768) navbar_changes.canIncrementMonth = /*canIncrementMonth*/ ctx[15];
    			if (dirty[0] & /*canDecrementMonth*/ 16384) navbar_changes.canDecrementMonth = /*canDecrementMonth*/ ctx[14];
    			if (dirty[0] & /*start*/ 8) navbar_changes.start = /*start*/ ctx[3];
    			if (dirty[0] & /*end*/ 16) navbar_changes.end = /*end*/ ctx[4];
    			if (dirty[0] & /*monthsOfYear*/ 32) navbar_changes.monthsOfYear = /*monthsOfYear*/ ctx[5];
    			navbar.$set(navbar_changes);

    			if (dirty[0] & /*sortedDaysOfWeek*/ 262144) {
    				each_value = /*sortedDaysOfWeek*/ ctx[18];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			const month_1_changes = {};
    			if (dirty[0] & /*visibleMonth*/ 256) month_1_changes.visibleMonth = /*visibleMonth*/ ctx[8];
    			if (dirty[0] & /*selected*/ 1) month_1_changes.selected = /*selected*/ ctx[0];
    			if (dirty[0] & /*highlighted*/ 1024) month_1_changes.highlighted = /*highlighted*/ ctx[10];
    			if (dirty[0] & /*shouldShakeDate*/ 2048) month_1_changes.shouldShakeDate = /*shouldShakeDate*/ ctx[11];
    			if (dirty[0] & /*visibleMonthId*/ 131072) month_1_changes.id = /*visibleMonthId*/ ctx[17];
    			month_1.$set(month_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbar.$$.fragment, local);
    			transition_in(month_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbar.$$.fragment, local);
    			transition_out(month_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(navbar);
    			destroy_each(each_blocks, detaching);
    			destroy_component(month_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_contents_slot.name,
    		type: "slot",
    		source: "(284:4) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div;
    	let popover_1;
    	let updating_open;
    	let updating_shrink;
    	let current;

    	function popover_1_open_binding(value) {
    		/*popover_1_open_binding*/ ctx[45](value);
    	}

    	function popover_1_shrink_binding(value) {
    		/*popover_1_shrink_binding*/ ctx[46](value);
    	}

    	let popover_1_props = {
    		trigger: /*trigger*/ ctx[1],
    		$$slots: {
    			contents: [create_contents_slot],
    			trigger: [create_trigger_slot]
    		},
    		$$scope: { ctx }
    	};

    	if (/*isOpen*/ ctx[12] !== void 0) {
    		popover_1_props.open = /*isOpen*/ ctx[12];
    	}

    	if (/*isClosing*/ ctx[13] !== void 0) {
    		popover_1_props.shrink = /*isClosing*/ ctx[13];
    	}

    	popover_1 = new Popover({ props: popover_1_props, $$inline: true });
    	/*popover_1_binding*/ ctx[44](popover_1);
    	binding_callbacks.push(() => bind(popover_1, 'open', popover_1_open_binding));
    	binding_callbacks.push(() => bind(popover_1, 'shrink', popover_1_shrink_binding));
    	popover_1.$on("opened", /*registerOpen*/ ctx[23]);
    	popover_1.$on("closed", /*registerClose*/ ctx[22]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(popover_1.$$.fragment);
    			attr_dev(div, "class", "datepicker svelte-1lorc63");
    			attr_dev(div, "style", /*wrapperStyle*/ ctx[16]);
    			toggle_class(div, "open", /*isOpen*/ ctx[12]);
    			toggle_class(div, "closing", /*isClosing*/ ctx[13]);
    			add_location(div, file$4, 260, 0, 7376);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(popover_1, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const popover_1_changes = {};
    			if (dirty[0] & /*trigger*/ 2) popover_1_changes.trigger = /*trigger*/ ctx[1];

    			if (dirty[0] & /*visibleMonth, selected, highlighted, shouldShakeDate, visibleMonthId, month, year, canIncrementMonth, canDecrementMonth, start, end, monthsOfYear, formattedSelected, trigger*/ 183807 | dirty[1] & /*$$scope*/ 65536) {
    				popover_1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_open && dirty[0] & /*isOpen*/ 4096) {
    				updating_open = true;
    				popover_1_changes.open = /*isOpen*/ ctx[12];
    				add_flush_callback(() => updating_open = false);
    			}

    			if (!updating_shrink && dirty[0] & /*isClosing*/ 8192) {
    				updating_shrink = true;
    				popover_1_changes.shrink = /*isClosing*/ ctx[13];
    				add_flush_callback(() => updating_shrink = false);
    			}

    			popover_1.$set(popover_1_changes);

    			if (!current || dirty[0] & /*wrapperStyle*/ 65536) {
    				attr_dev(div, "style", /*wrapperStyle*/ ctx[16]);
    			}

    			if (dirty[0] & /*isOpen*/ 4096) {
    				toggle_class(div, "open", /*isOpen*/ ctx[12]);
    			}

    			if (dirty[0] & /*isClosing*/ 8192) {
    				toggle_class(div, "closing", /*isClosing*/ ctx[13]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(popover_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(popover_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*popover_1_binding*/ ctx[44](null);
    			destroy_component(popover_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let months;
    	let visibleMonth;
    	let visibleMonthId;
    	let lastVisibleDate;
    	let firstVisibleDate;
    	let canIncrementMonth;
    	let canDecrementMonth;
    	let wrapperStyle;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Datepicker', slots, ['default']);
    	const dispatch = createEventDispatcher();
    	const today = new Date();
    	const oneYear = 1000 * 60 * 60 * 24 * 365;
    	let popover;
    	let { format = '#{m}/#{d}/#{Y}' } = $$props;
    	let { start = new Date(Date.now() - oneYear) } = $$props;
    	let { end = new Date(Date.now() + oneYear) } = $$props;
    	let { selected = today } = $$props;
    	let { dateChosen = false } = $$props;
    	let { trigger = null } = $$props;
    	let { selectableCallback = null } = $$props;
    	let { weekStart = 0 } = $$props;

    	let { daysOfWeek = [
    		['Sunday', 'Sun'],
    		['Monday', 'Mon'],
    		['Tuesday', 'Tue'],
    		['Wednesday', 'Wed'],
    		['Thursday', 'Thu'],
    		['Friday', 'Fri'],
    		['Saturday', 'Sat']
    	] } = $$props;

    	let { monthsOfYear = [
    		['January', 'Jan'],
    		['February', 'Feb'],
    		['March', 'Mar'],
    		['April', 'Apr'],
    		['May', 'May'],
    		['June', 'Jun'],
    		['July', 'Jul'],
    		['August', 'Aug'],
    		['September', 'Sep'],
    		['October', 'Oct'],
    		['November', 'Nov'],
    		['December', 'Dec']
    	] } = $$props;

    	selected = selected.getTime() < start.getTime() || selected.getTime() > end.getTime()
    	? start
    	: selected;

    	let { style = '' } = $$props;
    	let { buttonBackgroundColor = '#fff' } = $$props;
    	let { buttonBorderColor = '#eee' } = $$props;
    	let { buttonTextColor = '#333' } = $$props;
    	let { highlightColor = '#f7901e' } = $$props;
    	let { dayBackgroundColor = 'none' } = $$props;
    	let { dayTextColor = '#4a4a4a' } = $$props;
    	let { dayHighlightedBackgroundColor = '#efefef' } = $$props;
    	let { dayHighlightedTextColor = '#4a4a4a' } = $$props;
    	internationalize({ daysOfWeek, monthsOfYear });

    	let sortedDaysOfWeek = weekStart === 0
    	? daysOfWeek
    	: (() => {
    			let dow = daysOfWeek.slice();
    			dow.push(dow.shift());
    			return dow;
    		})();

    	let highlighted = today;
    	let shouldShakeDate = false;
    	let shakeHighlightTimeout;
    	let month = today.getMonth();
    	let year = today.getFullYear();
    	let isOpen = false;
    	let isClosing = false;
    	today.setHours(0, 0, 0, 0);

    	function assignmentHandler(formatted) {
    		if (!trigger) return;
    		$$invalidate(1, trigger.innerHTML = formatted, trigger);
    	}

    	let monthIndex = 0;
    	let { formattedSelected } = $$props;

    	onMount(() => {
    		$$invalidate(6, month = selected.getMonth());
    		$$invalidate(7, year = selected.getFullYear());
    	});

    	function changeMonth(selectedMonth) {
    		$$invalidate(6, month = selectedMonth);
    		$$invalidate(10, highlighted = new Date(year, month, 1));
    	}

    	function incrementMonth(direction, day = 1) {
    		if (direction === 1 && !canIncrementMonth) return;
    		if (direction === -1 && !canDecrementMonth) return;
    		let current = new Date(year, month, 1);
    		current.setMonth(current.getMonth() + direction);
    		$$invalidate(6, month = current.getMonth());
    		$$invalidate(7, year = current.getFullYear());
    		$$invalidate(10, highlighted = new Date(year, month, day));
    	}

    	function getDefaultHighlighted() {
    		return new Date(selected);
    	}

    	const getDay = (m, d, y) => {
    		let theMonth = months.find(aMonth => aMonth.month === m && aMonth.year === y);
    		if (!theMonth) return null;

    		// eslint-disable-next-line
    		for (let i = 0; i < theMonth.weeks.length; ++i) {
    			// eslint-disable-next-line
    			for (let j = 0; j < theMonth.weeks[i].days.length; ++j) {
    				let aDay = theMonth.weeks[i].days[j];
    				if (aDay.month === m && aDay.day === d && aDay.year === y) return aDay;
    			}
    		}

    		return null;
    	};

    	function incrementDayHighlighted(amount) {
    		let proposedDate = new Date(highlighted);
    		proposedDate.setDate(highlighted.getDate() + amount);
    		let correspondingDayObj = getDay(proposedDate.getMonth(), proposedDate.getDate(), proposedDate.getFullYear());
    		if (!correspondingDayObj || !correspondingDayObj.isInRange) return;
    		$$invalidate(10, highlighted = proposedDate);

    		if (amount > 0 && highlighted > lastVisibleDate) {
    			incrementMonth(1, highlighted.getDate());
    		}

    		if (amount < 0 && highlighted < firstVisibleDate) {
    			incrementMonth(-1, highlighted.getDate());
    		}
    	}

    	function checkIfVisibleDateIsSelectable(date) {
    		const proposedDay = getDay(date.getMonth(), date.getDate(), date.getFullYear());
    		return proposedDay && proposedDay.selectable;
    	}

    	function shakeDate(date) {
    		clearTimeout(shakeHighlightTimeout);
    		$$invalidate(11, shouldShakeDate = date);

    		shakeHighlightTimeout = setTimeout(
    			() => {
    				$$invalidate(11, shouldShakeDate = false);
    			},
    			700
    		);
    	}

    	function assignValueToTrigger(formatted) {
    		assignmentHandler(formatted);
    	}

    	function registerSelection(chosen) {
    		if (!checkIfVisibleDateIsSelectable(chosen)) return shakeDate(chosen);

    		// eslint-disable-next-line
    		close();

    		$$invalidate(0, selected = chosen);
    		$$invalidate(24, dateChosen = true);
    		assignValueToTrigger(formattedSelected);
    		return dispatch('dateSelected', { date: chosen });
    	}

    	function handleKeyPress(evt) {
    		if (keyCodesArray.indexOf(evt.keyCode) === -1) return;
    		evt.preventDefault();

    		switch (evt.keyCode) {
    			case keyCodes.left:
    				incrementDayHighlighted(-1);
    				break;
    			case keyCodes.up:
    				incrementDayHighlighted(-7);
    				break;
    			case keyCodes.right:
    				incrementDayHighlighted(1);
    				break;
    			case keyCodes.down:
    				incrementDayHighlighted(7);
    				break;
    			case keyCodes.pgup:
    				incrementMonth(-1);
    				break;
    			case keyCodes.pgdown:
    				incrementMonth(1);
    				break;
    			case keyCodes.escape:
    				// eslint-disable-next-line
    				close();
    				break;
    			case keyCodes.enter:
    				registerSelection(highlighted);
    				break;
    		}
    	}

    	function registerClose() {
    		document.removeEventListener('keydown', handleKeyPress);
    		dispatch('close');
    	}

    	function close() {
    		popover.close();
    		registerClose();
    	}

    	function registerOpen() {
    		$$invalidate(10, highlighted = getDefaultHighlighted());
    		$$invalidate(6, month = selected.getMonth());
    		$$invalidate(7, year = selected.getFullYear());
    		document.addEventListener('keydown', handleKeyPress);
    		dispatch('open');
    	}

    	const writable_props = [
    		'format',
    		'start',
    		'end',
    		'selected',
    		'dateChosen',
    		'trigger',
    		'selectableCallback',
    		'weekStart',
    		'daysOfWeek',
    		'monthsOfYear',
    		'style',
    		'buttonBackgroundColor',
    		'buttonBorderColor',
    		'buttonTextColor',
    		'highlightColor',
    		'dayBackgroundColor',
    		'dayTextColor',
    		'dayHighlightedBackgroundColor',
    		'dayHighlightedTextColor',
    		'formattedSelected'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Datepicker> was created with unknown prop '${key}'`);
    	});

    	const monthSelected_handler = e => changeMonth(e.detail);
    	const incrementMonth_handler = e => incrementMonth(e.detail);
    	const dateSelected_handler = e => registerSelection(e.detail);

    	function popover_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			popover = $$value;
    			$$invalidate(9, popover);
    		});
    	}

    	function popover_1_open_binding(value) {
    		isOpen = value;
    		$$invalidate(12, isOpen);
    	}

    	function popover_1_shrink_binding(value) {
    		isClosing = value;
    		$$invalidate(13, isClosing);
    	}

    	$$self.$$set = $$props => {
    		if ('format' in $$props) $$invalidate(25, format = $$props.format);
    		if ('start' in $$props) $$invalidate(3, start = $$props.start);
    		if ('end' in $$props) $$invalidate(4, end = $$props.end);
    		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
    		if ('dateChosen' in $$props) $$invalidate(24, dateChosen = $$props.dateChosen);
    		if ('trigger' in $$props) $$invalidate(1, trigger = $$props.trigger);
    		if ('selectableCallback' in $$props) $$invalidate(26, selectableCallback = $$props.selectableCallback);
    		if ('weekStart' in $$props) $$invalidate(27, weekStart = $$props.weekStart);
    		if ('daysOfWeek' in $$props) $$invalidate(28, daysOfWeek = $$props.daysOfWeek);
    		if ('monthsOfYear' in $$props) $$invalidate(5, monthsOfYear = $$props.monthsOfYear);
    		if ('style' in $$props) $$invalidate(29, style = $$props.style);
    		if ('buttonBackgroundColor' in $$props) $$invalidate(30, buttonBackgroundColor = $$props.buttonBackgroundColor);
    		if ('buttonBorderColor' in $$props) $$invalidate(31, buttonBorderColor = $$props.buttonBorderColor);
    		if ('buttonTextColor' in $$props) $$invalidate(32, buttonTextColor = $$props.buttonTextColor);
    		if ('highlightColor' in $$props) $$invalidate(33, highlightColor = $$props.highlightColor);
    		if ('dayBackgroundColor' in $$props) $$invalidate(34, dayBackgroundColor = $$props.dayBackgroundColor);
    		if ('dayTextColor' in $$props) $$invalidate(35, dayTextColor = $$props.dayTextColor);
    		if ('dayHighlightedBackgroundColor' in $$props) $$invalidate(36, dayHighlightedBackgroundColor = $$props.dayHighlightedBackgroundColor);
    		if ('dayHighlightedTextColor' in $$props) $$invalidate(37, dayHighlightedTextColor = $$props.dayHighlightedTextColor);
    		if ('formattedSelected' in $$props) $$invalidate(2, formattedSelected = $$props.formattedSelected);
    		if ('$$scope' in $$props) $$invalidate(47, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Month,
    		NavBar,
    		Popover,
    		getMonths,
    		formatDate,
    		internationalize,
    		keyCodes,
    		keyCodesArray,
    		onMount,
    		createEventDispatcher,
    		dispatch,
    		today,
    		oneYear,
    		popover,
    		format,
    		start,
    		end,
    		selected,
    		dateChosen,
    		trigger,
    		selectableCallback,
    		weekStart,
    		daysOfWeek,
    		monthsOfYear,
    		style,
    		buttonBackgroundColor,
    		buttonBorderColor,
    		buttonTextColor,
    		highlightColor,
    		dayBackgroundColor,
    		dayTextColor,
    		dayHighlightedBackgroundColor,
    		dayHighlightedTextColor,
    		sortedDaysOfWeek,
    		highlighted,
    		shouldShakeDate,
    		shakeHighlightTimeout,
    		month,
    		year,
    		isOpen,
    		isClosing,
    		assignmentHandler,
    		monthIndex,
    		formattedSelected,
    		changeMonth,
    		incrementMonth,
    		getDefaultHighlighted,
    		getDay,
    		incrementDayHighlighted,
    		checkIfVisibleDateIsSelectable,
    		shakeDate,
    		assignValueToTrigger,
    		registerSelection,
    		handleKeyPress,
    		registerClose,
    		close,
    		registerOpen,
    		firstVisibleDate,
    		lastVisibleDate,
    		months,
    		canDecrementMonth,
    		canIncrementMonth,
    		wrapperStyle,
    		visibleMonth,
    		visibleMonthId
    	});

    	$$self.$inject_state = $$props => {
    		if ('popover' in $$props) $$invalidate(9, popover = $$props.popover);
    		if ('format' in $$props) $$invalidate(25, format = $$props.format);
    		if ('start' in $$props) $$invalidate(3, start = $$props.start);
    		if ('end' in $$props) $$invalidate(4, end = $$props.end);
    		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
    		if ('dateChosen' in $$props) $$invalidate(24, dateChosen = $$props.dateChosen);
    		if ('trigger' in $$props) $$invalidate(1, trigger = $$props.trigger);
    		if ('selectableCallback' in $$props) $$invalidate(26, selectableCallback = $$props.selectableCallback);
    		if ('weekStart' in $$props) $$invalidate(27, weekStart = $$props.weekStart);
    		if ('daysOfWeek' in $$props) $$invalidate(28, daysOfWeek = $$props.daysOfWeek);
    		if ('monthsOfYear' in $$props) $$invalidate(5, monthsOfYear = $$props.monthsOfYear);
    		if ('style' in $$props) $$invalidate(29, style = $$props.style);
    		if ('buttonBackgroundColor' in $$props) $$invalidate(30, buttonBackgroundColor = $$props.buttonBackgroundColor);
    		if ('buttonBorderColor' in $$props) $$invalidate(31, buttonBorderColor = $$props.buttonBorderColor);
    		if ('buttonTextColor' in $$props) $$invalidate(32, buttonTextColor = $$props.buttonTextColor);
    		if ('highlightColor' in $$props) $$invalidate(33, highlightColor = $$props.highlightColor);
    		if ('dayBackgroundColor' in $$props) $$invalidate(34, dayBackgroundColor = $$props.dayBackgroundColor);
    		if ('dayTextColor' in $$props) $$invalidate(35, dayTextColor = $$props.dayTextColor);
    		if ('dayHighlightedBackgroundColor' in $$props) $$invalidate(36, dayHighlightedBackgroundColor = $$props.dayHighlightedBackgroundColor);
    		if ('dayHighlightedTextColor' in $$props) $$invalidate(37, dayHighlightedTextColor = $$props.dayHighlightedTextColor);
    		if ('sortedDaysOfWeek' in $$props) $$invalidate(18, sortedDaysOfWeek = $$props.sortedDaysOfWeek);
    		if ('highlighted' in $$props) $$invalidate(10, highlighted = $$props.highlighted);
    		if ('shouldShakeDate' in $$props) $$invalidate(11, shouldShakeDate = $$props.shouldShakeDate);
    		if ('shakeHighlightTimeout' in $$props) shakeHighlightTimeout = $$props.shakeHighlightTimeout;
    		if ('month' in $$props) $$invalidate(6, month = $$props.month);
    		if ('year' in $$props) $$invalidate(7, year = $$props.year);
    		if ('isOpen' in $$props) $$invalidate(12, isOpen = $$props.isOpen);
    		if ('isClosing' in $$props) $$invalidate(13, isClosing = $$props.isClosing);
    		if ('monthIndex' in $$props) $$invalidate(38, monthIndex = $$props.monthIndex);
    		if ('formattedSelected' in $$props) $$invalidate(2, formattedSelected = $$props.formattedSelected);
    		if ('firstVisibleDate' in $$props) firstVisibleDate = $$props.firstVisibleDate;
    		if ('lastVisibleDate' in $$props) lastVisibleDate = $$props.lastVisibleDate;
    		if ('months' in $$props) $$invalidate(39, months = $$props.months);
    		if ('canDecrementMonth' in $$props) $$invalidate(14, canDecrementMonth = $$props.canDecrementMonth);
    		if ('canIncrementMonth' in $$props) $$invalidate(15, canIncrementMonth = $$props.canIncrementMonth);
    		if ('wrapperStyle' in $$props) $$invalidate(16, wrapperStyle = $$props.wrapperStyle);
    		if ('visibleMonth' in $$props) $$invalidate(8, visibleMonth = $$props.visibleMonth);
    		if ('visibleMonthId' in $$props) $$invalidate(17, visibleMonthId = $$props.visibleMonthId);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*start, end, selectableCallback, weekStart*/ 201326616) {
    			$$invalidate(39, months = getMonths(start, end, selectableCallback, weekStart));
    		}

    		if ($$self.$$.dirty[0] & /*month, year*/ 192 | $$self.$$.dirty[1] & /*months*/ 256) {
    			{
    				$$invalidate(38, monthIndex = 0);

    				for (let i = 0; i < months.length; i += 1) {
    					if (months[i].month === month && months[i].year === year) {
    						$$invalidate(38, monthIndex = i);
    					}
    				}
    			}
    		}

    		if ($$self.$$.dirty[1] & /*months, monthIndex*/ 384) {
    			$$invalidate(8, visibleMonth = months[monthIndex]);
    		}

    		if ($$self.$$.dirty[0] & /*year, month*/ 192) {
    			$$invalidate(17, visibleMonthId = year + month / 100);
    		}

    		if ($$self.$$.dirty[0] & /*visibleMonth*/ 256) {
    			lastVisibleDate = visibleMonth.weeks[visibleMonth.weeks.length - 1].days[6].date;
    		}

    		if ($$self.$$.dirty[0] & /*visibleMonth*/ 256) {
    			firstVisibleDate = visibleMonth.weeks[0].days[0].date;
    		}

    		if ($$self.$$.dirty[1] & /*monthIndex, months*/ 384) {
    			$$invalidate(15, canIncrementMonth = monthIndex < months.length - 1);
    		}

    		if ($$self.$$.dirty[1] & /*monthIndex*/ 128) {
    			$$invalidate(14, canDecrementMonth = monthIndex > 0);
    		}

    		if ($$self.$$.dirty[0] & /*buttonBackgroundColor, style*/ 1610612736 | $$self.$$.dirty[1] & /*buttonBorderColor, buttonTextColor, highlightColor, dayBackgroundColor, dayTextColor, dayHighlightedBackgroundColor, dayHighlightedTextColor*/ 127) {
    			$$invalidate(16, wrapperStyle = `
    --button-background-color: ${buttonBackgroundColor};
    --button-border-color: ${buttonBorderColor};
    --button-text-color: ${buttonTextColor};
    --highlight-color: ${highlightColor};
    --day-background-color: ${dayBackgroundColor};
    --day-text-color: ${dayTextColor};
    --day-highlighted-background-color: ${dayHighlightedBackgroundColor};
    --day-highlighted-text-color: ${dayHighlightedTextColor};
    ${style}
  `);
    		}

    		if ($$self.$$.dirty[0] & /*format, selected*/ 33554433) {
    			{
    				$$invalidate(2, formattedSelected = typeof format === 'function'
    				? format(selected)
    				: formatDate(selected, format));
    			}
    		}
    	};

    	return [
    		selected,
    		trigger,
    		formattedSelected,
    		start,
    		end,
    		monthsOfYear,
    		month,
    		year,
    		visibleMonth,
    		popover,
    		highlighted,
    		shouldShakeDate,
    		isOpen,
    		isClosing,
    		canDecrementMonth,
    		canIncrementMonth,
    		wrapperStyle,
    		visibleMonthId,
    		sortedDaysOfWeek,
    		changeMonth,
    		incrementMonth,
    		registerSelection,
    		registerClose,
    		registerOpen,
    		dateChosen,
    		format,
    		selectableCallback,
    		weekStart,
    		daysOfWeek,
    		style,
    		buttonBackgroundColor,
    		buttonBorderColor,
    		buttonTextColor,
    		highlightColor,
    		dayBackgroundColor,
    		dayTextColor,
    		dayHighlightedBackgroundColor,
    		dayHighlightedTextColor,
    		monthIndex,
    		months,
    		slots,
    		monthSelected_handler,
    		incrementMonth_handler,
    		dateSelected_handler,
    		popover_1_binding,
    		popover_1_open_binding,
    		popover_1_shrink_binding,
    		$$scope
    	];
    }

    class Datepicker extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$8,
    			create_fragment$8,
    			safe_not_equal,
    			{
    				format: 25,
    				start: 3,
    				end: 4,
    				selected: 0,
    				dateChosen: 24,
    				trigger: 1,
    				selectableCallback: 26,
    				weekStart: 27,
    				daysOfWeek: 28,
    				monthsOfYear: 5,
    				style: 29,
    				buttonBackgroundColor: 30,
    				buttonBorderColor: 31,
    				buttonTextColor: 32,
    				highlightColor: 33,
    				dayBackgroundColor: 34,
    				dayTextColor: 35,
    				dayHighlightedBackgroundColor: 36,
    				dayHighlightedTextColor: 37,
    				formattedSelected: 2
    			},
    			null,
    			[-1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Datepicker",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*formattedSelected*/ ctx[2] === undefined && !('formattedSelected' in props)) {
    			console.warn("<Datepicker> was created without expected prop 'formattedSelected'");
    		}
    	}

    	get format() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set format(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get start() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set start(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get end() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set end(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dateChosen() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dateChosen(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get trigger() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set trigger(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectableCallback() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectableCallback(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get weekStart() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set weekStart(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get daysOfWeek() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set daysOfWeek(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get monthsOfYear() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set monthsOfYear(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buttonBackgroundColor() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buttonBackgroundColor(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buttonBorderColor() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buttonBorderColor(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buttonTextColor() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buttonTextColor(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get highlightColor() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set highlightColor(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dayBackgroundColor() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dayBackgroundColor(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dayTextColor() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dayTextColor(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dayHighlightedBackgroundColor() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dayHighlightedBackgroundColor(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dayHighlightedTextColor() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dayHighlightedTextColor(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formattedSelected() {
    		throw new Error("<Datepicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formattedSelected(value) {
    		throw new Error("<Datepicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\Todos.svelte generated by Svelte v3.40.0 */

    const { console: console_1 } = globals;
    const file$3 = "src\\Todos.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (47:4) <Subheader>
    function create_default_slot_8$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("To-Do List");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$1.name,
    		type: "slot",
    		source: "(47:4) <Subheader>",
    		ctx
    	});

    	return block;
    }

    // (48:4) {#each userDoc.todos as todo}
    function create_each_block(ctx) {
    	let todo;
    	let current;

    	todo = new Todo({
    			props: {
    				todo: /*todo*/ ctx[10],
    				userDocRef: /*userDocRef*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(todo.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(todo, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const todo_changes = {};
    			if (dirty & /*userDoc*/ 2) todo_changes.todo = /*todo*/ ctx[10];
    			if (dirty & /*userDocRef*/ 1) todo_changes.userDocRef = /*userDocRef*/ ctx[0];
    			todo.$set(todo_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(todo.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(todo.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(todo, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(48:4) {#each userDoc.todos as todo}",
    		ctx
    	});

    	return block;
    }

    // (46:2) <List>
    function create_default_slot_7$1(ctx) {
    	let subheader;
    	let t;
    	let each_1_anchor;
    	let current;

    	subheader = new Subheader({
    			props: {
    				$$slots: { default: [create_default_slot_8$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let each_value = /*userDoc*/ ctx[1].todos;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			create_component(subheader.$$.fragment);
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(subheader, target, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const subheader_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				subheader_changes.$$scope = { dirty, ctx };
    			}

    			subheader.$set(subheader_changes);

    			if (dirty & /*userDoc, userDocRef*/ 3) {
    				each_value = /*userDoc*/ ctx[1].todos;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(subheader.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(subheader.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(subheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$1.name,
    		type: "slot",
    		source: "(46:2) <List>",
    		ctx
    	});

    	return block;
    }

    // (53:2) <TextField      bind:value={task}      on:keypress={e => {        if (e.key == 'Enter') addTodo();      }}>
    function create_default_slot_6$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Add a new task");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$1.name,
    		type: "slot",
    		source: "(53:2) <TextField      bind:value={task}      on:keypress={e => {        if (e.key == 'Enter') addTodo();      }}>",
    		ctx
    	});

    	return block;
    }

    // (60:2) {#if task.length > 0}
    function create_if_block$4(ctx) {
    	let div1;
    	let div0;
    	let row0;
    	let t0;
    	let row1;
    	let t1;
    	let row2;
    	let div0_intro;
    	let div0_outro;
    	let current;

    	row0 = new Row({
    			props: {
    				noGutters: true,
    				$$slots: { default: [create_default_slot_4$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	row1 = new Row({
    			props: {
    				noGutters: true,
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	row2 = new Row({
    			props: {
    				noGutters: true,
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(row0.$$.fragment);
    			t0 = space();
    			create_component(row1.$$.fragment);
    			t1 = space();
    			create_component(row2.$$.fragment);
    			set_style(div0, "padding-top", "10px");
    			add_location(div0, file$3, 61, 6, 1515);
    			set_style(div1, "padding", "20px");
    			set_style(div1, "padding-bottom", "300px");
    			set_style(div1, "overflow", "hidden");
    			add_location(div1, file$3, 60, 4, 1439);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(row0, div0, null);
    			append_dev(div0, t0);
    			mount_component(row1, div0, null);
    			append_dev(div0, t1);
    			mount_component(row2, div0, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row0_changes = {};

    			if (dirty & /*$$scope, description*/ 8208) {
    				row0_changes.$$scope = { dirty, ctx };
    			}

    			row0.$set(row0_changes);
    			const row1_changes = {};

    			if (dirty & /*$$scope, date*/ 8200) {
    				row1_changes.$$scope = { dirty, ctx };
    			}

    			row1.$set(row1_changes);
    			const row2_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				row2_changes.$$scope = { dirty, ctx };
    			}

    			row2.$set(row2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row0.$$.fragment, local);
    			transition_in(row1.$$.fragment, local);
    			transition_in(row2.$$.fragment, local);

    			add_render_callback(() => {
    				if (div0_outro) div0_outro.end(1);
    				if (!div0_intro) div0_intro = create_in_transition(div0, fly, { y: -200, duration: 200 });
    				div0_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row0.$$.fragment, local);
    			transition_out(row1.$$.fragment, local);
    			transition_out(row2.$$.fragment, local);
    			if (div0_intro) div0_intro.invalidate();
    			div0_outro = create_out_transition(div0, fade, {});
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(row0);
    			destroy_component(row1);
    			destroy_component(row2);
    			if (detaching && div0_outro) div0_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(60:2) {#if task.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (67:10) <Textarea bind:value={description}>
    function create_default_slot_5$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Add description");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$1.name,
    		type: "slot",
    		source: "(67:10) <Textarea bind:value={description}>",
    		ctx
    	});

    	return block;
    }

    // (66:8) <Row noGutters={true}>
    function create_default_slot_4$1(ctx) {
    	let textarea;
    	let updating_value;
    	let current;

    	function textarea_value_binding(value) {
    		/*textarea_value_binding*/ ctx[8](value);
    	}

    	let textarea_props = {
    		$$slots: { default: [create_default_slot_5$1] },
    		$$scope: { ctx }
    	};

    	if (/*description*/ ctx[4] !== void 0) {
    		textarea_props.value = /*description*/ ctx[4];
    	}

    	textarea = new Textarea({ props: textarea_props, $$inline: true });
    	binding_callbacks.push(() => bind(textarea, 'value', textarea_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textarea.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textarea, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textarea_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				textarea_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*description*/ 16) {
    				updating_value = true;
    				textarea_changes.value = /*description*/ ctx[4];
    				add_flush_callback(() => updating_value = false);
    			}

    			textarea.$set(textarea_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textarea.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textarea.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textarea, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$1.name,
    		type: "slot",
    		source: "(66:8) <Row noGutters={true}>",
    		ctx
    	});

    	return block;
    }

    // (71:10) <Col style="align-self-end">
    function create_default_slot_3$1(ctx) {
    	let datepicker;
    	let updating_formattedSelected;
    	let current;

    	function datepicker_formattedSelected_binding(value) {
    		/*datepicker_formattedSelected_binding*/ ctx[9](value);
    	}

    	let datepicker_props = {};

    	if (/*date*/ ctx[3] !== void 0) {
    		datepicker_props.formattedSelected = /*date*/ ctx[3];
    	}

    	datepicker = new Datepicker({ props: datepicker_props, $$inline: true });
    	binding_callbacks.push(() => bind(datepicker, 'formattedSelected', datepicker_formattedSelected_binding));

    	const block = {
    		c: function create() {
    			create_component(datepicker.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(datepicker, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datepicker_changes = {};

    			if (!updating_formattedSelected && dirty & /*date*/ 8) {
    				updating_formattedSelected = true;
    				datepicker_changes.formattedSelected = /*date*/ ctx[3];
    				add_flush_callback(() => updating_formattedSelected = false);
    			}

    			datepicker.$set(datepicker_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datepicker.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datepicker.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datepicker, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$1.name,
    		type: "slot",
    		source: "(71:10) <Col style=\\\"align-self-end\\\">",
    		ctx
    	});

    	return block;
    }

    // (69:8) <Row noGutters={true}>
    function create_default_slot_2$1(ctx) {
    	let col0;
    	let t;
    	let col1;
    	let current;
    	col0 = new Col({ $$inline: true });

    	col1 = new Col({
    			props: {
    				style: "align-self-end",
    				$$slots: { default: [create_default_slot_3$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(col0.$$.fragment);
    			t = space();
    			create_component(col1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(col0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(col1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const col1_changes = {};

    			if (dirty & /*$$scope, date*/ 8200) {
    				col1_changes.$$scope = { dirty, ctx };
    			}

    			col1.$set(col1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(col0.$$.fragment, local);
    			transition_in(col1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(col0.$$.fragment, local);
    			transition_out(col1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(col0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(col1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(69:8) <Row noGutters={true}>",
    		ctx
    	});

    	return block;
    }

    // (76:10) <Button on:click={addTodo}>
    function create_default_slot_1$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("add");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(76:10) <Button on:click={addTodo}>",
    		ctx
    	});

    	return block;
    }

    // (75:8) <Row noGutters={true}>
    function create_default_slot$2(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*addTodo*/ ctx[5]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(75:8) <Row noGutters={true}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div;
    	let list;
    	let t0;
    	let textfield;
    	let updating_value;
    	let t1;
    	let current;

    	list = new List({
    			props: {
    				$$slots: { default: [create_default_slot_7$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[6](value);
    	}

    	let textfield_props = {
    		$$slots: { default: [create_default_slot_6$1] },
    		$$scope: { ctx }
    	};

    	if (/*task*/ ctx[2] !== void 0) {
    		textfield_props.value = /*task*/ ctx[2];
    	}

    	textfield = new TextField({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));
    	textfield.$on("keypress", /*keypress_handler*/ ctx[7]);
    	let if_block = /*task*/ ctx[2].length > 0 && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(list.$$.fragment);
    			t0 = space();
    			create_component(textfield.$$.fragment);
    			t1 = space();
    			if (if_block) if_block.c();
    			set_style(div, "min-height", "1000px");
    			add_location(div, file$3, 44, 0, 1084);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(list, div, null);
    			append_dev(div, t0);
    			mount_component(textfield, div, null);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const list_changes = {};

    			if (dirty & /*$$scope, userDoc, userDocRef*/ 8195) {
    				list_changes.$$scope = { dirty, ctx };
    			}

    			list.$set(list_changes);
    			const textfield_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				textfield_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*task*/ 4) {
    				updating_value = true;
    				textfield_changes.value = /*task*/ ctx[2];
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);

    			if (/*task*/ ctx[2].length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*task*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(list.$$.fragment, local);
    			transition_in(textfield.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(list.$$.fragment, local);
    			transition_out(textfield.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(list);
    			destroy_component(textfield);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Todos', slots, []);
    	let { userDocRef } = $$props;
    	let { userDoc } = $$props;
    	let task = "";
    	let date = "";
    	let description = "";

    	function addTodo(todoText) {
    		console.log("description: ", description);

    		if (task.length > 0) userDocRef.update(
    			{
    				todos: firebase.firestore.FieldValue.arrayUnion({
    					task,
    					status: "pending",
    					date,
    					description,
    					completed: false,
    					archived: false,
    					timeCreated: firebase.firestore.Timestamp.fromDate(new Date()),
    					timeCompleted: null
    				})
    			},
    			{ merge: true }
    		);

    		//close new task window by emptying "add new task" field
    		$$invalidate(2, task = "");
    	}

    	const writable_props = ['userDocRef', 'userDoc'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Todos> was created with unknown prop '${key}'`);
    	});

    	function textfield_value_binding(value) {
    		task = value;
    		$$invalidate(2, task);
    	}

    	const keypress_handler = e => {
    		if (e.key == 'Enter') addTodo();
    	};

    	function textarea_value_binding(value) {
    		description = value;
    		$$invalidate(4, description);
    	}

    	function datepicker_formattedSelected_binding(value) {
    		date = value;
    		$$invalidate(3, date);
    	}

    	$$self.$$set = $$props => {
    		if ('userDocRef' in $$props) $$invalidate(0, userDocRef = $$props.userDocRef);
    		if ('userDoc' in $$props) $$invalidate(1, userDoc = $$props.userDoc);
    	};

    	$$self.$capture_state = () => ({
    		Todo,
    		firebase,
    		Datepicker,
    		Row,
    		Col,
    		TextField,
    		Button,
    		Textarea,
    		List,
    		Subheader,
    		fade,
    		fly,
    		userDocRef,
    		userDoc,
    		task,
    		date,
    		description,
    		addTodo
    	});

    	$$self.$inject_state = $$props => {
    		if ('userDocRef' in $$props) $$invalidate(0, userDocRef = $$props.userDocRef);
    		if ('userDoc' in $$props) $$invalidate(1, userDoc = $$props.userDoc);
    		if ('task' in $$props) $$invalidate(2, task = $$props.task);
    		if ('date' in $$props) $$invalidate(3, date = $$props.date);
    		if ('description' in $$props) $$invalidate(4, description = $$props.description);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		userDocRef,
    		userDoc,
    		task,
    		date,
    		description,
    		addTodo,
    		textfield_value_binding,
    		keypress_handler,
    		textarea_value_binding,
    		datepicker_formattedSelected_binding
    	];
    }

    class Todos extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { userDocRef: 0, userDoc: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Todos",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*userDocRef*/ ctx[0] === undefined && !('userDocRef' in props)) {
    			console_1.warn("<Todos> was created without expected prop 'userDocRef'");
    		}

    		if (/*userDoc*/ ctx[1] === undefined && !('userDoc' in props)) {
    			console_1.warn("<Todos> was created without expected prop 'userDoc'");
    		}
    	}

    	get userDocRef() {
    		throw new Error("<Todos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userDocRef(value) {
    		throw new Error("<Todos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userDoc() {
    		throw new Error("<Todos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userDoc(value) {
    		throw new Error("<Todos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\sveltefire\src\FirebaseApp.svelte generated by Svelte v3.40.0 */

    const { Error: Error_1 } = globals;

    // (45:0) {#if ready}
    function create_if_block$3(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], !current ? -1 : dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(45:0) {#if ready}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*ready*/ ctx[0] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*ready*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*ready*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FirebaseApp', slots, ['default']);
    	let { firebase } = $$props;
    	let { perf = false } = $$props;
    	let { analytics = false } = $$props;

    	// Ready required to use the app event,
    	// prevents child components from running before init
    	let ready = false;

    	// Emit firebase
    	const dispatch = createEventDispatcher();

    	// Must be a function to ensure changes after initialization are caught
    	setContext("firebase", { getFirebase: () => firebase });

    	onMount(() => {
    		// Set firebase context from window if needed
    		$$invalidate(1, firebase = firebase || window && window.firebase);

    		if (!firebase) {
    			throw Error("No firebase app was provided. You must provide an initialized Firebase app or make it available globally.");
    		} else {
    			// Init perf and analytics
    			perf && firebase.performance();

    			analytics && firebase.analytics();

    			// Optional event to set additional config
    			dispatch("initializeApp", { firebase });

    			$$invalidate(0, ready = true);
    		}
    	});

    	const writable_props = ['firebase', 'perf', 'analytics'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FirebaseApp> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('firebase' in $$props) $$invalidate(1, firebase = $$props.firebase);
    		if ('perf' in $$props) $$invalidate(2, perf = $$props.perf);
    		if ('analytics' in $$props) $$invalidate(3, analytics = $$props.analytics);
    		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		setContext,
    		createEventDispatcher,
    		firebase,
    		perf,
    		analytics,
    		ready,
    		dispatch
    	});

    	$$self.$inject_state = $$props => {
    		if ('firebase' in $$props) $$invalidate(1, firebase = $$props.firebase);
    		if ('perf' in $$props) $$invalidate(2, perf = $$props.perf);
    		if ('analytics' in $$props) $$invalidate(3, analytics = $$props.analytics);
    		if ('ready' in $$props) $$invalidate(0, ready = $$props.ready);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [ready, firebase, perf, analytics, $$scope, slots];
    }

    class FirebaseApp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { firebase: 1, perf: 2, analytics: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FirebaseApp",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*firebase*/ ctx[1] === undefined && !('firebase' in props)) {
    			console.warn("<FirebaseApp> was created without expected prop 'firebase'");
    		}
    	}

    	get firebase() {
    		throw new Error_1("<FirebaseApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set firebase(value) {
    		throw new Error_1("<FirebaseApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get perf() {
    		throw new Error_1("<FirebaseApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set perf(value) {
    		throw new Error_1("<FirebaseApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get analytics() {
    		throw new Error_1("<FirebaseApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set analytics(value) {
    		throw new Error_1("<FirebaseApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function getFirebaseContext() {
      const { getFirebase } = getContext('firebase');
      return getFirebase();
    }

    // Validates end-user has setup context and imported proper modules into the Svelte app
    function assertApp(pkg) {

        const app = getFirebaseContext();

        if (!app) {
          throw new Error(`Missing Firebase app in context. Are you inside a 'FirebaseApp' component?`)
        }

        if (pkg) {
            const pkgFn = app[pkg]; 
            if (!pkgFn || !pkgFn()) {
              throw new Error(`Firebase ${pkg} not found. You may be missing "import 'firebase/${pkg}'" `)
            } else {
              return pkgFn();
            }
        } else {
          return app;
        }
    }

    function userStore(opts = { persist: null }) {

        const auth = assertApp('auth');
        const storageKey = 'sveltefire_user';
        let cached = null;
      
        const { persist } = opts;
      
        if (persist) {
          cached = JSON.parse(opts.persist.getItem(storageKey));
        }
      
        const store = writable(cached, () => {
          const teardown = auth.onAuthStateChanged(u => {
            set(u);
            persist && opts.persist.setItem(storageKey, JSON.stringify(u));
          });
          return () => teardown;
        });
      
        const { subscribe, set } = store;
      
        return {
          subscribe,
          auth
        };
      }

    /* node_modules\sveltefire\src\User.svelte generated by Svelte v3.40.0 */
    const get_after_slot_changes$2 = dirty => ({ user: dirty & /*$store*/ 1 });

    const get_after_slot_context$2 = ctx => ({
    	user: /*$store*/ ctx[0],
    	auth: /*store*/ ctx[1].auth
    });

    const get_signed_out_slot_changes = dirty => ({ user: dirty & /*$store*/ 1 });

    const get_signed_out_slot_context = ctx => ({
    	user: /*$store*/ ctx[0],
    	auth: /*store*/ ctx[1].auth
    });

    const get_default_slot_changes$2 = dirty => ({ user: dirty & /*$store*/ 1 });

    const get_default_slot_context$2 = ctx => ({
    	user: /*$store*/ ctx[0],
    	auth: /*store*/ ctx[1].auth
    });

    const get_before_slot_changes$2 = dirty => ({ user: dirty & /*$store*/ 1 });

    const get_before_slot_context$2 = ctx => ({
    	user: /*$store*/ ctx[0],
    	auth: /*store*/ ctx[1].auth
    });

    // (24:0) {:else}
    function create_else_block$2(ctx) {
    	let current;
    	const signed_out_slot_template = /*#slots*/ ctx[4]["signed-out"];
    	const signed_out_slot = create_slot(signed_out_slot_template, ctx, /*$$scope*/ ctx[3], get_signed_out_slot_context);

    	const block = {
    		c: function create() {
    			if (signed_out_slot) signed_out_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (signed_out_slot) {
    				signed_out_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (signed_out_slot) {
    				if (signed_out_slot.p && (!current || dirty & /*$$scope, $store*/ 9)) {
    					update_slot(signed_out_slot, signed_out_slot_template, ctx, /*$$scope*/ ctx[3], !current ? -1 : dirty, get_signed_out_slot_changes, get_signed_out_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(signed_out_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(signed_out_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (signed_out_slot) signed_out_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(24:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (22:0) {#if $store}
    function create_if_block$2(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], get_default_slot_context$2);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, $store*/ 9)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], !current ? -1 : dirty, get_default_slot_changes$2, get_default_slot_context$2);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(22:0) {#if $store}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let current;
    	const before_slot_template = /*#slots*/ ctx[4].before;
    	const before_slot = create_slot(before_slot_template, ctx, /*$$scope*/ ctx[3], get_before_slot_context$2);
    	const if_block_creators = [create_if_block$2, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$store*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const after_slot_template = /*#slots*/ ctx[4].after;
    	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[3], get_after_slot_context$2);

    	const block = {
    		c: function create() {
    			if (before_slot) before_slot.c();
    			t0 = space();
    			if_block.c();
    			t1 = space();
    			if (after_slot) after_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (before_slot) {
    				before_slot.m(target, anchor);
    			}

    			insert_dev(target, t0, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t1, anchor);

    			if (after_slot) {
    				after_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (before_slot) {
    				if (before_slot.p && (!current || dirty & /*$$scope, $store*/ 9)) {
    					update_slot(before_slot, before_slot_template, ctx, /*$$scope*/ ctx[3], !current ? -1 : dirty, get_before_slot_changes$2, get_before_slot_context$2);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(t1.parentNode, t1);
    			}

    			if (after_slot) {
    				if (after_slot.p && (!current || dirty & /*$$scope, $store*/ 9)) {
    					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[3], !current ? -1 : dirty, get_after_slot_changes$2, get_after_slot_context$2);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(before_slot, local);
    			transition_in(if_block);
    			transition_in(after_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(before_slot, local);
    			transition_out(if_block);
    			transition_out(after_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (before_slot) before_slot.d(detaching);
    			if (detaching) detach_dev(t0);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t1);
    			if (after_slot) after_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $store;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('User', slots, ['before','default','signed-out','after']);
    	let { persist = null } = $$props;
    	let store = userStore({ persist });
    	validate_store(store, 'store');
    	component_subscribe($$self, store, value => $$invalidate(0, $store = value));
    	const dispatch = createEventDispatcher();
    	let unsub;

    	onMount(() => {
    		unsub = store.subscribe(user => {
    			dispatch("user", { user });
    		});
    	});

    	onDestroy(() => unsub());
    	const writable_props = ['persist'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<User> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('persist' in $$props) $$invalidate(2, persist = $$props.persist);
    		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		persist,
    		onMount,
    		onDestroy,
    		createEventDispatcher,
    		userStore,
    		store,
    		dispatch,
    		unsub,
    		$store
    	});

    	$$self.$inject_state = $$props => {
    		if ('persist' in $$props) $$invalidate(2, persist = $$props.persist);
    		if ('store' in $$props) $$invalidate(1, store = $$props.store);
    		if ('unsub' in $$props) unsub = $$props.unsub;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$store, store, persist, $$scope, slots];
    }

    class User extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { persist: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "User",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get persist() {
    		throw new Error("<User>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set persist(value) {
    		throw new Error("<User>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function startTrace(name) {
        const perf = assertApp('performance');
        const trace = perf.trace(name);
        trace.start();
        return trace;
      }
      
      async function stopTrace(trace) {
        if (trace.state === 2) {
          trace.stop();
        }
      
        return null;
      }

    // Svelte Store for Firestore Document
    function docStore(path, opts) {
      const firestore = assertApp('firestore');

      const { startWith, log, traceId, maxWait, once } = { maxWait: 10000, ...opts };

      // Create the Firestore Reference
      const ref = typeof path === 'string' ? firestore.doc(path) : path;

      // Performance trace
      const trace = traceId && startTrace(traceId);

      // Internal state
      let _loading = typeof startWith !== undefined;
      let _firstValue = true;
      let _error = null;
      let _teardown;
      let _waitForIt;


      // State should never change without emitting a new value
      // Clears loading state on first call
      const next = (val, err) => {
        _loading = false; 
        _firstValue = false;
        _waitForIt && clearTimeout(_waitForIt);
        _error = err || null;
        set(val);
        trace && stopTrace(trace);
      };

      // Timout
      // Runs of first subscription
      const start = () => {

        // Timout for fallback slot
        _waitForIt = maxWait && setTimeout(() => _loading && next(null, new Error(`Timeout at ${maxWait}. Using fallback slot.`) ), maxWait);

        // Realtime firebase subscription
        _teardown = ref.onSnapshot(
          snapshot => {
            const data = snapshot.data() || (_firstValue && startWith) || null;

            // Optional logging
            if (log) {
              console.groupCollapsed(`Doc ${snapshot.id}`);
              console.log(`Path: ${ref.path}`);
              console.log('Snapshot:', snapshot);
              console.groupEnd();
            }

            // Emit next value
            next(data);

            // Teardown after first emitted value if once
            once && _teardown();
          },

          // Handle firebase thrown errors
          error => {
            console.error(error);
            next(null, error);
          }
        );

        // Removes firebase listener when store completes
        return () => _teardown();
      };

      // Svelte store
      const store = writable(startWith, start);
      const { subscribe, set } = store;

      return {
        subscribe,
        firestore,
        ref,
        get loading() {
          return _loading;
        },
        get error() {
          return _error;
        }
      };
    }

    // Svelte Store for Firestore Collection
    function collectionStore(path, queryFn, opts) {
      const firestore = assertApp('firestore');

      const { startWith, log, traceId, maxWait, once, idField, refField } = {
        idField: 'id',
        refField: 'ref',
        maxWait: 10000,
        ...opts
      };

      const ref = typeof path === 'string' ? firestore.collection(path) : path;
      const query = queryFn && queryFn(ref);
      const trace = traceId && startTrace(traceId);

      let _loading = typeof startWith !== undefined;
      let _error = null;
      let _meta = {};
      let _teardown;
      let _waitForIt;

      // Metadata for result
      const calcMeta = (val) => {
        return val && val.length ? 
          { first: val[0], last: val[val.length - 1] } : {}
      };

      const next = (val, err) => {
        _loading = false; 
        _waitForIt && clearTimeout(_waitForIt);
        _error = err || null;
        _meta = calcMeta(val);
        set(val);
        trace && stopTrace(trace);
      };

      const start = () => {
        _waitForIt = maxWait && setTimeout(() => _loading && next(null, new Error(`Timeout at ${maxWait}. Using fallback slot.`) ), maxWait);

        _teardown = (query || ref).onSnapshot(
          snapshot => {

            // Will always return an array
            const data = snapshot.docs.map(docSnap => ({
              ...docSnap.data(),
              // Allow end user override fields mapped for ID and Ref
              ...(idField ? { [idField]: docSnap.id } : null),
              ...(refField ? { [refField]: docSnap.ref } : null)
            }));

            if (log) {
              const type = _loading ? 'New Query' : 'Updated Query';
              console.groupCollapsed(`${type} ${ref.id} | ${data.length} hits`);
              console.log(`${ref.path}`);
              console.log(`Snapshot: `, snapshot);
              console.groupEnd();
            }
            next(data);
            once && _teardown();
          },

          error => {
            console.error(error);
            next(null, error);
          }
        );

        return () => _teardown();
      };

      const store = writable(startWith, start);
      const { subscribe, set } = store;

      return {
        subscribe,
        firestore,
        ref,
        get loading() {
          return _loading;
        },
        get error() {
          return _error;
        },
        get meta() {
          return _meta;
        }
      };
    }

    /* node_modules\sveltefire\src\Doc.svelte generated by Svelte v3.40.0 */

    const get_after_slot_changes$1 = dirty => ({
    	data: dirty & /*$store*/ 2,
    	ref: dirty & /*store*/ 1,
    	error: dirty & /*store*/ 1
    });

    const get_after_slot_context$1 = ctx => ({
    	data: /*$store*/ ctx[1],
    	ref: /*store*/ ctx[0].ref,
    	error: /*store*/ ctx[0].error
    });

    const get_fallback_slot_changes$1 = dirty => ({
    	data: dirty & /*$store*/ 2,
    	ref: dirty & /*store*/ 1,
    	error: dirty & /*store*/ 1
    });

    const get_fallback_slot_context$1 = ctx => ({
    	data: /*$store*/ ctx[1],
    	ref: /*store*/ ctx[0].ref,
    	error: /*store*/ ctx[0].error
    });

    const get_loading_slot_changes$1 = dirty => ({
    	data: dirty & /*$store*/ 2,
    	ref: dirty & /*store*/ 1,
    	error: dirty & /*store*/ 1
    });

    const get_loading_slot_context$1 = ctx => ({
    	data: /*$store*/ ctx[1],
    	ref: /*store*/ ctx[0].ref,
    	error: /*store*/ ctx[0].error
    });

    const get_default_slot_changes$1 = dirty => ({
    	data: dirty & /*$store*/ 2,
    	ref: dirty & /*store*/ 1,
    	error: dirty & /*store*/ 1
    });

    const get_default_slot_context$1 = ctx => ({
    	data: /*$store*/ ctx[1],
    	ref: /*store*/ ctx[0].ref,
    	error: /*store*/ ctx[0].error
    });

    const get_before_slot_changes$1 = dirty => ({
    	data: dirty & /*$store*/ 2,
    	ref: dirty & /*store*/ 1,
    	error: dirty & /*store*/ 1
    });

    const get_before_slot_context$1 = ctx => ({
    	data: /*$store*/ ctx[1],
    	ref: /*store*/ ctx[0].ref,
    	error: /*store*/ ctx[0].error
    });

    // (52:0) {:else}
    function create_else_block$1(ctx) {
    	let current;
    	const fallback_slot_template = /*#slots*/ ctx[10].fallback;
    	const fallback_slot = create_slot(fallback_slot_template, ctx, /*$$scope*/ ctx[9], get_fallback_slot_context$1);

    	const block = {
    		c: function create() {
    			if (fallback_slot) fallback_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (fallback_slot) {
    				fallback_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (fallback_slot) {
    				if (fallback_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
    					update_slot(fallback_slot, fallback_slot_template, ctx, /*$$scope*/ ctx[9], !current ? -1 : dirty, get_fallback_slot_changes$1, get_fallback_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fallback_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fallback_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (fallback_slot) fallback_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(52:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (50:24) 
    function create_if_block_1$1(ctx) {
    	let current;
    	const loading_slot_template = /*#slots*/ ctx[10].loading;
    	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[9], get_loading_slot_context$1);

    	const block = {
    		c: function create() {
    			if (loading_slot) loading_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (loading_slot) {
    				loading_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (loading_slot) {
    				if (loading_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
    					update_slot(loading_slot, loading_slot_template, ctx, /*$$scope*/ ctx[9], !current ? -1 : dirty, get_loading_slot_changes$1, get_loading_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loading_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loading_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (loading_slot) loading_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(50:24) ",
    		ctx
    	});

    	return block;
    }

    // (48:0) {#if $store}
    function create_if_block$1(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$1);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], !current ? -1 : dirty, get_default_slot_changes$1, get_default_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(48:0) {#if $store}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let current;
    	const before_slot_template = /*#slots*/ ctx[10].before;
    	const before_slot = create_slot(before_slot_template, ctx, /*$$scope*/ ctx[9], get_before_slot_context$1);
    	const if_block_creators = [create_if_block$1, create_if_block_1$1, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$store*/ ctx[1]) return 0;
    		if (/*store*/ ctx[0].loading) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const after_slot_template = /*#slots*/ ctx[10].after;
    	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[9], get_after_slot_context$1);

    	const block = {
    		c: function create() {
    			if (before_slot) before_slot.c();
    			t0 = space();
    			if_block.c();
    			t1 = space();
    			if (after_slot) after_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (before_slot) {
    				before_slot.m(target, anchor);
    			}

    			insert_dev(target, t0, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t1, anchor);

    			if (after_slot) {
    				after_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (before_slot) {
    				if (before_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
    					update_slot(before_slot, before_slot_template, ctx, /*$$scope*/ ctx[9], !current ? -1 : dirty, get_before_slot_changes$1, get_before_slot_context$1);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(t1.parentNode, t1);
    			}

    			if (after_slot) {
    				if (after_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
    					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[9], !current ? -1 : dirty, get_after_slot_changes$1, get_after_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(before_slot, local);
    			transition_in(if_block);
    			transition_in(after_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(before_slot, local);
    			transition_out(if_block);
    			transition_out(after_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (before_slot) before_slot.d(detaching);
    			if (detaching) detach_dev(t0);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t1);
    			if (after_slot) after_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $store,
    		$$unsubscribe_store = noop$1,
    		$$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => $$invalidate(1, $store = $$value)), store);

    	$$self.$$.on_destroy.push(() => $$unsubscribe_store());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Doc', slots, ['before','default','loading','fallback','after']);
    	let { path } = $$props;
    	let { log = false } = $$props;
    	let { traceId = "" } = $$props;
    	let { startWith = undefined } = $$props; // Why? Firestore returns null for docs that don't exist, predictible loading state.
    	let { maxWait = 10000 } = $$props;
    	let { once = false } = $$props;
    	const opts = { startWith, traceId, log, maxWait, once };
    	let store = docStore(path, opts);
    	validate_store(store, 'store');
    	$$subscribe_store();
    	const dispatch = createEventDispatcher();
    	let unsub;
    	onMount(() => dispatch("ref", { ref: store.ref }));
    	onDestroy(() => unsub());
    	const writable_props = ['path', 'log', 'traceId', 'startWith', 'maxWait', 'once'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Doc> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('path' in $$props) $$invalidate(2, path = $$props.path);
    		if ('log' in $$props) $$invalidate(3, log = $$props.log);
    		if ('traceId' in $$props) $$invalidate(4, traceId = $$props.traceId);
    		if ('startWith' in $$props) $$invalidate(5, startWith = $$props.startWith);
    		if ('maxWait' in $$props) $$invalidate(6, maxWait = $$props.maxWait);
    		if ('once' in $$props) $$invalidate(7, once = $$props.once);
    		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		path,
    		log,
    		traceId,
    		startWith,
    		maxWait,
    		once,
    		onDestroy,
    		onMount,
    		createEventDispatcher,
    		docStore,
    		opts,
    		store,
    		dispatch,
    		unsub,
    		$store
    	});

    	$$self.$inject_state = $$props => {
    		if ('path' in $$props) $$invalidate(2, path = $$props.path);
    		if ('log' in $$props) $$invalidate(3, log = $$props.log);
    		if ('traceId' in $$props) $$invalidate(4, traceId = $$props.traceId);
    		if ('startWith' in $$props) $$invalidate(5, startWith = $$props.startWith);
    		if ('maxWait' in $$props) $$invalidate(6, maxWait = $$props.maxWait);
    		if ('once' in $$props) $$invalidate(7, once = $$props.once);
    		if ('store' in $$props) $$subscribe_store($$invalidate(0, store = $$props.store));
    		if ('unsub' in $$props) $$invalidate(8, unsub = $$props.unsub);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*unsub, path, store*/ 261) {
    			// Props changed
    			{
    				if (unsub) {
    					// Unsub and create new store
    					unsub();

    					$$subscribe_store($$invalidate(0, store = docStore(path, opts)));
    					dispatch("ref", { ref: store.ref });
    				}

    				$$invalidate(8, unsub = store.subscribe(data => {
    					dispatch("data", { data });
    				}));
    			}
    		}
    	};

    	return [
    		store,
    		$store,
    		path,
    		log,
    		traceId,
    		startWith,
    		maxWait,
    		once,
    		unsub,
    		$$scope,
    		slots
    	];
    }

    class Doc extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			path: 2,
    			log: 3,
    			traceId: 4,
    			startWith: 5,
    			maxWait: 6,
    			once: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Doc",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*path*/ ctx[2] === undefined && !('path' in props)) {
    			console.warn("<Doc> was created without expected prop 'path'");
    		}
    	}

    	get path() {
    		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get log() {
    		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set log(value) {
    		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get traceId() {
    		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set traceId(value) {
    		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get startWith() {
    		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set startWith(value) {
    		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxWait() {
    		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxWait(value) {
    		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get once() {
    		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set once(value) {
    		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\sveltefire\src\Collection.svelte generated by Svelte v3.40.0 */

    const get_after_slot_changes = dirty => ({
    	data: dirty & /*$store*/ 2,
    	ref: dirty & /*store*/ 1,
    	error: dirty & /*store*/ 1,
    	first: dirty & /*store*/ 1,
    	last: dirty & /*store*/ 1
    });

    const get_after_slot_context = ctx => ({
    	data: /*$store*/ ctx[1],
    	ref: /*store*/ ctx[0].ref,
    	error: /*store*/ ctx[0].error,
    	first: /*store*/ ctx[0].meta.first,
    	last: /*store*/ ctx[0].meta.last
    });

    const get_fallback_slot_changes = dirty => ({
    	data: dirty & /*$store*/ 2,
    	ref: dirty & /*store*/ 1,
    	error: dirty & /*store*/ 1,
    	first: dirty & /*store*/ 1,
    	last: dirty & /*store*/ 1
    });

    const get_fallback_slot_context = ctx => ({
    	data: /*$store*/ ctx[1],
    	ref: /*store*/ ctx[0].ref,
    	error: /*store*/ ctx[0].error,
    	first: /*store*/ ctx[0].meta.first,
    	last: /*store*/ ctx[0].meta.last
    });

    const get_loading_slot_changes = dirty => ({
    	data: dirty & /*$store*/ 2,
    	ref: dirty & /*store*/ 1,
    	error: dirty & /*store*/ 1,
    	first: dirty & /*store*/ 1,
    	last: dirty & /*store*/ 1
    });

    const get_loading_slot_context = ctx => ({
    	data: /*$store*/ ctx[1],
    	ref: /*store*/ ctx[0].ref,
    	error: /*store*/ ctx[0].error,
    	first: /*store*/ ctx[0].meta.first,
    	last: /*store*/ ctx[0].meta.last
    });

    const get_default_slot_changes = dirty => ({
    	data: dirty & /*$store*/ 2,
    	ref: dirty & /*store*/ 1,
    	error: dirty & /*store*/ 1,
    	first: dirty & /*store*/ 1,
    	last: dirty & /*store*/ 1
    });

    const get_default_slot_context = ctx => ({
    	data: /*$store*/ ctx[1],
    	ref: /*store*/ ctx[0].ref,
    	error: /*store*/ ctx[0].error,
    	first: /*store*/ ctx[0].meta.first,
    	last: /*store*/ ctx[0].meta.last
    });

    const get_before_slot_changes = dirty => ({
    	data: dirty & /*$store*/ 2,
    	ref: dirty & /*store*/ 1,
    	error: dirty & /*store*/ 1,
    	first: dirty & /*store*/ 1,
    	last: dirty & /*store*/ 1
    });

    const get_before_slot_context = ctx => ({
    	data: /*$store*/ ctx[1],
    	ref: /*store*/ ctx[0].ref,
    	error: /*store*/ ctx[0].error,
    	first: /*store*/ ctx[0].meta.first,
    	last: /*store*/ ctx[0].meta.last
    });

    // (52:0) {:else}
    function create_else_block(ctx) {
    	let current;
    	const fallback_slot_template = /*#slots*/ ctx[11].fallback;
    	const fallback_slot = create_slot(fallback_slot_template, ctx, /*$$scope*/ ctx[10], get_fallback_slot_context);

    	const block = {
    		c: function create() {
    			if (fallback_slot) fallback_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (fallback_slot) {
    				fallback_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (fallback_slot) {
    				if (fallback_slot.p && (!current || dirty & /*$$scope, $store, store*/ 1027)) {
    					update_slot(fallback_slot, fallback_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, get_fallback_slot_changes, get_fallback_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fallback_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fallback_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (fallback_slot) fallback_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(52:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (50:24) 
    function create_if_block_1(ctx) {
    	let current;
    	const loading_slot_template = /*#slots*/ ctx[11].loading;
    	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[10], get_loading_slot_context);

    	const block = {
    		c: function create() {
    			if (loading_slot) loading_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (loading_slot) {
    				loading_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (loading_slot) {
    				if (loading_slot.p && (!current || dirty & /*$$scope, $store, store*/ 1027)) {
    					update_slot(loading_slot, loading_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, get_loading_slot_changes, get_loading_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loading_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loading_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (loading_slot) loading_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(50:24) ",
    		ctx
    	});

    	return block;
    }

    // (48:0) {#if $store}
    function create_if_block(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], get_default_slot_context);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, $store, store*/ 1027)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, get_default_slot_changes, get_default_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(48:0) {#if $store}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let current;
    	const before_slot_template = /*#slots*/ ctx[11].before;
    	const before_slot = create_slot(before_slot_template, ctx, /*$$scope*/ ctx[10], get_before_slot_context);
    	const if_block_creators = [create_if_block, create_if_block_1, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$store*/ ctx[1]) return 0;
    		if (/*store*/ ctx[0].loading) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const after_slot_template = /*#slots*/ ctx[11].after;
    	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[10], get_after_slot_context);

    	const block = {
    		c: function create() {
    			if (before_slot) before_slot.c();
    			t0 = space();
    			if_block.c();
    			t1 = space();
    			if (after_slot) after_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (before_slot) {
    				before_slot.m(target, anchor);
    			}

    			insert_dev(target, t0, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t1, anchor);

    			if (after_slot) {
    				after_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (before_slot) {
    				if (before_slot.p && (!current || dirty & /*$$scope, $store, store*/ 1027)) {
    					update_slot(before_slot, before_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, get_before_slot_changes, get_before_slot_context);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(t1.parentNode, t1);
    			}

    			if (after_slot) {
    				if (after_slot.p && (!current || dirty & /*$$scope, $store, store*/ 1027)) {
    					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[10], !current ? -1 : dirty, get_after_slot_changes, get_after_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(before_slot, local);
    			transition_in(if_block);
    			transition_in(after_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(before_slot, local);
    			transition_out(if_block);
    			transition_out(after_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (before_slot) before_slot.d(detaching);
    			if (detaching) detach_dev(t0);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t1);
    			if (after_slot) after_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $store,
    		$$unsubscribe_store = noop$1,
    		$$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => $$invalidate(1, $store = $$value)), store);

    	$$self.$$.on_destroy.push(() => $$unsubscribe_store());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Collection', slots, ['before','default','loading','fallback','after']);
    	let { path } = $$props;
    	let { query = null } = $$props;
    	let { traceId = "" } = $$props;
    	let { log = false } = $$props;
    	let { startWith = undefined } = $$props;
    	let { maxWait = 10000 } = $$props;
    	let { once = false } = $$props;
    	const opts = { startWith, traceId, log, maxWait, once };
    	let store = collectionStore(path, query, opts);
    	validate_store(store, 'store');
    	$$subscribe_store();
    	const dispatch = createEventDispatcher();
    	let unsub;
    	onMount(() => dispatch("ref", { ref: store.ref }));
    	onDestroy(() => unsub());
    	const writable_props = ['path', 'query', 'traceId', 'log', 'startWith', 'maxWait', 'once'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Collection> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('path' in $$props) $$invalidate(2, path = $$props.path);
    		if ('query' in $$props) $$invalidate(3, query = $$props.query);
    		if ('traceId' in $$props) $$invalidate(4, traceId = $$props.traceId);
    		if ('log' in $$props) $$invalidate(5, log = $$props.log);
    		if ('startWith' in $$props) $$invalidate(6, startWith = $$props.startWith);
    		if ('maxWait' in $$props) $$invalidate(7, maxWait = $$props.maxWait);
    		if ('once' in $$props) $$invalidate(8, once = $$props.once);
    		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		path,
    		query,
    		traceId,
    		log,
    		startWith,
    		maxWait,
    		once,
    		onDestroy,
    		onMount,
    		createEventDispatcher,
    		collectionStore,
    		opts,
    		store,
    		dispatch,
    		unsub,
    		$store
    	});

    	$$self.$inject_state = $$props => {
    		if ('path' in $$props) $$invalidate(2, path = $$props.path);
    		if ('query' in $$props) $$invalidate(3, query = $$props.query);
    		if ('traceId' in $$props) $$invalidate(4, traceId = $$props.traceId);
    		if ('log' in $$props) $$invalidate(5, log = $$props.log);
    		if ('startWith' in $$props) $$invalidate(6, startWith = $$props.startWith);
    		if ('maxWait' in $$props) $$invalidate(7, maxWait = $$props.maxWait);
    		if ('once' in $$props) $$invalidate(8, once = $$props.once);
    		if ('store' in $$props) $$subscribe_store($$invalidate(0, store = $$props.store));
    		if ('unsub' in $$props) $$invalidate(9, unsub = $$props.unsub);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*unsub, path, query, store*/ 525) {
    			// Props changed
    			{
    				if (unsub) {
    					unsub();
    					$$subscribe_store($$invalidate(0, store = collectionStore(path, query, opts)));
    					dispatch("ref", { ref: store.ref });
    				}

    				$$invalidate(9, unsub = store.subscribe(data => {
    					dispatch("data", { data });
    				}));
    			}
    		}
    	};

    	return [
    		store,
    		$store,
    		path,
    		query,
    		traceId,
    		log,
    		startWith,
    		maxWait,
    		once,
    		unsub,
    		$$scope,
    		slots
    	];
    }

    class Collection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			path: 2,
    			query: 3,
    			traceId: 4,
    			log: 5,
    			startWith: 6,
    			maxWait: 7,
    			once: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Collection",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*path*/ ctx[2] === undefined && !('path' in props)) {
    			console.warn("<Collection> was created without expected prop 'path'");
    		}
    	}

    	get path() {
    		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get query() {
    		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set query(value) {
    		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get traceId() {
    		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set traceId(value) {
    		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get log() {
    		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set log(value) {
    		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get startWith() {
    		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set startWith(value) {
    		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxWait() {
    		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxWait(value) {
    		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get once() {
    		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set once(value) {
    		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\App.svelte generated by Svelte v3.40.0 */

    const file$2 = "src\\App.svelte";

    // (60:6) <Button class="deep-purple-text" on:click={toggleTheme}>
    function create_default_slot_15(ctx) {
    	let t_value = (/*theme*/ ctx[3] == 'light' ? 'Dark mode' : 'Light mode') + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*theme*/ 8 && t_value !== (t_value = (/*theme*/ ctx[3] == 'light' ? 'Dark mode' : 'Light mode') + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15.name,
    		type: "slot",
    		source: "(60:6) <Button class=\\\"deep-purple-text\\\" on:click={toggleTheme}>",
    		ctx
    	});

    	return block;
    }

    // (63:6) <Button class="deep-purple-text" on:click={() => auth.signOut()}>
    function create_default_slot_14(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Sign Out");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14.name,
    		type: "slot",
    		source: "(63:6) <Button class=\\\"deep-purple-text\\\" on:click={() => auth.signOut()}>",
    		ctx
    	});

    	return block;
    }

    // (55:4) <AppBar class="deep-purple white-text">
    function create_default_slot_13(ctx) {
    	let div;
    	let t0;
    	let button0;
    	let t1;
    	let button1;
    	let current;

    	button0 = new Button({
    			props: {
    				class: "deep-purple-text",
    				$$slots: { default: [create_default_slot_15] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button0.$on("click", /*toggleTheme*/ ctx[5]);

    	button1 = new Button({
    			props: {
    				class: "deep-purple-text",
    				$$slots: { default: [create_default_slot_14] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1.$on("click", /*click_handler*/ ctx[7]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = space();
    			create_component(button0.$$.fragment);
    			t1 = space();
    			create_component(button1.$$.fragment);
    			set_style(div, "flex-grow", "1");
    			add_location(div, file$2, 57, 6, 1187);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(button0, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(button1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope, theme*/ 8200) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(button1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13.name,
    		type: "slot",
    		source: "(55:4) <AppBar class=\\\"deep-purple white-text\\\">",
    		ctx
    	});

    	return block;
    }

    // (56:6) 
    function create_title_slot(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Title";
    			attr_dev(span, "slot", "title");
    			add_location(span, file$2, 55, 6, 1148);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_title_slot.name,
    		type: "slot",
    		source: "(56:6) ",
    		ctx
    	});

    	return block;
    }

    // (69:12) <Tab>
    function create_default_slot_12(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Admin");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12.name,
    		type: "slot",
    		source: "(69:12) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (70:12) <Tab>
    function create_default_slot_11(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Courses");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11.name,
    		type: "slot",
    		source: "(70:12) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (71:12) <Tab>
    function create_default_slot_10(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Progress");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10.name,
    		type: "slot",
    		source: "(71:12) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (72:12) <Tab>
    function create_default_slot_9(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("To-do List");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9.name,
    		type: "slot",
    		source: "(72:12) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (68:10) 
    function create_tabs_slot(ctx) {
    	let div;
    	let tab0;
    	let t0;
    	let tab1;
    	let t1;
    	let tab2;
    	let t2;
    	let tab3;
    	let current;

    	tab0 = new Tab({
    			props: {
    				$$slots: { default: [create_default_slot_12] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab1 = new Tab({
    			props: {
    				$$slots: { default: [create_default_slot_11] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab2 = new Tab({
    			props: {
    				$$slots: { default: [create_default_slot_10] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab3 = new Tab({
    			props: {
    				$$slots: { default: [create_default_slot_9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(tab0.$$.fragment);
    			t0 = space();
    			create_component(tab1.$$.fragment);
    			t1 = space();
    			create_component(tab2.$$.fragment);
    			t2 = space();
    			create_component(tab3.$$.fragment);
    			attr_dev(div, "slot", "tabs");
    			add_location(div, file$2, 67, 10, 1588);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(tab0, div, null);
    			append_dev(div, t0);
    			mount_component(tab1, div, null);
    			append_dev(div, t1);
    			mount_component(tab2, div, null);
    			append_dev(div, t2);
    			mount_component(tab3, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tab0_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				tab0_changes.$$scope = { dirty, ctx };
    			}

    			tab0.$set(tab0_changes);
    			const tab1_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				tab1_changes.$$scope = { dirty, ctx };
    			}

    			tab1.$set(tab1_changes);
    			const tab2_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				tab2_changes.$$scope = { dirty, ctx };
    			}

    			tab2.$set(tab2_changes);
    			const tab3_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				tab3_changes.$$scope = { dirty, ctx };
    			}

    			tab3.$set(tab3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab0.$$.fragment, local);
    			transition_in(tab1.$$.fragment, local);
    			transition_in(tab2.$$.fragment, local);
    			transition_in(tab3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab0.$$.fragment, local);
    			transition_out(tab1.$$.fragment, local);
    			transition_out(tab2.$$.fragment, local);
    			transition_out(tab3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(tab0);
    			destroy_component(tab1);
    			destroy_component(tab2);
    			destroy_component(tab3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_tabs_slot.name,
    		type: "slot",
    		source: "(68:10) ",
    		ctx
    	});

    	return block;
    }

    // (66:6) 
    function create_extension_slot(ctx) {
    	let div;
    	let tabs;
    	let updating_value;
    	let current;

    	function tabs_value_binding(value) {
    		/*tabs_value_binding*/ ctx[6](value);
    	}

    	let tabs_props = {
    		class: "deep-purple-text",
    		fixedTabs: true,
    		$$slots: { tabs: [create_tabs_slot] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[4] !== void 0) {
    		tabs_props.value = /*value*/ ctx[4];
    	}

    	tabs = new Tabs({ props: tabs_props, $$inline: true });
    	binding_callbacks.push(() => bind(tabs, 'value', tabs_value_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(tabs.$$.fragment);
    			attr_dev(div, "slot", "extension");
    			add_location(div, file$2, 65, 6, 1494);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(tabs, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tabs_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				tabs_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*value*/ 16) {
    				updating_value = true;
    				tabs_changes.value = /*value*/ ctx[4];
    				add_flush_callback(() => updating_value = false);
    			}

    			tabs.$set(tabs_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabs.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabs.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(tabs);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_extension_slot.name,
    		type: "slot",
    		source: "(66:6) ",
    		ctx
    	});

    	return block;
    }

    // (102:14) <Collection                 path={db.collection('ratings')}                 let:data={ratingsColl}>
    function create_default_slot_8(ctx) {
    	let h3;
    	let t1;
    	let coursesaccordians;
    	let current;

    	coursesaccordians = new CoursesAccordians({
    			props: {
    				courses: /*courses*/ ctx[8],
    				userDocRef: /*userDocRef*/ ctx[11],
    				ratingsColl: /*ratingsColl*/ ctx[12]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "Available Courses";
    			t1 = space();
    			create_component(coursesaccordians.$$.fragment);
    			add_location(h3, file$2, 104, 16, 2669);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(coursesaccordians, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const coursesaccordians_changes = {};
    			if (dirty & /*courses*/ 256) coursesaccordians_changes.courses = /*courses*/ ctx[8];
    			if (dirty & /*userDocRef*/ 2048) coursesaccordians_changes.userDocRef = /*userDocRef*/ ctx[11];
    			if (dirty & /*ratingsColl*/ 4096) coursesaccordians_changes.ratingsColl = /*ratingsColl*/ ctx[12];
    			coursesaccordians.$set(coursesaccordians_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(coursesaccordians.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(coursesaccordians.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			destroy_component(coursesaccordians, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8.name,
    		type: "slot",
    		source: "(102:14) <Collection                 path={db.collection('ratings')}                 let:data={ratingsColl}>",
    		ctx
    	});

    	return block;
    }

    // (95:12) <WindowItem>
    function create_default_slot_7(ctx) {
    	let h3;
    	let t1;
    	let listcourses;
    	let t2;
    	let collection;
    	let current;

    	listcourses = new ListCourses({
    			props: {
    				userCoursesCodes: /*userDoc*/ ctx[10].courses,
    				userDocRef: /*userDocRef*/ ctx[11],
    				courses: /*courses*/ ctx[8],
    				user: /*user*/ ctx[0]
    			},
    			$$inline: true
    		});

    	collection = new Collection({
    			props: {
    				path: /*db*/ ctx[1].collection('ratings'),
    				$$slots: {
    					default: [
    						create_default_slot_8,
    						({ data: ratingsColl }) => ({ 12: ratingsColl }),
    						({ data: ratingsColl }) => ratingsColl ? 4096 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "Courses";
    			t1 = space();
    			create_component(listcourses.$$.fragment);
    			t2 = space();
    			create_component(collection.$$.fragment);
    			add_location(h3, file$2, 95, 14, 2363);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(listcourses, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(collection, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const listcourses_changes = {};
    			if (dirty & /*userDoc*/ 1024) listcourses_changes.userCoursesCodes = /*userDoc*/ ctx[10].courses;
    			if (dirty & /*userDocRef*/ 2048) listcourses_changes.userDocRef = /*userDocRef*/ ctx[11];
    			if (dirty & /*courses*/ 256) listcourses_changes.courses = /*courses*/ ctx[8];
    			if (dirty & /*user*/ 1) listcourses_changes.user = /*user*/ ctx[0];
    			listcourses.$set(listcourses_changes);
    			const collection_changes = {};
    			if (dirty & /*db*/ 2) collection_changes.path = /*db*/ ctx[1].collection('ratings');

    			if (dirty & /*$$scope, courses, userDocRef, ratingsColl*/ 14592) {
    				collection_changes.$$scope = { dirty, ctx };
    			}

    			collection.$set(collection_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(listcourses.$$.fragment, local);
    			transition_in(collection.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(listcourses.$$.fragment, local);
    			transition_out(collection.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			destroy_component(listcourses, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(collection, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(95:12) <WindowItem>",
    		ctx
    	});

    	return block;
    }

    // (110:12) <WindowItem>
    function create_default_slot_6(ctx) {
    	let progress;
    	let current;

    	progress = new Progress({
    			props: {
    				userCoursesCodes: /*userDoc*/ ctx[10].courses,
    				courses: /*courses*/ ctx[8]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(progress.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(progress, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const progress_changes = {};
    			if (dirty & /*userDoc*/ 1024) progress_changes.userCoursesCodes = /*userDoc*/ ctx[10].courses;
    			if (dirty & /*courses*/ 256) progress_changes.courses = /*courses*/ ctx[8];
    			progress.$set(progress_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(progress.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(progress.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(progress, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(110:12) <WindowItem>",
    		ctx
    	});

    	return block;
    }

    // (113:12) <WindowItem>
    function create_default_slot_5(ctx) {
    	let todos;
    	let current;

    	todos = new Todos({
    			props: {
    				userDocRef: /*userDocRef*/ ctx[11],
    				userDoc: /*userDoc*/ ctx[10]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(todos.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(todos, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const todos_changes = {};
    			if (dirty & /*userDocRef*/ 2048) todos_changes.userDocRef = /*userDocRef*/ ctx[11];
    			if (dirty & /*userDoc*/ 1024) todos_changes.userDoc = /*userDoc*/ ctx[10];
    			todos.$set(todos_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(todos.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(todos.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(todos, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(113:12) <WindowItem>",
    		ctx
    	});

    	return block;
    }

    // (86:10) <Doc             path={`users/${user.uid}`}             let:data={userDoc}             let:ref={userDocRef}>
    function create_default_slot_4(ctx) {
    	let windowitem0;
    	let t0;
    	let windowitem1;
    	let t1;
    	let windowitem2;
    	let current;

    	windowitem0 = new WindowItem({
    			props: {
    				$$slots: { default: [create_default_slot_7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	windowitem1 = new WindowItem({
    			props: {
    				$$slots: { default: [create_default_slot_6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	windowitem2 = new WindowItem({
    			props: {
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(windowitem0.$$.fragment);
    			t0 = space();
    			create_component(windowitem1.$$.fragment);
    			t1 = space();
    			create_component(windowitem2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(windowitem0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(windowitem1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(windowitem2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const windowitem0_changes = {};

    			if (dirty & /*$$scope, db, courses, userDocRef, userDoc, user*/ 11523) {
    				windowitem0_changes.$$scope = { dirty, ctx };
    			}

    			windowitem0.$set(windowitem0_changes);
    			const windowitem1_changes = {};

    			if (dirty & /*$$scope, userDoc, courses*/ 9472) {
    				windowitem1_changes.$$scope = { dirty, ctx };
    			}

    			windowitem1.$set(windowitem1_changes);
    			const windowitem2_changes = {};

    			if (dirty & /*$$scope, userDocRef, userDoc*/ 11264) {
    				windowitem2_changes.$$scope = { dirty, ctx };
    			}

    			windowitem2.$set(windowitem2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(windowitem0.$$.fragment, local);
    			transition_in(windowitem1.$$.fragment, local);
    			transition_in(windowitem2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(windowitem0.$$.fragment, local);
    			transition_out(windowitem1.$$.fragment, local);
    			transition_out(windowitem2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(windowitem0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(windowitem1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(windowitem2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(86:10) <Doc             path={`users/${user.uid}`}             let:data={userDoc}             let:ref={userDocRef}>",
    		ctx
    	});

    	return block;
    }

    // (90:12) 
    function create_loading_slot(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Loading user...";
    			attr_dev(span, "slot", "loading");
    			add_location(span, file$2, 89, 12, 2172);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_loading_slot.name,
    		type: "slot",
    		source: "(90:12) ",
    		ctx
    	});

    	return block;
    }

    // (91:12) 
    function create_fallback_slot(ctx) {
    	let span;
    	let createuserdoc;
    	let current;

    	createuserdoc = new CreateUserDoc({
    			props: {
    				userDocRef: /*userDocRef*/ ctx[11],
    				user: /*user*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(createuserdoc.$$.fragment);
    			attr_dev(span, "slot", "fallback");
    			add_location(span, file$2, 90, 12, 2228);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(createuserdoc, span, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const createuserdoc_changes = {};
    			if (dirty & /*userDocRef*/ 2048) createuserdoc_changes.userDocRef = /*userDocRef*/ ctx[11];
    			if (dirty & /*user*/ 1) createuserdoc_changes.user = /*user*/ ctx[0];
    			createuserdoc.$set(createuserdoc_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(createuserdoc.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(createuserdoc.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(createuserdoc);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fallback_slot.name,
    		type: "slot",
    		source: "(91:12) ",
    		ctx
    	});

    	return block;
    }

    // (117:10) <WindowItem>
    function create_default_slot_3(ctx) {
    	let admin;
    	let current;

    	admin = new Admin({
    			props: { coursesRef: /*coursesRef*/ ctx[9] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(admin.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(admin, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const admin_changes = {};
    			if (dirty & /*coursesRef*/ 512) admin_changes.coursesRef = /*coursesRef*/ ctx[9];
    			admin.$set(admin_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(admin.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(admin.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(admin, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(117:10) <WindowItem>",
    		ctx
    	});

    	return block;
    }

    // (84:8) <Window {value} class="ma-4">
    function create_default_slot_2(ctx) {
    	let doc;
    	let t;
    	let windowitem;
    	let current;

    	doc = new Doc({
    			props: {
    				path: `users/${/*user*/ ctx[0].uid}`,
    				$$slots: {
    					fallback: [
    						create_fallback_slot,
    						({ data: userDoc, ref: userDocRef }) => ({ 10: userDoc, 11: userDocRef }),
    						({ data: userDoc, ref: userDocRef }) => (userDoc ? 1024 : 0) | (userDocRef ? 2048 : 0)
    					],
    					loading: [
    						create_loading_slot,
    						({ data: userDoc, ref: userDocRef }) => ({ 10: userDoc, 11: userDocRef }),
    						({ data: userDoc, ref: userDocRef }) => (userDoc ? 1024 : 0) | (userDocRef ? 2048 : 0)
    					],
    					default: [
    						create_default_slot_4,
    						({ data: userDoc, ref: userDocRef }) => ({ 10: userDoc, 11: userDocRef }),
    						({ data: userDoc, ref: userDocRef }) => (userDoc ? 1024 : 0) | (userDocRef ? 2048 : 0)
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	windowitem = new WindowItem({
    			props: {
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(doc.$$.fragment);
    			t = space();
    			create_component(windowitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(doc, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(windowitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const doc_changes = {};
    			if (dirty & /*user*/ 1) doc_changes.path = `users/${/*user*/ ctx[0].uid}`;

    			if (dirty & /*$$scope, userDocRef, user, userDoc, courses, db*/ 11523) {
    				doc_changes.$$scope = { dirty, ctx };
    			}

    			doc.$set(doc_changes);
    			const windowitem_changes = {};

    			if (dirty & /*$$scope, coursesRef*/ 8704) {
    				windowitem_changes.$$scope = { dirty, ctx };
    			}

    			windowitem.$set(windowitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(doc.$$.fragment, local);
    			transition_in(windowitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(doc.$$.fragment, local);
    			transition_out(windowitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(doc, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(windowitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(84:8) <Window {value} class=\\\"ma-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (79:6) <Collection         path={db.collection('courses')}         let:data={courses}         let:ref={coursesRef}>
    function create_default_slot_1$1(ctx) {
    	let window;
    	let current;

    	window = new Window({
    			props: {
    				value: /*value*/ ctx[4],
    				class: "ma-4",
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(window.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(window, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const window_changes = {};
    			if (dirty & /*value*/ 16) window_changes.value = /*value*/ ctx[4];

    			if (dirty & /*$$scope, coursesRef, user, courses, db*/ 8963) {
    				window_changes.$$scope = { dirty, ctx };
    			}

    			window.$set(window_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(window.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(window.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(window, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(79:6) <Collection         path={db.collection('courses')}         let:data={courses}         let:ref={coursesRef}>",
    		ctx
    	});

    	return block;
    }

    // (53:2) <MaterialApp {theme}>
    function create_default_slot$1(ctx) {
    	let appbar;
    	let t;
    	let div;
    	let collection;
    	let current;

    	appbar = new AppBar({
    			props: {
    				class: "deep-purple white-text",
    				$$slots: {
    					extension: [create_extension_slot],
    					title: [create_title_slot],
    					default: [create_default_slot_13]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	collection = new Collection({
    			props: {
    				path: /*db*/ ctx[1].collection('courses'),
    				$$slots: {
    					default: [
    						create_default_slot_1$1,
    						({ data: courses, ref: coursesRef }) => ({ 8: courses, 9: coursesRef }),
    						({ data: courses, ref: coursesRef }) => (courses ? 256 : 0) | (coursesRef ? 512 : 0)
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(appbar.$$.fragment);
    			t = space();
    			div = element("div");
    			create_component(collection.$$.fragment);
    			attr_dev(div, "class", "container svelte-exhww6");
    			add_location(div, file$2, 76, 4, 1796);
    		},
    		m: function mount(target, anchor) {
    			mount_component(appbar, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(collection, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const appbar_changes = {};

    			if (dirty & /*$$scope, value, auth, theme*/ 8220) {
    				appbar_changes.$$scope = { dirty, ctx };
    			}

    			appbar.$set(appbar_changes);
    			const collection_changes = {};
    			if (dirty & /*db*/ 2) collection_changes.path = /*db*/ ctx[1].collection('courses');

    			if (dirty & /*$$scope, value, coursesRef, user, courses, db*/ 8979) {
    				collection_changes.$$scope = { dirty, ctx };
    			}

    			collection.$set(collection_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(appbar.$$.fragment, local);
    			transition_in(collection.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(appbar.$$.fragment, local);
    			transition_out(collection.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(appbar, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			destroy_component(collection);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(53:2) <MaterialApp {theme}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let backgroundeffects;
    	let t;
    	let div;
    	let materialapp;
    	let current;
    	backgroundeffects = new BackgroundEffects({ $$inline: true });

    	materialapp = new MaterialApp({
    			props: {
    				theme: /*theme*/ ctx[3],
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(backgroundeffects.$$.fragment);
    			t = space();
    			div = element("div");
    			create_component(materialapp.$$.fragment);
    			attr_dev(div, "class", "app svelte-exhww6");
    			add_location(div, file$2, 51, 0, 1055);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(backgroundeffects, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(materialapp, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const materialapp_changes = {};
    			if (dirty & /*theme*/ 8) materialapp_changes.theme = /*theme*/ ctx[3];

    			if (dirty & /*$$scope, db, value, user, auth, theme*/ 8223) {
    				materialapp_changes.$$scope = { dirty, ctx };
    			}

    			materialapp.$set(materialapp_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(backgroundeffects.$$.fragment, local);
    			transition_in(materialapp.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(backgroundeffects.$$.fragment, local);
    			transition_out(materialapp.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(backgroundeffects, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			destroy_component(materialapp);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let { user } = $$props;
    	let { db } = $$props;
    	let { auth } = $$props;

    	//theme for svelte-materialify
    	let theme = "light";

    	//change theme function
    	function toggleTheme() {
    		if (theme === "light") $$invalidate(3, theme = "dark"); else $$invalidate(3, theme = "light");
    	}

    	let value = 0;
    	const writable_props = ['user', 'db', 'auth'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	function tabs_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(4, value);
    	}

    	const click_handler = () => auth.signOut();

    	$$self.$$set = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    		if ('db' in $$props) $$invalidate(1, db = $$props.db);
    		if ('auth' in $$props) $$invalidate(2, auth = $$props.auth);
    	};

    	$$self.$capture_state = () => ({
    		CreateUserDoc,
    		BackgroundEffects,
    		Progress,
    		Admin,
    		ListCourses,
    		CoursesAccordians,
    		Todos,
    		MaterialApp,
    		Button,
    		Tabs,
    		Tab,
    		Window,
    		WindowItem,
    		AppBar,
    		Doc,
    		Collection,
    		user,
    		db,
    		auth,
    		theme,
    		toggleTheme,
    		value
    	});

    	$$self.$inject_state = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    		if ('db' in $$props) $$invalidate(1, db = $$props.db);
    		if ('auth' in $$props) $$invalidate(2, auth = $$props.auth);
    		if ('theme' in $$props) $$invalidate(3, theme = $$props.theme);
    		if ('value' in $$props) $$invalidate(4, value = $$props.value);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [user, db, auth, theme, value, toggleTheme, tabs_value_binding, click_handler];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { user: 0, db: 1, auth: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*user*/ ctx[0] === undefined && !('user' in props)) {
    			console.warn("<App> was created without expected prop 'user'");
    		}

    		if (/*db*/ ctx[1] === undefined && !('db' in props)) {
    			console.warn("<App> was created without expected prop 'db'");
    		}

    		if (/*auth*/ ctx[2] === undefined && !('auth' in props)) {
    			console.warn("<App> was created without expected prop 'auth'");
    		}
    	}

    	get user() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set user(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get db() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set db(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get auth() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set auth(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\Head.svelte generated by Svelte v3.40.0 */

    const file$1 = "src\\Head.svelte";

    function create_fragment$1(ctx) {
    	let style;
    	let link;

    	const block = {
    		c: function create() {
    			style = element("style");
    			style.textContent = "/* Scroll 4 */\r\n    ::-webkit-scrollbar {\r\n      width: 12px;\r\n      height: 12px;\r\n    }\r\n\r\n    ::-webkit-scrollbar-track {\r\n      border-radius: 10px;\r\n      background-color: rgba(0, 0, 0, 0.4);\r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background-color: #9966ff;\r\n      background-image: -webkit-linear-gradient(\r\n        45deg,\r\n        rgba(255, 255, 255, 0.3) 20%,\r\n        transparent 20%,\r\n        transparent 40%,\r\n        rgba(255, 255, 255, 0.3) 40%,\r\n        rgba(255, 255, 255, 0.3) 60%,\r\n        transparent 60%,\r\n        transparent 80%,\r\n        rgba(255, 255, 255, 0.3) 80%\r\n      );\r\n      border-radius: 10px;\r\n    }\r\n\r\n    ::-webkit-scrollbar {\r\n      width: 15px;\r\n      height: 15px;\r\n    }\r\n\r\n    ::-webkit-scrollbar-track {\r\n      border-radius: 10px;\r\n      background-color: rgba(255, 255, 255, 0.1);\r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background-image: linear-gradient(45deg, #00aeff, #a68eff);\r\n      border-radius: 10px;\r\n      -webkit-box-shadow: rgba(0, 0, 0, 0.12) 0 3px 13px 1px;\r\n    }\r\n\r\n    body {\r\n      background: #8e2de2;\r\n      /* fallback for old browsers */\r\n      background: -webkit-linear-gradient(45deg, #8e2de2, #65a6fa);\r\n      /* Chrome 10-25, Safari 5.1-6 */\r\n      background: linear-gradient(45deg, #8e2de2, #65a6fa);\r\n      /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n      background-position: center;\r\n      /* Center the image */\r\n      background-repeat: no-repeat;\r\n      /* Do not repeat the image */\r\n      background-size: cover;\r\n      /* Resize the background image to cover the entire container */\r\n      background-attachment: fixed;\r\n      min-height: 100vh;\r\n      height: fit-content;\r\n      position: relative;\r\n    }\r\n  ";
    			link = element("link");
    			add_location(style, file$1, 1, 2, 17);
    			attr_dev(link, "href", "https://fonts.googleapis.com/icon?family=Material+Icons");
    			attr_dev(link, "rel", "stylesheet");
    			add_location(link, file$1, 64, 2, 1783);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, style);
    			append_dev(document.head, link);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			detach_dev(style);
    			detach_dev(link);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Head', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Head> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Head extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Head",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var k$1, goog = goog || {}, l = commonjsGlobal$1 || self;
    function aa$1() { }
    function ba$1(a) { var b = typeof a; b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null"; return "array" == b || "object" == b && "number" == typeof a.length; }
    function p(a) { var b = typeof a; return "object" == b && null != a || "function" == b; }
    function da$1(a) { return Object.prototype.hasOwnProperty.call(a, ea$1) && a[ea$1] || (a[ea$1] = ++fa$1); }
    var ea$1 = "closure_uid_" + (1E9 * Math.random() >>> 0), fa$1 = 0;
    function ha$1(a, b, c) { return a.call.apply(a.bind, arguments); }
    function ia(a, b, c) { if (!a)
        throw Error(); if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function () { var e = Array.prototype.slice.call(arguments); Array.prototype.unshift.apply(e, d); return a.apply(b, e); };
    } return function () { return a.apply(b, arguments); }; }
    function q$1(a, b, c) { Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q$1 = ha$1 : q$1 = ia; return q$1.apply(null, arguments); }
    function ja$1(a, b) { var c = Array.prototype.slice.call(arguments, 1); return function () { var d = c.slice(); d.push.apply(d, arguments); return a.apply(this, d); }; }
    function t(a, b) { function c() { } c.prototype = b.prototype; a.Z = b.prototype; a.prototype = new c; a.prototype.constructor = a; a.Vb = function (d, e, f) { for (var h = Array(arguments.length - 2), n = 2; n < arguments.length; n++)
        h[n - 2] = arguments[n]; return b.prototype[e].apply(d, h); }; }
    function v() { this.s = this.s; this.o = this.o; }
    var ka$1 = 0, la$1 = {};
    v.prototype.s = !1;
    v.prototype.na = function () { if (!this.s && (this.s = !0, this.M(), 0 != ka$1)) {
        var a = da$1(this);
        delete la$1[a];
    } };
    v.prototype.M = function () { if (this.o)
        for (; this.o.length;)
            this.o.shift()(); };
    var ma$1 = Array.prototype.indexOf ? function (a, b) { return Array.prototype.indexOf.call(a, b, void 0); } : function (a, b) { if ("string" === typeof a)
        return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0); for (var c = 0; c < a.length; c++)
        if (c in a && a[c] === b)
            return c; return -1; }, na$1 = Array.prototype.forEach ? function (a, b, c) { Array.prototype.forEach.call(a, b, c); } : function (a, b, c) { var d = a.length, e = "string" === typeof a ? a.split("") : a; for (var f = 0; f < d; f++)
        f in e && b.call(c, e[f], f, a); };
    function oa$1(a) { a: {
        var b = pa$1;
        var c = a.length, d = "string" === typeof a ? a.split("") : a;
        for (var e = 0; e < c; e++)
            if (e in d && b.call(void 0, d[e], e, a)) {
                b = e;
                break a;
            }
        b = -1;
    } return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b]; }
    function qa$1(a) { return Array.prototype.concat.apply([], arguments); }
    function ra$1(a) { var b = a.length; if (0 < b) {
        var c = Array(b);
        for (var d = 0; d < b; d++)
            c[d] = a[d];
        return c;
    } return []; }
    function sa$1(a) { return /^[\s\xa0]*$/.test(a); }
    var ta$1 = String.prototype.trim ? function (a) { return a.trim(); } : function (a) { return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]; };
    function w(a, b) { return -1 != a.indexOf(b); }
    function ua$1(a, b) { return a < b ? -1 : a > b ? 1 : 0; }
    var x$1;
    a: {
        var va$1 = l.navigator;
        if (va$1) {
            var wa$1 = va$1.userAgent;
            if (wa$1) {
                x$1 = wa$1;
                break a;
            }
        }
        x$1 = "";
    }
    function xa$1(a, b, c) { for (var d in a)
        b.call(c, a[d], d, a); }
    function ya$1(a) { var b = {}; for (var c in a)
        b[c] = a[c]; return b; }
    var za$1 = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    function Aa$1(a, b) { var c, d; for (var e = 1; e < arguments.length; e++) {
        d = arguments[e];
        for (c in d)
            a[c] = d[c];
        for (var f = 0; f < za$1.length; f++)
            c = za$1[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    } }
    function Ca$1(a) { Ca$1[" "](a); return a; }
    Ca$1[" "] = aa$1;
    function Fa$1(a) { var b = Ga$1; return Object.prototype.hasOwnProperty.call(b, 9) ? b[9] : b[9] = a(9); }
    var Ha$1 = w(x$1, "Opera"), y = w(x$1, "Trident") || w(x$1, "MSIE"), Ia$1 = w(x$1, "Edge"), Ja$1 = Ia$1 || y, Ka$1 = w(x$1, "Gecko") && !(w(x$1.toLowerCase(), "webkit") && !w(x$1, "Edge")) && !(w(x$1, "Trident") || w(x$1, "MSIE")) && !w(x$1, "Edge"), La$1 = w(x$1.toLowerCase(), "webkit") && !w(x$1, "Edge");
    function Ma$1() { var a = l.document; return a ? a.documentMode : void 0; }
    var Na$1;
    a: {
        var Oa$1 = "", Pa$1 = function () { var a = x$1; if (Ka$1)
            return /rv:([^\);]+)(\)|;)/.exec(a); if (Ia$1)
            return /Edge\/([\d\.]+)/.exec(a); if (y)
            return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a); if (La$1)
            return /WebKit\/(\S+)/.exec(a); if (Ha$1)
            return /(?:Version)[ \/]?(\S+)/.exec(a); }();
        Pa$1 && (Oa$1 = Pa$1 ? Pa$1[1] : "");
        if (y) {
            var Qa$1 = Ma$1();
            if (null != Qa$1 && Qa$1 > parseFloat(Oa$1)) {
                Na$1 = String(Qa$1);
                break a;
            }
        }
        Na$1 = Oa$1;
    }
    var Ga$1 = {};
    function Ra$1() { return Fa$1(function () { var a = 0; var b = ta$1(String(Na$1)).split("."), c = ta$1("9").split("."), d = Math.max(b.length, c.length); for (var h = 0; 0 == a && h < d; h++) {
        var e = b[h] || "", f = c[h] || "";
        do {
            e = /(\d*)(\D*)(.*)/.exec(e) || ["", "", "", ""];
            f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];
            if (0 == e[0].length && 0 == f[0].length)
                break;
            a = ua$1(0 == e[1].length ? 0 : parseInt(e[1], 10), 0 == f[1].length ? 0 : parseInt(f[1], 10)) || ua$1(0 == e[2].length, 0 == f[2].length) || ua$1(e[2], f[2]);
            e = e[3];
            f = f[3];
        } while (0 == a);
    } return 0 <= a; }); }
    var Sa$1;
    if (l.document && y) {
        var Ta$1 = Ma$1();
        Sa$1 = Ta$1 ? Ta$1 : parseInt(Na$1, 10) || void 0;
    }
    else
        Sa$1 = void 0;
    var Ua$1 = Sa$1;
    var Va$1 = function () { if (!l.addEventListener || !Object.defineProperty)
        return !1; var a = !1, b = Object.defineProperty({}, "passive", { get: function () { a = !0; } }); try {
        l.addEventListener("test", aa$1, b), l.removeEventListener("test", aa$1, b);
    }
    catch (c) { } return a; }();
    function z$1(a, b) { this.type = a; this.g = this.target = b; this.defaultPrevented = !1; }
    z$1.prototype.h = function () { this.defaultPrevented = !0; };
    function A$1(a, b) {
        z$1.call(this, a ? a.type : "");
        this.relatedTarget = this.g = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
        this.state = null;
        this.pointerId = 0;
        this.pointerType = "";
        this.i = null;
        if (a) {
            var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
            this.target = a.target || a.srcElement;
            this.g = b;
            if (b = a.relatedTarget) {
                if (Ka$1) {
                    a: {
                        try {
                            Ca$1(b.nodeName);
                            var e = !0;
                            break a;
                        }
                        catch (f) { }
                        e =
                            !1;
                    }
                    e || (b = null);
                }
            }
            else
                "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
            this.relatedTarget = b;
            d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
            this.button = a.button;
            this.key = a.key || "";
            this.ctrlKey = a.ctrlKey;
            this.altKey = a.altKey;
            this.shiftKey =
                a.shiftKey;
            this.metaKey = a.metaKey;
            this.pointerId = a.pointerId || 0;
            this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Wa$1[a.pointerType] || "";
            this.state = a.state;
            this.i = a;
            a.defaultPrevented && A$1.Z.h.call(this);
        }
    }
    t(A$1, z$1);
    var Wa$1 = { 2: "touch", 3: "pen", 4: "mouse" };
    A$1.prototype.h = function () { A$1.Z.h.call(this); var a = this.i; a.preventDefault ? a.preventDefault() : a.returnValue = !1; };
    var B$1 = "closure_listenable_" + (1E6 * Math.random() | 0);
    var Xa$1 = 0;
    function Ya$1(a, b, c, d, e) { this.listener = a; this.proxy = null; this.src = b; this.type = c; this.capture = !!d; this.ia = e; this.key = ++Xa$1; this.ca = this.fa = !1; }
    function Za$1(a) { a.ca = !0; a.listener = null; a.proxy = null; a.src = null; a.ia = null; }
    function $a$1(a) { this.src = a; this.g = {}; this.h = 0; }
    $a$1.prototype.add = function (a, b, c, d, e) { var f = a.toString(); a = this.g[f]; a || (a = this.g[f] = [], this.h++); var h = ab(a, b, d, e); -1 < h ? (b = a[h], c || (b.fa = !1)) : (b = new Ya$1(b, this.src, f, !!d, e), b.fa = c, a.push(b)); return b; };
    function bb(a, b) { var c = b.type; if (c in a.g) {
        var d = a.g[c], e = ma$1(d, b), f;
        (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
        f && (Za$1(b), 0 == a.g[c].length && (delete a.g[c], a.h--));
    } }
    function ab(a, b, c, d) { for (var e = 0; e < a.length; ++e) {
        var f = a[e];
        if (!f.ca && f.listener == b && f.capture == !!c && f.ia == d)
            return e;
    } return -1; }
    var cb = "closure_lm_" + (1E6 * Math.random() | 0), db = {};
    function fb(a, b, c, d, e) { if (d && d.once)
        return gb(a, b, c, d, e); if (Array.isArray(b)) {
        for (var f = 0; f < b.length; f++)
            fb(a, b[f], c, d, e);
        return null;
    } c = hb(c); return a && a[B$1] ? a.N(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !1, d, e); }
    function ib(a, b, c, d, e, f) { if (!b)
        throw Error("Invalid event type"); var h = p(e) ? !!e.capture : !!e, n = jb(a); n || (a[cb] = n = new $a$1(a)); c = n.add(b, c, d, h, f); if (c.proxy)
        return c; d = kb(); c.proxy = d; d.src = a; d.listener = c; if (a.addEventListener)
        Va$1 || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
    else if (a.attachEvent)
        a.attachEvent(lb(b.toString()), d);
    else if (a.addListener && a.removeListener)
        a.addListener(d);
    else
        throw Error("addEventListener and attachEvent are unavailable."); return c; }
    function kb() { function a(c) { return b.call(a.src, a.listener, c); } var b = mb; return a; }
    function gb(a, b, c, d, e) { if (Array.isArray(b)) {
        for (var f = 0; f < b.length; f++)
            gb(a, b[f], c, d, e);
        return null;
    } c = hb(c); return a && a[B$1] ? a.O(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !0, d, e); }
    function nb(a, b, c, d, e) { if (Array.isArray(b))
        for (var f = 0; f < b.length; f++)
            nb(a, b[f], c, d, e);
    else
        (d = p(d) ? !!d.capture : !!d, c = hb(c), a && a[B$1]) ? (a = a.i, b = String(b).toString(), b in a.g && (f = a.g[b], c = ab(f, c, d, e), -1 < c && (Za$1(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.g[b], a.h--)))) : a && (a = jb(a)) && (b = a.g[b.toString()], a = -1, b && (a = ab(b, c, d, e)), (c = -1 < a ? b[a] : null) && ob(c)); }
    function ob(a) { if ("number" !== typeof a && a && !a.ca) {
        var b = a.src;
        if (b && b[B$1])
            bb(b.i, a);
        else {
            var c = a.type, d = a.proxy;
            b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(lb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
            (c = jb(b)) ? (bb(c, a), 0 == c.h && (c.src = null, b[cb] = null)) : Za$1(a);
        }
    } }
    function lb(a) { return a in db ? db[a] : db[a] = "on" + a; }
    function mb(a, b) { if (a.ca)
        a = !0;
    else {
        b = new A$1(b, this);
        var c = a.listener, d = a.ia || a.src;
        a.fa && ob(a);
        a = c.call(d, b);
    } return a; }
    function jb(a) { a = a[cb]; return a instanceof $a$1 ? a : null; }
    var pb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
    function hb(a) { if ("function" === typeof a)
        return a; a[pb] || (a[pb] = function (b) { return a.handleEvent(b); }); return a[pb]; }
    function C$1() { v.call(this); this.i = new $a$1(this); this.P = this; this.I = null; }
    t(C$1, v);
    C$1.prototype[B$1] = !0;
    C$1.prototype.removeEventListener = function (a, b, c, d) { nb(this, a, b, c, d); };
    function D$1(a, b) { var c, d = a.I; if (d)
        for (c = []; d; d = d.I)
            c.push(d); a = a.P; d = b.type || b; if ("string" === typeof b)
        b = new z$1(b, a);
    else if (b instanceof z$1)
        b.target = b.target || a;
    else {
        var e = b;
        b = new z$1(d, a);
        Aa$1(b, e);
    } e = !0; if (c)
        for (var f = c.length - 1; 0 <= f; f--) {
            var h = b.g = c[f];
            e = qb(h, d, !0, b) && e;
        } h = b.g = a; e = qb(h, d, !0, b) && e; e = qb(h, d, !1, b) && e; if (c)
        for (f = 0; f < c.length; f++)
            h = b.g = c[f], e = qb(h, d, !1, b) && e; }
    C$1.prototype.M = function () { C$1.Z.M.call(this); if (this.i) {
        var a = this.i, c;
        for (c in a.g) {
            for (var d = a.g[c], e = 0; e < d.length; e++)
                Za$1(d[e]);
            delete a.g[c];
            a.h--;
        }
    } this.I = null; };
    C$1.prototype.N = function (a, b, c, d) { return this.i.add(String(a), b, !1, c, d); };
    C$1.prototype.O = function (a, b, c, d) { return this.i.add(String(a), b, !0, c, d); };
    function qb(a, b, c, d) { b = a.i.g[String(b)]; if (!b)
        return !0; b = b.concat(); for (var e = !0, f = 0; f < b.length; ++f) {
        var h = b[f];
        if (h && !h.ca && h.capture == c) {
            var n = h.listener, u = h.ia || h.src;
            h.fa && bb(a.i, h);
            e = !1 !== n.call(u, d) && e;
        }
    } return e && !d.defaultPrevented; }
    var rb = l.JSON.stringify;
    function sb() { var a = tb; var b = null; a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null); return b; }
    var ub = /** @class */ (function () {
        function ub() {
            this.h = this.g = null;
        }
        ub.prototype.add = function (a, b) { var c = vb.get(); c.set(a, b); this.h ? this.h.next = c : this.g = c; this.h = c; };
        return ub;
    }());
    var vb = new /** @class */ (function () {
        function class_2(a, b) {
            this.i = a;
            this.j = b;
            this.h = 0;
            this.g = null;
        }
        class_2.prototype.get = function () { var a; 0 < this.h ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i(); return a; };
        return class_2;
    }())(function () { return new wb; }, function (a) { return a.reset(); });
    var wb = /** @class */ (function () {
        function wb() {
            this.next = this.g = this.h = null;
        }
        wb.prototype.set = function (a, b) { this.h = a; this.g = b; this.next = null; };
        wb.prototype.reset = function () { this.next = this.g = this.h = null; };
        return wb;
    }());
    function yb(a) { l.setTimeout(function () { throw a; }, 0); }
    function zb(a, b) { Ab || Bb(); Cb || (Ab(), Cb = !0); tb.add(a, b); }
    var Ab;
    function Bb() { var a = l.Promise.resolve(void 0); Ab = function () { a.then(Db); }; }
    var Cb = !1, tb = new ub;
    function Db() { for (var a; a = sb();) {
        try {
            a.h.call(a.g);
        }
        catch (c) {
            yb(c);
        }
        var b = vb;
        b.j(a);
        100 > b.h && (b.h++, a.next = b.g, b.g = a);
    } Cb = !1; }
    function Eb(a, b) { C$1.call(this); this.h = a || 1; this.g = b || l; this.j = q$1(this.kb, this); this.l = Date.now(); }
    t(Eb, C$1);
    k$1 = Eb.prototype;
    k$1.da = !1;
    k$1.S = null;
    k$1.kb = function () { if (this.da) {
        var a = Date.now() - this.l;
        0 < a && a < .8 * this.h ? this.S = this.g.setTimeout(this.j, this.h - a) : (this.S && (this.g.clearTimeout(this.S), this.S = null), D$1(this, "tick"), this.da && (Fb(this), this.start()));
    } };
    k$1.start = function () { this.da = !0; this.S || (this.S = this.g.setTimeout(this.j, this.h), this.l = Date.now()); };
    function Fb(a) { a.da = !1; a.S && (a.g.clearTimeout(a.S), a.S = null); }
    k$1.M = function () { Eb.Z.M.call(this); Fb(this); delete this.g; };
    function Gb(a, b, c) { if ("function" === typeof a)
        c && (a = q$1(a, c));
    else if (a && "function" == typeof a.handleEvent)
        a = q$1(a.handleEvent, a);
    else
        throw Error("Invalid listener argument"); return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0); }
    function Hb(a) { a.g = Gb(function () { a.g = null; a.i && (a.i = !1, Hb(a)); }, a.j); var b = a.h; a.h = null; a.m.apply(null, b); }
    var Ib = /** @class */ (function (_super) {
        __extends(Ib, _super);
        function Ib(a, b) {
            var _this = _super.call(this) || this;
            _this.m = a;
            _this.j = b;
            _this.h = null;
            _this.i = !1;
            _this.g = null;
            return _this;
        }
        Ib.prototype.l = function (a) { this.h = arguments; this.g ? this.i = !0 : Hb(this); };
        Ib.prototype.M = function () { _super.prototype.M.call(this); this.g && (l.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null); };
        return Ib;
    }(v));
    function E(a) { v.call(this); this.h = a; this.g = {}; }
    t(E, v);
    var Jb = [];
    function Kb(a, b, c, d) { Array.isArray(c) || (c && (Jb[0] = c.toString()), c = Jb); for (var e = 0; e < c.length; e++) {
        var f = fb(b, c[e], d || a.handleEvent, !1, a.h || a);
        if (!f)
            break;
        a.g[f.key] = f;
    } }
    function Lb(a) { xa$1(a.g, function (b, c) { this.g.hasOwnProperty(c) && ob(b); }, a); a.g = {}; }
    E.prototype.M = function () { E.Z.M.call(this); Lb(this); };
    E.prototype.handleEvent = function () { throw Error("EventHandler.handleEvent not implemented"); };
    function Mb() { this.g = !0; }
    Mb.prototype.Aa = function () { this.g = !1; };
    function Nb(a, b, c, d, e, f) { a.info(function () { if (a.g)
        if (f) {
            var h = "";
            for (var n = f.split("&"), u = 0; u < n.length; u++) {
                var m = n[u].split("=");
                if (1 < m.length) {
                    var r = m[0];
                    m = m[1];
                    var G = r.split("_");
                    h = 2 <= G.length && "type" == G[1] ? h + (r + "=" + m + "&") : h + (r + "=redacted&");
                }
            }
        }
        else
            h = null;
    else
        h = f; return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + h; }); }
    function Ob(a, b, c, d, e, f, h) { a.info(function () { return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + h; }); }
    function F$1(a, b, c, d) { a.info(function () { return "XMLHTTP TEXT (" + b + "): " + Pb(a, c) + (d ? " " + d : ""); }); }
    function Qb(a, b) { a.info(function () { return "TIMEOUT: " + b; }); }
    Mb.prototype.info = function () { };
    function Pb(a, b) { if (!a.g)
        return b; if (!b)
        return null; try {
        var c = JSON.parse(b);
        if (c)
            for (a = 0; a < c.length; a++)
                if (Array.isArray(c[a])) {
                    var d = c[a];
                    if (!(2 > d.length)) {
                        var e = d[1];
                        if (Array.isArray(e) && !(1 > e.length)) {
                            var f = e[0];
                            if ("noop" != f && "stop" != f && "close" != f)
                                for (var h = 1; h < e.length; h++)
                                    e[h] = "";
                        }
                    }
                }
        return rb(c);
    }
    catch (n) {
        return b;
    } }
    var H$1 = {}, Rb = null;
    function Sb() { return Rb = Rb || new C$1; }
    H$1.Ma = "serverreachability";
    function Tb(a) { z$1.call(this, H$1.Ma, a); }
    t(Tb, z$1);
    function I(a) { var b = Sb(); D$1(b, new Tb(b, a)); }
    H$1.STAT_EVENT = "statevent";
    function Ub(a, b) { z$1.call(this, H$1.STAT_EVENT, a); this.stat = b; }
    t(Ub, z$1);
    function J$1(a) { var b = Sb(); D$1(b, new Ub(b, a)); }
    H$1.Na = "timingevent";
    function Vb(a, b) { z$1.call(this, H$1.Na, a); this.size = b; }
    t(Vb, z$1);
    function K$1(a, b) { if ("function" !== typeof a)
        throw Error("Fn must not be null and must be a function"); return l.setTimeout(function () { a(); }, b); }
    var Wb = { NO_ERROR: 0, lb: 1, yb: 2, xb: 3, sb: 4, wb: 5, zb: 6, Ja: 7, TIMEOUT: 8, Cb: 9 };
    var Xb = { qb: "complete", Mb: "success", Ka: "error", Ja: "abort", Eb: "ready", Fb: "readystatechange", TIMEOUT: "timeout", Ab: "incrementaldata", Db: "progress", tb: "downloadprogress", Ub: "uploadprogress" };
    function Yb() { }
    Yb.prototype.h = null;
    function Zb(a) { return a.h || (a.h = a.i()); }
    function $b() { }
    var L$1 = { OPEN: "a", pb: "b", Ka: "c", Bb: "d" };
    function ac$1() { z$1.call(this, "d"); }
    t(ac$1, z$1);
    function bc$1() { z$1.call(this, "c"); }
    t(bc$1, z$1);
    var cc$1;
    function dc$1() { }
    t(dc$1, Yb);
    dc$1.prototype.g = function () { return new XMLHttpRequest; };
    dc$1.prototype.i = function () { return {}; };
    cc$1 = new dc$1;
    function M$1(a, b, c, d) { this.l = a; this.j = b; this.m = c; this.X = d || 1; this.V = new E(this); this.P = ec$1; a = Ja$1 ? 125 : void 0; this.W = new Eb(a); this.H = null; this.i = !1; this.s = this.A = this.v = this.K = this.F = this.Y = this.B = null; this.D = []; this.g = null; this.C = 0; this.o = this.u = null; this.N = -1; this.I = !1; this.O = 0; this.L = null; this.aa = this.J = this.$ = this.U = !1; this.h = new fc$1; }
    function fc$1() { this.i = null; this.g = ""; this.h = !1; }
    var ec$1 = 45E3, gc$1 = {}, hc$1 = {};
    k$1 = M$1.prototype;
    k$1.setTimeout = function (a) { this.P = a; };
    function ic$1(a, b, c) { a.K = 1; a.v = jc(N$1(b)); a.s = c; a.U = !0; kc$1(a, null); }
    function kc$1(a, b) { a.F = Date.now(); lc$1(a); a.A = N$1(a.v); var c = a.A, d = a.X; Array.isArray(d) || (d = [String(d)]); mc$1(c.h, "t", d); a.C = 0; c = a.l.H; a.h = new fc$1; a.g = nc$1(a.l, c ? b : null, !a.s); 0 < a.O && (a.L = new Ib(q$1(a.Ia, a, a.g), a.O)); Kb(a.V, a.g, "readystatechange", a.gb); b = a.H ? ya$1(a.H) : {}; a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ea(a.A, a.u, null, b)); I(1); Nb(a.j, a.u, a.A, a.m, a.X, a.s); }
    k$1.gb = function (a) { a = a.target; var b = this.L; b && 3 == O$1(a) ? b.l() : this.Ia(a); };
    k$1.Ia = function (a) {
        try {
            if (a == this.g)
                a: {
                    var r = O$1(this.g);
                    var b = this.g.Da();
                    var G = this.g.ba();
                    if (!(3 > r) && (3 != r || Ja$1 || this.g && (this.h.h || this.g.ga() || oc$1(this.g)))) {
                        this.I || 4 != r || 7 == b || (8 == b || 0 >= G ? I(3) : I(2));
                        pc$1(this);
                        var c = this.g.ba();
                        this.N = c;
                        b: if (qc$1(this)) {
                            var d = oc$1(this.g);
                            a = "";
                            var e = d.length, f = 4 == O$1(this.g);
                            if (!this.h.i) {
                                if ("undefined" === typeof TextDecoder) {
                                    P$2(this);
                                    rc$1(this);
                                    var h = "";
                                    break b;
                                }
                                this.h.i = new l.TextDecoder;
                            }
                            for (b = 0; b < e; b++)
                                this.h.h = !0, a += this.h.i.decode(d[b], { stream: f && b == e - 1 });
                            d.splice(0, e);
                            this.h.g += a;
                            this.C = 0;
                            h = this.h.g;
                        }
                        else
                            h = this.g.ga();
                        this.i = 200 == c;
                        Ob(this.j, this.u, this.A, this.m, this.X, r, c);
                        if (this.i) {
                            if (this.$ && !this.J) {
                                b: {
                                    if (this.g) {
                                        var n, u = this.g;
                                        if ((n = u.g ? u.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa$1(n)) {
                                            var m = n;
                                            break b;
                                        }
                                    }
                                    m = null;
                                }
                                if (c = m)
                                    F$1(this.j, this.m, c, "Initial handshake response via X-HTTP-Initial-Response"), this.J = !0, sc$1(this, c);
                                else {
                                    this.i = !1;
                                    this.o = 3;
                                    J$1(12);
                                    P$2(this);
                                    rc$1(this);
                                    break a;
                                }
                            }
                            this.U ? (tc$1(this, r, h), Ja$1 && this.i && 3 == r && (Kb(this.V, this.W, "tick", this.fb),
                                this.W.start())) : (F$1(this.j, this.m, h, null), sc$1(this, h));
                            4 == r && P$2(this);
                            this.i && !this.I && (4 == r ? uc$1(this.l, this) : (this.i = !1, lc$1(this)));
                        }
                        else
                            400 == c && 0 < h.indexOf("Unknown SID") ? (this.o = 3, J$1(12)) : (this.o = 0, J$1(13)), P$2(this), rc$1(this);
                    }
                }
        }
        catch (r) { }
        finally { }
    };
    function qc$1(a) { return a.g ? "GET" == a.u && 2 != a.K && a.l.Ba : !1; }
    function tc$1(a, b, c) {
        var d = !0, e;
        for (; !a.I && a.C < c.length;)
            if (e = vc$1(a, c), e == hc$1) {
                4 == b && (a.o = 4, J$1(14), d = !1);
                F$1(a.j, a.m, null, "[Incomplete Response]");
                break;
            }
            else if (e == gc$1) {
                a.o = 4;
                J$1(15);
                F$1(a.j, a.m, c, "[Invalid Chunk]");
                d = !1;
                break;
            }
            else
                F$1(a.j, a.m, e, null), sc$1(a, e);
        qc$1(a) && e != hc$1 && e != gc$1 && (a.h.g = "", a.C = 0);
        4 != b || 0 != c.length || a.h.h || (a.o = 1, J$1(16), d = !1);
        a.i = a.i && d;
        d ? 0 < c.length && !a.aa && (a.aa = !0, b = a.l, b.g == a && b.$ && !b.L && (b.h.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc$1(b), b.L = !0, J$1(11))) : (F$1(a.j, a.m, c, "[Invalid Chunked Response]"), P$2(a), rc$1(a));
    }
    k$1.fb = function () { if (this.g) {
        var a = O$1(this.g), b = this.g.ga();
        this.C < b.length && (pc$1(this), tc$1(this, a, b), this.i && 4 != a && lc$1(this));
    } };
    function vc$1(a, b) { var c = a.C, d = b.indexOf("\n", c); if (-1 == d)
        return hc$1; c = Number(b.substring(c, d)); if (isNaN(c))
        return gc$1; d += 1; if (d + c > b.length)
        return hc$1; b = b.substr(d, c); a.C = d + c; return b; }
    k$1.cancel = function () { this.I = !0; P$2(this); };
    function lc$1(a) { a.Y = Date.now() + a.P; xc$1(a, a.P); }
    function xc$1(a, b) { if (null != a.B)
        throw Error("WatchDog timer not null"); a.B = K$1(q$1(a.eb, a), b); }
    function pc$1(a) { a.B && (l.clearTimeout(a.B), a.B = null); }
    k$1.eb = function () { this.B = null; var a = Date.now(); 0 <= a - this.Y ? (Qb(this.j, this.A), 2 != this.K && (I(3), J$1(17)), P$2(this), this.o = 2, rc$1(this)) : xc$1(this, this.Y - a); };
    function rc$1(a) { 0 == a.l.G || a.I || uc$1(a.l, a); }
    function P$2(a) { pc$1(a); var b = a.L; b && "function" == typeof b.na && b.na(); a.L = null; Fb(a.W); Lb(a.V); a.g && (b = a.g, a.g = null, b.abort(), b.na()); }
    function sc$1(a, b) {
        try {
            var c = a.l;
            if (0 != c.G && (c.g == a || yc$1(c.i, a)))
                if (c.I = a.N, !a.J && yc$1(c.i, a) && 3 == c.G) {
                    try {
                        var d = c.Ca.g.parse(b);
                    }
                    catch (m) {
                        d = null;
                    }
                    if (Array.isArray(d) && 3 == d.length) {
                        var e = d;
                        if (0 == e[0])
                            a: {
                                if (!c.u) {
                                    if (c.g)
                                        if (c.g.F + 3E3 < a.F)
                                            zc(c), Ac$1(c);
                                        else
                                            break a;
                                    Bc$1(c);
                                    J$1(18);
                                }
                            }
                        else
                            c.ta = e[1], 0 < c.ta - c.U && 37500 > e[2] && c.N && 0 == c.A && !c.v && (c.v = K$1(q$1(c.ab, c), 6E3));
                        if (1 >= Cc$1(c.i) && c.ka) {
                            try {
                                c.ka();
                            }
                            catch (m) { }
                            c.ka = void 0;
                        }
                    }
                    else
                        Q$1(c, 11);
                }
                else if ((a.J || c.g == a) && zc(c), !sa$1(b))
                    for (e = c.Ca.g.parse(b), b = 0; b < e.length; b++) {
                        var m = e[b];
                        c.U = m[0];
                        m = m[1];
                        if (2 == c.G)
                            if ("c" == m[0]) {
                                c.J = m[1];
                                c.la = m[2];
                                var r = m[3];
                                null != r && (c.ma = r, c.h.info("VER=" + c.ma));
                                var G = m[4];
                                null != G && (c.za = G, c.h.info("SVER=" + c.za));
                                var Da = m[5];
                                null != Da && "number" === typeof Da && 0 < Da && (d = 1.5 * Da, c.K = d, c.h.info("backChannelRequestTimeoutMs_=" + d));
                                d = c;
                                var ca = a.g;
                                if (ca) {
                                    var Ea = ca.g ? ca.g.getResponseHeader("X-Client-Wire-Protocol") : null;
                                    if (Ea) {
                                        var f = d.i;
                                        !f.g && (w(Ea, "spdy") || w(Ea, "quic") || w(Ea, "h2")) && (f.j = f.l, f.g = new Set, f.h && (Dc$1(f, f.h), f.h = null));
                                    }
                                    if (d.D) {
                                        var xb = ca.g ? ca.g.getResponseHeader("X-HTTP-Session-Id") : null;
                                        xb && (d.sa = xb, R$1(d.F, d.D, xb));
                                    }
                                }
                                c.G = 3;
                                c.j && c.j.xa();
                                c.$ && (c.O = Date.now() - a.F, c.h.info("Handshake RTT: " + c.O + "ms"));
                                d = c;
                                var h = a;
                                d.oa = Ec$1(d, d.H ? d.la : null, d.W);
                                if (h.J) {
                                    Fc$1(d.i, h);
                                    var n = h, u = d.K;
                                    u && n.setTimeout(u);
                                    n.B && (pc$1(n), lc$1(n));
                                    d.g = h;
                                }
                                else
                                    Gc(d);
                                0 < c.l.length && Hc(c);
                            }
                            else
                                "stop" != m[0] && "close" != m[0] || Q$1(c, 7);
                        else
                            3 == c.G && ("stop" == m[0] || "close" == m[0] ? "stop" == m[0] ? Q$1(c, 7) : Ic$1(c) : "noop" != m[0] && c.j && c.j.wa(m), c.A = 0);
                    }
            I(4);
        }
        catch (m) { }
    }
    function Jc(a) { if (a.R && "function" == typeof a.R)
        return a.R(); if ("string" === typeof a)
        return a.split(""); if (ba$1(a)) {
        for (var b = [], c = a.length, d = 0; d < c; d++)
            b.push(a[d]);
        return b;
    } b = []; c = 0; for (d in a)
        b[c++] = a[d]; return b; }
    function Kc(a, b) { if (a.forEach && "function" == typeof a.forEach)
        a.forEach(b, void 0);
    else if (ba$1(a) || "string" === typeof a)
        na$1(a, b, void 0);
    else {
        if (a.T && "function" == typeof a.T)
            var c = a.T();
        else if (a.R && "function" == typeof a.R)
            c = void 0;
        else if (ba$1(a) || "string" === typeof a) {
            c = [];
            for (var d = a.length, e = 0; e < d; e++)
                c.push(e);
        }
        else
            for (e in c = [], d = 0, a)
                c[d++] = e;
        d = Jc(a);
        e = d.length;
        for (var f = 0; f < e; f++)
            b.call(void 0, d[f], c && c[f], a);
    } }
    function S$1(a, b) { this.h = {}; this.g = []; this.i = 0; var c = arguments.length; if (1 < c) {
        if (c % 2)
            throw Error("Uneven number of arguments");
        for (var d = 0; d < c; d += 2)
            this.set(arguments[d], arguments[d + 1]);
    }
    else if (a)
        if (a instanceof S$1)
            for (c = a.T(), d = 0; d < c.length; d++)
                this.set(c[d], a.get(c[d]));
        else
            for (d in a)
                this.set(d, a[d]); }
    k$1 = S$1.prototype;
    k$1.R = function () { Lc$1(this); for (var a = [], b = 0; b < this.g.length; b++)
        a.push(this.h[this.g[b]]); return a; };
    k$1.T = function () { Lc$1(this); return this.g.concat(); };
    function Lc$1(a) { if (a.i != a.g.length) {
        for (var b = 0, c = 0; b < a.g.length;) {
            var d = a.g[b];
            T(a.h, d) && (a.g[c++] = d);
            b++;
        }
        a.g.length = c;
    } if (a.i != a.g.length) {
        var e = {};
        for (c = b = 0; b < a.g.length;)
            d = a.g[b], T(e, d) || (a.g[c++] = d, e[d] = 1), b++;
        a.g.length = c;
    } }
    k$1.get = function (a, b) { return T(this.h, a) ? this.h[a] : b; };
    k$1.set = function (a, b) { T(this.h, a) || (this.i++, this.g.push(a)); this.h[a] = b; };
    k$1.forEach = function (a, b) { for (var c = this.T(), d = 0; d < c.length; d++) {
        var e = c[d], f = this.get(e);
        a.call(b, f, e, this);
    } };
    function T(a, b) { return Object.prototype.hasOwnProperty.call(a, b); }
    var Mc$1 = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
    function Nc$1(a, b) { if (a) {
        a = a.split("&");
        for (var c = 0; c < a.length; c++) {
            var d = a[c].indexOf("="), e = null;
            if (0 <= d) {
                var f = a[c].substring(0, d);
                e = a[c].substring(d + 1);
            }
            else
                f = a[c];
            b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
        }
    } }
    function U$1(a, b) { this.i = this.s = this.j = ""; this.m = null; this.o = this.l = ""; this.g = !1; if (a instanceof U$1) {
        this.g = void 0 !== b ? b : a.g;
        Oc$1(this, a.j);
        this.s = a.s;
        Pc$1(this, a.i);
        Qc(this, a.m);
        this.l = a.l;
        b = a.h;
        var c = new Rc$1;
        c.i = b.i;
        b.g && (c.g = new S$1(b.g), c.h = b.h);
        Sc$1(this, c);
        this.o = a.o;
    }
    else
        a && (c = String(a).match(Mc$1)) ? (this.g = !!b, Oc$1(this, c[1] || "", !0), this.s = Tc$1(c[2] || ""), Pc$1(this, c[3] || "", !0), Qc(this, c[4]), this.l = Tc$1(c[5] || "", !0), Sc$1(this, c[6] || "", !0), this.o = Tc$1(c[7] || "")) : (this.g = !!b, this.h = new Rc$1(null, this.g)); }
    U$1.prototype.toString = function () { var a = [], b = this.j; b && a.push(Uc$1(b, Vc$1, !0), ":"); var c = this.i; if (c || "file" == b)
        a.push("//"), (b = this.s) && a.push(Uc$1(b, Vc$1, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.m, null != c && a.push(":", String(c)); if (c = this.l)
        this.i && "/" != c.charAt(0) && a.push("/"), a.push(Uc$1(c, "/" == c.charAt(0) ? Wc : Xc, !0)); (c = this.h.toString()) && a.push("?", c); (c = this.o) && a.push("#", Uc$1(c, Yc)); return a.join(""); };
    function N$1(a) { return new U$1(a); }
    function Oc$1(a, b, c) { a.j = c ? Tc$1(b, !0) : b; a.j && (a.j = a.j.replace(/:$/, "")); }
    function Pc$1(a, b, c) { a.i = c ? Tc$1(b, !0) : b; }
    function Qc(a, b) { if (b) {
        b = Number(b);
        if (isNaN(b) || 0 > b)
            throw Error("Bad port number " + b);
        a.m = b;
    }
    else
        a.m = null; }
    function Sc$1(a, b, c) { b instanceof Rc$1 ? (a.h = b, Zc(a.h, a.g)) : (c || (b = Uc$1(b, $c)), a.h = new Rc$1(b, a.g)); }
    function R$1(a, b, c) { a.h.set(b, c); }
    function jc(a) { R$1(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36)); return a; }
    function ad(a) { return a instanceof U$1 ? N$1(a) : new U$1(a, void 0); }
    function bd(a, b, c, d) { var e = new U$1(null, void 0); a && Oc$1(e, a); b && Pc$1(e, b); c && Qc(e, c); d && (e.l = d); return e; }
    function Tc$1(a, b) { return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : ""; }
    function Uc$1(a, b, c) { return "string" === typeof a ? (a = encodeURI(a).replace(b, cd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null; }
    function cd(a) { a = a.charCodeAt(0); return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16); }
    var Vc$1 = /[#\/\?@]/g, Xc = /[#\?:]/g, Wc = /[#\?]/g, $c = /[#\?@]/g, Yc = /#/g;
    function Rc$1(a, b) { this.h = this.g = null; this.i = a || null; this.j = !!b; }
    function V$1(a) { a.g || (a.g = new S$1, a.h = 0, a.i && Nc$1(a.i, function (b, c) { a.add(decodeURIComponent(b.replace(/\+/g, " ")), c); })); }
    k$1 = Rc$1.prototype;
    k$1.add = function (a, b) { V$1(this); this.i = null; a = W$1(this, a); var c = this.g.get(a); c || this.g.set(a, c = []); c.push(b); this.h += 1; return this; };
    function dd(a, b) { V$1(a); b = W$1(a, b); T(a.g.h, b) && (a.i = null, a.h -= a.g.get(b).length, a = a.g, T(a.h, b) && (delete a.h[b], a.i--, a.g.length > 2 * a.i && Lc$1(a))); }
    function ed(a, b) { V$1(a); b = W$1(a, b); return T(a.g.h, b); }
    k$1.forEach = function (a, b) { V$1(this); this.g.forEach(function (c, d) { na$1(c, function (e) { a.call(b, e, d, this); }, this); }, this); };
    k$1.T = function () { V$1(this); for (var a = this.g.R(), b = this.g.T(), c = [], d = 0; d < b.length; d++)
        for (var e = a[d], f = 0; f < e.length; f++)
            c.push(b[d]); return c; };
    k$1.R = function (a) { V$1(this); var b = []; if ("string" === typeof a)
        ed(this, a) && (b = qa$1(b, this.g.get(W$1(this, a))));
    else {
        a = this.g.R();
        for (var c = 0; c < a.length; c++)
            b = qa$1(b, a[c]);
    } return b; };
    k$1.set = function (a, b) { V$1(this); this.i = null; a = W$1(this, a); ed(this, a) && (this.h -= this.g.get(a).length); this.g.set(a, [b]); this.h += 1; return this; };
    k$1.get = function (a, b) { if (!a)
        return b; a = this.R(a); return 0 < a.length ? String(a[0]) : b; };
    function mc$1(a, b, c) { dd(a, b); 0 < c.length && (a.i = null, a.g.set(W$1(a, b), ra$1(c)), a.h += c.length); }
    k$1.toString = function () { if (this.i)
        return this.i; if (!this.g)
        return ""; for (var a = [], b = this.g.T(), c = 0; c < b.length; c++) {
        var d = b[c], e = encodeURIComponent(String(d));
        d = this.R(d);
        for (var f = 0; f < d.length; f++) {
            var h = e;
            "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
            a.push(h);
        }
    } return this.i = a.join("&"); };
    function W$1(a, b) { b = String(b); a.j && (b = b.toLowerCase()); return b; }
    function Zc(a, b) { b && !a.j && (V$1(a), a.i = null, a.g.forEach(function (c, d) { var e = d.toLowerCase(); d != e && (dd(this, d), mc$1(this, e, c)); }, a)); a.j = b; }
    var fd = /** @class */ (function () {
        function fd(a, b) {
            this.h = a;
            this.g = b;
        }
        return fd;
    }());
    function gd(a) { this.l = a || hd; l.PerformanceNavigationTiming ? (a = l.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(l.g && l.g.Ea && l.g.Ea() && l.g.Ea().Zb); this.j = a ? this.l : 1; this.g = null; 1 < this.j && (this.g = new Set); this.h = null; this.i = []; }
    var hd = 10;
    function id(a) { return a.h ? !0 : a.g ? a.g.size >= a.j : !1; }
    function Cc$1(a) { return a.h ? 1 : a.g ? a.g.size : 0; }
    function yc$1(a, b) { return a.h ? a.h == b : a.g ? a.g.has(b) : !1; }
    function Dc$1(a, b) { a.g ? a.g.add(b) : a.h = b; }
    function Fc$1(a, b) { a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b); }
    gd.prototype.cancel = function () {
        var e_1, _a;
        this.i = jd(this);
        if (this.h)
            this.h.cancel(), this.h = null;
        else if (this.g && 0 !== this.g.size) {
            try {
                for (var _b = __values(this.g.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var a = _c.value;
                    a.cancel();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.g.clear();
        }
    };
    function jd(a) {
        var e_2, _a;
        if (null != a.h)
            return a.i.concat(a.h.D);
        if (null != a.g && 0 !== a.g.size) {
            var b = a.i;
            try {
                for (var _b = __values(a.g.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    b = b.concat(c.D);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return b;
        }
        return ra$1(a.i);
    }
    function kd() { }
    kd.prototype.stringify = function (a) { return l.JSON.stringify(a, void 0); };
    kd.prototype.parse = function (a) { return l.JSON.parse(a, void 0); };
    function ld() { this.g = new kd; }
    function md(a, b, c) { var d = c || ""; try {
        Kc(a, function (e, f) { var h = e; p(e) && (h = rb(e)); b.push(d + f + "=" + encodeURIComponent(h)); });
    }
    catch (e) {
        throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
    } }
    function nd(a, b) { var c = new Mb; if (l.Image) {
        var d_1 = new Image;
        d_1.onload = ja$1(od, c, d_1, "TestLoadImage: loaded", !0, b);
        d_1.onerror = ja$1(od, c, d_1, "TestLoadImage: error", !1, b);
        d_1.onabort = ja$1(od, c, d_1, "TestLoadImage: abort", !1, b);
        d_1.ontimeout = ja$1(od, c, d_1, "TestLoadImage: timeout", !1, b);
        l.setTimeout(function () { if (d_1.ontimeout)
            d_1.ontimeout(); }, 1E4);
        d_1.src = a;
    }
    else
        b(!1); }
    function od(a, b, c, d, e) { try {
        b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
    }
    catch (f) { } }
    function pd(a) { this.l = a.$b || null; this.j = a.ib || !1; }
    t(pd, Yb);
    pd.prototype.g = function () { return new qd(this.l, this.j); };
    pd.prototype.i = function (a) { return function () { return a; }; }({});
    function qd(a, b) { C$1.call(this); this.D = a; this.u = b; this.m = void 0; this.readyState = rd; this.status = 0; this.responseType = this.responseText = this.response = this.statusText = ""; this.onreadystatechange = null; this.v = new Headers; this.h = null; this.C = "GET"; this.B = ""; this.g = !1; this.A = this.j = this.l = null; }
    t(qd, C$1);
    var rd = 0;
    k$1 = qd.prototype;
    k$1.open = function (a, b) { if (this.readyState != rd)
        throw this.abort(), Error("Error reopening a connection"); this.C = a; this.B = b; this.readyState = 1; sd(this); };
    k$1.send = function (a) { if (1 != this.readyState)
        throw this.abort(), Error("need to call open() first. "); this.g = !0; var b = { headers: this.v, method: this.C, credentials: this.m, cache: void 0 }; a && (b.body = a); (this.D || l).fetch(new Request(this.B, b)).then(this.Va.bind(this), this.ha.bind(this)); };
    k$1.abort = function () { this.response = this.responseText = ""; this.v = new Headers; this.status = 0; this.j && this.j.cancel("Request was aborted."); 1 <= this.readyState && this.g && 4 != this.readyState && (this.g = !1, td(this)); this.readyState = rd; };
    k$1.Va = function (a) {
        if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, sd(this)), this.g && (this.readyState = 3, sd(this), this.g)))
            if ("arraybuffer" === this.responseType)
                a.arrayBuffer().then(this.Ta.bind(this), this.ha.bind(this));
            else if ("undefined" !== typeof l.ReadableStream && "body" in a) {
                this.j = a.body.getReader();
                if (this.u) {
                    if (this.responseType)
                        throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
                    this.response =
                        [];
                }
                else
                    this.response = this.responseText = "", this.A = new TextDecoder;
                ud(this);
            }
            else
                a.text().then(this.Ua.bind(this), this.ha.bind(this));
    };
    function ud(a) { a.j.read().then(a.Sa.bind(a)).catch(a.ha.bind(a)); }
    k$1.Sa = function (a) { if (this.g) {
        if (this.u && a.value)
            this.response.push(a.value);
        else if (!this.u) {
            var b = a.value ? a.value : new Uint8Array(0);
            if (b = this.A.decode(b, { stream: !a.done }))
                this.response = this.responseText += b;
        }
        a.done ? td(this) : sd(this);
        3 == this.readyState && ud(this);
    } };
    k$1.Ua = function (a) { this.g && (this.response = this.responseText = a, td(this)); };
    k$1.Ta = function (a) { this.g && (this.response = a, td(this)); };
    k$1.ha = function () { this.g && td(this); };
    function td(a) { a.readyState = 4; a.l = null; a.j = null; a.A = null; sd(a); }
    k$1.setRequestHeader = function (a, b) { this.v.append(a, b); };
    k$1.getResponseHeader = function (a) { return this.h ? this.h.get(a.toLowerCase()) || "" : ""; };
    k$1.getAllResponseHeaders = function () { if (!this.h)
        return ""; var a = [], b = this.h.entries(); for (var c = b.next(); !c.done;)
        c = c.value, a.push(c[0] + ": " + c[1]), c = b.next(); return a.join("\r\n"); };
    function sd(a) { a.onreadystatechange && a.onreadystatechange.call(a); }
    Object.defineProperty(qd.prototype, "withCredentials", { get: function () { return "include" === this.m; }, set: function (a) { this.m = a ? "include" : "same-origin"; } });
    var vd = l.JSON.parse;
    function X$1(a) { C$1.call(this); this.headers = new S$1; this.u = a || null; this.h = !1; this.C = this.g = null; this.H = ""; this.m = 0; this.j = ""; this.l = this.F = this.v = this.D = !1; this.B = 0; this.A = null; this.J = wd; this.K = this.L = !1; }
    t(X$1, C$1);
    var wd = "", xd = /^https?$/i, yd = ["POST", "PUT"];
    k$1 = X$1.prototype;
    k$1.ea = function (a, b, c, d) {
        if (this.g)
            throw Error("[goog.net.XhrIo] Object is active with another request=" + this.H + "; newUri=" + a);
        b = b ? b.toUpperCase() : "GET";
        this.H = a;
        this.j = "";
        this.m = 0;
        this.D = !1;
        this.h = !0;
        this.g = this.u ? this.u.g() : cc$1.g();
        this.C = this.u ? Zb(this.u) : Zb(cc$1);
        this.g.onreadystatechange = q$1(this.Fa, this);
        try {
            this.F = !0, this.g.open(b, String(a), !0), this.F = !1;
        }
        catch (f) {
            zd(this, f);
            return;
        }
        a = c || "";
        var e = new S$1(this.headers);
        d && Kc(d, function (f, h) { e.set(h, f); });
        d = oa$1(e.T());
        c = l.FormData && a instanceof l.FormData;
        !(0 <= ma$1(yd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        e.forEach(function (f, h) { this.g.setRequestHeader(h, f); }, this);
        this.J && (this.g.responseType = this.J);
        "withCredentials" in this.g && this.g.withCredentials !== this.L && (this.g.withCredentials = this.L);
        try {
            Ad(this), 0 < this.B && ((this.K = Bd(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = q$1(this.pa, this)) : this.A = Gb(this.pa, this.B, this)), this.v = !0, this.g.send(a), this.v = !1;
        }
        catch (f) {
            zd(this, f);
        }
    };
    function Bd(a) { return y && Ra$1() && "number" === typeof a.timeout && void 0 !== a.ontimeout; }
    function pa$1(a) { return "content-type" == a.toLowerCase(); }
    k$1.pa = function () { "undefined" != typeof goog && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, D$1(this, "timeout"), this.abort(8)); };
    function zd(a, b) { a.h = !1; a.g && (a.l = !0, a.g.abort(), a.l = !1); a.j = b; a.m = 5; Cd(a); Dd(a); }
    function Cd(a) { a.D || (a.D = !0, D$1(a, "complete"), D$1(a, "error")); }
    k$1.abort = function (a) { this.g && this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1, this.m = a || 7, D$1(this, "complete"), D$1(this, "abort"), Dd(this)); };
    k$1.M = function () { this.g && (this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1), Dd(this, !0)); X$1.Z.M.call(this); };
    k$1.Fa = function () { this.s || (this.F || this.v || this.l ? Ed(this) : this.cb()); };
    k$1.cb = function () { Ed(this); };
    function Ed(a) {
        if (a.h && "undefined" != typeof goog && (!a.C[1] || 4 != O$1(a) || 2 != a.ba()))
            if (a.v && 4 == O$1(a))
                Gb(a.Fa, 0, a);
            else if (D$1(a, "readystatechange"), 4 == O$1(a)) {
                a.h = !1;
                try {
                    var n = a.ba();
                    a: switch (n) {
                        case 200:
                        case 201:
                        case 202:
                        case 204:
                        case 206:
                        case 304:
                        case 1223:
                            var b = !0;
                            break a;
                        default: b = !1;
                    }
                    var c;
                    if (!(c = b)) {
                        var d;
                        if (d = 0 === n) {
                            var e = String(a.H).match(Mc$1)[1] || null;
                            if (!e && l.self && l.self.location) {
                                var f = l.self.location.protocol;
                                e = f.substr(0, f.length - 1);
                            }
                            d = !xd.test(e ? e.toLowerCase() : "");
                        }
                        c = d;
                    }
                    if (c)
                        D$1(a, "complete"), D$1(a, "success");
                    else {
                        a.m = 6;
                        try {
                            var h = 2 < O$1(a) ? a.g.statusText : "";
                        }
                        catch (u) {
                            h = "";
                        }
                        a.j = h + " [" + a.ba() + "]";
                        Cd(a);
                    }
                }
                finally {
                    Dd(a);
                }
            }
    }
    function Dd(a, b) { if (a.g) {
        Ad(a);
        var c = a.g, d = a.C[0] ? aa$1 : null;
        a.g = null;
        a.C = null;
        b || D$1(a, "ready");
        try {
            c.onreadystatechange = d;
        }
        catch (e) { }
    } }
    function Ad(a) { a.g && a.K && (a.g.ontimeout = null); a.A && (l.clearTimeout(a.A), a.A = null); }
    function O$1(a) { return a.g ? a.g.readyState : 0; }
    k$1.ba = function () { try {
        return 2 < O$1(this) ? this.g.status : -1;
    }
    catch (a) {
        return -1;
    } };
    k$1.ga = function () { try {
        return this.g ? this.g.responseText : "";
    }
    catch (a) {
        return "";
    } };
    k$1.Qa = function (a) { if (this.g) {
        var b = this.g.responseText;
        a && 0 == b.indexOf(a) && (b = b.substring(a.length));
        return vd(b);
    } };
    function oc$1(a) { try {
        if (!a.g)
            return null;
        if ("response" in a.g)
            return a.g.response;
        switch (a.J) {
            case wd:
            case "text": return a.g.responseText;
            case "arraybuffer": if ("mozResponseArrayBuffer" in a.g)
                return a.g.mozResponseArrayBuffer;
        }
        return null;
    }
    catch (b) {
        return null;
    } }
    k$1.Da = function () { return this.m; };
    k$1.La = function () { return "string" === typeof this.j ? this.j : String(this.j); };
    function Fd(a) { var b = ""; xa$1(a, function (c, d) { b += d; b += ":"; b += c; b += "\r\n"; }); return b; }
    function Gd(a, b, c) { a: {
        for (d in c) {
            var d = !1;
            break a;
        }
        d = !0;
    } d || (c = Fd(c), "string" === typeof a ? (null != c && encodeURIComponent(String(c))) : R$1(a, b, c)); }
    function Hd(a, b, c) { return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b; }
    function Id(a) {
        this.za = 0;
        this.l = [];
        this.h = new Mb;
        this.la = this.oa = this.F = this.W = this.g = this.sa = this.D = this.aa = this.o = this.P = this.s = null;
        this.Za = this.V = 0;
        this.Xa = Hd("failFast", !1, a);
        this.N = this.v = this.u = this.m = this.j = null;
        this.X = !0;
        this.I = this.ta = this.U = -1;
        this.Y = this.A = this.C = 0;
        this.Pa = Hd("baseRetryDelayMs", 5E3, a);
        this.$a = Hd("retryDelaySeedMs", 1E4, a);
        this.Ya = Hd("forwardChannelMaxRetries", 2, a);
        this.ra = Hd("forwardChannelRequestTimeoutMs", 2E4, a);
        this.qa = a && a.xmlHttpFactory || void 0;
        this.Ba = a && a.Yb || !1;
        this.K = void 0;
        this.H = a && a.supportsCrossDomainXhr || !1;
        this.J = "";
        this.i = new gd(a && a.concurrentRequestLimit);
        this.Ca = new ld;
        this.ja = a && a.fastHandshake || !1;
        this.Ra = a && a.Wb || !1;
        a && a.Aa && this.h.Aa();
        a && a.forceLongPolling && (this.X = !1);
        this.$ = !this.ja && this.X && a && a.detectBufferingProxy || !1;
        this.ka = void 0;
        this.O = 0;
        this.L = !1;
        this.B = null;
        this.Wa = !a || !1 !== a.Xb;
    }
    k$1 = Id.prototype;
    k$1.ma = 8;
    k$1.G = 1;
    function Ic$1(a) { Jd(a); if (3 == a.G) {
        var b = a.V++, c = N$1(a.F);
        R$1(c, "SID", a.J);
        R$1(c, "RID", b);
        R$1(c, "TYPE", "terminate");
        Kd(a, c);
        b = new M$1(a, a.h, b, void 0);
        b.K = 2;
        b.v = jc(N$1(c));
        c = !1;
        l.navigator && l.navigator.sendBeacon && (c = l.navigator.sendBeacon(b.v.toString(), ""));
        !c && l.Image && ((new Image).src = b.v, c = !0);
        c || (b.g = nc$1(b.l, null), b.g.ea(b.v));
        b.F = Date.now();
        lc$1(b);
    } Ld(a); }
    k$1.hb = function (a) { try {
        this.h.info("Origin Trials invoked: " + a);
    }
    catch (b) { } };
    function Ac$1(a) { a.g && (wc$1(a), a.g.cancel(), a.g = null); }
    function Jd(a) { Ac$1(a); a.u && (l.clearTimeout(a.u), a.u = null); zc(a); a.i.cancel(); a.m && ("number" === typeof a.m && l.clearTimeout(a.m), a.m = null); }
    function Md(a, b) { a.l.push(new fd(a.Za++, b)); 3 == a.G && Hc(a); }
    function Hc(a) { id(a.i) || a.m || (a.m = !0, zb(a.Ha, a), a.C = 0); }
    function Nd(a, b) { if (Cc$1(a.i) >= a.i.j - (a.m ? 1 : 0))
        return !1; if (a.m)
        return a.l = b.D.concat(a.l), !0; if (1 == a.G || 2 == a.G || a.C >= (a.Xa ? 0 : a.Ya))
        return !1; a.m = K$1(q$1(a.Ha, a, b), Od(a, a.C)); a.C++; return !0; }
    k$1.Ha = function (a) {
        if (this.m)
            if (this.m = null, 1 == this.G) {
                if (!a) {
                    this.V = Math.floor(1E5 * Math.random());
                    a = this.V++;
                    var e = new M$1(this, this.h, a, void 0);
                    var f = this.s;
                    this.P && (f ? (f = ya$1(f), Aa$1(f, this.P)) : f = this.P);
                    null === this.o && (e.H = f);
                    if (this.ja)
                        a: {
                            var b = 0;
                            for (var c = 0; c < this.l.length; c++) {
                                b: {
                                    var d = this.l[c];
                                    if ("__data__" in d.g && (d = d.g.__data__, "string" === typeof d)) {
                                        d = d.length;
                                        break b;
                                    }
                                    d = void 0;
                                }
                                if (void 0 === d)
                                    break;
                                b += d;
                                if (4096 < b) {
                                    b = c;
                                    break a;
                                }
                                if (4096 === b || c === this.l.length - 1) {
                                    b = c + 1;
                                    break a;
                                }
                            }
                            b = 1E3;
                        }
                    else
                        b = 1E3;
                    b =
                        Pd(this, e, b);
                    c = N$1(this.F);
                    R$1(c, "RID", a);
                    R$1(c, "CVER", 22);
                    this.D && R$1(c, "X-HTTP-Session-Id", this.D);
                    Kd(this, c);
                    this.o && f && Gd(c, this.o, f);
                    Dc$1(this.i, e);
                    this.Ra && R$1(c, "TYPE", "init");
                    this.ja ? (R$1(c, "$req", b), R$1(c, "SID", "null"), e.$ = !0, ic$1(e, c, null)) : ic$1(e, c, b);
                    this.G = 2;
                }
            }
            else
                3 == this.G && (a ? Qd(this, a) : 0 == this.l.length || id(this.i) || Qd(this));
    };
    function Qd(a, b) { var c; b ? c = b.m : c = a.V++; var d = N$1(a.F); R$1(d, "SID", a.J); R$1(d, "RID", c); R$1(d, "AID", a.U); Kd(a, d); a.o && a.s && Gd(d, a.o, a.s); c = new M$1(a, a.h, c, a.C + 1); null === a.o && (c.H = a.s); b && (a.l = b.D.concat(a.l)); b = Pd(a, c, 1E3); c.setTimeout(Math.round(.5 * a.ra) + Math.round(.5 * a.ra * Math.random())); Dc$1(a.i, c); ic$1(c, d, b); }
    function Kd(a, b) { a.j && Kc({}, function (c, d) { R$1(b, d, c); }); }
    function Pd(a, b, c) { c = Math.min(a.l.length, c); var d = a.j ? q$1(a.j.Oa, a.j, a) : null; a: {
        var e = a.l;
        var f = -1;
        for (;;) {
            var h = ["count=" + c];
            -1 == f ? 0 < c ? (f = e[0].h, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);
            var n = !0;
            for (var u = 0; u < c; u++) {
                var m = e[u].h;
                var r = e[u].g;
                m -= f;
                if (0 > m)
                    f = Math.max(0, e[u].h - 100), n = !1;
                else
                    try {
                        md(r, h, "req" + m + "_");
                    }
                    catch (G) {
                        d && d(r);
                    }
            }
            if (n) {
                d = h.join("&");
                break a;
            }
        }
    } a = a.l.splice(0, c); b.D = a; return d; }
    function Gc(a) { a.g || a.u || (a.Y = 1, zb(a.Ga, a), a.A = 0); }
    function Bc$1(a) { if (a.g || a.u || 3 <= a.A)
        return !1; a.Y++; a.u = K$1(q$1(a.Ga, a), Od(a, a.A)); a.A++; return !0; }
    k$1.Ga = function () { this.u = null; Rd(this); if (this.$ && !(this.L || null == this.g || 0 >= this.O)) {
        var a = 2 * this.O;
        this.h.info("BP detection timer enabled: " + a);
        this.B = K$1(q$1(this.bb, this), a);
    } };
    k$1.bb = function () { this.B && (this.B = null, this.h.info("BP detection timeout reached."), this.h.info("Buffering proxy detected and switch to long-polling!"), this.N = !1, this.L = !0, J$1(10), Ac$1(this), Rd(this)); };
    function wc$1(a) { null != a.B && (l.clearTimeout(a.B), a.B = null); }
    function Rd(a) { a.g = new M$1(a, a.h, "rpc", a.Y); null === a.o && (a.g.H = a.s); a.g.O = 0; var b = N$1(a.oa); R$1(b, "RID", "rpc"); R$1(b, "SID", a.J); R$1(b, "CI", a.N ? "0" : "1"); R$1(b, "AID", a.U); Kd(a, b); R$1(b, "TYPE", "xmlhttp"); a.o && a.s && Gd(b, a.o, a.s); a.K && a.g.setTimeout(a.K); var c = a.g; a = a.la; c.K = 1; c.v = jc(N$1(b)); c.s = null; c.U = !0; kc$1(c, a); }
    k$1.ab = function () { null != this.v && (this.v = null, Ac$1(this), Bc$1(this), J$1(19)); };
    function zc(a) { null != a.v && (l.clearTimeout(a.v), a.v = null); }
    function uc$1(a, b) { var c = null; if (a.g == b) {
        zc(a);
        wc$1(a);
        a.g = null;
        var d = 2;
    }
    else if (yc$1(a.i, b))
        c = b.D, Fc$1(a.i, b), d = 1;
    else
        return; a.I = b.N; if (0 != a.G)
        if (b.i)
            if (1 == d) {
                c = b.s ? b.s.length : 0;
                b = Date.now() - b.F;
                var e = a.C;
                d = Sb();
                D$1(d, new Vb(d, c, b, e));
                Hc(a);
            }
            else
                Gc(a);
        else if (e = b.o, 3 == e || 0 == e && 0 < a.I || !(1 == d && Nd(a, b) || 2 == d && Bc$1(a)))
            switch (c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e) {
                case 1:
                    Q$1(a, 5);
                    break;
                case 4:
                    Q$1(a, 10);
                    break;
                case 3:
                    Q$1(a, 6);
                    break;
                default: Q$1(a, 2);
            } }
    function Od(a, b) { var c = a.Pa + Math.floor(Math.random() * a.$a); a.j || (c *= 2); return c * b; }
    function Q$1(a, b) { a.h.info("Error code " + b); if (2 == b) {
        var c = null;
        a.j && (c = null);
        var d = q$1(a.jb, a);
        c || (c = new U$1("//www.google.com/images/cleardot.gif"), l.location && "http" == l.location.protocol || Oc$1(c, "https"), jc(c));
        nd(c.toString(), d);
    }
    else
        J$1(2); a.G = 0; a.j && a.j.va(b); Ld(a); Jd(a); }
    k$1.jb = function (a) { a ? (this.h.info("Successfully pinged google.com"), J$1(2)) : (this.h.info("Failed to ping google.com"), J$1(1)); };
    function Ld(a) { a.G = 0; a.I = -1; if (a.j) {
        if (0 != jd(a.i).length || 0 != a.l.length)
            a.i.i.length = 0, ra$1(a.l), a.l.length = 0;
        a.j.ua();
    } }
    function Ec$1(a, b, c) { var d = ad(c); if ("" != d.i)
        b && Pc$1(d, b + "." + d.i), Qc(d, d.m);
    else {
        var e = l.location;
        d = bd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
    } a.aa && xa$1(a.aa, function (e, f) { R$1(d, f, e); }); b = a.D; c = a.sa; b && c && R$1(d, b, c); R$1(d, "VER", a.ma); Kd(a, d); return d; }
    function nc$1(a, b, c) { if (b && !a.H)
        throw Error("Can't create secondary domain capable XhrIo object."); b = c && a.Ba && !a.qa ? new X$1(new pd({ ib: !0 })) : new X$1(a.qa); b.L = a.H; return b; }
    function Sd() { }
    k$1 = Sd.prototype;
    k$1.xa = function () { };
    k$1.wa = function () { };
    k$1.va = function () { };
    k$1.ua = function () { };
    k$1.Oa = function () { };
    function Td() { if (y && !(10 <= Number(Ua$1)))
        throw Error("Environmental error: no available transport."); }
    Td.prototype.g = function (a, b) { return new Y$1(a, b); };
    function Y$1(a, b) {
        C$1.call(this);
        this.g = new Id(b);
        this.l = a;
        this.h = b && b.messageUrlParams || null;
        a = b && b.messageHeaders || null;
        b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
        this.g.s = a;
        a = b && b.initMessageHeaders || null;
        b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
        b && b.ya && (a ? a["X-WebChannel-Client-Profile"] = b.ya : a = { "X-WebChannel-Client-Profile": b.ya });
        this.g.P =
            a;
        (a = b && b.httpHeadersOverwriteParam) && !sa$1(a) && (this.g.o = a);
        this.A = b && b.supportsCrossDomainXhr || !1;
        this.v = b && b.sendRawJson || !1;
        (b = b && b.httpSessionIdParam) && !sa$1(b) && (this.g.D = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));
        this.j = new Z$1(this);
    }
    t(Y$1, C$1);
    Y$1.prototype.m = function () { this.g.j = this.j; this.A && (this.g.H = !0); var a = this.g, b = this.l, c = this.h || void 0; a.Wa && (a.h.info("Origin Trials enabled."), zb(q$1(a.hb, a, b))); J$1(0); a.W = b; a.aa = c || {}; a.N = a.X; a.F = Ec$1(a, null, a.W); Hc(a); };
    Y$1.prototype.close = function () { Ic$1(this.g); };
    Y$1.prototype.u = function (a) { if ("string" === typeof a) {
        var b = {};
        b.__data__ = a;
        Md(this.g, b);
    }
    else
        this.v ? (b = {}, b.__data__ = rb(a), Md(this.g, b)) : Md(this.g, a); };
    Y$1.prototype.M = function () { this.g.j = null; delete this.j; Ic$1(this.g); delete this.g; Y$1.Z.M.call(this); };
    function Ud(a) { ac$1.call(this); var b = a.__sm__; if (b) {
        a: {
            for (var c in b) {
                a = c;
                break a;
            }
            a = void 0;
        }
        if (this.i = a)
            a = this.i, b = null !== b && a in b ? b[a] : void 0;
        this.data = b;
    }
    else
        this.data = a; }
    t(Ud, ac$1);
    function Vd() { bc$1.call(this); this.status = 1; }
    t(Vd, bc$1);
    function Z$1(a) { this.g = a; }
    t(Z$1, Sd);
    Z$1.prototype.xa = function () { D$1(this.g, "a"); };
    Z$1.prototype.wa = function (a) { D$1(this.g, new Ud(a)); };
    Z$1.prototype.va = function (a) { D$1(this.g, new Vd(a)); };
    Z$1.prototype.ua = function () { D$1(this.g, "b"); }; /*

     Copyright 2017 Google LLC

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    */
    Td.prototype.createWebChannel = Td.prototype.g;
    Y$1.prototype.send = Y$1.prototype.u;
    Y$1.prototype.open = Y$1.prototype.m;
    Y$1.prototype.close = Y$1.prototype.close;
    Wb.NO_ERROR = 0;
    Wb.TIMEOUT = 8;
    Wb.HTTP_ERROR = 6;
    Xb.COMPLETE = "complete";
    $b.EventType = L$1;
    L$1.OPEN = "a";
    L$1.CLOSE = "b";
    L$1.ERROR = "c";
    L$1.MESSAGE = "d";
    C$1.prototype.listen = C$1.prototype.N;
    X$1.prototype.listenOnce = X$1.prototype.O;
    X$1.prototype.getLastError = X$1.prototype.La;
    X$1.prototype.getLastErrorCode = X$1.prototype.Da;
    X$1.prototype.getStatus = X$1.prototype.ba;
    X$1.prototype.getResponseJson = X$1.prototype.Qa;
    X$1.prototype.getResponseText = X$1.prototype.ga;
    X$1.prototype.send = X$1.prototype.ea;
    var createWebChannelTransport = function () { return new Td; };
    var getStatEventTarget = function () { return Sb(); };
    var ErrorCode$1 = Wb;
    var EventType = Xb;
    var Event = H$1;
    var Stat = { rb: 0, ub: 1, vb: 2, Ob: 3, Tb: 4, Qb: 5, Rb: 6, Pb: 7, Nb: 8, Sb: 9, PROXY: 10, NOPROXY: 11, Lb: 12, Hb: 13, Ib: 14, Gb: 15, Jb: 16, Kb: 17, nb: 18, mb: 19, ob: 20 };
    var FetchXmlHttpFactory = pd;
    var WebChannel = $b;
    var XhrIo = X$1;

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
     * exceed. All subsequent calls to next will return increasing values. If provided with a
     * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
     * well as write out sequence numbers that it produces via `next()`.
     */ var _ = /** @class */ function() {
        function t(t, e) {
            var n = this;
            this.previousValue = t, e && (e.sequenceNumberHandler = function(t) {
                return n.t(t);
            }, this.i = function(t) {
                return e.writeSequenceNumber(t);
            });
        }
        return t.prototype.t = function(t) {
            return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
        }, t.prototype.next = function() {
            var t = ++this.previousValue;
            return this.i && this.i(t), t;
        }, t;
    }();

    _.o = -1;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var S = {
        // Causes are copied from:
        // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
        /** Not an error; returned on success. */
        OK: "ok",
        /** The operation was cancelled (typically by the caller). */
        CANCELLED: "cancelled",
        /** Unknown error or an error from a different error domain. */
        UNKNOWN: "unknown",
        /**
         * Client specified an invalid argument. Note that this differs from
         * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
         * problematic regardless of the state of the system (e.g., a malformed file
         * name).
         */
        INVALID_ARGUMENT: "invalid-argument",
        /**
         * Deadline expired before operation could complete. For operations that
         * change the state of the system, this error may be returned even if the
         * operation has completed successfully. For example, a successful response
         * from a server could have been delayed long enough for the deadline to
         * expire.
         */
        DEADLINE_EXCEEDED: "deadline-exceeded",
        /** Some requested entity (e.g., file or directory) was not found. */
        NOT_FOUND: "not-found",
        /**
         * Some entity that we attempted to create (e.g., file or directory) already
         * exists.
         */
        ALREADY_EXISTS: "already-exists",
        /**
         * The caller does not have permission to execute the specified operation.
         * PERMISSION_DENIED must not be used for rejections caused by exhausting
         * some resource (use RESOURCE_EXHAUSTED instead for those errors).
         * PERMISSION_DENIED must not be used if the caller can not be identified
         * (use UNAUTHENTICATED instead for those errors).
         */
        PERMISSION_DENIED: "permission-denied",
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        UNAUTHENTICATED: "unauthenticated",
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
         * entire file system is out of space.
         */
        RESOURCE_EXHAUSTED: "resource-exhausted",
        /**
         * Operation was rejected because the system is not in a state required for
         * the operation's execution. For example, directory to be deleted may be
         * non-empty, an rmdir operation is applied to a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *  (a) Use UNAVAILABLE if the client can retry just the failing call.
         *  (b) Use ABORTED if the client should retry at a higher-level
         *      (e.g., restarting a read-modify-write sequence).
         *  (c) Use FAILED_PRECONDITION if the client should not retry until
         *      the system state has been explicitly fixed. E.g., if an "rmdir"
         *      fails because the directory is non-empty, FAILED_PRECONDITION
         *      should be returned since the client should not retry unless
         *      they have first fixed up the directory by deleting files from it.
         *  (d) Use FAILED_PRECONDITION if the client performs conditional
         *      REST Get/Update/Delete on a resource and the resource on the
         *      server does not match the condition. E.g., conflicting
         *      read-modify-write on the same resource.
         */
        FAILED_PRECONDITION: "failed-precondition",
        /**
         * The operation was aborted, typically due to a concurrency issue like
         * sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        ABORTED: "aborted",
        /**
         * Operation was attempted past the valid range. E.g., seeking or reading
         * past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
         * if the system state changes. For example, a 32-bit file system will
         * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
         * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
         * an offset past the current file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
         * when it applies so that callers who are iterating through a space can
         * easily look for an OUT_OF_RANGE error to detect when they are done.
         */
        OUT_OF_RANGE: "out-of-range",
        /** Operation is not implemented or not supported/enabled in this service. */
        UNIMPLEMENTED: "unimplemented",
        /**
         * Internal errors. Means some invariants expected by underlying System has
         * been broken. If you see one of these errors, Something is very broken.
         */
        INTERNAL: "internal",
        /**
         * The service is currently unavailable. This is a most likely a transient
         * condition and may be corrected by retrying with a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        UNAVAILABLE: "unavailable",
        /** Unrecoverable data loss or corruption. */
        DATA_LOSS: "data-loss"
    }, N = /** @class */ function(e) {
        /** @hideconstructor */
        function n(
        /**
         * The backend error code associated with this error.
         */
        t, 
        /**
         * A custom error description.
         */
        n) {
            var r = this;
            return (r = e.call(this, n) || this).code = t, r.message = n, 
            /** The custom name for all FirestoreErrors. */
            r.name = "FirebaseError", 
            // HACK: We write a toString property directly because Error is not a real
            // class and so inheritance does not work correctly. We could alternatively
            // do the same "back-door inheritance" trick that FirebaseError does.
            r.toString = function() {
                return r.name + ": [code=" + r.code + "]: " + r.message;
            }, r;
        }
        return __extends$1(n, e), n;
    }(Error), D = new Logger("@firebase/firestore");

    /** An error returned by a Firestore operation. */
    // Helper methods are needed because variables can't be exported as read/write
    function A() {
        return D.logLevel;
    }

    /**
     * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
     *
     * @param logLevel - The verbosity you set for activity and error logging. Can
     *   be any of the following values:
     *
     *   <ul>
     *     <li>`debug` for the most verbose logging level, primarily for
     *     debugging.</li>
     *     <li>`error` to log errors only.</li>
     *     <li><code>`silent` to turn off logging.</li>
     *   </ul>
     */ function k(t) {
        for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
        if (D.logLevel <= LogLevel.DEBUG) {
            var i = n.map(R);
            D.debug.apply(D, __spreadArray([ "Firestore (8.7.0): " + t ], i));
        }
    }

    function C(t) {
        for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
        if (D.logLevel <= LogLevel.ERROR) {
            var i = n.map(R);
            D.error.apply(D, __spreadArray([ "Firestore (8.7.0): " + t ], i));
        }
    }

    function x(t) {
        for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
        if (D.logLevel <= LogLevel.WARN) {
            var i = n.map(R);
            D.warn.apply(D, __spreadArray([ "Firestore (8.7.0): " + t ], i));
        }
    }

    /**
     * Converts an additional log parameter to a string representation.
     */ function R(t) {
        if ("string" == typeof t) return t;
        try {
            return e = t, JSON.stringify(e);
        } catch (e) {
            // Converting to JSON failed, just log the object directly
            return t;
        }
        var e;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unconditionally fails, throwing an Error with the given message.
     * Messages are stripped in production builds.
     *
     * Returns `never` and can be used in expressions:
     * @example
     * let futureVar = fail('not implemented yet');
     */ function L(t) {
        void 0 === t && (t = "Unexpected state");
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
            var e = "FIRESTORE (8.7.0) INTERNAL ASSERTION FAILED: " + t;
        // NOTE: We don't use FirestoreError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
            throw C(e), new Error(e)
        /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * Messages are stripped in production builds.
     */;
    }

    function O(t, e) {
        t || L();
    }

    /**
     * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
     * instance of `T` before casting.
     */ function P$1(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Generates `nBytes` of random bytes.
     *
     * If `nBytes < 0` , an error will be thrown.
     */ function F(t) {
        // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
        var e = 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
        if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else 
        // Falls back to Math.random
        for (var r = 0; r < t; r++) n[r] = Math.floor(256 * Math.random());
        return n;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var M = /** @class */ function() {
        function t() {}
        return t.u = function() {
            for (
            // Alphanumeric characters
            var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length, n = ""
            // The largest byte value that is a multiple of `char.length`.
            ; n.length < 20; ) for (var r = F(40), i = 0; i < r.length; ++i) 
            // Only accept values that are [0, maxMultiple), this ensures they can
            // be evenly mapped to indices of `chars` via a modulo operation.
            n.length < 20 && r[i] < e && (n += t.charAt(r[i] % t.length));
            return n;
        }, t;
    }();

    function V(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }

    /** Helper to compare arrays using isEqual(). */ function q(t, e, n) {
        return t.length === e.length && t.every((function(t, r) {
            return n(t, e[r]);
        }));
    }

    /**
     * Returns the immediate lexicographically-following string. This is useful to
     * construct an inclusive range for indexeddb iterators.
     */ function U(t) {
        // Return the input string, with an additional NUL byte appended.
        return t + "\0";
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
    /**
     * A `Timestamp` represents a point in time independent of any time zone or
     * calendar, represented as seconds and fractions of seconds at nanosecond
     * resolution in UTC Epoch time.
     *
     * It is encoded using the Proleptic Gregorian Calendar which extends the
     * Gregorian calendar backwards to year one. It is encoded assuming all minutes
     * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
     * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59.999999999Z.
     *
     * For examples and further specifications, refer to the
     * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
     */ var B = /** @class */ function() {
        /**
         * Creates a new timestamp.
         *
         * @param seconds - The number of seconds of UTC time since Unix epoch
         *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         *     9999-12-31T23:59:59Z inclusive.
         * @param nanoseconds - The non-negative fractions of a second at nanosecond
         *     resolution. Negative second values with fractions must still have
         *     non-negative nanoseconds values that count forward in time. Must be
         *     from 0 to 999,999,999 inclusive.
         */
        function t(
        /**
         * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
         */
        t, 
        /**
         * The fractions of a second at nanosecond resolution.*
         */
        e) {
            if (this.seconds = t, this.nanoseconds = e, e < 0) throw new N(S.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (e >= 1e9) throw new N(S.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (t < -62135596800) throw new N(S.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
            // This will break in the year 10,000.
                    if (t >= 253402300800) throw new N(S.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        }
        /**
         * Creates a new timestamp with the current date, with millisecond precision.
         *
         * @returns a new timestamp representing the current date.
         */    return t.now = function() {
            return t.fromMillis(Date.now());
        }, 
        /**
         * Creates a new timestamp from the given date.
         *
         * @param date - The date to initialize the `Timestamp` from.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     date.
         */
        t.fromDate = function(e) {
            return t.fromMillis(e.getTime());
        }, 
        /**
         * Creates a new timestamp from the given number of milliseconds.
         *
         * @param milliseconds - Number of milliseconds since Unix epoch
         *     1970-01-01T00:00:00Z.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     number of milliseconds.
         */
        t.fromMillis = function(e) {
            var n = Math.floor(e / 1e3);
            return new t(n, Math.floor(1e6 * (e - 1e3 * n)));
        }, 
        /**
         * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
         * causes a loss of precision since `Date` objects only support millisecond
         * precision.
         *
         * @returns JavaScript `Date` object representing the same point in time as
         *     this `Timestamp`, with millisecond precision.
         */
        t.prototype.toDate = function() {
            return new Date(this.toMillis());
        }, 
        /**
         * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
         * epoch). This operation causes a loss of precision.
         *
         * @returns The point in time corresponding to this timestamp, represented as
         *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
         */
        t.prototype.toMillis = function() {
            return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }, t.prototype._compareTo = function(t) {
            return this.seconds === t.seconds ? V(this.nanoseconds, t.nanoseconds) : V(this.seconds, t.seconds);
        }, 
        /**
         * Returns true if this `Timestamp` is equal to the provided one.
         *
         * @param other - The `Timestamp` to compare against.
         * @returns true if this `Timestamp` is equal to the provided one.
         */
        t.prototype.isEqual = function(t) {
            return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
        }, 
        /** Returns a textual representation of this Timestamp. */ t.prototype.toString = function() {
            return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        }, 
        /** Returns a JSON-serializable representation of this Timestamp. */ t.prototype.toJSON = function() {
            return {
                seconds: this.seconds,
                nanoseconds: this.nanoseconds
            };
        }, 
        /**
         * Converts this object to a primitive string, which allows Timestamp objects
         * to be compared using the `>`, `<=`, `>=` and `>` operators.
         */
        t.prototype.valueOf = function() {
            // This method returns a string of the form <seconds>.<nanoseconds> where
            // <seconds> is translated to have a non-negative value and both <seconds>
            // and <nanoseconds> are left-padded with zeroes to be a consistent length.
            // Strings with this format then have a lexiographical ordering that matches
            // the expected ordering. The <seconds> translation is done to avoid having
            // a leading negative sign (i.e. a leading '-' character) in its string
            // representation, which would affect its lexiographical ordering.
            var t = this.seconds - -62135596800;
            // Note: Up to 12 decimal digits are required to represent all valid
            // 'seconds' values.
                    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
        }, t;
    }(), j = /** @class */ function() {
        function t(t) {
            this.timestamp = t;
        }
        return t.fromTimestamp = function(e) {
            return new t(e);
        }, t.min = function() {
            return new t(new B(0, 0));
        }, t.prototype.compareTo = function(t) {
            return this.timestamp._compareTo(t.timestamp);
        }, t.prototype.isEqual = function(t) {
            return this.timestamp.isEqual(t.timestamp);
        }, 
        /** Returns a number representation of the version for use in spec tests. */ t.prototype.toMicroseconds = function() {
            // Convert to microseconds.
            return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }, t.prototype.toString = function() {
            return "SnapshotVersion(" + this.timestamp.toString() + ")";
        }, t.prototype.toTimestamp = function() {
            return this.timestamp;
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A version of a document in Firestore. This corresponds to the version
     * timestamp, such as update_time or read_time.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function K(t) {
        var e = 0;
        for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
        return e;
    }

    function Q(t, e) {
        for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
    }

    function G(t) {
        for (var e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
        return !0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Path represents an ordered sequence of string segments.
     */ var z = /** @class */ function() {
        function t(t, e, n) {
            void 0 === e ? e = 0 : e > t.length && L(), void 0 === n ? n = t.length - e : n > t.length - e && L(), 
            this.segments = t, this.offset = e, this.len = n;
        }
        return Object.defineProperty(t.prototype, "length", {
            get: function() {
                return this.len;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(e) {
            return 0 === t.comparator(this, e);
        }, t.prototype.child = function(e) {
            var n = this.segments.slice(this.offset, this.limit());
            return e instanceof t ? e.forEach((function(t) {
                n.push(t);
            })) : n.push(e), this.construct(n);
        }, 
        /** The index of one past the last segment of the path. */ t.prototype.limit = function() {
            return this.offset + this.length;
        }, t.prototype.popFirst = function(t) {
            return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
        }, t.prototype.popLast = function() {
            return this.construct(this.segments, this.offset, this.length - 1);
        }, t.prototype.firstSegment = function() {
            return this.segments[this.offset];
        }, t.prototype.lastSegment = function() {
            return this.get(this.length - 1);
        }, t.prototype.get = function(t) {
            return this.segments[this.offset + t];
        }, t.prototype.isEmpty = function() {
            return 0 === this.length;
        }, t.prototype.isPrefixOf = function(t) {
            if (t.length < this.length) return !1;
            for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }, t.prototype.isImmediateParentOf = function(t) {
            if (this.length + 1 !== t.length) return !1;
            for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }, t.prototype.forEach = function(t) {
            for (var e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
        }, t.prototype.toArray = function() {
            return this.segments.slice(this.offset, this.limit());
        }, t.comparator = function(t, e) {
            for (var n = Math.min(t.length, e.length), r = 0; r < n; r++) {
                var i = t.get(r), o = e.get(r);
                if (i < o) return -1;
                if (i > o) return 1;
            }
            return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
        }, t;
    }(), W = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends$1(n, e), n.prototype.construct = function(t, e, r) {
            return new n(t, e, r);
        }, n.prototype.canonicalString = function() {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            return this.toArray().join("/");
        }, n.prototype.toString = function() {
            return this.canonicalString();
        }, 
        /**
         * Creates a resource path from the given slash-delimited string. If multiple
         * arguments are provided, all components are combined. Leading and trailing
         * slashes from all components are ignored.
         */
        n.fromString = function() {
            for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
                    for (var r = [], i = 0, o = t; i < o.length; i++) {
                var s = o[i];
                if (s.indexOf("//") >= 0) throw new N(S.INVALID_ARGUMENT, "Invalid segment (" + s + "). Paths must not contain // in them.");
                // Strip leading and traling slashed.
                            r.push.apply(r, s.split("/").filter((function(t) {
                    return t.length > 0;
                })));
            }
            return new n(r);
        }, n.emptyPath = function() {
            return new n([]);
        }, n;
    }(z), H = /^[_a-zA-Z][_a-zA-Z0-9]*$/, Y = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends$1(n, e), n.prototype.construct = function(t, e, r) {
            return new n(t, e, r);
        }, 
        /**
         * Returns true if the string could be used as a segment in a field path
         * without escaping.
         */
        n.isValidIdentifier = function(t) {
            return H.test(t);
        }, n.prototype.canonicalString = function() {
            return this.toArray().map((function(t) {
                return t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), n.isValidIdentifier(t) || (t = "`" + t + "`"), 
                t;
            })).join(".");
        }, n.prototype.toString = function() {
            return this.canonicalString();
        }, 
        /**
         * Returns true if this field references the key of a document.
         */
        n.prototype.isKeyField = function() {
            return 1 === this.length && "__name__" === this.get(0);
        }, 
        /**
         * The field designating the key of a document.
         */
        n.keyField = function() {
            return new n([ "__name__" ]);
        }, 
        /**
         * Parses a field string from the given server-formatted string.
         *
         * - Splitting the empty string is not allowed (for now at least).
         * - Empty segments within the string (e.g. if there are two consecutive
         *   separators) are not allowed.
         *
         * TODO(b/37244157): we should make this more strict. Right now, it allows
         * non-identifier path components, even if they aren't escaped.
         */
        n.fromServerFormat = function(t) {
            for (var e = [], r = "", i = 0, o = function() {
                if (0 === r.length) throw new N(S.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
                e.push(r), r = "";
            }, s = !1; i < t.length; ) {
                var u = t[i];
                if ("\\" === u) {
                    if (i + 1 === t.length) throw new N(S.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                    var a = t[i + 1];
                    if ("\\" !== a && "." !== a && "`" !== a) throw new N(S.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                    r += a, i += 2;
                } else "`" === u ? (s = !s, i++) : "." !== u || s ? (r += u, i++) : (o(), i++);
            }
            if (o(), s) throw new N(S.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
            return new n(e);
        }, n.emptyPath = function() {
            return new n([]);
        }, n;
    }(z), $ = /** @class */ function() {
        function t(t) {
            this.fields = t, 
            // TODO(dimond): validation of FieldMask
            // Sort the field mask to support `FieldMask.isEqual()` and assert below.
            t.sort(Y.comparator)
            /**
         * Verifies that `fieldPath` is included by at least one field in this field
         * mask.
         *
         * This is an O(n) operation, where `n` is the size of the field mask.
         */;
        }
        return t.prototype.covers = function(t) {
            for (var e = 0, n = this.fields; e < n.length; e++) {
                if (n[e].isPrefixOf(t)) return !0;
            }
            return !1;
        }, t.prototype.isEqual = function(t) {
            return q(this.fields, t.fields, (function(t, e) {
                return t.isEqual(e);
            }));
        }, t;
    }(), X = /** @class */ function() {
        function t(t) {
            this.binaryString = t;
        }
        return t.fromBase64String = function(e) {
            return new t(atob(e));
        }, t.fromUint8Array = function(e) {
            return new t(
            /**
     * Helper function to convert an Uint8array to a binary string.
     */
            function(t) {
                for (var e = "", n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
                return e;
            }(e));
        }, t.prototype.toBase64 = function() {
            return t = this.binaryString, btoa(t);
            /** Converts a binary string to a Base64 encoded string. */        var t;
            /** True if and only if the Base64 conversion functions are available. */    }, 
        t.prototype.toUint8Array = function() {
            return function(t) {
                for (var e = new Uint8Array(t.length), n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
                return e;
            }(this.binaryString);
        }, t.prototype.approximateByteSize = function() {
            return 2 * this.binaryString.length;
        }, t.prototype.compareTo = function(t) {
            return V(this.binaryString, t.binaryString);
        }, t.prototype.isEqual = function(t) {
            return this.binaryString === t.binaryString;
        }, t;
    }();

    /**
     * A slash-separated path for navigating resources (documents and collections)
     * within Firestore.
     */ X.EMPTY_BYTE_STRING = new X("");

    var J = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

    /**
     * Converts the possible Proto values for a timestamp value into a "seconds and
     * nanos" representation.
     */ function Z(t) {
        // The json interface (for the browser) will return an iso timestamp string,
        // while the proto js library (for node) will return a
        // google.protobuf.Timestamp instance.
        if (O(!!t), "string" == typeof t) {
            // The date string can have higher precision (nanos) than the Date class
            // (millis), so we do some custom parsing here.
            // Parse the nanos right out of the string.
            var e = 0, n = J.exec(t);
            if (O(!!n), n[1]) {
                // Pad the fraction out to 9 digits (nanos).
                var r = n[1];
                r = (r + "000000000").substr(0, 9), e = Number(r);
            }
            // Parse the date to get the seconds.
                    var i = new Date(t);
            return {
                seconds: Math.floor(i.getTime() / 1e3),
                nanos: e
            };
        }
        return {
            seconds: tt(t.seconds),
            nanos: tt(t.nanos)
        };
    }

    /**
     * Converts the possible Proto types for numbers into a JavaScript number.
     * Returns 0 if the value is not numeric.
     */ function tt(t) {
        // TODO(bjornick): Handle int64 greater than 53 bits.
        return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }

    /** Converts the possible Proto types for Blobs into a ByteString. */ function et(t) {
        return "string" == typeof t ? X.fromBase64String(t) : X.fromUint8Array(t);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a locally-applied ServerTimestamp.
     *
     * Server Timestamps are backed by MapValues that contain an internal field
     * `__type__` with a value of `server_timestamp`. The previous value and local
     * write time are stored in its `__previous_value__` and `__local_write_time__`
     * fields respectively.
     *
     * Notes:
     * - ServerTimestampValue instances are created as the result of applying a
     *   transform. They can only exist in the local view of a document. Therefore
     *   they do not need to be parsed or serialized.
     * - When evaluated locally (e.g. for snapshot.data()), they by default
     *   evaluate to `null`. This behavior can be configured by passing custom
     *   FieldValueOptions to value().
     * - With respect to other ServerTimestampValues, they sort by their
     *   localWriteTime.
     */ function nt(t) {
        var e, n;
        return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
    }

    /**
     * Creates a new ServerTimestamp proto value (using the internal format).
     */
    /**
     * Returns the value of the field before this ServerTimestamp was set.
     *
     * Preserving the previous values allows the user to display the last resoled
     * value until the backend responds with the timestamp.
     */ function rt(t) {
        var e = t.mapValue.fields.__previous_value__;
        return nt(e) ? rt(e) : e;
    }

    /**
     * Returns the local time at which this timestamp was first set.
     */ function it(t) {
        var e = Z(t.mapValue.fields.__local_write_time__.timestampValue);
        return new B(e.seconds, e.nanos);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Sentinel value that sorts before any Mutation Batch ID. */
    /**
     * Returns whether a variable is either undefined or null.
     */ function ot(t) {
        return null == t;
    }

    /** Returns whether the value represents -0. */ function st(t) {
        // Detect if the value is -0.0. Based on polyfill from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        return 0 === t && 1 / t == -1 / 0;
    }

    /**
     * Returns whether a value is an integer and in the safe integer range
     * @param value - The value to test for being an integer and in the safe range
     */ function ut(t) {
        return "number" == typeof t && Number.isInteger(t) && !st(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var at = /** @class */ function() {
        function t(t) {
            this.path = t;
        }
        return t.fromPath = function(e) {
            return new t(W.fromString(e));
        }, t.fromName = function(e) {
            return new t(W.fromString(e).popFirst(5));
        }, 
        /** Returns true if the document is in the specified collectionId. */ t.prototype.hasCollectionId = function(t) {
            return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
        }, t.prototype.isEqual = function(t) {
            return null !== t && 0 === W.comparator(this.path, t.path);
        }, t.prototype.toString = function() {
            return this.path.toString();
        }, t.comparator = function(t, e) {
            return W.comparator(t.path, e.path);
        }, t.isDocumentKey = function(t) {
            return t.length % 2 == 0;
        }, 
        /**
         * Creates and returns a new document key with the given segments.
         *
         * @param segments - The segments of the path to the document
         * @returns A new instance of DocumentKey
         */
        t.fromSegments = function(e) {
            return new t(new W(e.slice()));
        }, t;
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Extracts the backend's type order for the provided value. */ function ct(t) {
        return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? nt(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : L();
    }

    /** Tests `left` and `right` for equality based on the backend semantics. */ function ht(t, e) {
        var n = ct(t);
        if (n !== ct(e)) return !1;
        switch (n) {
          case 0 /* NullValue */ :
            return !0;

          case 1 /* BooleanValue */ :
            return t.booleanValue === e.booleanValue;

          case 4 /* ServerTimestampValue */ :
            return it(t).isEqual(it(e));

          case 3 /* TimestampValue */ :
            return function(t, e) {
                if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
                // Use string equality for ISO 8601 timestamps
                return t.timestampValue === e.timestampValue;
                var n = Z(t.timestampValue), r = Z(e.timestampValue);
                return n.seconds === r.seconds && n.nanos === r.nanos;
            }(t, e);

          case 5 /* StringValue */ :
            return t.stringValue === e.stringValue;

          case 6 /* BlobValue */ :
            return function(t, e) {
                return et(t.bytesValue).isEqual(et(e.bytesValue));
            }(t, e);

          case 7 /* RefValue */ :
            return t.referenceValue === e.referenceValue;

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                return tt(t.geoPointValue.latitude) === tt(e.geoPointValue.latitude) && tt(t.geoPointValue.longitude) === tt(e.geoPointValue.longitude);
            }(t, e);

          case 2 /* NumberValue */ :
            return function(t, e) {
                if ("integerValue" in t && "integerValue" in e) return tt(t.integerValue) === tt(e.integerValue);
                if ("doubleValue" in t && "doubleValue" in e) {
                    var n = tt(t.doubleValue), r = tt(e.doubleValue);
                    return n === r ? st(n) === st(r) : isNaN(n) && isNaN(r);
                }
                return !1;
            }(t, e);

          case 9 /* ArrayValue */ :
            return q(t.arrayValue.values || [], e.arrayValue.values || [], ht);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                var n = t.mapValue.fields || {}, r = e.mapValue.fields || {};
                if (K(n) !== K(r)) return !1;
                for (var i in n) if (n.hasOwnProperty(i) && (void 0 === r[i] || !ht(n[i], r[i]))) return !1;
                return !0;
            }(t, e);

          default:
            return L();
        }
    }

    function ft(t, e) {
        return void 0 !== (t.values || []).find((function(t) {
            return ht(t, e);
        }));
    }

    function lt(t, e) {
        var n = ct(t), r = ct(e);
        if (n !== r) return V(n, r);
        switch (n) {
          case 0 /* NullValue */ :
            return 0;

          case 1 /* BooleanValue */ :
            return V(t.booleanValue, e.booleanValue);

          case 2 /* NumberValue */ :
            return function(t, e) {
                var n = tt(t.integerValue || t.doubleValue), r = tt(e.integerValue || e.doubleValue);
                return n < r ? -1 : n > r ? 1 : n === r ? 0 : 
                // one or both are NaN.
                isNaN(n) ? isNaN(r) ? 0 : -1 : 1;
            }(t, e);

          case 3 /* TimestampValue */ :
            return dt(t.timestampValue, e.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return dt(it(t), it(e));

          case 5 /* StringValue */ :
            return V(t.stringValue, e.stringValue);

          case 6 /* BlobValue */ :
            return function(t, e) {
                var n = et(t), r = et(e);
                return n.compareTo(r);
            }(t.bytesValue, e.bytesValue);

          case 7 /* RefValue */ :
            return function(t, e) {
                for (var n = t.split("/"), r = e.split("/"), i = 0; i < n.length && i < r.length; i++) {
                    var o = V(n[i], r[i]);
                    if (0 !== o) return o;
                }
                return V(n.length, r.length);
            }(t.referenceValue, e.referenceValue);

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                var n = V(tt(t.latitude), tt(e.latitude));
                return 0 !== n ? n : V(tt(t.longitude), tt(e.longitude));
            }(t.geoPointValue, e.geoPointValue);

          case 9 /* ArrayValue */ :
            return function(t, e) {
                for (var n = t.values || [], r = e.values || [], i = 0; i < n.length && i < r.length; ++i) {
                    var o = lt(n[i], r[i]);
                    if (o) return o;
                }
                return V(n.length, r.length);
            }(t.arrayValue, e.arrayValue);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                var n = t.fields || {}, r = Object.keys(n), i = e.fields || {}, o = Object.keys(i);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                            r.sort(), o.sort();
                for (var s = 0; s < r.length && s < o.length; ++s) {
                    var u = V(r[s], o[s]);
                    if (0 !== u) return u;
                    var a = lt(n[r[s]], i[o[s]]);
                    if (0 !== a) return a;
                }
                return V(r.length, o.length);
            }(t.mapValue, e.mapValue);

          default:
            throw L();
        }
    }

    function dt(t, e) {
        if ("string" == typeof t && "string" == typeof e && t.length === e.length) return V(t, e);
        var n = Z(t), r = Z(e), i = V(n.seconds, r.seconds);
        return 0 !== i ? i : V(n.nanos, r.nanos);
    }

    function pt(t) {
        return yt(t);
    }

    function yt(t) {
        return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(t) {
            var e = Z(t);
            return "time(" + e.seconds + "," + e.nanos + ")";
        }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? et(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, 
        at.fromName(n).toString()) : "geoPointValue" in t ? "geo(" + (e = t.geoPointValue).latitude + "," + e.longitude + ")" : "arrayValue" in t ? function(t) {
            for (var e = "[", n = !0, r = 0, i = t.values || []; r < i.length; r++) {
                n ? n = !1 : e += ",", e += yt(i[r]);
            }
            return e + "]";
        }(t.arrayValue) : "mapValue" in t ? function(t) {
            for (
            // Iteration order in JavaScript is not guaranteed. To ensure that we generate
            // matching canonical IDs for identical maps, we need to sort the keys.
            var e = "{", n = !0, r = 0, i = Object.keys(t.fields || {}).sort(); r < i.length; r++) {
                var o = i[r];
                n ? n = !1 : e += ",", e += o + ":" + yt(t.fields[o]);
            }
            return e + "}";
        }(t.mapValue) : L();
        var e, n;
    }

    function vt(t, e) {
        return {
            referenceValue: "projects/" + t.projectId + "/databases/" + t.database + "/documents/" + e.path.canonicalString()
        };
    }

    /** Returns true if `value` is an IntegerValue . */ function mt(t) {
        return !!t && "integerValue" in t;
    }

    /** Returns true if `value` is a DoubleValue. */
    /** Returns true if `value` is an ArrayValue. */ function gt(t) {
        return !!t && "arrayValue" in t;
    }

    /** Returns true if `value` is a NullValue. */ function wt(t) {
        return !!t && "nullValue" in t;
    }

    /** Returns true if `value` is NaN. */ function bt(t) {
        return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }

    /** Returns true if `value` is a MapValue. */ function It(t) {
        return !!t && "mapValue" in t;
    }

    /** Creates a deep copy of `source`. */ function Et(t) {
        if (t.geoPointValue) return {
            geoPointValue: Object.assign({}, t.geoPointValue)
        };
        if (t.timestampValue) return {
            timestampValue: Object.assign({}, Z(t.timestampValue))
        };
        if (t.mapValue) {
            var e = {
                mapValue: {
                    fields: {}
                }
            };
            return Q(t.mapValue.fields, (function(t, n) {
                return e.mapValue.fields[t] = Et(n);
            })), e;
        }
        if (t.arrayValue) {
            for (var n = {
                arrayValue: {
                    values: []
                }
            }, r = 0; r < (t.arrayValue.values || []).length; ++r) n.arrayValue.values[r] = Et(t.arrayValue.values[r]);
            return n;
        }
        return Object.assign({}, t);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An ObjectValue represents a MapValue in the Firestore Proto and offers the
     * ability to add and remove fields (via the ObjectValueBuilder).
     */ var Tt = /** @class */ function() {
        function t(t) {
            this.value = t;
        }
        return t.empty = function() {
            return new t({
                mapValue: {}
            });
        }, 
        /**
         * Returns the value at the given path or null.
         *
         * @param path - the path to search
         * @returns The value at the path or null if the path is not set.
         */
        t.prototype.field = function(t) {
            if (t.isEmpty()) return this.value;
            for (var e = this.value, n = 0; n < t.length - 1; ++n) if (!It(e = (e.mapValue.fields || {})[t.get(n)])) return null;
            return (e = (e.mapValue.fields || {})[t.lastSegment()]) || null;
        }, 
        /**
         * Sets the field to the provided value.
         *
         * @param path - The field path to set.
         * @param value - The value to set.
         */
        t.prototype.set = function(t, e) {
            this.getFieldsMap(t.popLast())[t.lastSegment()] = Et(e);
        }, 
        /**
         * Sets the provided fields to the provided values.
         *
         * @param data - A map of fields to values (or null for deletes).
         */
        t.prototype.setAll = function(t) {
            var e = this, n = Y.emptyPath(), r = {}, i = [];
            t.forEach((function(t, o) {
                if (!n.isImmediateParentOf(o)) {
                    // Insert the accumulated changes at this parent location
                    var s = e.getFieldsMap(n);
                    e.applyChanges(s, r, i), r = {}, i = [], n = o.popLast();
                }
                t ? r[o.lastSegment()] = Et(t) : i.push(o.lastSegment());
            }));
            var o = this.getFieldsMap(n);
            this.applyChanges(o, r, i);
        }, 
        /**
         * Removes the field at the specified path. If there is no field at the
         * specified path, nothing is changed.
         *
         * @param path - The field path to remove.
         */
        t.prototype.delete = function(t) {
            var e = this.field(t.popLast());
            It(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
        }, t.prototype.isEqual = function(t) {
            return ht(this.value, t.value);
        }, 
        /**
         * Returns the map that contains the leaf element of `path`. If the parent
         * entry does not yet exist, or if it is not a map, a new map will be created.
         */
        t.prototype.getFieldsMap = function(t) {
            var e = this.value;
            e.mapValue.fields || (e.mapValue = {
                fields: {}
            });
            for (var n = 0; n < t.length; ++n) {
                var r = e.mapValue.fields[t.get(n)];
                It(r) && r.mapValue.fields || (r = {
                    mapValue: {
                        fields: {}
                    }
                }, e.mapValue.fields[t.get(n)] = r), e = r;
            }
            return e.mapValue.fields;
        }, 
        /**
         * Modifies `fieldsMap` by adding, replacing or deleting the specified
         * entries.
         */
        t.prototype.applyChanges = function(t, e, n) {
            Q(e, (function(e, n) {
                return t[e] = n;
            }));
            for (var r = 0, i = n; r < i.length; r++) {
                var o = i[r];
                delete t[o];
            }
        }, t.prototype.clone = function() {
            return new t(Et(this.value));
        }, t;
    }();

    /**
     * Returns a FieldMask built from all fields in a MapValue.
     */ function _t(t) {
        var e = [];
        return Q(t.fields, (function(t, n) {
            var r = new Y([ t ]);
            if (It(n)) {
                var i = _t(n.mapValue).fields;
                if (0 === i.length) 
                // Preserve the empty map by adding it to the FieldMask.
                e.push(r); else 
                // For nested and non-empty ObjectValues, add the FieldPath of the
                // leaf nodes.
                for (var o = 0, s = i; o < s.length; o++) {
                    var u = s[o];
                    e.push(r.child(u));
                }
            } else 
            // For nested and non-empty ObjectValues, add the FieldPath of the leaf
            // nodes.
            e.push(r);
        })), new $(e)
        /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Represents a document in Firestore with a key, version, data and whether it
     * has local mutations applied to it.
     *
     * Documents can transition between states via `convertToFoundDocument()`,
     * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
     * not transition to one of these states even after all mutations have been
     * applied, `isValidDocument()` returns false and the document should be removed
     * from all views.
     */;
    }

    var St = /** @class */ function() {
        function t(t, e, n, r, i) {
            this.key = t, this.documentType = e, this.version = n, this.data = r, this.documentState = i
            /**
         * Creates a document with no known version or data, but which can serve as
         * base document for mutations.
         */;
        }
        return t.newInvalidDocument = function(e) {
            return new t(e, 0 /* INVALID */ , j.min(), Tt.empty(), 0 /* SYNCED */);
        }, 
        /**
         * Creates a new document that is known to exist with the given data at the
         * given version.
         */
        t.newFoundDocument = function(e, n, r) {
            return new t(e, 1 /* FOUND_DOCUMENT */ , n, r, 0 /* SYNCED */);
        }, 
        /** Creates a new document that is known to not exist at the given version. */ t.newNoDocument = function(e, n) {
            return new t(e, 2 /* NO_DOCUMENT */ , n, Tt.empty(), 0 /* SYNCED */);
        }, 
        /**
         * Creates a new document that is known to exist at the given version but
         * whose data is not known (e.g. a document that was updated without a known
         * base document).
         */
        t.newUnknownDocument = function(e, n) {
            return new t(e, 3 /* UNKNOWN_DOCUMENT */ , n, Tt.empty(), 2 /* HAS_COMMITTED_MUTATIONS */);
        }, 
        /**
         * Changes the document type to indicate that it exists and that its version
         * and data are known.
         */
        t.prototype.convertToFoundDocument = function(t, e) {
            return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = e, 
            this.documentState = 0 /* SYNCED */ , this;
        }, 
        /**
         * Changes the document type to indicate that it doesn't exist at the given
         * version.
         */
        t.prototype.convertToNoDocument = function(t) {
            return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = Tt.empty(), 
            this.documentState = 0 /* SYNCED */ , this;
        }, 
        /**
         * Changes the document type to indicate that it exists at a given version but
         * that its data is not known (e.g. a document that was updated without a known
         * base document).
         */
        t.prototype.convertToUnknownDocument = function(t) {
            return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = Tt.empty(), 
            this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
        }, t.prototype.setHasCommittedMutations = function() {
            return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
        }, t.prototype.setHasLocalMutations = function() {
            return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this;
        }, Object.defineProperty(t.prototype, "hasLocalMutations", {
            get: function() {
                return 1 /* HAS_LOCAL_MUTATIONS */ === this.documentState;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "hasCommittedMutations", {
            get: function() {
                return 2 /* HAS_COMMITTED_MUTATIONS */ === this.documentState;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "hasPendingWrites", {
            get: function() {
                return this.hasLocalMutations || this.hasCommittedMutations;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isValidDocument = function() {
            return 0 /* INVALID */ !== this.documentType;
        }, t.prototype.isFoundDocument = function() {
            return 1 /* FOUND_DOCUMENT */ === this.documentType;
        }, t.prototype.isNoDocument = function() {
            return 2 /* NO_DOCUMENT */ === this.documentType;
        }, t.prototype.isUnknownDocument = function() {
            return 3 /* UNKNOWN_DOCUMENT */ === this.documentType;
        }, t.prototype.isEqual = function(e) {
            return e instanceof t && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
        }, t.prototype.clone = function() {
            return new t(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
        }, t.prototype.toString = function() {
            return "Document(" + this.key + ", " + this.version + ", " + JSON.stringify(this.data.value) + ", {documentType: " + this.documentType + "}), {documentState: " + this.documentState + "})";
        }, t;
    }(), Nt = function(t, e, n, r, i, o, s) {
        void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
        void 0 === i && (i = null), void 0 === o && (o = null), void 0 === s && (s = null), 
        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = i, 
        this.startAt = o, this.endAt = s, this.h = null;
    };

    /**
     * Compares the value for field `field` in the provided documents. Throws if
     * the field does not exist in both documents.
     */
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Visible for testing
    /**
     * Initializes a Target with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     *
     * NOTE: you should always construct `Target` from `Query.toTarget` instead of
     * using this factory method, because `Query` provides an implicit `orderBy`
     * property.
     */
    function Dt(t, e, n, r, i, o, s) {
        return void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
        void 0 === i && (i = null), void 0 === o && (o = null), void 0 === s && (s = null), 
        new Nt(t, e, n, r, i, o, s);
    }

    function At(t) {
        var e = P$1(t);
        if (null === e.h) {
            var n = e.path.canonicalString();
            null !== e.collectionGroup && (n += "|cg:" + e.collectionGroup), n += "|f:", n += e.filters.map((function(t) {
                return function(t) {
                    // TODO(b/29183165): Technically, this won't be unique if two values have
                    // the same description, such as the int 3 and the string "3". So we should
                    // add the types in here somehow, too.
                    return t.field.canonicalString() + t.op.toString() + pt(t.value);
                }(t);
            })).join(","), n += "|ob:", n += e.orderBy.map((function(t) {
                return function(t) {
                    // TODO(b/29183165): Make this collision robust.
                    return t.field.canonicalString() + t.dir;
                }(t);
            })).join(","), ot(e.limit) || (n += "|l:", n += e.limit), e.startAt && (n += "|lb:", 
            n += Bt(e.startAt)), e.endAt && (n += "|ub:", n += Bt(e.endAt)), e.h = n;
        }
        return e.h;
    }

    function kt(t, e) {
        if (t.limit !== e.limit) return !1;
        if (t.orderBy.length !== e.orderBy.length) return !1;
        for (var n = 0; n < t.orderBy.length; n++) if (!Kt(t.orderBy[n], e.orderBy[n])) return !1;
        if (t.filters.length !== e.filters.length) return !1;
        for (var r = 0; r < t.filters.length; r++) if (i = t.filters[r], o = e.filters[r], 
        i.op !== o.op || !i.field.isEqual(o.field) || !ht(i.value, o.value)) return !1;
        var i, o;
        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!Gt(t.startAt, e.startAt) && Gt(t.endAt, e.endAt);
    }

    function Ct(t) {
        return at.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
    }

    var xt = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this) || this).field = t, i.op = n, i.value = r, i;
        }
        /**
         * Creates a filter based on the provided arguments.
         */    return __extends$1(n, e), n.create = function(t, e, r) {
            return t.isKeyField() ? "in" /* IN */ === e || "not-in" /* NOT_IN */ === e ? this.l(t, e, r) : new Rt(t, e, r) : "array-contains" /* ARRAY_CONTAINS */ === e ? new Ft(t, r) : "in" /* IN */ === e ? new Mt(t, r) : "not-in" /* NOT_IN */ === e ? new Vt(t, r) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === e ? new qt(t, r) : new n(t, e, r);
        }, n.l = function(t, e, n) {
            return "in" /* IN */ === e ? new Lt(t, n) : new Ot(t, n);
        }, n.prototype.matches = function(t) {
            var e = t.data.field(this.field);
            // Types do not have to match in NOT_EQUAL filters.
                    return "!=" /* NOT_EQUAL */ === this.op ? null !== e && this.m(lt(e, this.value)) : null !== e && ct(this.value) === ct(e) && this.m(lt(e, this.value));
            // Only compare types with matching backend order (such as double and int).
            }, n.prototype.m = function(t) {
            switch (this.op) {
              case "<" /* LESS_THAN */ :
                return t < 0;

              case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;

              case "==" /* EQUAL */ :
                return 0 === t;

              case "!=" /* NOT_EQUAL */ :
                return 0 !== t;

              case ">" /* GREATER_THAN */ :
                return t > 0;

              case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;

              default:
                return L();
            }
        }, n.prototype.g = function() {
            return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
        }, n;
    }((function() {}));

    var Rt = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this, t, n, r) || this).key = at.fromName(r.referenceValue), 
            i;
        }
        return __extends$1(n, e), n.prototype.matches = function(t) {
            var e = at.comparator(t.key, this.key);
            return this.m(e);
        }, n;
    }(xt), Lt = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this, t, "in" /* IN */ , n) || this).keys = Pt("in" /* IN */ , n), 
            r;
        }
        return __extends$1(n, e), n.prototype.matches = function(t) {
            return this.keys.some((function(e) {
                return e.isEqual(t.key);
            }));
        }, n;
    }(xt), Ot = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this, t, "not-in" /* NOT_IN */ , n) || this).keys = Pt("not-in" /* NOT_IN */ , n), 
            r;
        }
        return __extends$1(n, e), n.prototype.matches = function(t) {
            return !this.keys.some((function(e) {
                return e.isEqual(t.key);
            }));
        }, n;
    }(xt);

    /** Filter that matches on key fields within an array. */ function Pt(t, e) {
        var n;
        return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((function(t) {
            return at.fromName(t.referenceValue);
        }));
    }

    /** A Filter that implements the array-contains operator. */ var Ft = /** @class */ function(e) {
        function n(t, n) {
            return e.call(this, t, "array-contains" /* ARRAY_CONTAINS */ , n) || this;
        }
        return __extends$1(n, e), n.prototype.matches = function(t) {
            var e = t.data.field(this.field);
            return gt(e) && ft(e.arrayValue, this.value);
        }, n;
    }(xt), Mt = /** @class */ function(e) {
        function n(t, n) {
            return e.call(this, t, "in" /* IN */ , n) || this;
        }
        return __extends$1(n, e), n.prototype.matches = function(t) {
            var e = t.data.field(this.field);
            return null !== e && ft(this.value.arrayValue, e);
        }, n;
    }(xt), Vt = /** @class */ function(e) {
        function n(t, n) {
            return e.call(this, t, "not-in" /* NOT_IN */ , n) || this;
        }
        return __extends$1(n, e), n.prototype.matches = function(t) {
            if (ft(this.value.arrayValue, {
                nullValue: "NULL_VALUE"
            })) return !1;
            var e = t.data.field(this.field);
            return null !== e && !ft(this.value.arrayValue, e);
        }, n;
    }(xt), qt = /** @class */ function(e) {
        function n(t, n) {
            return e.call(this, t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , n) || this;
        }
        return __extends$1(n, e), n.prototype.matches = function(t) {
            var e = this, n = t.data.field(this.field);
            return !(!gt(n) || !n.arrayValue.values) && n.arrayValue.values.some((function(t) {
                return ft(e.value.arrayValue, t);
            }));
        }, n;
    }(xt), Ut = function(t, e) {
        this.position = t, this.before = e;
    };

    /** A Filter that implements the IN operator. */ function Bt(t) {
        // TODO(b/29183165): Make this collision robust.
        return (t.before ? "b" : "a") + ":" + t.position.map((function(t) {
            return pt(t);
        })).join(",");
    }

    /**
     * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
     */ var jt = function(t, e /* ASCENDING */) {
        void 0 === e && (e = "asc"), this.field = t, this.dir = e;
    };

    function Kt(t, e) {
        return t.dir === e.dir && t.field.isEqual(e.field);
    }

    /**
     * Returns true if a document sorts before a bound using the provided sort
     * order.
     */ function Qt(t, e, n) {
        for (var r = 0, i = 0; i < t.position.length; i++) {
            var o = e[i], s = t.position[i];
            if (r = o.field.isKeyField() ? at.comparator(at.fromName(s.referenceValue), n.key) : lt(s, n.data.field(o.field)), 
            "desc" /* DESCENDING */ === o.dir && (r *= -1), 0 !== r) break;
        }
        return t.before ? r <= 0 : r < 0;
    }

    function Gt(t, e) {
        if (null === t) return null === e;
        if (null === e) return !1;
        if (t.before !== e.before || t.position.length !== e.position.length) return !1;
        for (var n = 0; n < t.position.length; n++) if (!ht(t.position[n], e.position[n])) return !1;
        return !0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Query encapsulates all the query attributes we support in the SDK. It can
     * be run against the LocalStore, as well as be converted to a `Target` to
     * query the RemoteStore results.
     *
     * Visible for testing.
     */ var zt = 
    /**
         * Initializes a Query with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         */
    function(t, e, n, r, i, o /* First */ , s, u) {
        void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
        void 0 === i && (i = null), void 0 === o && (o = "F"), void 0 === s && (s = null), 
        void 0 === u && (u = null), this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, 
        this.filters = r, this.limit = i, this.limitType = o, this.startAt = s, this.endAt = u, 
        this.p = null, 
        // The corresponding `Target` of this `Query` instance.
        this.T = null, this.startAt, this.endAt;
    };

    /** Creates a new Query instance with the options provided. */ function Wt(t, e, n, r, i, o, s, u) {
        return new zt(t, e, n, r, i, o, s, u);
    }

    /** Creates a new Query for a query that matches all documents at `path` */ function Ht(t) {
        return new zt(t);
    }

    /**
     * Helper to convert a collection group query into a collection query at a
     * specific path. This is used when executing collection group queries, since
     * we have to split the query into a set of collection queries at multiple
     * paths.
     */ function Yt(t) {
        return !ot(t.limit) && "F" /* First */ === t.limitType;
    }

    function $t(t) {
        return !ot(t.limit) && "L" /* Last */ === t.limitType;
    }

    function Xt(t) {
        return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
    }

    function Jt(t) {
        for (var e = 0, n = t.filters; e < n.length; e++) {
            var r = n[e];
            if (r.g()) return r.field;
        }
        return null;
    }

    /**
     * Checks if any of the provided Operators are included in the query and
     * returns the first one that is, or null if none are.
     */
    /**
     * Returns whether the query matches a collection group rather than a specific
     * collection.
     */ function Zt(t) {
        return null !== t.collectionGroup;
    }

    /**
     * Returns the implicit order by constraint that is used to execute the Query,
     * which can be different from the order by constraints the user provided (e.g.
     * the SDK and backend always orders by `__name__`).
     */ function te(t) {
        var e = P$1(t);
        if (null === e.p) {
            e.p = [];
            var n = Jt(e), r = Xt(e);
            if (null !== n && null === r) 
            // In order to implicitly add key ordering, we must also add the
            // inequality filter field for it to be a valid query.
            // Note that the default inequality field and key ordering is ascending.
            n.isKeyField() || e.p.push(new jt(n)), e.p.push(new jt(Y.keyField(), "asc" /* ASCENDING */)); else {
                for (var i = !1, o = 0, s = e.explicitOrderBy; o < s.length; o++) {
                    var u = s[o];
                    e.p.push(u), u.field.isKeyField() && (i = !0);
                }
                if (!i) {
                    // The order of the implicit key ordering always matches the last
                    // explicit order by
                    var a = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc" /* ASCENDING */;
                    e.p.push(new jt(Y.keyField(), a));
                }
            }
        }
        return e.p;
    }

    /**
     * Converts this `Query` instance to it's corresponding `Target` representation.
     */ function ee(t) {
        var e = P$1(t);
        if (!e.T) if ("F" /* First */ === e.limitType) e.T = Dt(e.path, e.collectionGroup, te(e), e.filters, e.limit, e.startAt, e.endAt); else {
            for (
            // Flip the orderBy directions since we want the last results
            var n = [], r = 0, i = te(e); r < i.length; r++) {
                var o = i[r], s = "desc" /* DESCENDING */ === o.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
                n.push(new jt(o.field, s));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
                    var u = e.endAt ? new Ut(e.endAt.position, !e.endAt.before) : null, a = e.startAt ? new Ut(e.startAt.position, !e.startAt.before) : null;
            // Now return as a LimitType.First query.
                    e.T = Dt(e.path, e.collectionGroup, n, e.filters, e.limit, u, a);
        }
        return e.T;
    }

    function ne(t, e, n) {
        return new zt(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
    }

    function re(t, e) {
        return kt(ee(t), ee(e)) && t.limitType === e.limitType;
    }

    // TODO(b/29183165): This is used to get a unique string from a query to, for
    // example, use as a dictionary key, but the implementation is subject to
    // collisions. Make it collision-free.
    function ie(t) {
        return At(ee(t)) + "|lt:" + t.limitType;
    }

    function oe(t) {
        return "Query(target=" + function(t) {
            var e = t.path.canonicalString();
            return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), 
            t.filters.length > 0 && (e += ", filters: [" + t.filters.map((function(t) {
                return (e = t).field.canonicalString() + " " + e.op + " " + pt(e.value);
                /** Returns a debug description for `filter`. */            var e;
                /** Filter that matches on key fields (i.e. '__name__'). */        })).join(", ") + "]"), 
            ot(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += ", orderBy: [" + t.orderBy.map((function(t) {
                return function(t) {
                    return t.field.canonicalString() + " (" + t.dir + ")";
                }(t);
            })).join(", ") + "]"), t.startAt && (e += ", startAt: " + Bt(t.startAt)), t.endAt && (e += ", endAt: " + Bt(t.endAt)), 
            "Target(" + e + ")";
        }(ee(t)) + "; limitType=" + t.limitType + ")";
    }

    /** Returns whether `doc` matches the constraints of `query`. */ function se(t, e) {
        return e.isFoundDocument() && function(t, e) {
            var n = e.key.path;
            return null !== t.collectionGroup ? e.key.hasCollectionId(t.collectionGroup) && t.path.isPrefixOf(n) : at.isDocumentKey(t.path) ? t.path.isEqual(n) : t.path.isImmediateParentOf(n);
        }(t, e) && function(t, e) {
            for (var n = 0, r = t.explicitOrderBy; n < r.length; n++) {
                var i = r[n];
                // order by key always matches
                            if (!i.field.isKeyField() && null === e.data.field(i.field)) return !1;
            }
            return !0;
        }(t, e) && function(t, e) {
            for (var n = 0, r = t.filters; n < r.length; n++) {
                if (!r[n].matches(e)) return !1;
            }
            return !0;
        }(t, e) && function(t, e) {
            return !(t.startAt && !Qt(t.startAt, te(t), e)) && (!t.endAt || !Qt(t.endAt, te(t), e));
        }(t, e);
    }

    function ue(t) {
        return function(e, n) {
            for (var r = !1, i = 0, o = te(t); i < o.length; i++) {
                var s = o[i], u = ae(s, e, n);
                if (0 !== u) return u;
                r = r || s.field.isKeyField();
            }
            return 0;
        };
    }

    function ae(t, e, n) {
        var r = t.field.isKeyField() ? at.comparator(e.key, n.key) : function(t, e, n) {
            var r = e.data.field(t), i = n.data.field(t);
            return null !== r && null !== i ? lt(r, i) : L();
        }(t.field, e, n);
        switch (t.dir) {
          case "asc" /* ASCENDING */ :
            return r;

          case "desc" /* DESCENDING */ :
            return -1 * r;

          default:
            return L();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns an DoubleValue for `value` that is encoded based the serializer's
     * `useProto3Json` setting.
     */ function ce(t, e) {
        if (t.I) {
            if (isNaN(e)) return {
                doubleValue: "NaN"
            };
            if (e === 1 / 0) return {
                doubleValue: "Infinity"
            };
            if (e === -1 / 0) return {
                doubleValue: "-Infinity"
            };
        }
        return {
            doubleValue: st(e) ? "-0" : e
        };
    }

    /**
     * Returns an IntegerValue for `value`.
     */ function he(t) {
        return {
            integerValue: "" + t
        };
    }

    /**
     * Returns a value for a number that's appropriate to put into a proto.
     * The return value is an IntegerValue if it can safely represent the value,
     * otherwise a DoubleValue is returned.
     */ function fe(t, e) {
        return ut(e) ? he(e) : ce(t, e);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Used to represent a field transform on a mutation. */ var le = function() {
        // Make sure that the structural type of `TransformOperation` is unique.
        // See https://github.com/microsoft/TypeScript/issues/5451
        this._ = void 0;
    };

    /**
     * Computes the local transform result against the provided `previousValue`,
     * optionally using the provided localWriteTime.
     */ function de(t, e, n) {
        return t instanceof ve ? function(t, e) {
            var n = {
                fields: {
                    __type__: {
                        stringValue: "server_timestamp"
                    },
                    __local_write_time__: {
                        timestampValue: {
                            seconds: t.seconds,
                            nanos: t.nanoseconds
                        }
                    }
                }
            };
            return e && (n.fields.__previous_value__ = e), {
                mapValue: n
            };
        }(n, e) : t instanceof me ? ge(t, e) : t instanceof we ? be(t, e) : function(t, e) {
            // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
            // precision and resolves overflows by reducing precision, we do not
            // manually cap overflows at 2^63.
            var n = ye(t, e), r = Ee(n) + Ee(t.A);
            return mt(n) && mt(t.A) ? he(r) : ce(t.R, r);
        }(t, e);
    }

    /**
     * Computes a final transform result after the transform has been acknowledged
     * by the server, potentially using the server-provided transformResult.
     */ function pe(t, e, n) {
        // The server just sends null as the transform result for array operations,
        // so we have to calculate a result the same as we do for local
        // applications.
        return t instanceof me ? ge(t, e) : t instanceof we ? be(t, e) : n;
    }

    /**
     * If this transform operation is not idempotent, returns the base value to
     * persist for this transform. If a base value is returned, the transform
     * operation is always applied to this base value, even if document has
     * already been updated.
     *
     * Base values provide consistent behavior for non-idempotent transforms and
     * allow us to return the same latency-compensated value even if the backend
     * has already applied the transform operation. The base value is null for
     * idempotent transforms, as they can be re-played even if the backend has
     * already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent transforms.
     */ function ye(t, e) {
        return t instanceof Ie ? mt(n = e) || function(t) {
            return !!t && "doubleValue" in t;
        }(n) ? e : {
            integerValue: 0
        } : null;
        var n;
    }

    /** Transforms a value into a server-generated timestamp. */ var ve = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends$1(n, e), n;
    }(le), me = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).elements = t, n;
        }
        return __extends$1(n, e), n;
    }(le);

    /** Transforms an array value via a union operation. */ function ge(t, e) {
        for (var n = Te(e), r = function(t) {
            n.some((function(e) {
                return ht(e, t);
            })) || n.push(t);
        }, i = 0, o = t.elements; i < o.length; i++) {
            r(o[i]);
        }
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /** Transforms an array value via a remove operation. */ var we = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).elements = t, n;
        }
        return __extends$1(n, e), n;
    }(le);

    function be(t, e) {
        for (var n = Te(e), r = function(t) {
            n = n.filter((function(e) {
                return !ht(e, t);
            }));
        }, i = 0, o = t.elements; i < o.length; i++) {
            r(o[i]);
        }
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /**
     * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
     * transforms. Converts all field values to integers or doubles, but unlike the
     * backend does not cap integer values at 2^63. Instead, JavaScript number
     * arithmetic is used and precision loss can occur for values greater than 2^53.
     */ var Ie = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).R = t, r.A = n, r;
        }
        return __extends$1(n, e), n;
    }(le);

    function Ee(t) {
        return tt(t.integerValue || t.doubleValue);
    }

    function Te(t) {
        return gt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A field path and the TransformOperation to perform upon it. */ var _e = function(t, e) {
        this.field = t, this.transform = e;
    };

    /** The result of successfully applying a mutation to the backend. */
    var Se = function(
    /**
         * The version at which the mutation was committed:
         *
         * - For most operations, this is the updateTime in the WriteResult.
         * - For deletes, the commitTime of the WriteResponse (because deletes are
         *   not stored and have no updateTime).
         *
         * Note that these versions can be different: No-op writes will not change
         * the updateTime even though the commitTime advances.
         */
    t, 
    /**
         * The resulting fields returned from the backend after a mutation
         * containing field transforms has been committed. Contains one FieldValue
         * for each FieldTransform that was in the mutation.
         *
         * Will be empty if the mutation did not contain any field transforms.
         */
    e) {
        this.version = t, this.transformResults = e;
    }, Ne = /** @class */ function() {
        function t(t, e) {
            this.updateTime = t, this.exists = e
            /** Creates a new empty Precondition. */;
        }
        return t.none = function() {
            return new t;
        }, 
        /** Creates a new Precondition with an exists flag. */ t.exists = function(e) {
            return new t(void 0, e);
        }, 
        /** Creates a new Precondition based on a version a document exists at. */ t.updateTime = function(e) {
            return new t(e);
        }, Object.defineProperty(t.prototype, "isNone", {
            /** Returns whether this Precondition is empty. */ get: function() {
                return void 0 === this.updateTime && void 0 === this.exists;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(t) {
            return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
        }, t;
    }();

    /**
     * Encodes a precondition for a mutation. This follows the model that the
     * backend accepts with the special case of an explicit "empty" precondition
     * (meaning no precondition).
     */
    /** Returns true if the preconditions is valid for the given document. */ function De(t, e) {
        return void 0 !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e.isFoundDocument();
    }

    /**
     * A mutation describes a self-contained change to a document. Mutations can
     * create, replace, delete, and update subsets of documents.
     *
     * Mutations not only act on the value of the document but also its version.
     *
     * For local mutations (mutations that haven't been committed yet), we preserve
     * the existing version for Set and Patch mutations. For Delete mutations, we
     * reset the version to 0.
     *
     * Here's the expected transition table.
     *
     * MUTATION           APPLIED TO            RESULTS IN
     *
     * SetMutation        Document(v3)          Document(v3)
     * SetMutation        NoDocument(v3)        Document(v0)
     * SetMutation        InvalidDocument(v0)   Document(v0)
     * PatchMutation      Document(v3)          Document(v3)
     * PatchMutation      NoDocument(v3)        NoDocument(v3)
     * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
     * DeleteMutation     Document(v3)          NoDocument(v0)
     * DeleteMutation     NoDocument(v3)        NoDocument(v0)
     * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
     *
     * For acknowledged mutations, we use the updateTime of the WriteResponse as
     * the resulting version for Set and Patch mutations. As deletes have no
     * explicit update time, we use the commitTime of the WriteResponse for
     * Delete mutations.
     *
     * If a mutation is acknowledged by the backend but fails the precondition check
     * locally, we transition to an `UnknownDocument` and rely on Watch to send us
     * the updated version.
     *
     * Field transforms are used only with Patch and Set Mutations. We use the
     * `updateTransforms` message to store transforms, rather than the `transforms`s
     * messages.
     *
     * ## Subclassing Notes
     *
     * Every type of mutation needs to implement its own applyToRemoteDocument() and
     * applyToLocalView() to implement the actual behavior of applying the mutation
     * to some source document (see `applySetMutationToRemoteDocument()` for an
     * example).
     */ var Ae = function() {};

    /**
     * Applies this mutation to the given document for the purposes of computing a
     * new remote document. If the input document doesn't match the expected state
     * (e.g. it is invalid or outdated), the document type may transition to
     * unknown.
     *
     * @param mutation - The mutation to apply.
     * @param document - The document to mutate. The input document can be an
     *     invalid document if the client has no knowledge of the pre-mutation state
     *     of the document.
     * @param mutationResult - The result of applying the mutation from the backend.
     */ function ke(t, e, n) {
        t instanceof Oe ? function(t, e, n) {
            // Unlike applySetMutationToLocalView, if we're applying a mutation to a
            // remote document the server has accepted the mutation so the precondition
            // must have held.
            var r = t.value.clone(), i = Me(t.fieldTransforms, e, n.transformResults);
            r.setAll(i), e.convertToFoundDocument(n.version, r).setHasCommittedMutations();
        }(t, e, n) : t instanceof Pe ? function(t, e, n) {
            if (De(t.precondition, e)) {
                var r = Me(t.fieldTransforms, e, n.transformResults), i = e.data;
                i.setAll(Fe(t)), i.setAll(r), e.convertToFoundDocument(n.version, i).setHasCommittedMutations();
            } else e.convertToUnknownDocument(n.version);
        }(t, e, n) : function(t, e, n) {
            // Unlike applyToLocalView, if we're applying a mutation to a remote
            // document the server has accepted the mutation so the precondition must
            // have held.
            e.convertToNoDocument(n.version).setHasCommittedMutations();
        }(0, e, n);
    }

    /**
     * Applies this mutation to the given document for the purposes of computing
     * the new local view of a document. If the input document doesn't match the
     * expected state, the document is not modified.
     *
     * @param mutation - The mutation to apply.
     * @param document - The document to mutate. The input document can be an
     *     invalid document if the client has no knowledge of the pre-mutation state
     *     of the document.
     * @param localWriteTime - A timestamp indicating the local write time of the
     *     batch this mutation is a part of.
     */ function Ce(t, e, n) {
        t instanceof Oe ? function(t, e, n) {
            if (De(t.precondition, e)) {
                var r = t.value.clone(), i = Ve(t.fieldTransforms, n, e);
                r.setAll(i), e.convertToFoundDocument(Le(e), r).setHasLocalMutations();
            }
        }(t, e, n) : t instanceof Pe ? function(t, e, n) {
            if (De(t.precondition, e)) {
                var r = Ve(t.fieldTransforms, n, e), i = e.data;
                i.setAll(Fe(t)), i.setAll(r), e.convertToFoundDocument(Le(e), i).setHasLocalMutations();
            }
        }(t, e, n) : function(t, e) {
            De(t.precondition, e) && 
            // We don't call `setHasLocalMutations()` since we want to be backwards
            // compatible with the existing SDK behavior.
            e.convertToNoDocument(j.min());
        }(t, e);
    }

    /**
     * If this mutation is not idempotent, returns the base value to persist with
     * this mutation. If a base value is returned, the mutation is always applied
     * to this base value, even if document has already been updated.
     *
     * The base value is a sparse object that consists of only the document
     * fields for which this mutation contains a non-idempotent transformation
     * (e.g. a numeric increment). The provided value guarantees consistent
     * behavior for non-idempotent transforms and allow us to return the same
     * latency-compensated value even if the backend has already applied the
     * mutation. The base value is null for idempotent mutations, as they can be
     * re-played even if the backend has already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent mutations.
     */ function xe(t, e) {
        for (var n = null, r = 0, i = t.fieldTransforms; r < i.length; r++) {
            var o = i[r], s = e.data.field(o.field), u = ye(o.transform, s || null);
            null != u && (null == n && (n = Tt.empty()), n.set(o.field, u));
        }
        return n || null;
    }

    function Re(t, e) {
        return t.type === e.type && !!t.key.isEqual(e.key) && !!t.precondition.isEqual(e.precondition) && !!function(t, e) {
            return void 0 === t && void 0 === e || !(!t || !e) && q(t, e, (function(t, e) {
                return function(t, e) {
                    return t.field.isEqual(e.field) && function(t, e) {
                        return t instanceof me && e instanceof me || t instanceof we && e instanceof we ? q(t.elements, e.elements, ht) : t instanceof Ie && e instanceof Ie ? ht(t.A, e.A) : t instanceof ve && e instanceof ve;
                    }(t.transform, e.transform);
                }(t, e);
            }));
        }(t.fieldTransforms, e.fieldTransforms) && (0 /* Set */ === t.type ? t.value.isEqual(e.value) : 1 /* Patch */ !== t.type || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask));
    }

    /**
     * Returns the version from the given document for use as the result of a
     * mutation. Mutations are defined to return the version of the base document
     * only if it is an existing document. Deleted and unknown documents have a
     * post-mutation version of SnapshotVersion.min().
     */ function Le(t) {
        return t.isFoundDocument() ? t.version : j.min();
    }

    /**
     * A mutation that creates or replaces the document at the given key with the
     * object value contents.
     */ var Oe = /** @class */ function(e) {
        function n(t, n, r, i) {
            void 0 === i && (i = []);
            var o = this;
            return (o = e.call(this) || this).key = t, o.value = n, o.precondition = r, o.fieldTransforms = i, 
            o.type = 0 /* Set */ , o;
        }
        return __extends$1(n, e), n;
    }(Ae), Pe = /** @class */ function(e) {
        function n(t, n, r, i, o) {
            void 0 === o && (o = []);
            var s = this;
            return (s = e.call(this) || this).key = t, s.data = n, s.fieldMask = r, s.precondition = i, 
            s.fieldTransforms = o, s.type = 1 /* Patch */ , s;
        }
        return __extends$1(n, e), n;
    }(Ae);

    function Fe(t) {
        var e = new Map;
        return t.fieldMask.fields.forEach((function(n) {
            if (!n.isEmpty()) {
                var r = t.data.field(n);
                e.set(n, r);
            }
        })), e
        /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use after a mutation
     * containing transforms has been acknowledged by the server.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param mutableDocument - The current state of the document after applying all
     * previous mutations.
     * @param serverTransformResults - The transform results received by the server.
     * @returns The transform results list.
     */;
    }

    function Me(t, e, n) {
        var r = new Map;
        O(t.length === n.length);
        for (var i = 0; i < n.length; i++) {
            var o = t[i], s = o.transform, u = e.data.field(o.field);
            r.set(o.field, pe(s, u, n[i]));
        }
        return r;
    }

    /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use when applying a
     * transform locally.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param localWriteTime - The local time of the mutation (used to
     *     generate ServerTimestampValues).
     * @param mutableDocument - The current state of the document after applying all
     *     previous mutations.
     * @returns The transform results list.
     */ function Ve(t, e, n) {
        for (var r = new Map, i = 0, o = t; i < o.length; i++) {
            var s = o[i], u = s.transform, a = n.data.field(s.field);
            r.set(s.field, de(u, a, e));
        }
        return r;
    }

    /** A mutation that deletes the document at the given key. */ var qe, Ue, Be = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).key = t, r.precondition = n, r.type = 2 /* Delete */ , 
            r.fieldTransforms = [], r;
        }
        return __extends$1(n, e), n;
    }(Ae), je = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).key = t, r.precondition = n, r.type = 3 /* Verify */ , 
            r.fieldTransforms = [], r;
        }
        return __extends$1(n, e), n;
    }(Ae), Ke = 
    // TODO(b/33078163): just use simplest form of existence filter for now
    function(t) {
        this.count = t;
    };

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a non-write operation.
     *
     * See isPermanentWriteError for classifying write errors.
     */
    function Qe(t) {
        switch (t) {
          case S.OK:
            return L();

          case S.CANCELLED:
          case S.UNKNOWN:
          case S.DEADLINE_EXCEEDED:
          case S.RESOURCE_EXHAUSTED:
          case S.INTERNAL:
          case S.UNAVAILABLE:
     // Unauthenticated means something went wrong with our token and we need
            // to retry with new credentials which will happen automatically.
                  case S.UNAUTHENTICATED:
            return !1;

          case S.INVALID_ARGUMENT:
          case S.NOT_FOUND:
          case S.ALREADY_EXISTS:
          case S.PERMISSION_DENIED:
          case S.FAILED_PRECONDITION:
     // Aborted might be retried in some scenarios, but that is dependant on
            // the context and should handled individually by the calling code.
            // See https://cloud.google.com/apis/design/errors.
                  case S.ABORTED:
          case S.OUT_OF_RANGE:
          case S.UNIMPLEMENTED:
          case S.DATA_LOSS:
            return !0;

          default:
            return L();
        }
    }

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a write operation.
     *
     * Write operations must be handled specially because as of b/119437764, ABORTED
     * errors on the write stream should be retried too (even though ABORTED errors
     * are not generally retryable).
     *
     * Note that during the initial handshake on the write stream an ABORTED error
     * signals that we should discard our stream token (i.e. it is permanent). This
     * means a handshake error should be classified with isPermanentError, above.
     */
    /**
     * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
     * are not the same as HTTP status codes.
     *
     * @returns The Code equivalent to the given GRPC status code. Fails if there
     *     is no match.
     */ function Ge(t) {
        if (void 0 === t) 
        // This shouldn't normally happen, but in certain error cases (like trying
        // to send invalid proto messages) we may get an error with no GRPC code.
        return C("GRPC error has no .code"), S.UNKNOWN;
        switch (t) {
          case qe.OK:
            return S.OK;

          case qe.CANCELLED:
            return S.CANCELLED;

          case qe.UNKNOWN:
            return S.UNKNOWN;

          case qe.DEADLINE_EXCEEDED:
            return S.DEADLINE_EXCEEDED;

          case qe.RESOURCE_EXHAUSTED:
            return S.RESOURCE_EXHAUSTED;

          case qe.INTERNAL:
            return S.INTERNAL;

          case qe.UNAVAILABLE:
            return S.UNAVAILABLE;

          case qe.UNAUTHENTICATED:
            return S.UNAUTHENTICATED;

          case qe.INVALID_ARGUMENT:
            return S.INVALID_ARGUMENT;

          case qe.NOT_FOUND:
            return S.NOT_FOUND;

          case qe.ALREADY_EXISTS:
            return S.ALREADY_EXISTS;

          case qe.PERMISSION_DENIED:
            return S.PERMISSION_DENIED;

          case qe.FAILED_PRECONDITION:
            return S.FAILED_PRECONDITION;

          case qe.ABORTED:
            return S.ABORTED;

          case qe.OUT_OF_RANGE:
            return S.OUT_OF_RANGE;

          case qe.UNIMPLEMENTED:
            return S.UNIMPLEMENTED;

          case qe.DATA_LOSS:
            return S.DATA_LOSS;

          default:
            return L();
        }
    }

    /**
     * Converts an HTTP response's error status to the equivalent error code.
     *
     * @param status - An HTTP error response status ("FAILED_PRECONDITION",
     * "UNKNOWN", etc.)
     * @returns The equivalent Code. Non-matching responses are mapped to
     *     Code.UNKNOWN.
     */ (Ue = qe || (qe = {}))[Ue.OK = 0] = "OK", Ue[Ue.CANCELLED = 1] = "CANCELLED", 
    Ue[Ue.UNKNOWN = 2] = "UNKNOWN", Ue[Ue.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
    Ue[Ue.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Ue[Ue.NOT_FOUND = 5] = "NOT_FOUND", 
    Ue[Ue.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Ue[Ue.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
    Ue[Ue.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Ue[Ue.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
    Ue[Ue.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Ue[Ue.ABORTED = 10] = "ABORTED", 
    Ue[Ue.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Ue[Ue.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
    Ue[Ue.INTERNAL = 13] = "INTERNAL", Ue[Ue.UNAVAILABLE = 14] = "UNAVAILABLE", Ue[Ue.DATA_LOSS = 15] = "DATA_LOSS";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // An immutable sorted map implementation, based on a Left-leaning Red-Black
    // tree.
    var ze = /** @class */ function() {
        function t(t, e) {
            this.comparator = t, this.root = e || He.EMPTY;
        }
        // Returns a copy of the map, with the specified key/value added or replaced.
            return t.prototype.insert = function(e, n) {
            return new t(this.comparator, this.root.insert(e, n, this.comparator).copy(null, null, He.BLACK, null, null));
        }, 
        // Returns a copy of the map, with the specified key removed.
        t.prototype.remove = function(e) {
            return new t(this.comparator, this.root.remove(e, this.comparator).copy(null, null, He.BLACK, null, null));
        }, 
        // Returns the value of the node with the given key, or null.
        t.prototype.get = function(t) {
            for (var e = this.root; !e.isEmpty(); ) {
                var n = this.comparator(t, e.key);
                if (0 === n) return e.value;
                n < 0 ? e = e.left : n > 0 && (e = e.right);
            }
            return null;
        }, 
        // Returns the index of the element in this sorted map, or -1 if it doesn't
        // exist.
        t.prototype.indexOf = function(t) {
            for (
            // Number of nodes that were pruned when descending right
            var e = 0, n = this.root; !n.isEmpty(); ) {
                var r = this.comparator(t, n.key);
                if (0 === r) return e + n.left.size;
                r < 0 ? n = n.left : (
                // Count all nodes left of the node plus the node itself
                e += n.left.size + 1, n = n.right);
            }
            // Node not found
                    return -1;
        }, t.prototype.isEmpty = function() {
            return this.root.isEmpty();
        }, Object.defineProperty(t.prototype, "size", {
            // Returns the total number of nodes in the map.
            get: function() {
                return this.root.size;
            },
            enumerable: !1,
            configurable: !0
        }), 
        // Returns the minimum key in the map.
        t.prototype.minKey = function() {
            return this.root.minKey();
        }, 
        // Returns the maximum key in the map.
        t.prototype.maxKey = function() {
            return this.root.maxKey();
        }, 
        // Traverses the map in key order and calls the specified action function
        // for each key/value pair. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.inorderTraversal = function(t) {
            return this.root.inorderTraversal(t);
        }, t.prototype.forEach = function(t) {
            this.inorderTraversal((function(e, n) {
                return t(e, n), !1;
            }));
        }, t.prototype.toString = function() {
            var t = [];
            return this.inorderTraversal((function(e, n) {
                return t.push(e + ":" + n), !1;
            })), "{" + t.join(", ") + "}";
        }, 
        // Traverses the map in reverse key order and calls the specified action
        // function for each key/value pair. If action returns true, traversal is
        // aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.reverseTraversal = function(t) {
            return this.root.reverseTraversal(t);
        }, 
        // Returns an iterator over the SortedMap.
        t.prototype.getIterator = function() {
            return new We(this.root, null, this.comparator, !1);
        }, t.prototype.getIteratorFrom = function(t) {
            return new We(this.root, t, this.comparator, !1);
        }, t.prototype.getReverseIterator = function() {
            return new We(this.root, null, this.comparator, !0);
        }, t.prototype.getReverseIteratorFrom = function(t) {
            return new We(this.root, t, this.comparator, !0);
        }, t;
    }(), We = /** @class */ function() {
        function t(t, e, n, r) {
            this.isReverse = r, this.nodeStack = [];
            for (var i = 1; !t.isEmpty(); ) if (i = e ? n(t.key, e) : 1, 
            // flip the comparison if we're going in reverse
            r && (i *= -1), i < 0) 
            // This node is less than our start key. ignore it
            t = this.isReverse ? t.left : t.right; else {
                if (0 === i) {
                    // This node is exactly equal to our start key. Push it on the stack,
                    // but stop iterating;
                    this.nodeStack.push(t);
                    break;
                }
                // This node is greater than our start key, add it to the stack and move
                // to the next one
                            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
            }
        }
        return t.prototype.getNext = function() {
            var t = this.nodeStack.pop(), e = {
                key: t.key,
                value: t.value
            };
            if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), 
            t = t.left;
            return e;
        }, t.prototype.hasNext = function() {
            return this.nodeStack.length > 0;
        }, t.prototype.peek = function() {
            if (0 === this.nodeStack.length) return null;
            var t = this.nodeStack[this.nodeStack.length - 1];
            return {
                key: t.key,
                value: t.value
            };
        }, t;
    }(), He = /** @class */ function() {
        function t(e, n, r, i, o) {
            this.key = e, this.value = n, this.color = null != r ? r : t.RED, this.left = null != i ? i : t.EMPTY, 
            this.right = null != o ? o : t.EMPTY, this.size = this.left.size + 1 + this.right.size;
        }
        // Returns a copy of the current node, optionally replacing pieces of it.
            return t.prototype.copy = function(e, n, r, i, o) {
            return new t(null != e ? e : this.key, null != n ? n : this.value, null != r ? r : this.color, null != i ? i : this.left, null != o ? o : this.right);
        }, t.prototype.isEmpty = function() {
            return !1;
        }, 
        // Traverses the tree in key order and calls the specified action function
        // for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.inorderTraversal = function(t) {
            return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
        }, 
        // Traverses the tree in reverse key order and calls the specified action
        // function for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.reverseTraversal = function(t) {
            return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
        }, 
        // Returns the minimum node in the tree.
        t.prototype.min = function() {
            return this.left.isEmpty() ? this : this.left.min();
        }, 
        // Returns the maximum key in the tree.
        t.prototype.minKey = function() {
            return this.min().key;
        }, 
        // Returns the maximum key in the tree.
        t.prototype.maxKey = function() {
            return this.right.isEmpty() ? this.key : this.right.maxKey();
        }, 
        // Returns new tree, with the key/value added.
        t.prototype.insert = function(t, e, n) {
            var r = this, i = n(t, r.key);
            return (r = i < 0 ? r.copy(null, null, null, r.left.insert(t, e, n), null) : 0 === i ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t, e, n))).fixUp();
        }, t.prototype.removeMin = function() {
            if (this.left.isEmpty()) return t.EMPTY;
            var e = this;
            return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), (e = e.copy(null, null, null, e.left.removeMin(), null)).fixUp();
        }, 
        // Returns new tree, with the specified item removed.
        t.prototype.remove = function(e, n) {
            var r, i = this;
            if (n(e, i.key) < 0) i.left.isEmpty() || i.left.isRed() || i.left.left.isRed() || (i = i.moveRedLeft()), 
            i = i.copy(null, null, null, i.left.remove(e, n), null); else {
                if (i.left.isRed() && (i = i.rotateRight()), i.right.isEmpty() || i.right.isRed() || i.right.left.isRed() || (i = i.moveRedRight()), 
                0 === n(e, i.key)) {
                    if (i.right.isEmpty()) return t.EMPTY;
                    r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.removeMin());
                }
                i = i.copy(null, null, null, null, i.right.remove(e, n));
            }
            return i.fixUp();
        }, t.prototype.isRed = function() {
            return this.color;
        }, 
        // Returns new tree after performing any needed rotations.
        t.prototype.fixUp = function() {
            var t = this;
            return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), 
            t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
        }, t.prototype.moveRedLeft = function() {
            var t = this.colorFlip();
            return t.right.left.isRed() && (t = (t = (t = t.copy(null, null, null, null, t.right.rotateRight())).rotateLeft()).colorFlip()), 
            t;
        }, t.prototype.moveRedRight = function() {
            var t = this.colorFlip();
            return t.left.left.isRed() && (t = (t = t.rotateRight()).colorFlip()), t;
        }, t.prototype.rotateLeft = function() {
            var e = this.copy(null, null, t.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, e, null);
        }, t.prototype.rotateRight = function() {
            var e = this.copy(null, null, t.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, e);
        }, t.prototype.colorFlip = function() {
            var t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, t, e);
        }, 
        // For testing.
        t.prototype.checkMaxDepth = function() {
            var t = this.check();
            return Math.pow(2, t) <= this.size + 1;
        }, 
        // In a balanced RB tree, the black-depth (number of black nodes) from root to
        // leaves is equal on both sides.  This function verifies that or asserts.
        t.prototype.check = function() {
            if (this.isRed() && this.left.isRed()) throw L();
            if (this.right.isRed()) throw L();
            var t = this.left.check();
            if (t !== this.right.check()) throw L();
            return t + (this.isRed() ? 0 : 1);
        }, t;
    }();

    // end SortedMap
    // An iterator over an LLRBNode.
    // end LLRBNode
    // Empty node is shared between all LLRB trees.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    He.EMPTY = null, He.RED = !0, He.BLACK = !1, 
    // end LLRBEmptyNode
    He.EMPTY = new (/** @class */ function() {
        function t() {
            this.size = 0;
        }
        return Object.defineProperty(t.prototype, "key", {
            get: function() {
                throw L();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "value", {
            get: function() {
                throw L();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "color", {
            get: function() {
                throw L();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "left", {
            get: function() {
                throw L();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "right", {
            get: function() {
                throw L();
            },
            enumerable: !1,
            configurable: !0
        }), 
        // Returns a copy of the current node.
        t.prototype.copy = function(t, e, n, r, i) {
            return this;
        }, 
        // Returns a copy of the tree, with the specified key/value added.
        t.prototype.insert = function(t, e, n) {
            return new He(t, e);
        }, 
        // Returns a copy of the tree, with the specified key removed.
        t.prototype.remove = function(t, e) {
            return this;
        }, t.prototype.isEmpty = function() {
            return !0;
        }, t.prototype.inorderTraversal = function(t) {
            return !1;
        }, t.prototype.reverseTraversal = function(t) {
            return !1;
        }, t.prototype.minKey = function() {
            return null;
        }, t.prototype.maxKey = function() {
            return null;
        }, t.prototype.isRed = function() {
            return !1;
        }, 
        // For testing.
        t.prototype.checkMaxDepth = function() {
            return !0;
        }, t.prototype.check = function() {
            return 0;
        }, t;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SortedSet is an immutable (copy-on-write) collection that holds elements
     * in order specified by the provided comparator.
     *
     * NOTE: if provided comparator returns 0 for two elements, we consider them to
     * be equal!
     */
    var Ye = /** @class */ function() {
        function t(t) {
            this.comparator = t, this.data = new ze(this.comparator);
        }
        return t.prototype.has = function(t) {
            return null !== this.data.get(t);
        }, t.prototype.first = function() {
            return this.data.minKey();
        }, t.prototype.last = function() {
            return this.data.maxKey();
        }, Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this.data.size;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.indexOf = function(t) {
            return this.data.indexOf(t);
        }, 
        /** Iterates elements in order defined by "comparator" */ t.prototype.forEach = function(t) {
            this.data.inorderTraversal((function(e, n) {
                return t(e), !1;
            }));
        }, 
        /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */ t.prototype.forEachInRange = function(t, e) {
            for (var n = this.data.getIteratorFrom(t[0]); n.hasNext(); ) {
                var r = n.getNext();
                if (this.comparator(r.key, t[1]) >= 0) return;
                e(r.key);
            }
        }, 
        /**
         * Iterates over `elem`s such that: start &lt;= elem until false is returned.
         */
        t.prototype.forEachWhile = function(t, e) {
            var n;
            for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) if (!t(n.getNext().key)) return;
        }, 
        /** Finds the least element greater than or equal to `elem`. */ t.prototype.firstAfterOrEqual = function(t) {
            var e = this.data.getIteratorFrom(t);
            return e.hasNext() ? e.getNext().key : null;
        }, t.prototype.getIterator = function() {
            return new $e(this.data.getIterator());
        }, t.prototype.getIteratorFrom = function(t) {
            return new $e(this.data.getIteratorFrom(t));
        }, 
        /** Inserts or updates an element */ t.prototype.add = function(t) {
            return this.copy(this.data.remove(t).insert(t, !0));
        }, 
        /** Deletes an element */ t.prototype.delete = function(t) {
            return this.has(t) ? this.copy(this.data.remove(t)) : this;
        }, t.prototype.isEmpty = function() {
            return this.data.isEmpty();
        }, t.prototype.unionWith = function(t) {
            var e = this;
            // Make sure `result` always refers to the larger one of the two sets.
                    return e.size < t.size && (e = t, t = this), t.forEach((function(t) {
                e = e.add(t);
            })), e;
        }, t.prototype.isEqual = function(e) {
            if (!(e instanceof t)) return !1;
            if (this.size !== e.size) return !1;
            for (var n = this.data.getIterator(), r = e.data.getIterator(); n.hasNext(); ) {
                var i = n.getNext().key, o = r.getNext().key;
                if (0 !== this.comparator(i, o)) return !1;
            }
            return !0;
        }, t.prototype.toArray = function() {
            var t = [];
            return this.forEach((function(e) {
                t.push(e);
            })), t;
        }, t.prototype.toString = function() {
            var t = [];
            return this.forEach((function(e) {
                return t.push(e);
            })), "SortedSet(" + t.toString() + ")";
        }, t.prototype.copy = function(e) {
            var n = new t(this.comparator);
            return n.data = e, n;
        }, t;
    }(), $e = /** @class */ function() {
        function t(t) {
            this.iter = t;
        }
        return t.prototype.getNext = function() {
            return this.iter.getNext().key;
        }, t.prototype.hasNext = function() {
            return this.iter.hasNext();
        }, t;
    }(), Xe = new ze(at.comparator);

    function Je() {
        return Xe;
    }

    var Ze = new ze(at.comparator);

    function tn() {
        return Ze;
    }

    var en = new ze(at.comparator);

    function nn() {
        return en;
    }

    var rn = new Ye(at.comparator);

    function on() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        for (var n = rn, r = 0, i = t; r < i.length; r++) {
            var o = i[r];
            n = n.add(o);
        }
        return n;
    }

    var sn = new Ye(V);

    function un() {
        return sn;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An event from the RemoteStore. It is split into targetChanges (changes to the
     * state or the set of documents in our watched targets) and documentUpdates
     * (changes to the actual documents).
     */ var an = /** @class */ function() {
        function t(
        /**
         * The snapshot version this event brings us up to, or MIN if not set.
         */
        t, 
        /**
         * A map from target to changes to the target. See TargetChange.
         */
        e, 
        /**
         * A set of targets that is known to be inconsistent. Listens for these
         * targets should be re-established without resume tokens.
         */
        n, 
        /**
         * A set of which documents have changed or been deleted, along with the
         * doc's new values (if not deleted).
         */
        r, 
        /**
         * A set of which document updates are due only to limbo resolution targets.
         */
        i) {
            this.snapshotVersion = t, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = r, 
            this.resolvedLimboDocuments = i;
        }
        /**
         * HACK: Views require RemoteEvents in order to determine whether the view is
         * CURRENT, but secondary tabs don't receive remote events. So this method is
         * used to create a synthesized RemoteEvent that can be used to apply a
         * CURRENT status change to a View, for queries executed in a different tab.
         */
        // PORTING NOTE: Multi-tab only
            return t.createSynthesizedRemoteEventForCurrentChange = function(e, n) {
            var r = new Map;
            return r.set(e, cn.createSynthesizedTargetChangeForCurrentChange(e, n)), new t(j.min(), r, un(), Je(), on());
        }, t;
    }(), cn = /** @class */ function() {
        function t(
        /**
         * An opaque, server-assigned token that allows watching a query to be resumed
         * after disconnecting without retransmitting all the data that matches the
         * query. The resume token essentially identifies a point in time from which
         * the server should resume sending results.
         */
        t, 
        /**
         * The "current" (synced) status of this target. Note that "current"
         * has special meaning in the RPC protocol that implies that a target is
         * both up-to-date and consistent with the rest of the watch stream.
         */
        e, 
        /**
         * The set of documents that were newly assigned to this target as part of
         * this remote event.
         */
        n, 
        /**
         * The set of documents that were already assigned to this target but received
         * an update during this remote event.
         */
        r, 
        /**
         * The set of documents that were removed from this target as part of this
         * remote event.
         */
        i) {
            this.resumeToken = t, this.current = e, this.addedDocuments = n, this.modifiedDocuments = r, 
            this.removedDocuments = i
            /**
         * This method is used to create a synthesized TargetChanges that can be used to
         * apply a CURRENT status change to a View (for queries executed in a different
         * tab) or for new queries (to raise snapshots with correct CURRENT status).
         */;
        }
        return t.createSynthesizedTargetChangeForCurrentChange = function(e, n) {
            return new t(X.EMPTY_BYTE_STRING, n, on(), on(), on());
        }, t;
    }(), hn = function(
    /** The new document applies to all of these targets. */
    t, 
    /** The new document is removed from all of these targets. */
    e, 
    /** The key of the document for this change. */
    n, 
    /**
         * The new document or NoDocument if it was deleted. Is null if the
         * document went out of view without the server sending a new document.
         */
    r) {
        this.v = t, this.removedTargetIds = e, this.key = n, this.P = r;
    }, fn = function(t, e) {
        this.targetId = t, this.V = e;
    }, ln = function(
    /** What kind of change occurred to the watch target. */
    t, 
    /** The target IDs that were added/removed/set. */
    e, 
    /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */
    n
    /** An RPC error indicating why the watch failed. */ , r) {
        void 0 === n && (n = X.EMPTY_BYTE_STRING), void 0 === r && (r = null), this.state = t, 
        this.targetIds = e, this.resumeToken = n, this.cause = r;
    }, dn = /** @class */ function() {
        function t() {
            /**
             * The number of pending responses (adds or removes) that we are waiting on.
             * We only consider targets active that have no pending responses.
             */
            this.S = 0, 
            /**
                 * Keeps track of the document changes since the last raised snapshot.
                 *
                 * These changes are continuously updated as we receive document updates and
                 * always reflect the current set of changes against the last issued snapshot.
                 */
            this.D = vn(), 
            /** See public getters for explanations of these fields. */
            this.C = X.EMPTY_BYTE_STRING, this.N = !1, 
            /**
                 * Whether this target state should be included in the next snapshot. We
                 * initialize to true so that newly-added targets are included in the next
                 * RemoteEvent.
                 */
            this.F = !0;
        }
        return Object.defineProperty(t.prototype, "current", {
            /**
             * Whether this target has been marked 'current'.
             *
             * 'Current' has special meaning in the RPC protocol: It implies that the
             * Watch backend has sent us all changes up to the point at which the target
             * was added and that the target is consistent with the rest of the watch
             * stream.
             */
            get: function() {
                return this.N;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "resumeToken", {
            /** The last resume token sent to us for this target. */ get: function() {
                return this.C;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "k", {
            /** Whether this target has pending target adds or target removes. */ get: function() {
                return 0 !== this.S;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "$", {
            /** Whether we have modified any state that should trigger a snapshot. */ get: function() {
                return this.F;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Applies the resume token to the TargetChange, but only when it has a new
         * value. Empty resumeTokens are discarded.
         */
        t.prototype.O = function(t) {
            t.approximateByteSize() > 0 && (this.F = !0, this.C = t);
        }, 
        /**
         * Creates a target change from the current set of changes.
         *
         * To reset the document changes after raising this snapshot, call
         * `clearPendingChanges()`.
         */
        t.prototype.M = function() {
            var t = on(), e = on(), n = on();
            return this.D.forEach((function(r, i) {
                switch (i) {
                  case 0 /* Added */ :
                    t = t.add(r);
                    break;

                  case 2 /* Modified */ :
                    e = e.add(r);
                    break;

                  case 1 /* Removed */ :
                    n = n.add(r);
                    break;

                  default:
                    L();
                }
            })), new cn(this.C, this.N, t, e, n);
        }, 
        /**
         * Resets the document changes and sets `hasPendingChanges` to false.
         */
        t.prototype.L = function() {
            this.F = !1, this.D = vn();
        }, t.prototype.B = function(t, e) {
            this.F = !0, this.D = this.D.insert(t, e);
        }, t.prototype.q = function(t) {
            this.F = !0, this.D = this.D.remove(t);
        }, t.prototype.U = function() {
            this.S += 1;
        }, t.prototype.K = function() {
            this.S -= 1;
        }, t.prototype.j = function() {
            this.F = !0, this.N = !0;
        }, t;
    }(), pn = /** @class */ function() {
        function t(t) {
            this.W = t, 
            /** The internal state of all tracked targets. */
            this.G = new Map, 
            /** Keeps track of the documents to update since the last raised snapshot. */
            this.H = Je(), 
            /** A mapping of document keys to their set of target IDs. */
            this.J = yn(), 
            /**
                 * A list of targets with existence filter mismatches. These targets are
                 * known to be inconsistent and their listens needs to be re-established by
                 * RemoteStore.
                 */
            this.Y = new Ye(V)
            /**
         * Processes and adds the DocumentWatchChange to the current set of changes.
         */;
        }
        return t.prototype.X = function(t) {
            for (var e = 0, n = t.v; e < n.length; e++) {
                var r = n[e];
                t.P && t.P.isFoundDocument() ? this.Z(r, t.P) : this.tt(r, t.key, t.P);
            }
            for (var i = 0, o = t.removedTargetIds; i < o.length; i++) {
                r = o[i];
                this.tt(r, t.key, t.P);
            }
        }, 
        /** Processes and adds the WatchTargetChange to the current set of changes. */ t.prototype.et = function(t) {
            var e = this;
            this.forEachTarget(t, (function(n) {
                var r = e.nt(n);
                switch (t.state) {
                  case 0 /* NoChange */ :
                    e.st(n) && r.O(t.resumeToken);
                    break;

                  case 1 /* Added */ :
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    r.K(), r.k || 
                    // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    r.L(), r.O(t.resumeToken);
                    break;

                  case 2 /* Removed */ :
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    r.K(), r.k || e.removeTarget(n);
                    break;

                  case 3 /* Current */ :
                    e.st(n) && (r.j(), r.O(t.resumeToken));
                    break;

                  case 4 /* Reset */ :
                    e.st(n) && (
                    // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    e.it(n), r.O(t.resumeToken));
                    break;

                  default:
                    L();
                }
            }));
        }, 
        /**
         * Iterates over all targetIds that the watch change applies to: either the
         * targetIds explicitly listed in the change or the targetIds of all currently
         * active targets.
         */
        t.prototype.forEachTarget = function(t, e) {
            var n = this;
            t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.G.forEach((function(t, r) {
                n.st(r) && e(r);
            }));
        }, 
        /**
         * Handles existence filters and synthesizes deletes for filter mismatches.
         * Targets that are invalidated by filter mismatches are added to
         * `pendingTargetResets`.
         */
        t.prototype.rt = function(t) {
            var e = t.targetId, n = t.V.count, r = this.ot(e);
            if (r) {
                var i = r.target;
                if (Ct(i)) if (0 === n) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    var o = new at(i.path);
                    this.tt(e, o, St.newNoDocument(o, j.min()));
                } else O(1 === n); else this.ct(e) !== n && (
                // Existence filter mismatch: We reset the mapping and raise a new
                // snapshot with `isFromCache:true`.
                this.it(e), this.Y = this.Y.add(e));
            }
        }, 
        /**
         * Converts the currently accumulated state into a remote event at the
         * provided snapshot version. Resets the accumulated changes before returning.
         */
        t.prototype.ut = function(t) {
            var e = this, n = new Map;
            this.G.forEach((function(r, i) {
                var o = e.ot(i);
                if (o) {
                    if (r.current && Ct(o.target)) {
                        // Document queries for document that don't exist can produce an empty
                        // result set. To update our local cache, we synthesize a document
                        // delete if we have not previously received the document. This
                        // resolves the limbo state of the document, removing it from
                        // limboDocumentRefs.
                        // TODO(dimond): Ideally we would have an explicit lookup target
                        // instead resulting in an explicit delete message and we could
                        // remove this special logic.
                        var s = new at(o.target.path);
                        null !== e.H.get(s) || e.at(i, s) || e.tt(i, s, St.newNoDocument(s, t));
                    }
                    r.$ && (n.set(i, r.M()), r.L());
                }
            }));
            var r = on();
            // We extract the set of limbo-only document updates as the GC logic
            // special-cases documents that do not appear in the target cache.
            // TODO(gsoltis): Expand on this comment once GC is available in the JS
            // client.
                    this.J.forEach((function(t, n) {
                var i = !0;
                n.forEachWhile((function(t) {
                    var n = e.ot(t);
                    return !n || 2 /* LimboResolution */ === n.purpose || (i = !1, !1);
                })), i && (r = r.add(t));
            }));
            var i = new an(t, n, this.Y, this.H, r);
            return this.H = Je(), this.J = yn(), this.Y = new Ye(V), i;
        }, 
        /**
         * Adds the provided document to the internal list of document updates and
         * its document key to the given target's mapping.
         */
        // Visible for testing.
        t.prototype.Z = function(t, e) {
            if (this.st(t)) {
                var n = this.at(t, e.key) ? 2 /* Modified */ : 0 /* Added */;
                this.nt(t).B(e.key, n), this.H = this.H.insert(e.key, e), this.J = this.J.insert(e.key, this.ht(e.key).add(t));
            }
        }, 
        /**
         * Removes the provided document from the target mapping. If the
         * document no longer matches the target, but the document's state is still
         * known (e.g. we know that the document was deleted or we received the change
         * that caused the filter mismatch), the new document can be provided
         * to update the remote document cache.
         */
        // Visible for testing.
        t.prototype.tt = function(t, e, n) {
            if (this.st(t)) {
                var r = this.nt(t);
                this.at(t, e) ? r.B(e, 1 /* Removed */) : 
                // The document may have entered and left the target before we raised a
                // snapshot, so we can just ignore the change.
                r.q(e), this.J = this.J.insert(e, this.ht(e).delete(t)), n && (this.H = this.H.insert(e, n));
            }
        }, t.prototype.removeTarget = function(t) {
            this.G.delete(t);
        }, 
        /**
         * Returns the current count of documents in the target. This includes both
         * the number of documents that the LocalStore considers to be part of the
         * target as well as any accumulated changes.
         */
        t.prototype.ct = function(t) {
            var e = this.nt(t).M();
            return this.W.getRemoteKeysForTarget(t).size + e.addedDocuments.size - e.removedDocuments.size;
        }, 
        /**
         * Increment the number of acks needed from watch before we can consider the
         * server to be 'in-sync' with the client's active targets.
         */
        t.prototype.U = function(t) {
            this.nt(t).U();
        }, t.prototype.nt = function(t) {
            var e = this.G.get(t);
            return e || (e = new dn, this.G.set(t, e)), e;
        }, t.prototype.ht = function(t) {
            var e = this.J.get(t);
            return e || (e = new Ye(V), this.J = this.J.insert(t, e)), e;
        }, 
        /**
         * Verifies that the user is still interested in this target (by calling
         * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
         * from watch.
         */
        t.prototype.st = function(t) {
            var e = null !== this.ot(t);
            return e || k("WatchChangeAggregator", "Detected inactive target", t), e;
        }, 
        /**
         * Returns the TargetData for an active target (i.e. a target that the user
         * is still interested in that has no outstanding target change requests).
         */
        t.prototype.ot = function(t) {
            var e = this.G.get(t);
            return e && e.k ? null : this.W.lt(t);
        }, 
        /**
         * Resets the state of a Watch target to its initial state (e.g. sets
         * 'current' to false, clears the resume token and removes its target mapping
         * from all documents).
         */
        t.prototype.it = function(t) {
            var e = this;
            this.G.set(t, new dn), this.W.getRemoteKeysForTarget(t).forEach((function(n) {
                e.tt(t, n, /*updatedDocument=*/ null);
            }));
        }, 
        /**
         * Returns whether the LocalStore considers the document to be part of the
         * specified target.
         */
        t.prototype.at = function(t, e) {
            return this.W.getRemoteKeysForTarget(t).has(e);
        }, t;
    }();

    /**
     * A TargetChange specifies the set of changes for a specific target as part of
     * a RemoteEvent. These changes track which documents are added, modified or
     * removed, as well as the target's resume token and whether the target is
     * marked CURRENT.
     * The actual changes *to* documents are not part of the TargetChange since
     * documents may be part of multiple targets.
     */ function yn() {
        return new ze(at.comparator);
    }

    function vn() {
        return new ze(at.comparator);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var mn = {
        asc: "ASCENDING",
        desc: "DESCENDING"
    }, gn = {
        "<": "LESS_THAN",
        "<=": "LESS_THAN_OR_EQUAL",
        ">": "GREATER_THAN",
        ">=": "GREATER_THAN_OR_EQUAL",
        "==": "EQUAL",
        "!=": "NOT_EQUAL",
        "array-contains": "ARRAY_CONTAINS",
        in: "IN",
        "not-in": "NOT_IN",
        "array-contains-any": "ARRAY_CONTAINS_ANY"
    }, wn = function(t, e) {
        this.databaseId = t, this.I = e;
    };

    /**
     * This class generates JsonObject values for the Datastore API suitable for
     * sending to either GRPC stub methods or via the JSON/HTTP REST API.
     *
     * The serializer supports both Protobuf.js and Proto3 JSON formats. By
     * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
     * format.
     *
     * For a description of the Proto3 JSON format check
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     *
     * TODO(klimt): We can remove the databaseId argument if we keep the full
     * resource name in documents.
     */
    /**
     * Returns a value for a Date that's appropriate to put into a proto.
     */
    function bn(t, e) {
        return t.I ? new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + e.nanoseconds).slice(-9) + "Z" : {
            seconds: "" + e.seconds,
            nanos: e.nanoseconds
        };
    }

    /**
     * Returns a value for bytes that's appropriate to put in a proto.
     *
     * Visible for testing.
     */ function In(t, e) {
        return t.I ? e.toBase64() : e.toUint8Array();
    }

    /**
     * Returns a ByteString based on the proto string value.
     */ function En(t, e) {
        return bn(t, e.toTimestamp());
    }

    function Tn(t) {
        return O(!!t), j.fromTimestamp(function(t) {
            var e = Z(t);
            return new B(e.seconds, e.nanos);
        }(t));
    }

    function _n(t, e) {
        return function(t) {
            return new W([ "projects", t.projectId, "databases", t.database ]);
        }(t).child("documents").child(e).canonicalString();
    }

    function Sn(t) {
        var e = W.fromString(t);
        return O(Yn(e)), e;
    }

    function Nn(t, e) {
        return _n(t.databaseId, e.path);
    }

    function Dn(t, e) {
        var n = Sn(e);
        if (n.get(1) !== t.databaseId.projectId) throw new N(S.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
        if (n.get(3) !== t.databaseId.database) throw new N(S.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
        return new at(xn(n));
    }

    function An(t, e) {
        return _n(t.databaseId, e);
    }

    function kn(t) {
        var e = Sn(t);
        // In v1beta1 queries for collections at the root did not have a trailing
        // "/documents". In v1 all resource paths contain "/documents". Preserve the
        // ability to read the v1beta1 form for compatibility with queries persisted
        // in the local target cache.
            return 4 === e.length ? W.emptyPath() : xn(e);
    }

    function Cn(t) {
        return new W([ "projects", t.databaseId.projectId, "databases", t.databaseId.database ]).canonicalString();
    }

    function xn(t) {
        return O(t.length > 4 && "documents" === t.get(4)), t.popFirst(5)
        /** Creates a Document proto from key and fields (but no create/update time) */;
    }

    function Rn(t, e, n) {
        return {
            name: Nn(t, e),
            fields: n.value.mapValue.fields
        };
    }

    function Ln(t, e, n) {
        var r = Dn(t, e.name), i = Tn(e.updateTime), o = new Tt({
            mapValue: {
                fields: e.fields
            }
        }), s = St.newFoundDocument(r, i, o);
        return n && s.setHasCommittedMutations(), n ? s.setHasCommittedMutations() : s;
    }

    function On(t, e) {
        var n;
        if (e instanceof Oe) n = {
            update: Rn(t, e.key, e.value)
        }; else if (e instanceof Be) n = {
            delete: Nn(t, e.key)
        }; else if (e instanceof Pe) n = {
            update: Rn(t, e.key, e.data),
            updateMask: Hn(e.fieldMask)
        }; else {
            if (!(e instanceof je)) return L();
            n = {
                verify: Nn(t, e.key)
            };
        }
        return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((function(t) {
            return function(t, e) {
                var n = e.transform;
                if (n instanceof ve) return {
                    fieldPath: e.field.canonicalString(),
                    setToServerValue: "REQUEST_TIME"
                };
                if (n instanceof me) return {
                    fieldPath: e.field.canonicalString(),
                    appendMissingElements: {
                        values: n.elements
                    }
                };
                if (n instanceof we) return {
                    fieldPath: e.field.canonicalString(),
                    removeAllFromArray: {
                        values: n.elements
                    }
                };
                if (n instanceof Ie) return {
                    fieldPath: e.field.canonicalString(),
                    increment: n.A
                };
                throw L();
            }(0, t);
        }))), e.precondition.isNone || (n.currentDocument = function(t, e) {
            return void 0 !== e.updateTime ? {
                updateTime: En(t, e.updateTime)
            } : void 0 !== e.exists ? {
                exists: e.exists
            } : L();
        }(t, e.precondition)), n;
    }

    function Pn(t, e) {
        var n = e.currentDocument ? function(t) {
            return void 0 !== t.updateTime ? Ne.updateTime(Tn(t.updateTime)) : void 0 !== t.exists ? Ne.exists(t.exists) : Ne.none();
        }(e.currentDocument) : Ne.none(), r = e.updateTransforms ? e.updateTransforms.map((function(e) {
            return function(t, e) {
                var n = null;
                if ("setToServerValue" in e) O("REQUEST_TIME" === e.setToServerValue), n = new ve; else if ("appendMissingElements" in e) {
                    var r = e.appendMissingElements.values || [];
                    n = new me(r);
                } else if ("removeAllFromArray" in e) {
                    var i = e.removeAllFromArray.values || [];
                    n = new we(i);
                } else "increment" in e ? n = new Ie(t, e.increment) : L();
                var o = Y.fromServerFormat(e.fieldPath);
                return new _e(o, n);
            }(t, e);
        })) : [];
        if (e.update) {
            e.update.name;
            var i = Dn(t, e.update.name), o = new Tt({
                mapValue: {
                    fields: e.update.fields
                }
            });
            if (e.updateMask) {
                var s = function(t) {
                    var e = t.fieldPaths || [];
                    return new $(e.map((function(t) {
                        return Y.fromServerFormat(t);
                    })));
                }(e.updateMask);
                return new Pe(i, o, s, n, r);
            }
            return new Oe(i, o, n, r);
        }
        if (e.delete) {
            var u = Dn(t, e.delete);
            return new Be(u, n);
        }
        if (e.verify) {
            var a = Dn(t, e.verify);
            return new je(a, n);
        }
        return L();
    }

    function Fn(t, e) {
        return {
            documents: [ An(t, e.path) ]
        };
    }

    function Mn(t, e) {
        // Dissect the path into parent, collectionId, and optional key filter.
        var n = {
            structuredQuery: {}
        }, r = e.path;
        null !== e.collectionGroup ? (n.parent = An(t, r), n.structuredQuery.from = [ {
            collectionId: e.collectionGroup,
            allDescendants: !0
        } ]) : (n.parent = An(t, r.popLast()), n.structuredQuery.from = [ {
            collectionId: r.lastSegment()
        } ]);
        var i = function(t) {
            if (0 !== t.length) {
                var e = t.map((function(t) {
                    // visible for testing
                    return function(t) {
                        if ("==" /* EQUAL */ === t.op) {
                            if (bt(t.value)) return {
                                unaryFilter: {
                                    field: Qn(t.field),
                                    op: "IS_NAN"
                                }
                            };
                            if (wt(t.value)) return {
                                unaryFilter: {
                                    field: Qn(t.field),
                                    op: "IS_NULL"
                                }
                            };
                        } else if ("!=" /* NOT_EQUAL */ === t.op) {
                            if (bt(t.value)) return {
                                unaryFilter: {
                                    field: Qn(t.field),
                                    op: "IS_NOT_NAN"
                                }
                            };
                            if (wt(t.value)) return {
                                unaryFilter: {
                                    field: Qn(t.field),
                                    op: "IS_NOT_NULL"
                                }
                            };
                        }
                        return {
                            fieldFilter: {
                                field: Qn(t.field),
                                op: Kn(t.op),
                                value: t.value
                            }
                        };
                    }(t);
                }));
                return 1 === e.length ? e[0] : {
                    compositeFilter: {
                        op: "AND",
                        filters: e
                    }
                };
            }
        }(e.filters);
        i && (n.structuredQuery.where = i);
        var o = function(t) {
            if (0 !== t.length) return t.map((function(t) {
                // visible for testing
                return function(t) {
                    return {
                        field: Qn(t.field),
                        direction: jn(t.dir)
                    };
                }(t);
            }));
        }(e.orderBy);
        o && (n.structuredQuery.orderBy = o);
        var s = function(t, e) {
            return t.I || ot(e) ? e : {
                value: e
            };
        }(t, e.limit);
        return null !== s && (n.structuredQuery.limit = s), e.startAt && (n.structuredQuery.startAt = Un(e.startAt)), 
        e.endAt && (n.structuredQuery.endAt = Un(e.endAt)), n;
    }

    function Vn(t) {
        var e = kn(t.parent), n = t.structuredQuery, r = n.from ? n.from.length : 0, i = null;
        if (r > 0) {
            O(1 === r);
            var o = n.from[0];
            o.allDescendants ? i = o.collectionId : e = e.child(o.collectionId);
        }
        var s = [];
        n.where && (s = qn(n.where));
        var u = [];
        n.orderBy && (u = n.orderBy.map((function(t) {
            return function(t) {
                return new jt(Gn(t.field), 
                // visible for testing
                function(t) {
                    switch (t) {
                      case "ASCENDING":
                        return "asc" /* ASCENDING */;

                      case "DESCENDING":
                        return "desc" /* DESCENDING */;

                      default:
                        return;
                    }
                }(t.direction));
            }(t);
        })));
        var a = null;
        n.limit && (a = function(t) {
            var e;
            return ot(e = "object" == typeof t ? t.value : t) ? null : e;
        }(n.limit));
        var c = null;
        n.startAt && (c = Bn(n.startAt));
        var h = null;
        return n.endAt && (h = Bn(n.endAt)), Wt(e, i, u, s, a, "F" /* First */ , c, h);
    }

    function qn(t) {
        return t ? void 0 !== t.unaryFilter ? [ Wn(t) ] : void 0 !== t.fieldFilter ? [ zn(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((function(t) {
            return qn(t);
        })).reduce((function(t, e) {
            return t.concat(e);
        })) : L() : [];
    }

    function Un(t) {
        return {
            before: t.before,
            values: t.position
        };
    }

    function Bn(t) {
        var e = !!t.before, n = t.values || [];
        return new Ut(n, e);
    }

    // visible for testing
    function jn(t) {
        return mn[t];
    }

    function Kn(t) {
        return gn[t];
    }

    function Qn(t) {
        return {
            fieldPath: t.canonicalString()
        };
    }

    function Gn(t) {
        return Y.fromServerFormat(t.fieldPath);
    }

    function zn(t) {
        return xt.create(Gn(t.fieldFilter.field), function(t) {
            switch (t) {
              case "EQUAL":
                return "==" /* EQUAL */;

              case "NOT_EQUAL":
                return "!=" /* NOT_EQUAL */;

              case "GREATER_THAN":
                return ">" /* GREATER_THAN */;

              case "GREATER_THAN_OR_EQUAL":
                return ">=" /* GREATER_THAN_OR_EQUAL */;

              case "LESS_THAN":
                return "<" /* LESS_THAN */;

              case "LESS_THAN_OR_EQUAL":
                return "<=" /* LESS_THAN_OR_EQUAL */;

              case "ARRAY_CONTAINS":
                return "array-contains" /* ARRAY_CONTAINS */;

              case "IN":
                return "in" /* IN */;

              case "NOT_IN":
                return "not-in" /* NOT_IN */;

              case "ARRAY_CONTAINS_ANY":
                return "array-contains-any" /* ARRAY_CONTAINS_ANY */;

              case "OPERATOR_UNSPECIFIED":
              default:
                return L();
            }
        }(t.fieldFilter.op), t.fieldFilter.value);
    }

    function Wn(t) {
        switch (t.unaryFilter.op) {
          case "IS_NAN":
            var e = Gn(t.unaryFilter.field);
            return xt.create(e, "==" /* EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NULL":
            var n = Gn(t.unaryFilter.field);
            return xt.create(n, "==" /* EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "IS_NOT_NAN":
            var r = Gn(t.unaryFilter.field);
            return xt.create(r, "!=" /* NOT_EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NOT_NULL":
            var i = Gn(t.unaryFilter.field);
            return xt.create(i, "!=" /* NOT_EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "OPERATOR_UNSPECIFIED":
          default:
            return L();
        }
    }

    function Hn(t) {
        var e = [];
        return t.fields.forEach((function(t) {
            return e.push(t.canonicalString());
        })), {
            fieldPaths: e
        };
    }

    function Yn(t) {
        // Resource names have at least 4 components (project ID, database ID)
        return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encodes a resource path into a IndexedDb-compatible string form.
     */ function $n(t) {
        for (var e = "", n = 0; n < t.length; n++) e.length > 0 && (e = Jn(e)), e = Xn(t.get(n), e);
        return Jn(e);
    }

    /** Encodes a single segment of a resource path into the given result */ function Xn(t, e) {
        for (var n = e, r = t.length, i = 0; i < r; i++) {
            var o = t.charAt(i);
            switch (o) {
              case "\0":
                n += "";
                break;

              case "":
                n += "";
                break;

              default:
                n += o;
            }
        }
        return n;
    }

    /** Encodes a path separator into the given result */ function Jn(t) {
        return t + "";
    }

    /**
     * Decodes the given IndexedDb-compatible string form of a resource path into
     * a ResourcePath instance. Note that this method is not suitable for use with
     * decoding resource names from the server; those are One Platform format
     * strings.
     */ function Zn(t) {
        // Event the empty path must encode as a path of at least length 2. A path
        // with exactly 2 must be the empty path.
        var e = t.length;
        if (O(e >= 2), 2 === e) return O("" === t.charAt(0) && "" === t.charAt(1)), W.emptyPath();
        // Escape characters cannot exist past the second-to-last position in the
        // source value.
            for (var n = e - 2, r = [], i = "", o = 0; o < e; ) {
            // The last two characters of a valid encoded path must be a separator, so
            // there must be an end to this segment.
            var s = t.indexOf("", o);
            switch ((s < 0 || s > n) && L(), t.charAt(s + 1)) {
              case "":
                var u = t.substring(o, s), a = void 0;
                0 === i.length ? 
                // Avoid copying for the common case of a segment that excludes \0
                // and \001
                a = u : (a = i += u, i = ""), r.push(a);
                break;

              case "":
                i += t.substring(o, s), i += "\0";
                break;

              case "":
                // The escape character can be used in the output to encode itself.
                i += t.substring(o, s + 1);
                break;

              default:
                L();
            }
            o = s + 2;
        }
        return new W(r);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Schema Version for the Web client:
     * 1.  Initial version including Mutation Queue, Query Cache, and Remote
     *     Document Cache
     * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
     *     longer required because migration 3 unconditionally clears it.
     * 3.  Dropped and re-created Query Cache to deal with cache corruption related
     *     to limbo resolution. Addresses
     *     https://github.com/firebase/firebase-ios-sdk/issues/1548
     * 4.  Multi-Tab Support.
     * 5.  Removal of held write acks.
     * 6.  Create document global for tracking document cache size.
     * 7.  Ensure every cached document has a sentinel row with a sequence number.
     * 8.  Add collection-parent index for Collection Group queries.
     * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
     *     an auto-incrementing ID. This is required for Index-Free queries.
     * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
     * 11. Add bundles and named_queries for bundle support.
     */
    /**
     * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
     */ var tr = function(t, e) {
        this.seconds = t, this.nanoseconds = e;
    }, er = function(t, 
    /** Whether to allow shared access from multiple tabs. */
    e, n) {
        this.ownerId = t, this.allowTabSynchronization = e, this.leaseTimestampMs = n;
    };

    /**
     * A singleton object to be stored in the 'owner' store in IndexedDb.
     *
     * A given database can have a single primary tab assigned at a given time. That
     * tab must validate that it is still holding the primary lease before every
     * operation that requires locked access. The primary tab should regularly
     * write an updated timestamp to this lease to prevent other tabs from
     * "stealing" the primary lease
     */
    /**
     * Name of the IndexedDb object store.
     *
     * Note that the name 'owner' is chosen to ensure backwards compatibility with
     * older clients that only supported single locked access to the persistence
     * layer.
     */
    er.store = "owner", 
    /**
         * The key string used for the single object that exists in the
         * DbPrimaryClient store.
         */
    er.key = "owner";

    /**
     * An object to be stored in the 'mutationQueues' store in IndexedDb.
     *
     * Each user gets a single queue of MutationBatches to apply to the server.
     * DbMutationQueue tracks the metadata about the queue.
     */
    var nr = function(
    /**
         * The normalized user ID to which this queue belongs.
         */
    t, 
    /**
         * An identifier for the highest numbered batch that has been acknowledged
         * by the server. All MutationBatches in this queue with batchIds less
         * than or equal to this value are considered to have been acknowledged by
         * the server.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
    e, 
    /**
         * A stream token that was previously sent by the server.
         *
         * See StreamingWriteRequest in datastore.proto for more details about
         * usage.
         *
         * After sending this token, earlier tokens may not be used anymore so
         * only a single stream token is retained.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
    n) {
        this.userId = t, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n;
    };

    /** Name of the IndexedDb object store.  */ nr.store = "mutationQueues", 
    /** Keys are automatically assigned via the userId property. */
    nr.keyPath = "userId";

    /**
     * An object to be stored in the 'mutations' store in IndexedDb.
     *
     * Represents a batch of user-level mutations intended to be sent to the server
     * in a single write. Each user-level batch gets a separate DbMutationBatch
     * with a new batchId.
     */
    var rr = function(
    /**
         * The normalized user ID to which this batch belongs.
         */
    t, 
    /**
         * An identifier for this batch, allocated using an auto-generated key.
         */
    e, 
    /**
         * The local write time of the batch, stored as milliseconds since the
         * epoch.
         */
    n, 
    /**
         * A list of "mutations" that represent a partial base state from when this
         * write batch was initially created. During local application of the write
         * batch, these baseMutations are applied prior to the real writes in order
         * to override certain document fields from the remote document cache. This
         * is necessary in the case of non-idempotent writes (e.g. `increment()`
         * transforms) to make sure that the local view of the modified documents
         * doesn't flicker if the remote document cache receives the result of the
         * non-idempotent write before the write is removed from the queue.
         *
         * These mutations are never sent to the backend.
         */
    r, 
    /**
         * A list of mutations to apply. All mutations will be applied atomically.
         *
         * Mutations are serialized via toMutation().
         */
    i) {
        this.userId = t, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = r, 
        this.mutations = i;
    };

    /** Name of the IndexedDb object store.  */ rr.store = "mutations", 
    /** Keys are automatically assigned via the userId, batchId properties. */
    rr.keyPath = "batchId", 
    /** The index name for lookup of mutations by user. */
    rr.userMutationsIndex = "userMutationsIndex", 
    /** The user mutations index is keyed by [userId, batchId] pairs. */
    rr.userMutationsKeyPath = [ "userId", "batchId" ];

    /**
     * An object to be stored in the 'documentMutations' store in IndexedDb.
     *
     * A manually maintained index of all the mutation batches that affect a given
     * document key. The rows in this table are references based on the contents of
     * DbMutationBatch.mutations.
     */
    var ir = /** @class */ function() {
        function t() {}
        /**
         * Creates a [userId] key for use in the DbDocumentMutations index to iterate
         * over all of a user's document mutations.
         */    return t.prefixForUser = function(t) {
            return [ t ];
        }, 
        /**
         * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
         * index to iterate over all at document mutations for a given path or lower.
         */
        t.prefixForPath = function(t, e) {
            return [ t, $n(e) ];
        }, 
        /**
         * Creates a full index key of [userId, encodedPath, batchId] for inserting
         * and deleting into the DbDocumentMutations index.
         */
        t.key = function(t, e, n) {
            return [ t, $n(e), n ];
        }, t;
    }();

    ir.store = "documentMutations", 
    /**
         * Because we store all the useful information for this store in the key,
         * there is no useful information to store as the value. The raw (unencoded)
         * path cannot be stored because IndexedDb doesn't store prototype
         * information.
         */
    ir.PLACEHOLDER = new ir;

    /**
     * Represents the known absence of a document at a particular version.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */
    var or = function(t, e) {
        this.path = t, this.readTime = e;
    }, sr = function(t, e) {
        this.path = t, this.version = e;
    }, ur = 
    // TODO: We are currently storing full document keys almost three times
    // (once as part of the primary key, once - partly - as `parentPath` and once
    // inside the encoded documents). During our next migration, we should
    // rewrite the primary key as parentPath + document ID which would allow us
    // to drop one value.
    function(
    /**
         * Set to an instance of DbUnknownDocument if the data for a document is
         * not known, but it is known that a document exists at the specified
         * version (e.g. it had a successful update applied to it)
         */
    t, 
    /**
         * Set to an instance of a DbNoDocument if it is known that no document
         * exists.
         */
    e, 
    /**
         * Set to an instance of a Document if there's a cached version of the
         * document.
         */
    n, 
    /**
         * Documents that were written to the remote document store based on
         * a write acknowledgment are marked with `hasCommittedMutations`. These
         * documents are potentially inconsistent with the backend's copy and use
         * the write's commit version as their document version.
         */
    r, 
    /**
         * When the document was read from the backend. Undefined for data written
         * prior to schema version 9.
         */
    i, 
    /**
         * The path of the collection this document is part of. Undefined for data
         * written prior to schema version 9.
         */
    o) {
        this.unknownDocument = t, this.noDocument = e, this.document = n, this.hasCommittedMutations = r, 
        this.readTime = i, this.parentPath = o;
    };

    /**
     * Represents a document that is known to exist but whose data is unknown.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */ ur.store = "remoteDocuments", 
    /**
         * An index that provides access to all entries sorted by read time (which
         * corresponds to the last modification time of each row).
         *
         * This index is used to provide a changelog for Multi-Tab.
         */
    ur.readTimeIndex = "readTimeIndex", ur.readTimeIndexPath = "readTime", 
    /**
         * An index that provides access to documents in a collection sorted by read
         * time.
         *
         * This index is used to allow the RemoteDocumentCache to fetch newly changed
         * documents in a collection.
         */
    ur.collectionReadTimeIndex = "collectionReadTimeIndex", ur.collectionReadTimeIndexPath = [ "parentPath", "readTime" ];

    /**
     * Contains a single entry that has metadata about the remote document cache.
     */
    var ar = 
    /**
         * @param byteSize - Approximately the total size in bytes of all the
         * documents in the document cache.
         */
    function(t) {
        this.byteSize = t;
    };

    ar.store = "remoteDocumentGlobal", ar.key = "remoteDocumentGlobalKey";

    /**
     * An object to be stored in the 'targets' store in IndexedDb.
     *
     * This is based on and should be kept in sync with the proto used in the iOS
     * client.
     *
     * Each query the client listens to against the server is tracked on disk so
     * that the query can be efficiently resumed on restart.
     */
    var cr = function(
    /**
         * An auto-generated sequential numeric identifier for the query.
         *
         * Queries are stored using their canonicalId as the key, but these
         * canonicalIds can be quite long so we additionally assign a unique
         * queryId which can be used by referenced data structures (e.g.
         * indexes) to minimize the on-disk cost.
         */
    t, 
    /**
         * The canonical string representing this query. This is not unique.
         */
    e, 
    /**
         * The last readTime received from the Watch Service for this query.
         *
         * This is the same value as TargetChange.read_time in the protos.
         */
    n, 
    /**
         * An opaque, server-assigned token that allows watching a query to be
         * resumed after disconnecting without retransmitting all the data
         * that matches the query. The resume token essentially identifies a
         * point in time from which the server should resume sending results.
         *
         * This is related to the snapshotVersion in that the resumeToken
         * effectively also encodes that value, but the resumeToken is opaque
         * and sometimes encodes additional information.
         *
         * A consequence of this is that the resumeToken should be used when
         * asking the server to reason about where this client is in the watch
         * stream, but the client should use the snapshotVersion for its own
         * purposes.
         *
         * This is the same value as TargetChange.resume_token in the protos.
         */
    r, 
    /**
         * A sequence number representing the last time this query was
         * listened to, used for garbage collection purposes.
         *
         * Conventionally this would be a timestamp value, but device-local
         * clocks are unreliable and they must be able to create new listens
         * even while disconnected. Instead this should be a monotonically
         * increasing number that's incremented on each listen call.
         *
         * This is different from the queryId since the queryId is an
         * immutable identifier assigned to the Query on first use while
         * lastListenSequenceNumber is updated every time the query is
         * listened to.
         */
    i, 
    /**
         * Denotes the maximum snapshot version at which the associated query view
         * contained no limbo documents.  Undefined for data written prior to
         * schema version 9.
         */
    o, 
    /**
         * The query for this target.
         *
         * Because canonical ids are not unique we must store the actual query. We
         * use the proto to have an object we can persist without having to
         * duplicate translation logic to and from a `Query` object.
         */
    s) {
        this.targetId = t, this.canonicalId = e, this.readTime = n, this.resumeToken = r, 
        this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = o, this.query = s;
    };

    cr.store = "targets", 
    /** Keys are automatically assigned via the targetId property. */
    cr.keyPath = "targetId", 
    /** The name of the queryTargets index. */
    cr.queryTargetsIndexName = "queryTargetsIndex", 
    /**
         * The index of all canonicalIds to the targets that they match. This is not
         * a unique mapping because canonicalId does not promise a unique name for all
         * possible queries, so we append the targetId to make the mapping unique.
         */
    cr.queryTargetsKeyPath = [ "canonicalId", "targetId" ];

    /**
     * An object representing an association between a target and a document, or a
     * sentinel row marking the last sequence number at which a document was used.
     * Each document cached must have a corresponding sentinel row before lru
     * garbage collection is enabled.
     *
     * The target associations and sentinel rows are co-located so that orphaned
     * documents and their sequence numbers can be identified efficiently via a scan
     * of this store.
     */
    var hr = function(
    /**
         * The targetId identifying a target or 0 for a sentinel row.
         */
    t, 
    /**
         * The path to the document, as encoded in the key.
         */
    e, 
    /**
         * If this is a sentinel row, this should be the sequence number of the last
         * time the document specified by `path` was used. Otherwise, it should be
         * `undefined`.
         */
    n) {
        this.targetId = t, this.path = e, this.sequenceNumber = n;
    };

    /** Name of the IndexedDb object store.  */ hr.store = "targetDocuments", 
    /** Keys are automatically assigned via the targetId, path properties. */
    hr.keyPath = [ "targetId", "path" ], 
    /** The index name for the reverse index. */
    hr.documentTargetsIndex = "documentTargetsIndex", 
    /** We also need to create the reverse index for these properties. */
    hr.documentTargetsKeyPath = [ "path", "targetId" ];

    /**
     * A record of global state tracked across all Targets, tracked separately
     * to avoid the need for extra indexes.
     *
     * This should be kept in-sync with the proto used in the iOS client.
     */
    var fr = function(
    /**
         * The highest numbered target id across all targets.
         *
         * See DbTarget.targetId.
         */
    t, 
    /**
         * The highest numbered lastListenSequenceNumber across all targets.
         *
         * See DbTarget.lastListenSequenceNumber.
         */
    e, 
    /**
         * A global snapshot version representing the last consistent snapshot we
         * received from the backend. This is monotonically increasing and any
         * snapshots received from the backend prior to this version (e.g. for
         * targets resumed with a resumeToken) should be suppressed (buffered)
         * until the backend has caught up to this snapshot version again. This
         * prevents our cache from ever going backwards in time.
         */
    n, 
    /**
         * The number of targets persisted.
         */
    r) {
        this.highestTargetId = t, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, 
        this.targetCount = r;
    };

    /**
     * The key string used for the single object that exists in the
     * DbTargetGlobal store.
     */ fr.key = "targetGlobalKey", fr.store = "targetGlobal";

    /**
     * An object representing an association between a Collection id (e.g. 'messages')
     * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
     * This is used to efficiently find all collections to query when performing
     * a Collection Group query.
     */
    var lr = function(
    /**
         * The collectionId (e.g. 'messages')
         */
    t, 
    /**
         * The path to the parent (either a document location or an empty path for
         * a root-level collection).
         */
    e) {
        this.collectionId = t, this.parent = e;
    };

    /** Name of the IndexedDb object store. */ lr.store = "collectionParents", 
    /** Keys are automatically assigned via the collectionId, parent properties. */
    lr.keyPath = [ "collectionId", "parent" ];

    /**
     * A record of the metadata state of each client.
     *
     * PORTING NOTE: This is used to synchronize multi-tab state and does not need
     * to be ported to iOS or Android.
     */
    var dr = function(
    // Note: Previous schema versions included a field
    // "lastProcessedDocumentChangeId". Don't use anymore.
    /** The auto-generated client id assigned at client startup. */
    t, 
    /** The last time this state was updated. */
    e, 
    /** Whether the client's network connection is enabled. */
    n, 
    /** Whether this client is running in a foreground tab. */
    r) {
        this.clientId = t, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = r;
    };

    /** Name of the IndexedDb object store. */ dr.store = "clientMetadata", 
    /** Keys are automatically assigned via the clientId properties. */
    dr.keyPath = "clientId";

    /**
     * A object representing a bundle loaded by the SDK.
     */
    var pr = function(
    /** The ID of the loaded bundle. */
    t, 
    /** The create time of the loaded bundle. */
    e, 
    /** The schema version of the loaded bundle. */
    n) {
        this.bundleId = t, this.createTime = e, this.version = n;
    };

    /** Name of the IndexedDb object store. */ pr.store = "bundles", pr.keyPath = "bundleId";

    /**
     * A object representing a named query loaded by the SDK via a bundle.
     */
    var yr = function(
    /** The name of the query. */
    t, 
    /** The read time of the results saved in the bundle from the named query. */
    e, 
    /** The query saved in the bundle. */
    n) {
        this.name = t, this.readTime = e, this.bundledQuery = n;
    };

    /** Name of the IndexedDb object store. */ yr.store = "namedQueries", yr.keyPath = "name";

    // Visible for testing
    var vr = __spreadArray(__spreadArray([], __spreadArray(__spreadArray([], __spreadArray(__spreadArray([], __spreadArray(__spreadArray([], [ nr.store, rr.store, ir.store, ur.store, cr.store, er.store, fr.store, hr.store ]), [ dr.store ])), [ ar.store ])), [ lr.store ])), [ pr.store, yr.store ]), mr = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.", gr = /** @class */ function() {
        function t() {
            this.onCommittedListeners = [];
        }
        return t.prototype.addOnCommittedListener = function(t) {
            this.onCommittedListeners.push(t);
        }, t.prototype.raiseOnCommittedEvent = function() {
            this.onCommittedListeners.forEach((function(t) {
                return t();
            }));
        }, t;
    }(), wr = function() {
        var t = this;
        this.promise = new Promise((function(e, n) {
            t.resolve = e, t.reject = n;
        }));
    }, br = /** @class */ function() {
        function t(t) {
            var e = this;
            // NOTE: next/catchCallback will always point to our own wrapper functions,
            // not the user's raw next() or catch() callbacks.
                    this.nextCallback = null, this.catchCallback = null, 
            // When the operation resolves, we'll set result or error and mark isDone.
            this.result = void 0, this.error = void 0, this.isDone = !1, 
            // Set to true when .then() or .catch() are called and prevents additional
            // chaining.
            this.callbackAttached = !1, t((function(t) {
                e.isDone = !0, e.result = t, e.nextCallback && 
                // value should be defined unless T is Void, but we can't express
                // that in the type system.
                e.nextCallback(t);
            }), (function(t) {
                e.isDone = !0, e.error = t, e.catchCallback && e.catchCallback(t);
            }));
        }
        return t.prototype.catch = function(t) {
            return this.next(void 0, t);
        }, t.prototype.next = function(e, n) {
            var r = this;
            return this.callbackAttached && L(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(n, this.error) : this.wrapSuccess(e, this.result) : new t((function(t, i) {
                r.nextCallback = function(n) {
                    r.wrapSuccess(e, n).next(t, i);
                }, r.catchCallback = function(e) {
                    r.wrapFailure(n, e).next(t, i);
                };
            }));
        }, t.prototype.toPromise = function() {
            var t = this;
            return new Promise((function(e, n) {
                t.next(e, n);
            }));
        }, t.prototype.wrapUserFunction = function(e) {
            try {
                var n = e();
                return n instanceof t ? n : t.resolve(n);
            } catch (e) {
                return t.reject(e);
            }
        }, t.prototype.wrapSuccess = function(e, n) {
            return e ? this.wrapUserFunction((function() {
                return e(n);
            })) : t.resolve(n);
        }, t.prototype.wrapFailure = function(e, n) {
            return e ? this.wrapUserFunction((function() {
                return e(n);
            })) : t.reject(n);
        }, t.resolve = function(e) {
            return new t((function(t, n) {
                t(e);
            }));
        }, t.reject = function(e) {
            return new t((function(t, n) {
                n(e);
            }));
        }, t.waitFor = function(
        // Accept all Promise types in waitFor().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        e) {
            return new t((function(t, n) {
                var r = 0, i = 0, o = !1;
                e.forEach((function(e) {
                    ++r, e.next((function() {
                        ++i, o && i === r && t();
                    }), (function(t) {
                        return n(t);
                    }));
                })), o = !0, i === r && t();
            }));
        }, 
        /**
         * Given an array of predicate functions that asynchronously evaluate to a
         * boolean, implements a short-circuiting `or` between the results. Predicates
         * will be evaluated until one of them returns `true`, then stop. The final
         * result will be whether any of them returned `true`.
         */
        t.or = function(e) {
            for (var n = t.resolve(!1), r = function(e) {
                n = n.next((function(n) {
                    return n ? t.resolve(n) : e();
                }));
            }, i = 0, o = e; i < o.length; i++) {
                r(o[i]);
            }
            return n;
        }, t.forEach = function(t, e) {
            var n = this, r = [];
            return t.forEach((function(t, i) {
                r.push(e.call(n, t, i));
            })), this.waitFor(r);
        }, t;
    }(), Ir = /** @class */ function() {
        function t(t, e) {
            var n = this;
            this.action = t, this.transaction = e, this.aborted = !1, 
            /**
                 * A promise that resolves with the result of the IndexedDb transaction.
                 */
            this.ft = new wr, this.transaction.oncomplete = function() {
                n.ft.resolve();
            }, this.transaction.onabort = function() {
                e.error ? n.ft.reject(new _r(t, e.error)) : n.ft.resolve();
            }, this.transaction.onerror = function(e) {
                var r = kr(e.target.error);
                n.ft.reject(new _r(t, r));
            };
        }
        return t.open = function(e, n, r, i) {
            try {
                return new t(n, e.transaction(i, r));
            } catch (e) {
                throw new _r(n, e);
            }
        }, Object.defineProperty(t.prototype, "dt", {
            get: function() {
                return this.ft.promise;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.abort = function(t) {
            t && this.ft.reject(t), this.aborted || (k("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
            this.aborted = !0, this.transaction.abort());
        }, 
        /**
         * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
         * operations performed on the SimpleDbStore happen within the context of this
         * transaction and it cannot be used anymore once the transaction is
         * completed.
         *
         * Note that we can't actually enforce that the KeyType and ValueType are
         * correct, but they allow type safety through the rest of the consuming code.
         */
        t.prototype.store = function(t) {
            var e = this.transaction.objectStore(t);
            return new Nr(e);
        }, t;
    }(), Er = /** @class */ function() {
        /*
         * Creates a new SimpleDb wrapper for IndexedDb database `name`.
         *
         * Note that `version` must not be a downgrade. IndexedDB does not support
         * downgrading the schema version. We currently do not support any way to do
         * versioning outside of IndexedDB's versioning mechanism, as only
         * version-upgrade transactions are allowed to do things like create
         * objectstores.
         */
        function t(e, n, r) {
            this.name = e, this.version = n, this.wt = r, 
            // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
            // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
            // whatever reason it's much harder to hit after 12.2 so we only proactively
            // log on 12.2.
            12.2 === t._t(getUA()) && C("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
        }
        /** Deletes the specified database. */    return t.delete = function(t) {
            return k("SimpleDb", "Removing database:", t), Dr(window.indexedDB.deleteDatabase(t)).toPromise();
        }, 
        /** Returns true if IndexedDB is available in the current environment. */ t.yt = function() {
            if ("undefined" == typeof indexedDB) return !1;
            if (t.gt()) return !0;
            // We extensively use indexed array values and compound keys,
            // which IE and Edge do not support. However, they still have indexedDB
            // defined on the window, so we need to check for them here and make sure
            // to return that persistence is not enabled for those browsers.
            // For tracking support of this feature, see here:
            // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
            // Check the UA string to find out the browser.
                    var e = getUA(), n = t._t(e), r = 0 < n && n < 10, o = t.Et(e), s = 0 < o && o < 4.5;
            // IE 10
            // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
            // IE 11
            // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
            // Edge
            // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
            // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
            // iOS Safari: Disable for users running iOS version < 10.
                    return !(e.indexOf("MSIE ") > 0 || e.indexOf("Trident/") > 0 || e.indexOf("Edge/") > 0 || r || s);
        }, 
        /**
         * Returns true if the backing IndexedDB store is the Node IndexedDBShim
         * (see https://github.com/axemclion/IndexedDBShim).
         */
        t.gt = function() {
            var t;
            return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.Tt);
        }, 
        /** Helper to get a typed SimpleDbStore from a transaction. */ t.It = function(t, e) {
            return t.store(e);
        }, 
        // visible for testing
        /** Parse User Agent to determine iOS version. Returns -1 if not found. */
        t._t = function(t) {
            var e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
            return Number(n);
        }, 
        // visible for testing
        /** Parse User Agent to determine Android version. Returns -1 if not found. */
        t.Et = function(t) {
            var e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
            return Number(n);
        }, 
        /**
         * Opens the specified database, creating or upgrading it if necessary.
         */
        t.prototype.At = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, n = this;
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return this.db ? [ 3 /*break*/ , 2 ] : (k("SimpleDb", "Opening database:", this.name), 
                        e = this, [ 4 /*yield*/ , new Promise((function(e, r) {
                            // TODO(mikelehen): Investigate browser compatibility.
                            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                            // suggests IE9 and older WebKit browsers handle upgrade
                            // differently. They expect setVersion, as described here:
                            // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                            var i = indexedDB.open(n.name, n.version);
                            i.onsuccess = function(t) {
                                var n = t.target.result;
                                e(n);
                            }, i.onblocked = function() {
                                r(new _r(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                            }, i.onerror = function(e) {
                                var n = e.target.error;
                                "VersionError" === n.name ? r(new N(S.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : r(new _r(t, n));
                            }, i.onupgradeneeded = function(t) {
                                k("SimpleDb", 'Database "' + n.name + '" requires upgrade from version:', t.oldVersion);
                                var e = t.target.result;
                                n.wt.Rt(e, i.transaction, t.oldVersion, n.version).next((function() {
                                    k("SimpleDb", "Database upgrade to version " + n.version + " complete");
                                }));
                            };
                        })) ]);

                      case 1:
                        e.db = r.sent(), r.label = 2;

                      case 2:
                        return [ 2 /*return*/ , (this.bt && (this.db.onversionchange = function(t) {
                            return n.bt(t);
                        }), this.db) ];
                    }
                }));
            }));
        }, t.prototype.vt = function(t) {
            this.bt = t, this.db && (this.db.onversionchange = function(e) {
                return t(e);
            });
        }, t.prototype.runTransaction = function(t, e, i, o) {
            return __awaiter(this, void 0, void 0, (function() {
                var n, s, u, a, c;
                return __generator(this, (function(h) {
                    switch (h.label) {
                      case 0:
                        n = "readonly" === e, s = 0, u = function() {
                            var e, u, c, h, f;
                            return __generator(this, (function(r) {
                                switch (r.label) {
                                  case 0:
                                    ++s, r.label = 1;

                                  case 1:
                                    return r.trys.push([ 1, 4, , 5 ]), [ 4 /*yield*/ , a.At(t) ];

                                  case 2:
                                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                    // fire), but still return the original transactionFnResult back to the
                                    // caller.
                                    return a.db = r.sent(), e = Ir.open(a.db, t, n ? "readonly" : "readwrite", i), u = o(e).catch((function(t) {
                                        // Abort the transaction if there was an error.
                                        return e.abort(t), br.reject(t);
                                    })).toPromise(), c = {}, u.catch((function() {})), [ 4 /*yield*/ , e.dt ];

                                  case 3:
                                    return [ 2 /*return*/ , (c.value = (
                                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                    // fire), but still return the original transactionFnResult back to the
                                    // caller.
                                    r.sent(), u), c) ];

                                  case 4:
                                    return h = r.sent(), f = "FirebaseError" !== h.name && s < 3, k("SimpleDb", "Transaction failed with error:", h.message, "Retrying:", f), 
                                    a.close(), f ? [ 3 /*break*/ , 5 ] : [ 2 /*return*/ , {
                                        value: Promise.reject(h)
                                    } ];

                                  case 5:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }, a = this, h.label = 1;

                      case 1:
                        return [ 5 /*yield**/ , u() ];

                      case 2:
                        if ("object" == typeof (c = h.sent())) return [ 2 /*return*/ , c.value ];
                        h.label = 3;

                      case 3:
                        return [ 3 /*break*/ , 1 ];

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.close = function() {
            this.db && this.db.close(), this.db = void 0;
        }, t;
    }(), Tr = /** @class */ function() {
        function t(t) {
            this.Pt = t, this.Vt = !1, this.St = null;
        }
        return Object.defineProperty(t.prototype, "isDone", {
            get: function() {
                return this.Vt;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "Dt", {
            get: function() {
                return this.St;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "cursor", {
            set: function(t) {
                this.Pt = t;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * This function can be called to stop iteration at any point.
         */
        t.prototype.done = function() {
            this.Vt = !0;
        }, 
        /**
         * This function can be called to skip to that next key, which could be
         * an index or a primary key.
         */
        t.prototype.Ct = function(t) {
            this.St = t;
        }, 
        /**
         * Delete the current cursor value from the object store.
         *
         * NOTE: You CANNOT do this with a keysOnly query.
         */
        t.prototype.delete = function() {
            return Dr(this.Pt.delete());
        }, t;
    }(), _r = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this, S.UNAVAILABLE, "IndexedDB transaction '" + t + "' failed: " + n) || this).name = "IndexedDbTransactionError", 
            r;
        }
        return __extends$1(n, e), n;
    }(N);

    // V2 is no longer usable (see comment at top of file)
    // Visible for testing
    /**
     * A base class representing a persistence transaction, encapsulating both the
     * transaction's sequence numbers as well as a list of onCommitted listeners.
     *
     * When you call Persistence.runTransaction(), it will create a transaction and
     * pass it to your callback. You then pass it to any method that operates
     * on persistence.
     */
    /** Verifies whether `e` is an IndexedDbTransactionError. */ function Sr(t) {
        // Use name equality, as instanceof checks on errors don't work with errors
        // that wrap other errors.
        return "IndexedDbTransactionError" === t.name;
    }

    /**
     * A wrapper around an IDBObjectStore providing an API that:
     *
     * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
     * methods for acting against the object store.
     * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
     * method return a PersistencePromise instead.
     * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
     * intermediate IndexedDB types (IDBCursorWithValue, etc.)
     */ var Nr = /** @class */ function() {
        function t(t) {
            this.store = t;
        }
        return t.prototype.put = function(t, e) {
            var n;
            return void 0 !== e ? (k("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (k("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
            n = this.store.put(t)), Dr(n);
        }, 
        /**
         * Adds a new value into an Object Store and returns the new key. Similar to
         * IndexedDb's `add()`, this method will fail on primary key collisions.
         *
         * @param value - The object to write.
         * @returns The key of the value to add.
         */
        t.prototype.add = function(t) {
            return k("SimpleDb", "ADD", this.store.name, t, t), Dr(this.store.add(t));
        }, 
        /**
         * Gets the object with the specified key from the specified store, or null
         * if no object exists with the specified key.
         *
         * @key The key of the object to get.
         * @returns The object with the specified key or null if no object exists.
         */
        t.prototype.get = function(t) {
            var e = this;
            // We're doing an unsafe cast to ValueType.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return Dr(this.store.get(t)).next((function(n) {
                // Normalize nonexistence to null.
                return void 0 === n && (n = null), k("SimpleDb", "GET", e.store.name, t, n), n;
            }));
        }, t.prototype.delete = function(t) {
            return k("SimpleDb", "DELETE", this.store.name, t), Dr(this.store.delete(t));
        }, 
        /**
         * If we ever need more of the count variants, we can add overloads. For now,
         * all we need is to count everything in a store.
         *
         * Returns the number of rows in the store.
         */
        t.prototype.count = function() {
            return k("SimpleDb", "COUNT", this.store.name), Dr(this.store.count());
        }, t.prototype.Nt = function(t, e) {
            var n = this.cursor(this.options(t, e)), r = [];
            return this.xt(n, (function(t, e) {
                r.push(e);
            })).next((function() {
                return r;
            }));
        }, t.prototype.Ft = function(t, e) {
            k("SimpleDb", "DELETE ALL", this.store.name);
            var n = this.options(t, e);
            n.kt = !1;
            var r = this.cursor(n);
            return this.xt(r, (function(t, e, n) {
                return n.delete();
            }));
        }, t.prototype.$t = function(t, e) {
            var n;
            e ? n = t : (n = {}, e = t);
            var r = this.cursor(n);
            return this.xt(r, e);
        }, 
        /**
         * Iterates over a store, but waits for the given callback to complete for
         * each entry before iterating the next entry. This allows the callback to do
         * asynchronous work to determine if this iteration should continue.
         *
         * The provided callback should return `true` to continue iteration, and
         * `false` otherwise.
         */
        t.prototype.Ot = function(t) {
            var e = this.cursor({});
            return new br((function(n, r) {
                e.onerror = function(t) {
                    var e = kr(t.target.error);
                    r(e);
                }, e.onsuccess = function(e) {
                    var r = e.target.result;
                    r ? t(r.primaryKey, r.value).next((function(t) {
                        t ? r.continue() : n();
                    })) : n();
                };
            }));
        }, t.prototype.xt = function(t, e) {
            var n = [];
            return new br((function(r, i) {
                t.onerror = function(t) {
                    i(t.target.error);
                }, t.onsuccess = function(t) {
                    var i = t.target.result;
                    if (i) {
                        var o = new Tr(i), s = e(i.primaryKey, i.value, o);
                        if (s instanceof br) {
                            var u = s.catch((function(t) {
                                return o.done(), br.reject(t);
                            }));
                            n.push(u);
                        }
                        o.isDone ? r() : null === o.Dt ? i.continue() : i.continue(o.Dt);
                    } else r();
                };
            })).next((function() {
                return br.waitFor(n);
            }));
        }, t.prototype.options = function(t, e) {
            var n;
            return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
                index: n,
                range: e
            };
        }, t.prototype.cursor = function(t) {
            var e = "next";
            if (t.reverse && (e = "prev"), t.index) {
                var n = this.store.index(t.index);
                return t.kt ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
            }
            return this.store.openCursor(t.range, e);
        }, t;
    }();

    /**
     * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
     * handlers to resolve / reject the PersistencePromise as appropriate.
     */ function Dr(t) {
        return new br((function(e, n) {
            t.onsuccess = function(t) {
                var n = t.target.result;
                e(n);
            }, t.onerror = function(t) {
                var e = kr(t.target.error);
                n(e);
            };
        }));
    }

    // Guard so we only report the error once.
    var Ar = !1;

    function kr(t) {
        var e = Er._t(getUA());
        if (e >= 12.2 && e < 13) {
            var n = "An internal error was encountered in the Indexed Database server";
            if (t.message.indexOf(n) >= 0) {
                // Wrap error in a more descriptive one.
                var r = new N("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + n + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
                return Ar || (Ar = !0, 
                // Throw a global exception outside of this promise chain, for the user to
                // potentially catch.
                setTimeout((function() {
                    throw r;
                }), 0)), r;
            }
        }
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Cr = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).Mt = t, r.currentSequenceNumber = n, r;
        }
        return __extends$1(n, e), n;
    }(gr);

    function xr(t, e) {
        var n = P$1(t);
        return Er.It(n.Mt, e);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A batch of mutations that will be sent as one unit to the backend.
     */ var Rr = /** @class */ function() {
        /**
         * @param batchId - The unique ID of this mutation batch.
         * @param localWriteTime - The original write time of this mutation.
         * @param baseMutations - Mutations that are used to populate the base
         * values when this mutation is applied locally. This can be used to locally
         * overwrite values that are persisted in the remote document cache. Base
         * mutations are never sent to the backend.
         * @param mutations - The user-provided mutations in this mutation batch.
         * User-provided mutations are applied both locally and remotely on the
         * backend.
         */
        function t(t, e, n, r) {
            this.batchId = t, this.localWriteTime = e, this.baseMutations = n, this.mutations = r
            /**
         * Applies all the mutations in this MutationBatch to the specified document
         * to compute the state of the remote document
         *
         * @param document - The document to apply mutations to.
         * @param batchResult - The result of applying the MutationBatch to the
         * backend.
         */;
        }
        return t.prototype.applyToRemoteDocument = function(t, e) {
            for (var n = e.mutationResults, r = 0; r < this.mutations.length; r++) {
                var i = this.mutations[r];
                i.key.isEqual(t.key) && ke(i, t, n[r]);
            }
        }, 
        /**
         * Computes the local view of a document given all the mutations in this
         * batch.
         *
         * @param document - The document to apply mutations to.
         */
        t.prototype.applyToLocalView = function(t) {
            // First, apply the base state. This allows us to apply non-idempotent
            // transform against a consistent set of values.
            for (var e = 0, n = this.baseMutations; e < n.length; e++) {
                (o = n[e]).key.isEqual(t.key) && Ce(o, t, this.localWriteTime);
            }
            // Second, apply all user-provided mutations.
                    for (var r = 0, i = this.mutations; r < i.length; r++) {
                var o;
                (o = i[r]).key.isEqual(t.key) && Ce(o, t, this.localWriteTime);
            }
        }, 
        /**
         * Computes the local view for all provided documents given the mutations in
         * this batch.
         */
        t.prototype.applyToLocalDocumentSet = function(t) {
            var e = this;
            // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
            // directly (as done in `applyToLocalView()`), we can reduce the complexity
            // to O(n).
                    this.mutations.forEach((function(n) {
                var r = t.get(n.key), i = r;
                // TODO(mutabledocuments): This method should take a MutableDocumentMap
                // and we should remove this cast.
                            e.applyToLocalView(i), r.isValidDocument() || i.convertToNoDocument(j.min());
            }));
        }, t.prototype.keys = function() {
            return this.mutations.reduce((function(t, e) {
                return t.add(e.key);
            }), on());
        }, t.prototype.isEqual = function(t) {
            return this.batchId === t.batchId && q(this.mutations, t.mutations, (function(t, e) {
                return Re(t, e);
            })) && q(this.baseMutations, t.baseMutations, (function(t, e) {
                return Re(t, e);
            }));
        }, t;
    }(), Lr = /** @class */ function() {
        function t(t, e, n, 
        /**
         * A pre-computed mapping from each mutated document to the resulting
         * version.
         */
        r) {
            this.batch = t, this.commitVersion = e, this.mutationResults = n, this.docVersions = r
            /**
         * Creates a new MutationBatchResult for the given batch and results. There
         * must be one result for each mutation in the batch. This static factory
         * caches a document=&gt;version mapping (docVersions).
         */;
        }
        return t.from = function(e, n, r) {
            O(e.mutations.length === r.length);
            for (var i = nn(), o = e.mutations, s = 0; s < o.length; s++) i = i.insert(o[s].key, r[s].version);
            return new t(e, n, r, i);
        }, t;
    }(), Or = /** @class */ function() {
        function t(
        /** The target being listened to. */
        t, 
        /**
         * The target ID to which the target corresponds; Assigned by the
         * LocalStore for user listens and by the SyncEngine for limbo watches.
         */
        e, 
        /** The purpose of the target. */
        n, 
        /**
         * The sequence number of the last transaction during which this target data
         * was modified.
         */
        r, 
        /** The latest snapshot version seen for this target. */
        i
        /**
         * The maximum snapshot version at which the associated view
         * contained no limbo documents.
         */ , o
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */ , s) {
            void 0 === i && (i = j.min()), void 0 === o && (o = j.min()), void 0 === s && (s = X.EMPTY_BYTE_STRING), 
            this.target = t, this.targetId = e, this.purpose = n, this.sequenceNumber = r, this.snapshotVersion = i, 
            this.lastLimboFreeSnapshotVersion = o, this.resumeToken = s;
        }
        /** Creates a new target data instance with an updated sequence number. */    return t.prototype.withSequenceNumber = function(e) {
            return new t(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
        }, 
        /**
         * Creates a new target data instance with an updated resume token and
         * snapshot version.
         */
        t.prototype.withResumeToken = function(e, n) {
            return new t(this.target, this.targetId, this.purpose, this.sequenceNumber, n, this.lastLimboFreeSnapshotVersion, e);
        }, 
        /**
         * Creates a new target data instance with an updated last limbo free
         * snapshot version number.
         */
        t.prototype.withLastLimboFreeSnapshotVersion = function(e) {
            return new t(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken);
        }, t;
    }(), Pr = function(t) {
        this.Lt = t;
    };

    /** The result of applying a mutation batch to the backend. */
    /** Decodes a remote document from storage locally to a Document. */ function Fr(t, e) {
        if (e.document) return Ln(t.Lt, e.document, !!e.hasCommittedMutations);
        if (e.noDocument) {
            var n = at.fromSegments(e.noDocument.path), r = Br(e.noDocument.readTime), i = St.newNoDocument(n, r);
            return e.hasCommittedMutations ? i.setHasCommittedMutations() : i;
        }
        if (e.unknownDocument) {
            var o = at.fromSegments(e.unknownDocument.path);
            r = Br(e.unknownDocument.version);
            return St.newUnknownDocument(o, r);
        }
        return L();
    }

    /** Encodes a document for storage locally. */ function Mr(t, e, n) {
        var r = Vr(n), i = e.key.path.popLast().toArray();
        if (e.isFoundDocument()) {
            var o = function(t, e) {
                return {
                    name: Nn(t, e.key),
                    fields: e.data.value.mapValue.fields,
                    updateTime: bn(t, e.version.toTimestamp())
                };
            }(t.Lt, e), s = e.hasCommittedMutations;
            return new ur(
            /* unknownDocument= */ null, 
            /* noDocument= */ null, o, s, r, i);
        }
        if (e.isNoDocument()) {
            var u = e.key.path.toArray(), a = Ur(e.version);
            s = e.hasCommittedMutations;
            return new ur(
            /* unknownDocument= */ null, new or(u, a), 
            /* document= */ null, s, r, i);
        }
        if (e.isUnknownDocument()) {
            var c = e.key.path.toArray(), h = Ur(e.version);
            return new ur(new sr(c, h), 
            /* noDocument= */ null, 
            /* document= */ null, 
            /* hasCommittedMutations= */ !0, r, i);
        }
        return L();
    }

    function Vr(t) {
        var e = t.toTimestamp();
        return [ e.seconds, e.nanoseconds ];
    }

    function qr(t) {
        var e = new B(t[0], t[1]);
        return j.fromTimestamp(e);
    }

    function Ur(t) {
        var e = t.toTimestamp();
        return new tr(e.seconds, e.nanoseconds);
    }

    function Br(t) {
        var e = new B(t.seconds, t.nanoseconds);
        return j.fromTimestamp(e);
    }

    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */
    /** Decodes a DbMutationBatch into a MutationBatch */ function jr(t, e) {
        // Squash old transform mutations into existing patch or set mutations.
        // The replacement of representing `transforms` with `update_transforms`
        // on the SDK means that old `transform` mutations stored in IndexedDB need
        // to be updated to `update_transforms`.
        // TODO(b/174608374): Remove this code once we perform a schema migration.
        for (var n = (e.baseMutations || []).map((function(e) {
            return Pn(t.Lt, e);
        })), r = 0; r < e.mutations.length - 1; ++r) {
            var i = e.mutations[r];
            if (r + 1 < e.mutations.length && void 0 !== e.mutations[r + 1].transform) {
                var o = e.mutations[r + 1];
                i.updateTransforms = o.transform.fieldTransforms, e.mutations.splice(r + 1, 1), 
                ++r;
            }
        }
        var s = e.mutations.map((function(e) {
            return Pn(t.Lt, e);
        })), u = B.fromMillis(e.localWriteTimeMs);
        return new Rr(e.batchId, u, n, s);
    }

    /** Decodes a DbTarget into TargetData */ function Kr(t) {
        var e, n, r = Br(t.readTime), i = void 0 !== t.lastLimboFreeSnapshotVersion ? Br(t.lastLimboFreeSnapshotVersion) : j.min();
        return void 0 !== t.query.documents ? (O(1 === (n = t.query).documents.length), 
        e = ee(Ht(kn(n.documents[0])))) : e = function(t) {
            return ee(Vn(t));
        }(t.query), new Or(e, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, r, i, X.fromBase64String(t.resumeToken))
        /** Encodes TargetData into a DbTarget for storage locally. */;
    }

    function Qr(t, e) {
        var n, r = Ur(e.snapshotVersion), i = Ur(e.lastLimboFreeSnapshotVersion);
        n = Ct(e.target) ? Fn(t.Lt, e.target) : Mn(t.Lt, e.target);
        // We can't store the resumeToken as a ByteString in IndexedDb, so we
        // convert it to a base64 string for storage.
        var o = e.resumeToken.toBase64();
        // lastListenSequenceNumber is always 0 until we do real GC.
            return new cr(e.targetId, At(e.target), r, o, e.sequenceNumber, i, n);
    }

    /**
     * A helper function for figuring out what kind of query has been stored.
     */
    /**
     * Encodes a `BundledQuery` from bundle proto to a Query object.
     *
     * This reconstructs the original query used to build the bundle being loaded,
     * including features exists only in SDKs (for example: limit-to-last).
     */ function Gr(t) {
        var e = Vn({
            parent: t.parent,
            structuredQuery: t.structuredQuery
        });
        return "LAST" === t.limitType ? ne(e, e.limit, "L" /* Last */) : e;
    }

    /** Encodes a NamedQuery proto object to a NamedQuery model object. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var zr = /** @class */ function() {
        function t() {}
        return t.prototype.getBundleMetadata = function(t, e) {
            return Wr(t).get(e).next((function(t) {
                if (t) return {
                    id: (e = t).bundleId,
                    createTime: Br(e.createTime),
                    version: e.version
                };
                /** Encodes a DbBundle to a BundleMetadata object. */            var e;
                /** Encodes a BundleMetadata to a DbBundle. */        }));
        }, t.prototype.saveBundleMetadata = function(t, e) {
            return Wr(t).put({
                bundleId: (n = e).id,
                createTime: Ur(Tn(n.createTime)),
                version: n.version
            });
            var n;
            /** Encodes a DbNamedQuery to a NamedQuery. */    }, t.prototype.getNamedQuery = function(t, e) {
            return Hr(t).get(e).next((function(t) {
                if (t) return {
                    name: (e = t).name,
                    query: Gr(e.bundledQuery),
                    readTime: Br(e.readTime)
                };
                var e;
                /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */        }));
        }, t.prototype.saveNamedQuery = function(t, e) {
            return Hr(t).put(function(t) {
                return {
                    name: t.name,
                    readTime: Ur(Tn(t.readTime)),
                    bundledQuery: t.bundledQuery
                };
            }(e));
        }, t;
    }();

    /**
     * Helper to get a typed SimpleDbStore for the bundles object store.
     */ function Wr(t) {
        return xr(t, pr.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the namedQueries object store.
     */ function Hr(t) {
        return xr(t, yr.store);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory implementation of IndexManager.
     */ var Yr = /** @class */ function() {
        function t() {
            this.Bt = new $r;
        }
        return t.prototype.addToCollectionParentIndex = function(t, e) {
            return this.Bt.add(e), br.resolve();
        }, t.prototype.getCollectionParents = function(t, e) {
            return br.resolve(this.Bt.getEntries(e));
        }, t;
    }(), $r = /** @class */ function() {
        function t() {
            this.index = {};
        }
        // Returns false if the entry already existed.
            return t.prototype.add = function(t) {
            var e = t.lastSegment(), n = t.popLast(), r = this.index[e] || new Ye(W.comparator), i = !r.has(n);
            return this.index[e] = r.add(n), i;
        }, t.prototype.has = function(t) {
            var e = t.lastSegment(), n = t.popLast(), r = this.index[e];
            return r && r.has(n);
        }, t.prototype.getEntries = function(t) {
            return (this.index[t] || new Ye(W.comparator)).toArray();
        }, t;
    }(), Xr = /** @class */ function() {
        function t() {
            /**
             * An in-memory copy of the index entries we've already written since the SDK
             * launched. Used to avoid re-writing the same entry repeatedly.
             *
             * This is *NOT* a complete cache of what's in persistence and so can never be used to
             * satisfy reads.
             */
            this.qt = new $r;
        }
        /**
         * Adds a new entry to the collection parent index.
         *
         * Repeated calls for the same collectionPath should be avoided within a
         * transaction as IndexedDbIndexManager only caches writes once a transaction
         * has been committed.
         */    return t.prototype.addToCollectionParentIndex = function(t, e) {
            var n = this;
            if (!this.qt.has(e)) {
                var r = e.lastSegment(), i = e.popLast();
                t.addOnCommittedListener((function() {
                    // Add the collection to the in memory cache only if the transaction was
                    // successfully committed.
                    n.qt.add(e);
                }));
                var o = {
                    collectionId: r,
                    parent: $n(i)
                };
                return Jr(t).put(o);
            }
            return br.resolve();
        }, t.prototype.getCollectionParents = function(t, e) {
            var n = [], r = IDBKeyRange.bound([ e, "" ], [ U(e), "" ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return Jr(t).Nt(r).next((function(t) {
                for (var r = 0, i = t; r < i.length; r++) {
                    var o = i[r];
                    // This collectionId guard shouldn't be necessary (and isn't as long
                    // as we're running in a real browser), but there's a bug in
                    // indexeddbshim that breaks our range in our tests running in node:
                    // https://github.com/axemclion/IndexedDBShim/issues/334
                                    if (o.collectionId !== e) break;
                    n.push(Zn(o.parent));
                }
                return n;
            }));
        }, t;
    }();

    /**
     * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
     * Also used for in-memory caching by IndexedDbIndexManager and initial index population
     * in indexeddb_schema.ts
     */
    /**
     * Helper to get a typed SimpleDbStore for the collectionParents
     * document store.
     */
    function Jr(t) {
        return xr(t, lr.store);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Zr = {
        didRun: !1,
        sequenceNumbersCollected: 0,
        targetsRemoved: 0,
        documentsRemoved: 0
    }, ti = /** @class */ function() {
        function t(
        // When we attempt to collect, we will only do so if the cache size is greater than this
        // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
        t, 
        // The percentage of sequence numbers that we will attempt to collect
        e, 
        // A cap on the total number of sequence numbers that will be collected. This prevents
        // us from collecting a huge number of sequence numbers if the cache has grown very large.
        n) {
            this.cacheSizeCollectionThreshold = t, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n;
        }
        return t.withCacheSize = function(e) {
            return new t(e, t.DEFAULT_COLLECTION_PERCENTILE, t.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
        }, t;
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Delete a mutation batch and the associated document mutations.
     * @returns A PersistencePromise of the document mutations that were removed.
     */
    function ei(t, e, n) {
        var r = t.store(rr.store), i = t.store(ir.store), o = [], s = IDBKeyRange.only(n.batchId), u = 0, a = r.$t({
            range: s
        }, (function(t, e, n) {
            return u++, n.delete();
        }));
        o.push(a.next((function() {
            O(1 === u);
        })));
        for (var c = [], h = 0, f = n.mutations; h < f.length; h++) {
            var l = f[h], d = ir.key(e, l.key.path, n.batchId);
            o.push(i.delete(d)), c.push(l.key);
        }
        return br.waitFor(o).next((function() {
            return c;
        }));
    }

    /**
     * Returns an approximate size for the given document.
     */ function ni(t) {
        if (!t) return 0;
        var e;
        if (t.document) e = t.document; else if (t.unknownDocument) e = t.unknownDocument; else {
            if (!t.noDocument) throw L();
            e = t.noDocument;
        }
        return JSON.stringify(e).length;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A mutation queue for a specific user, backed by IndexedDB. */ ti.DEFAULT_COLLECTION_PERCENTILE = 10, 
    ti.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, ti.DEFAULT = new ti(41943040, ti.DEFAULT_COLLECTION_PERCENTILE, ti.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), 
    ti.DISABLED = new ti(-1, 0, 0);

    var ri = /** @class */ function() {
        function t(
        /**
         * The normalized userId (e.g. null UID => "" userId) used to store /
         * retrieve mutations.
         */
        t, e, n, r) {
            this.userId = t, this.R = e, this.Ut = n, this.referenceDelegate = r, 
            /**
                 * Caches the document keys for pending mutation batches. If the mutation
                 * has been removed from IndexedDb, the cached value may continue to
                 * be used to retrieve the batch's document keys. To remove a cached value
                 * locally, `removeCachedMutationKeys()` should be invoked either directly
                 * or through `removeMutationBatches()`.
                 *
                 * With multi-tab, when the primary client acknowledges or rejects a mutation,
                 * this cache is used by secondary clients to invalidate the local
                 * view of the documents that were previously affected by the mutation.
                 */
            // PORTING NOTE: Multi-tab only.
            this.Kt = {}
            /**
         * Creates a new mutation queue for the given user.
         * @param user - The user for which to create a mutation queue.
         * @param serializer - The serializer to use when persisting to IndexedDb.
         */;
        }
        return t.Qt = function(e, n, r, i) {
            // TODO(mcg): Figure out what constraints there are on userIDs
            // In particular, are there any reserved characters? are empty ids allowed?
            // For the moment store these together in the same mutations table assuming
            // that empty userIDs aren't allowed.
            return O("" !== e.uid), new t(e.isAuthenticated() ? e.uid : "", n, r, i);
        }, t.prototype.checkEmpty = function(t) {
            var e = !0, n = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return oi(t).$t({
                index: rr.userMutationsIndex,
                range: n
            }, (function(t, n, r) {
                e = !1, r.done();
            })).next((function() {
                return e;
            }));
        }, t.prototype.addMutationBatch = function(t, e, n, r) {
            var i = this, o = si(t), s = oi(t);
            // The IndexedDb implementation in Chrome (and Firefox) does not handle
            // compound indices that include auto-generated keys correctly. To ensure
            // that the index entry is added correctly in all browsers, we perform two
            // writes: The first write is used to retrieve the next auto-generated Batch
            // ID, and the second write populates the index and stores the actual
            // mutation batch.
            // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
            // We write an empty object to obtain key
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return s.add({}).next((function(u) {
                O("number" == typeof u);
                for (var a = new Rr(u, e, n, r), c = function(t, e, n) {
                    var r = n.baseMutations.map((function(e) {
                        return On(t.Lt, e);
                    })), i = n.mutations.map((function(e) {
                        return On(t.Lt, e);
                    }));
                    return new rr(e, n.batchId, n.localWriteTime.toMillis(), r, i);
                }(i.R, i.userId, a), h = [], f = new Ye((function(t, e) {
                    return V(t.canonicalString(), e.canonicalString());
                })), l = 0, d = r; l < d.length; l++) {
                    var p = d[l], y = ir.key(i.userId, p.key.path, u);
                    f = f.add(p.key.path.popLast()), h.push(s.put(c)), h.push(o.put(y, ir.PLACEHOLDER));
                }
                return f.forEach((function(e) {
                    h.push(i.Ut.addToCollectionParentIndex(t, e));
                })), t.addOnCommittedListener((function() {
                    i.Kt[u] = a.keys();
                })), br.waitFor(h).next((function() {
                    return a;
                }));
            }));
        }, t.prototype.lookupMutationBatch = function(t, e) {
            var n = this;
            return oi(t).get(e).next((function(t) {
                return t ? (O(t.userId === n.userId), jr(n.R, t)) : null;
            }));
        }, 
        /**
         * Returns the document keys for the mutation batch with the given batchId.
         * For primary clients, this method returns `null` after
         * `removeMutationBatches()` has been called. Secondary clients return a
         * cached result until `removeCachedMutationKeys()` is invoked.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.jt = function(t, e) {
            var n = this;
            return this.Kt[e] ? br.resolve(this.Kt[e]) : this.lookupMutationBatch(t, e).next((function(t) {
                if (t) {
                    var r = t.keys();
                    return n.Kt[e] = r, r;
                }
                return null;
            }));
        }, t.prototype.getNextMutationBatchAfterBatchId = function(t, e) {
            var n = this, r = e + 1, i = IDBKeyRange.lowerBound([ this.userId, r ]), o = null;
            return oi(t).$t({
                index: rr.userMutationsIndex,
                range: i
            }, (function(t, e, i) {
                e.userId === n.userId && (O(e.batchId >= r), o = jr(n.R, e)), i.done();
            })).next((function() {
                return o;
            }));
        }, t.prototype.getHighestUnacknowledgedBatchId = function(t) {
            var e = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]), n = -1;
            return oi(t).$t({
                index: rr.userMutationsIndex,
                range: e,
                reverse: !0
            }, (function(t, e, r) {
                n = e.batchId, r.done();
            })).next((function() {
                return n;
            }));
        }, t.prototype.getAllMutationBatches = function(t) {
            var e = this, n = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return oi(t).Nt(rr.userMutationsIndex, n).next((function(t) {
                return t.map((function(t) {
                    return jr(e.R, t);
                }));
            }));
        }, t.prototype.getAllMutationBatchesAffectingDocumentKey = function(t, e) {
            var n = this, r = ir.prefixForPath(this.userId, e.path), i = IDBKeyRange.lowerBound(r), o = [];
            // Scan the document-mutation index starting with a prefix starting with
            // the given documentKey.
                    return si(t).$t({
                range: i
            }, (function(r, i, s) {
                var u = r[0], a = r[1], c = r[2], h = Zn(a);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                            if (u === n.userId && e.path.isEqual(h)) 
                // Look up the mutation batch in the store.
                return oi(t).get(c).next((function(t) {
                    if (!t) throw L();
                    O(t.userId === n.userId), o.push(jr(n.R, t));
                }));
                s.done();
            })).next((function() {
                return o;
            }));
        }, t.prototype.getAllMutationBatchesAffectingDocumentKeys = function(t, e) {
            var n = this, r = new Ye(V), i = [];
            return e.forEach((function(e) {
                var o = ir.prefixForPath(n.userId, e.path), s = IDBKeyRange.lowerBound(o), u = si(t).$t({
                    range: s
                }, (function(t, i, o) {
                    var s = t[0], u = t[1], a = t[2], c = Zn(u);
                    // Only consider rows matching exactly the specific key of
                    // interest. Note that because we order by path first, and we
                    // order terminators before path separators, we'll encounter all
                    // the index rows for documentKey contiguously. In particular, all
                    // the rows for documentKey will occur before any rows for
                    // documents nested in a subcollection beneath documentKey so we
                    // can stop as soon as we hit any such row.
                                    s === n.userId && e.path.isEqual(c) ? r = r.add(a) : o.done();
                }));
                i.push(u);
            })), br.waitFor(i).next((function() {
                return n.Wt(t, r);
            }));
        }, t.prototype.getAllMutationBatchesAffectingQuery = function(t, e) {
            var n = this, r = e.path, i = r.length + 1, o = ir.prefixForPath(this.userId, r), s = IDBKeyRange.lowerBound(o), u = new Ye(V);
            return si(t).$t({
                range: s
            }, (function(t, e, o) {
                var s = t[0], a = t[1], c = t[2], h = Zn(a);
                s === n.userId && r.isPrefixOf(h) ? 
                // Rows with document keys more than one segment longer than the
                // query path can't be matches. For example, a query on 'rooms'
                // can't match the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                h.length === i && (u = u.add(c)) : o.done();
            })).next((function() {
                return n.Wt(t, u);
            }));
        }, t.prototype.Wt = function(t, e) {
            var n = this, r = [], i = [];
            // TODO(rockwood): Implement this using iterate.
            return e.forEach((function(e) {
                i.push(oi(t).get(e).next((function(t) {
                    if (null === t) throw L();
                    O(t.userId === n.userId), r.push(jr(n.R, t));
                })));
            })), br.waitFor(i).next((function() {
                return r;
            }));
        }, t.prototype.removeMutationBatch = function(t, e) {
            var n = this;
            return ei(t.Mt, this.userId, e).next((function(r) {
                return t.addOnCommittedListener((function() {
                    n.Gt(e.batchId);
                })), br.forEach(r, (function(e) {
                    return n.referenceDelegate.markPotentiallyOrphaned(t, e);
                }));
            }));
        }, 
        /**
         * Clears the cached keys for a mutation batch. This method should be
         * called by secondary clients after they process mutation updates.
         *
         * Note that this method does not have to be called from primary clients as
         * the corresponding cache entries are cleared when an acknowledged or
         * rejected batch is removed from the mutation queue.
         */
        // PORTING NOTE: Multi-tab only
        t.prototype.Gt = function(t) {
            delete this.Kt[t];
        }, t.prototype.performConsistencyCheck = function(t) {
            var e = this;
            return this.checkEmpty(t).next((function(n) {
                if (!n) return br.resolve();
                // Verify that there are no entries in the documentMutations index if
                // the queue is empty.
                            var r = IDBKeyRange.lowerBound(ir.prefixForUser(e.userId)), i = [];
                return si(t).$t({
                    range: r
                }, (function(t, n, r) {
                    if (t[0] === e.userId) {
                        var o = Zn(t[1]);
                        i.push(o);
                    } else r.done();
                })).next((function() {
                    O(0 === i.length);
                }));
            }));
        }, t.prototype.containsKey = function(t, e) {
            return ii(t, this.userId, e);
        }, 
        // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
        /** Returns the mutation queue's metadata from IndexedDb. */
        t.prototype.zt = function(t) {
            var e = this;
            return ui(t).get(this.userId).next((function(t) {
                return t || new nr(e.userId, -1, 
                /*lastStreamToken=*/ "");
            }));
        }, t;
    }();

    /**
     * @returns true if the mutation queue for the given user contains a pending
     *         mutation for the given key.
     */ function ii(t, e, n) {
        var r = ir.prefixForPath(e, n.path), i = r[1], o = IDBKeyRange.lowerBound(r), s = !1;
        return si(t).$t({
            range: o,
            kt: !0
        }, (function(t, n, r) {
            var o = t[0], u = t[1];
     /*batchID*/        t[2], o === e && u === i && (s = !0), 
            r.done();
        })).next((function() {
            return s;
        }));
    }

    /** Returns true if any mutation queue contains the given document. */
    /**
     * Helper to get a typed SimpleDbStore for the mutations object store.
     */ function oi(t) {
        return xr(t, rr.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function si(t) {
        return xr(t, ir.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function ui(t) {
        return xr(t, nr.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Offset to ensure non-overlapping target ids. */
    /**
     * Generates monotonically increasing target IDs for sending targets to the
     * watch stream.
     *
     * The client constructs two generators, one for the target cache, and one for
     * for the sync engine (to generate limbo documents targets). These
     * generators produce non-overlapping IDs (by using even and odd IDs
     * respectively).
     *
     * By separating the target ID space, the query cache can generate target IDs
     * that persist across client restarts, while sync engine can independently
     * generate in-memory target IDs that are transient and can be reused after a
     * restart.
     */ var ai = /** @class */ function() {
        function t(t) {
            this.Ht = t;
        }
        return t.prototype.next = function() {
            return this.Ht += 2, this.Ht;
        }, t.Jt = function() {
            // The target cache generator must return '2' in its first call to `next()`
            // as there is no differentiation in the protocol layer between an unset
            // number and the number '0'. If we were to sent a target with target ID
            // '0', the backend would consider it unset and replace it with its own ID.
            return new t(0);
        }, t.Yt = function() {
            // Sync engine assigns target IDs for limbo document detection.
            return new t(-1);
        }, t;
    }(), ci = /** @class */ function() {
        function t(t, e) {
            this.referenceDelegate = t, this.R = e;
        }
        // PORTING NOTE: We don't cache global metadata for the target cache, since
        // some of it (in particular `highestTargetId`) can be modified by secondary
        // tabs. We could perhaps be more granular (and e.g. still cache
        // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
        // to IndexedDb whenever we need to read metadata. We can revisit if it turns
        // out to have a meaningful performance impact.
            return t.prototype.allocateTargetId = function(t) {
            var e = this;
            return this.Xt(t).next((function(n) {
                var r = new ai(n.highestTargetId);
                return n.highestTargetId = r.next(), e.Zt(t, n).next((function() {
                    return n.highestTargetId;
                }));
            }));
        }, t.prototype.getLastRemoteSnapshotVersion = function(t) {
            return this.Xt(t).next((function(t) {
                return j.fromTimestamp(new B(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds));
            }));
        }, t.prototype.getHighestSequenceNumber = function(t) {
            return this.Xt(t).next((function(t) {
                return t.highestListenSequenceNumber;
            }));
        }, t.prototype.setTargetsMetadata = function(t, e, n) {
            var r = this;
            return this.Xt(t).next((function(i) {
                return i.highestListenSequenceNumber = e, n && (i.lastRemoteSnapshotVersion = n.toTimestamp()), 
                e > i.highestListenSequenceNumber && (i.highestListenSequenceNumber = e), r.Zt(t, i);
            }));
        }, t.prototype.addTargetData = function(t, e) {
            var n = this;
            return this.te(t, e).next((function() {
                return n.Xt(t).next((function(r) {
                    return r.targetCount += 1, n.ee(e, r), n.Zt(t, r);
                }));
            }));
        }, t.prototype.updateTargetData = function(t, e) {
            return this.te(t, e);
        }, t.prototype.removeTargetData = function(t, e) {
            var n = this;
            return this.removeMatchingKeysForTargetId(t, e.targetId).next((function() {
                return hi(t).delete(e.targetId);
            })).next((function() {
                return n.Xt(t);
            })).next((function(e) {
                return O(e.targetCount > 0), e.targetCount -= 1, n.Zt(t, e);
            }));
        }, 
        /**
         * Drops any targets with sequence number less than or equal to the upper bound, excepting those
         * present in `activeTargetIds`. Document associations for the removed targets are also removed.
         * Returns the number of targets removed.
         */
        t.prototype.removeTargets = function(t, e, n) {
            var r = this, i = 0, o = [];
            return hi(t).$t((function(s, u) {
                var a = Kr(u);
                a.sequenceNumber <= e && null === n.get(a.targetId) && (i++, o.push(r.removeTargetData(t, a)));
            })).next((function() {
                return br.waitFor(o);
            })).next((function() {
                return i;
            }));
        }, 
        /**
         * Call provided function with each `TargetData` that we have cached.
         */
        t.prototype.forEachTarget = function(t, e) {
            return hi(t).$t((function(t, n) {
                var r = Kr(n);
                e(r);
            }));
        }, t.prototype.Xt = function(t) {
            return fi(t).get(fr.key).next((function(t) {
                return O(null !== t), t;
            }));
        }, t.prototype.Zt = function(t, e) {
            return fi(t).put(fr.key, e);
        }, t.prototype.te = function(t, e) {
            return hi(t).put(Qr(this.R, e));
        }, 
        /**
         * In-place updates the provided metadata to account for values in the given
         * TargetData. Saving is done separately. Returns true if there were any
         * changes to the metadata.
         */
        t.prototype.ee = function(t, e) {
            var n = !1;
            return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), 
            t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, 
            n = !0), n;
        }, t.prototype.getTargetCount = function(t) {
            return this.Xt(t).next((function(t) {
                return t.targetCount;
            }));
        }, t.prototype.getTargetData = function(t, e) {
            // Iterating by the canonicalId may yield more than one result because
            // canonicalId values are not required to be unique per target. This query
            // depends on the queryTargets index to be efficient.
            var n = At(e), r = IDBKeyRange.bound([ n, Number.NEGATIVE_INFINITY ], [ n, Number.POSITIVE_INFINITY ]), i = null;
            return hi(t).$t({
                range: r,
                index: cr.queryTargetsIndexName
            }, (function(t, n, r) {
                var o = Kr(n);
                // After finding a potential match, check that the target is
                // actually equal to the requested target.
                            kt(e, o.target) && (i = o, r.done());
            })).next((function() {
                return i;
            }));
        }, t.prototype.addMatchingKeys = function(t, e, n) {
            var r = this, i = [], o = li(t);
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
                    return e.forEach((function(e) {
                var s = $n(e.path);
                i.push(o.put(new hr(n, s))), i.push(r.referenceDelegate.addReference(t, n, e));
            })), br.waitFor(i);
        }, t.prototype.removeMatchingKeys = function(t, e, n) {
            var r = this, i = li(t);
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
                    return br.forEach(e, (function(e) {
                var o = $n(e.path);
                return br.waitFor([ i.delete([ n, o ]), r.referenceDelegate.removeReference(t, n, e) ]);
            }));
        }, t.prototype.removeMatchingKeysForTargetId = function(t, e) {
            var n = li(t), r = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return n.delete(r);
        }, t.prototype.getMatchingKeysForTargetId = function(t, e) {
            var n = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), r = li(t), i = on();
            return r.$t({
                range: n,
                kt: !0
            }, (function(t, e, n) {
                var r = Zn(t[1]), o = new at(r);
                i = i.add(o);
            })).next((function() {
                return i;
            }));
        }, t.prototype.containsKey = function(t, e) {
            var n = $n(e.path), r = IDBKeyRange.bound([ n ], [ U(n) ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), i = 0;
            return li(t).$t({
                index: hr.documentTargetsIndex,
                kt: !0,
                range: r
            }, (function(t, e, n) {
                var r = t[0];
                t[1], 
                // Having a sentinel row for a document does not count as containing that document;
                // For the target cache, containing the document means the document is part of some
                // target.
                0 !== r && (i++, n.done());
            })).next((function() {
                return i > 0;
            }));
        }, 
        /**
         * Looks up a TargetData entry by target ID.
         *
         * @param targetId - The target ID of the TargetData entry to look up.
         * @returns The cached TargetData entry, or null if the cache has no entry for
         * the target.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.lt = function(t, e) {
            return hi(t).get(e).next((function(t) {
                return t ? Kr(t) : null;
            }));
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper to get a typed SimpleDbStore for the queries object store.
     */
    function hi(t) {
        return xr(t, cr.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the target globals object store.
     */ function fi(t) {
        return xr(t, fr.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the document target object store.
     */ function li(t) {
        return xr(t, hr.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Verifies the error thrown by a LocalStore operation. If a LocalStore
     * operation fails because the primary lease has been taken by another client,
     * we ignore the error (the persistence layer will immediately call
     * `applyPrimaryLease` to propagate the primary state change). All other errors
     * are re-thrown.
     *
     * @param err - An error returned by a LocalStore operation.
     * @returns A Promise that resolves after we recovered, or the original error.
     */ function di(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                if (t.code !== S.FAILED_PRECONDITION || t.message !== mr) throw t;
                return k("LocalStore", "Unexpectedly lost primary lease"), [ 2 /*return*/ ];
            }));
        }));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function pi(t, e) {
        var n = t[0], r = t[1], i = e[0], o = e[1], s = V(n, i);
        return 0 === s ? V(r, o) : s;
    }

    /**
     * Used to calculate the nth sequence number. Keeps a rolling buffer of the
     * lowest n values passed to `addElement`, and finally reports the largest of
     * them in `maxValue`.
     */ var yi = /** @class */ function() {
        function t(t) {
            this.ne = t, this.buffer = new Ye(pi), this.se = 0;
        }
        return t.prototype.ie = function() {
            return ++this.se;
        }, t.prototype.re = function(t) {
            var e = [ t, this.ie() ];
            if (this.buffer.size < this.ne) this.buffer = this.buffer.add(e); else {
                var n = this.buffer.last();
                pi(e, n) < 0 && (this.buffer = this.buffer.delete(n).add(e));
            }
        }, Object.defineProperty(t.prototype, "maxValue", {
            get: function() {
                // Guaranteed to be non-empty. If we decide we are not collecting any
                // sequence numbers, nthSequenceNumber below short-circuits. If we have
                // decided that we are collecting n sequence numbers, it's because n is some
                // percentage of the existing sequence numbers. That means we should never
                // be in a situation where we are collecting sequence numbers but don't
                // actually have any.
                return this.buffer.last()[0];
            },
            enumerable: !1,
            configurable: !0
        }), t;
    }(), vi = /** @class */ function() {
        function t(t, e) {
            this.garbageCollector = t, this.asyncQueue = e, this.oe = !1, this.ce = null;
        }
        return t.prototype.start = function(t) {
            -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.ue(t);
        }, t.prototype.stop = function() {
            this.ce && (this.ce.cancel(), this.ce = null);
        }, Object.defineProperty(t.prototype, "started", {
            get: function() {
                return null !== this.ce;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.ue = function(t) {
            var e = this, i = this.oe ? 3e5 : 6e4;
            k("LruGarbageCollector", "Garbage collection scheduled in " + i + "ms"), this.ce = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection" /* LruGarbageCollection */ , i, (function() {
                return __awaiter(e, void 0, void 0, (function() {
                    var e;
                    return __generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            this.ce = null, this.oe = !0, n.label = 1;

                          case 1:
                            return n.trys.push([ 1, 3, , 7 ]), [ 4 /*yield*/ , t.collectGarbage(this.garbageCollector) ];

                          case 2:
                            return n.sent(), [ 3 /*break*/ , 7 ];

                          case 3:
                            return Sr(e = n.sent()) ? (k("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", e), 
                            [ 3 /*break*/ , 6 ]) : [ 3 /*break*/ , 4 ];

                          case 4:
                            return [ 4 /*yield*/ , di(e) ];

                          case 5:
                            n.sent(), n.label = 6;

                          case 6:
                            return [ 3 /*break*/ , 7 ];

                          case 7:
                            return [ 4 /*yield*/ , this.ue(t) ];

                          case 8:
                            return n.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }, t;
    }(), mi = /** @class */ function() {
        function t(t, e) {
            this.ae = t, this.params = e;
        }
        return t.prototype.calculateTargetCount = function(t, e) {
            return this.ae.he(t).next((function(t) {
                return Math.floor(e / 100 * t);
            }));
        }, t.prototype.nthSequenceNumber = function(t, e) {
            var n = this;
            if (0 === e) return br.resolve(_.o);
            var r = new yi(e);
            return this.ae.forEachTarget(t, (function(t) {
                return r.re(t.sequenceNumber);
            })).next((function() {
                return n.ae.le(t, (function(t) {
                    return r.re(t);
                }));
            })).next((function() {
                return r.maxValue;
            }));
        }, t.prototype.removeTargets = function(t, e, n) {
            return this.ae.removeTargets(t, e, n);
        }, t.prototype.removeOrphanedDocuments = function(t, e) {
            return this.ae.removeOrphanedDocuments(t, e);
        }, t.prototype.collect = function(t, e) {
            var n = this;
            return -1 === this.params.cacheSizeCollectionThreshold ? (k("LruGarbageCollector", "Garbage collection skipped; disabled"), 
            br.resolve(Zr)) : this.getCacheSize(t).next((function(r) {
                return r < n.params.cacheSizeCollectionThreshold ? (k("LruGarbageCollector", "Garbage collection skipped; Cache size " + r + " is lower than threshold " + n.params.cacheSizeCollectionThreshold), 
                Zr) : n.fe(t, e);
            }));
        }, t.prototype.getCacheSize = function(t) {
            return this.ae.getCacheSize(t);
        }, t.prototype.fe = function(t, e) {
            var n, r, i, o, s, u, a, c = this, h = Date.now();
            return this.calculateTargetCount(t, this.params.percentileToCollect).next((function(e) {
                // Cap at the configured max
                return e > c.params.maximumSequenceNumbersToCollect ? (k("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + c.params.maximumSequenceNumbersToCollect + " from " + e), 
                r = c.params.maximumSequenceNumbersToCollect) : r = e, o = Date.now(), c.nthSequenceNumber(t, r);
            })).next((function(r) {
                return n = r, s = Date.now(), c.removeTargets(t, n, e);
            })).next((function(e) {
                return i = e, u = Date.now(), c.removeOrphanedDocuments(t, n);
            })).next((function(t) {
                return a = Date.now(), A() <= LogLevel.DEBUG && k("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in " + (o - h) + "ms\n\tDetermined least recently used " + r + " in " + (s - o) + "ms\n\tRemoved " + i + " targets in " + (u - s) + "ms\n\tRemoved " + t + " documents in " + (a - u) + "ms\nTotal Duration: " + (a - h) + "ms"), 
                br.resolve({
                    didRun: !0,
                    sequenceNumbersCollected: r,
                    targetsRemoved: i,
                    documentsRemoved: t
                });
            }));
        }, t;
    }(), gi = /** @class */ function() {
        function t(t, e) {
            this.db = t, this.garbageCollector = function(t, e) {
                return new mi(t, e);
            }(this, e);
        }
        return t.prototype.he = function(t) {
            var e = this.de(t);
            return this.db.getTargetCache().getTargetCount(t).next((function(t) {
                return e.next((function(e) {
                    return t + e;
                }));
            }));
        }, t.prototype.de = function(t) {
            var e = 0;
            return this.le(t, (function(t) {
                e++;
            })).next((function() {
                return e;
            }));
        }, t.prototype.forEachTarget = function(t, e) {
            return this.db.getTargetCache().forEachTarget(t, e);
        }, t.prototype.le = function(t, e) {
            return this.we(t, (function(t, n) {
                return e(n);
            }));
        }, t.prototype.addReference = function(t, e, n) {
            return wi(t, n);
        }, t.prototype.removeReference = function(t, e, n) {
            return wi(t, n);
        }, t.prototype.removeTargets = function(t, e, n) {
            return this.db.getTargetCache().removeTargets(t, e, n);
        }, t.prototype.markPotentiallyOrphaned = function(t, e) {
            return wi(t, e);
        }, 
        /**
         * Returns true if anything would prevent this document from being garbage
         * collected, given that the document in question is not present in any
         * targets and has a sequence number less than or equal to the upper bound for
         * the collection run.
         */
        t.prototype._e = function(t, e) {
            return function(t, e) {
                var n = !1;
                return ui(t).Ot((function(r) {
                    return ii(t, r, e).next((function(t) {
                        return t && (n = !0), br.resolve(!t);
                    }));
                })).next((function() {
                    return n;
                }));
            }(t, e);
        }, t.prototype.removeOrphanedDocuments = function(t, e) {
            var n = this, r = this.db.getRemoteDocumentCache().newChangeBuffer(), i = [], o = 0;
            return this.we(t, (function(s, u) {
                if (u <= e) {
                    var a = n._e(t, s).next((function(e) {
                        if (!e) 
                        // Our size accounting requires us to read all documents before
                        // removing them.
                        return o++, r.getEntry(t, s).next((function() {
                            return r.removeEntry(s), li(t).delete([ 0, $n(s.path) ]);
                        }));
                    }));
                    i.push(a);
                }
            })).next((function() {
                return br.waitFor(i);
            })).next((function() {
                return r.apply(t);
            })).next((function() {
                return o;
            }));
        }, t.prototype.removeTarget = function(t, e) {
            var n = e.withSequenceNumber(t.currentSequenceNumber);
            return this.db.getTargetCache().updateTargetData(t, n);
        }, t.prototype.updateLimboDocument = function(t, e) {
            return wi(t, e);
        }, 
        /**
         * Call provided function for each document in the cache that is 'orphaned'. Orphaned
         * means not a part of any target, so the only entry in the target-document index for
         * that document will be the sentinel row (targetId 0), which will also have the sequence
         * number for the last time the document was accessed.
         */
        t.prototype.we = function(t, e) {
            var n, r = li(t), i = _.o;
            return r.$t({
                index: hr.documentTargetsIndex
            }, (function(t, r) {
                var o = t[0];
                t[1];
                var s = r.path, u = r.sequenceNumber;
                0 === o ? (
                // if nextToReport is valid, report it, this is a new key so the
                // last one must not be a member of any targets.
                i !== _.o && e(new at(Zn(n)), i), 
                // set nextToReport to be this sequence number. It's the next one we
                // might report, if we don't find any targets for this document.
                // Note that the sequence number must be defined when the targetId
                // is 0.
                i = u, n = s) : 
                // set nextToReport to be invalid, we know we don't need to report
                // this one since we found a target for it.
                i = _.o;
            })).next((function() {
                // Since we report sequence numbers after getting to the next key, we
                // need to check if the last key we iterated over was an orphaned
                // document and report it.
                i !== _.o && e(new at(Zn(n)), i);
            }));
        }, t.prototype.getCacheSize = function(t) {
            return this.db.getRemoteDocumentCache().getSize(t);
        }, t;
    }();

    /**
     * This class is responsible for the scheduling of LRU garbage collection. It handles checking
     * whether or not GC is enabled, as well as which delay to use before the next run.
     */ function wi(t, e) {
        return li(t).put(
        /**
     * @returns A value suitable for writing a sentinel row in the target-document
     * store.
     */
        function(t, e) {
            return new hr(0, $n(t.path), e);
        }(e, t.currentSequenceNumber));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A map implementation that uses objects as keys. Objects must have an
     * associated equals function and must be immutable. Entries in the map are
     * stored together with the key being produced from the mapKeyFn. This map
     * automatically handles collisions of keys.
     */ var bi = /** @class */ function() {
        function t(t, e) {
            this.mapKeyFn = t, this.equalsFn = e, 
            /**
                 * The inner map for a key/value pair. Due to the possibility of collisions we
                 * keep a list of entries that we do a linear search through to find an actual
                 * match. Note that collisions should be rare, so we still expect near
                 * constant time lookups in practice.
                 */
            this.inner = {}
            /** Get a value for this key, or undefined if it does not exist. */;
        }
        return t.prototype.get = function(t) {
            var e = this.mapKeyFn(t), n = this.inner[e];
            if (void 0 !== n) for (var r = 0, i = n; r < i.length; r++) {
                var o = i[r], s = o[0], u = o[1];
                if (this.equalsFn(s, t)) return u;
            }
        }, t.prototype.has = function(t) {
            return void 0 !== this.get(t);
        }, 
        /** Put this key and value in the map. */ t.prototype.set = function(t, e) {
            var n = this.mapKeyFn(t), r = this.inner[n];
            if (void 0 !== r) {
                for (var i = 0; i < r.length; i++) if (this.equalsFn(r[i][0], t)) return void (r[i] = [ t, e ]);
                r.push([ t, e ]);
            } else this.inner[n] = [ [ t, e ] ];
        }, 
        /**
         * Remove this key from the map. Returns a boolean if anything was deleted.
         */
        t.prototype.delete = function(t) {
            var e = this.mapKeyFn(t), n = this.inner[e];
            if (void 0 === n) return !1;
            for (var r = 0; r < n.length; r++) if (this.equalsFn(n[r][0], t)) return 1 === n.length ? delete this.inner[e] : n.splice(r, 1), 
            !0;
            return !1;
        }, t.prototype.forEach = function(t) {
            Q(this.inner, (function(e, n) {
                for (var r = 0, i = n; r < i.length; r++) {
                    var o = i[r], s = o[0], u = o[1];
                    t(s, u);
                }
            }));
        }, t.prototype.isEmpty = function() {
            return G(this.inner);
        }, t;
    }(), Ii = /** @class */ function() {
        function t() {
            // A mapping of document key to the new cache entry that should be written (or null if any
            // existing cache entry should be removed).
            this.changes = new bi((function(t) {
                return t.toString();
            }), (function(t, e) {
                return t.isEqual(e);
            })), this.changesApplied = !1;
        }
        return t.prototype.getReadTime = function(t) {
            var e = this.changes.get(t);
            return e ? e.readTime : j.min();
        }, 
        /**
         * Buffers a `RemoteDocumentCache.addEntry()` call.
         *
         * You can only modify documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */
        t.prototype.addEntry = function(t, e) {
            this.assertNotApplied(), this.changes.set(t.key, {
                document: t,
                readTime: e
            });
        }, 
        /**
         * Buffers a `RemoteDocumentCache.removeEntry()` call.
         *
         * You can only remove documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */
        t.prototype.removeEntry = function(t, e) {
            void 0 === e && (e = null), this.assertNotApplied(), this.changes.set(t, {
                document: St.newInvalidDocument(t),
                readTime: e
            });
        }, 
        /**
         * Looks up an entry in the cache. The buffered changes will first be checked,
         * and if no buffered change applies, this will forward to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKey - The key of the entry to look up.
         * @returns The cached document or an invalid document if we have nothing
         * cached.
         */
        t.prototype.getEntry = function(t, e) {
            this.assertNotApplied();
            var n = this.changes.get(e);
            return void 0 !== n ? br.resolve(n.document) : this.getFromCache(t, e);
        }, 
        /**
         * Looks up several entries in the cache, forwarding to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKeys - The keys of the entries to look up.
         * @returns A map of cached documents, indexed by key. If an entry cannot be
         *     found, the corresponding key will be mapped to an invalid document.
         */
        t.prototype.getEntries = function(t, e) {
            return this.getAllFromCache(t, e);
        }, 
        /**
         * Applies buffered changes to the underlying RemoteDocumentCache, using
         * the provided transaction.
         */
        t.prototype.apply = function(t) {
            return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(t);
        }, 
        /** Helper to assert this.changes is not null  */ t.prototype.assertNotApplied = function() {}, 
        t;
    }(), Ei = /** @class */ function() {
        /**
         * @param serializer - The document serializer.
         * @param indexManager - The query indexes that need to be maintained.
         */
        function t(t, e) {
            this.R = t, this.Ut = e
            /**
         * Adds the supplied entries to the cache.
         *
         * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */;
        }
        return t.prototype.addEntry = function(t, e, n) {
            return Si(t).put(Ni(e), n);
        }, 
        /**
         * Removes a document from the cache.
         *
         * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */
        t.prototype.removeEntry = function(t, e) {
            var n = Si(t), r = Ni(e);
            return n.delete(r);
        }, 
        /**
         * Updates the current cache size.
         *
         * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
         * cache's metadata.
         */
        t.prototype.updateMetadata = function(t, e) {
            var n = this;
            return this.getMetadata(t).next((function(r) {
                return r.byteSize += e, n.me(t, r);
            }));
        }, t.prototype.getEntry = function(t, e) {
            var n = this;
            return Si(t).get(Ni(e)).next((function(t) {
                return n.ye(e, t);
            }));
        }, 
        /**
         * Looks up an entry in the cache.
         *
         * @param documentKey - The key of the entry to look up.
         * @returns The cached document entry and its size.
         */
        t.prototype.ge = function(t, e) {
            var n = this;
            return Si(t).get(Ni(e)).next((function(t) {
                return {
                    document: n.ye(e, t),
                    size: ni(t)
                };
            }));
        }, t.prototype.getEntries = function(t, e) {
            var n = this, r = Je();
            return this.pe(t, e, (function(t, e) {
                var i = n.ye(t, e);
                r = r.insert(t, i);
            })).next((function() {
                return r;
            }));
        }, 
        /**
         * Looks up several entries in the cache.
         *
         * @param documentKeys - The set of keys entries to look up.
         * @returns A map of documents indexed by key and a map of sizes indexed by
         *     key (zero if the document does not exist).
         */
        t.prototype.Ee = function(t, e) {
            var n = this, r = Je(), i = new ze(at.comparator);
            return this.pe(t, e, (function(t, e) {
                var o = n.ye(t, e);
                r = r.insert(t, o), i = i.insert(t, ni(e));
            })).next((function() {
                return {
                    documents: r,
                    Te: i
                };
            }));
        }, t.prototype.pe = function(t, e, n) {
            if (e.isEmpty()) return br.resolve();
            var r = IDBKeyRange.bound(e.first().path.toArray(), e.last().path.toArray()), i = e.getIterator(), o = i.getNext();
            return Si(t).$t({
                range: r
            }, (function(t, e, r) {
                // Go through keys not found in cache.
                for (var s = at.fromSegments(t); o && at.comparator(o, s) < 0; ) n(o, null), o = i.getNext();
                o && o.isEqual(s) && (
                // Key found in cache.
                n(o, e), o = i.hasNext() ? i.getNext() : null), 
                // Skip to the next key (if there is one).
                o ? r.Ct(o.path.toArray()) : r.done();
            })).next((function() {
                // The rest of the keys are not in the cache. One case where `iterate`
                // above won't go through them is when the cache is empty.
                for (;o; ) n(o, null), o = i.hasNext() ? i.getNext() : null;
            }));
        }, t.prototype.getDocumentsMatchingQuery = function(t, e, n) {
            var r = this, i = Je(), o = e.path.length + 1, s = {};
            if (n.isEqual(j.min())) {
                // Documents are ordered by key, so we can use a prefix scan to narrow
                // down the documents we need to match the query against.
                var u = e.path.toArray();
                s.range = IDBKeyRange.lowerBound(u);
            } else {
                // Execute an index-free query and filter by read time. This is safe
                // since all document changes to queries that have a
                // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
                var a = e.path.toArray(), c = Vr(n);
                s.range = IDBKeyRange.lowerBound([ a, c ], 
                /* open= */ !0), s.index = ur.collectionReadTimeIndex;
            }
            return Si(t).$t(s, (function(t, n, s) {
                // The query is actually returning any path that starts with the query
                // path prefix which may include documents in subcollections. For
                // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
                // shouldn't match it. Fix this by discarding rows with document keys
                // more than one segment longer than the query path.
                if (t.length === o) {
                    var u = Fr(r.R, n);
                    e.path.isPrefixOf(u.key.path) ? se(e, u) && (i = i.insert(u.key, u)) : s.done();
                }
            })).next((function() {
                return i;
            }));
        }, t.prototype.newChangeBuffer = function(t) {
            return new Ti(this, !!t && t.trackRemovals);
        }, t.prototype.getSize = function(t) {
            return this.getMetadata(t).next((function(t) {
                return t.byteSize;
            }));
        }, t.prototype.getMetadata = function(t) {
            return _i(t).get(ar.key).next((function(t) {
                return O(!!t), t;
            }));
        }, t.prototype.me = function(t, e) {
            return _i(t).put(ar.key, e);
        }, 
        /**
         * Decodes `remoteDoc` and returns the document (or null, if the document
         * corresponds to the format used for sentinel deletes).
         */
        t.prototype.ye = function(t, e) {
            if (e) {
                var n = Fr(this.R, e);
                // Whether the document is a sentinel removal and should only be used in the
                // `getNewDocumentChanges()`
                            if (!n.isNoDocument() || !n.version.isEqual(j.min())) return n;
            }
            return St.newInvalidDocument(t);
        }, t;
    }(), Ti = /** @class */ function(e) {
        /**
         * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
         * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
         * `getNewDocumentChanges()`.
         */
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).Ie = t, r.trackRemovals = n, 
            // A map of document sizes prior to applying the changes in this buffer.
            r.Ae = new bi((function(t) {
                return t.toString();
            }), (function(t, e) {
                return t.isEqual(e);
            })), r;
        }
        return __extends$1(n, e), n.prototype.applyChanges = function(t) {
            var e = this, n = [], r = 0, i = new Ye((function(t, e) {
                return V(t.canonicalString(), e.canonicalString());
            }));
            return this.changes.forEach((function(o, s) {
                var u = e.Ae.get(o);
                if (s.document.isValidDocument()) {
                    var a = Mr(e.Ie.R, s.document, e.getReadTime(o));
                    i = i.add(o.path.popLast());
                    var c = ni(a);
                    r += c - u, n.push(e.Ie.addEntry(t, o, a));
                } else if (r -= u, e.trackRemovals) {
                    // In order to track removals, we store a "sentinel delete" in the
                    // RemoteDocumentCache. This entry is represented by a NoDocument
                    // with a version of 0 and ignored by `maybeDecodeDocument()` but
                    // preserved in `getNewDocumentChanges()`.
                    var h = Mr(e.Ie.R, St.newNoDocument(o, j.min()), e.getReadTime(o));
                    n.push(e.Ie.addEntry(t, o, h));
                } else n.push(e.Ie.removeEntry(t, o));
            })), i.forEach((function(r) {
                n.push(e.Ie.Ut.addToCollectionParentIndex(t, r));
            })), n.push(this.Ie.updateMetadata(t, r)), br.waitFor(n);
        }, n.prototype.getFromCache = function(t, e) {
            var n = this;
            // Record the size of everything we load from the cache so we can compute a delta later.
                    return this.Ie.ge(t, e).next((function(t) {
                return n.Ae.set(e, t.size), t.document;
            }));
        }, n.prototype.getAllFromCache = function(t, e) {
            var n = this;
            // Record the size of everything we load from the cache so we can compute
            // a delta later.
                    return this.Ie.Ee(t, e).next((function(t) {
                var e = t.documents;
                // Note: `getAllFromCache` returns two maps instead of a single map from
                // keys to `DocumentSizeEntry`s. This is to allow returning the
                // `MutableDocumentMap` directly, without a conversion.
                return t.Te.forEach((function(t, e) {
                    n.Ae.set(t, e);
                })), e;
            }));
        }, n;
    }(Ii);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory buffer of entries to be written to a RemoteDocumentCache.
     * It can be used to batch up a set of changes to be written to the cache, but
     * additionally supports reading entries back with the `getEntry()` method,
     * falling back to the underlying RemoteDocumentCache if no entry is
     * buffered.
     *
     * Entries added to the cache *must* be read first. This is to facilitate
     * calculating the size delta of the pending changes.
     *
     * PORTING NOTE: This class was implemented then removed from other platforms.
     * If byte-counting ends up being needed on the other platforms, consider
     * porting this class as part of that implementation work.
     */ function _i(t) {
        return xr(t, ar.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
     */ function Si(t) {
        return xr(t, ur.store);
    }

    function Ni(t) {
        return t.path.toArray();
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Performs database creation and schema upgrades. */ var Di = /** @class */ function() {
        function t(t) {
            this.R = t;
        }
        /**
         * Performs database creation and schema upgrades.
         *
         * Note that in production, this method is only ever used to upgrade the schema
         * to SCHEMA_VERSION. Different values of toVersion are only used for testing
         * and local feature development.
         */    return t.prototype.Rt = function(t, e, n, r) {
            var i = this;
            O(n < r && n >= 0 && r <= 11);
            var o = new Ir("createOrUpgrade", e);
            n < 1 && r >= 1 && (function(t) {
                t.createObjectStore(er.store);
            }(t), function(t) {
                t.createObjectStore(nr.store, {
                    keyPath: nr.keyPath
                }), t.createObjectStore(rr.store, {
                    keyPath: rr.keyPath,
                    autoIncrement: !0
                }).createIndex(rr.userMutationsIndex, rr.userMutationsKeyPath, {
                    unique: !0
                }), t.createObjectStore(ir.store);
            }(t), Ai(t), function(t) {
                t.createObjectStore(ur.store);
            }(t));
            // Migration 2 to populate the targetGlobal object no longer needed since
            // migration 3 unconditionally clears it.
            var s = br.resolve();
            return n < 3 && r >= 3 && (
            // Brand new clients don't need to drop and recreate--only clients that
            // potentially have corrupt data.
            0 !== n && (function(t) {
                t.deleteObjectStore(hr.store), t.deleteObjectStore(cr.store), t.deleteObjectStore(fr.store);
            }(t), Ai(t)), s = s.next((function() {
                /**
         * Creates the target global singleton row.
         *
         * @param txn - The version upgrade transaction for indexeddb
         */
                return function(t) {
                    var e = t.store(fr.store), n = new fr(
                    /*highestTargetId=*/ 0, 
                    /*lastListenSequenceNumber=*/ 0, j.min().toTimestamp(), 
                    /*targetCount=*/ 0);
                    return e.put(fr.key, n);
                }(o);
            }))), n < 4 && r >= 4 && (0 !== n && (
            // Schema version 3 uses auto-generated keys to generate globally unique
            // mutation batch IDs (this was previously ensured internally by the
            // client). To migrate to the new schema, we have to read all mutations
            // and write them back out. We preserve the existing batch IDs to guarantee
            // consistency with other object stores. Any further mutation batch IDs will
            // be auto-generated.
            s = s.next((function() {
                return function(t, e) {
                    return e.store(rr.store).Nt().next((function(n) {
                        t.deleteObjectStore(rr.store), t.createObjectStore(rr.store, {
                            keyPath: rr.keyPath,
                            autoIncrement: !0
                        }).createIndex(rr.userMutationsIndex, rr.userMutationsKeyPath, {
                            unique: !0
                        });
                        var r = e.store(rr.store), i = n.map((function(t) {
                            return r.put(t);
                        }));
                        return br.waitFor(i);
                    }));
                }(t, o);
            }))), s = s.next((function() {
                !function(t) {
                    t.createObjectStore(dr.store, {
                        keyPath: dr.keyPath
                    });
                }(t);
            }))), n < 5 && r >= 5 && (s = s.next((function() {
                return i.Re(o);
            }))), n < 6 && r >= 6 && (s = s.next((function() {
                return function(t) {
                    t.createObjectStore(ar.store);
                }(t), i.be(o);
            }))), n < 7 && r >= 7 && (s = s.next((function() {
                return i.ve(o);
            }))), n < 8 && r >= 8 && (s = s.next((function() {
                return i.Pe(t, o);
            }))), n < 9 && r >= 9 && (s = s.next((function() {
                // Multi-Tab used to manage its own changelog, but this has been moved
                // to the DbRemoteDocument object store itself. Since the previous change
                // log only contained transient data, we can drop its object store.
                !function(t) {
                    t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
                }(t), function(t) {
                    var e = t.objectStore(ur.store);
                    e.createIndex(ur.readTimeIndex, ur.readTimeIndexPath, {
                        unique: !1
                    }), e.createIndex(ur.collectionReadTimeIndex, ur.collectionReadTimeIndexPath, {
                        unique: !1
                    });
                }(e);
            }))), n < 10 && r >= 10 && (s = s.next((function() {
                return i.Ve(o);
            }))), n < 11 && r >= 11 && (s = s.next((function() {
                !function(t) {
                    t.createObjectStore(pr.store, {
                        keyPath: pr.keyPath
                    });
                }(t), function(t) {
                    t.createObjectStore(yr.store, {
                        keyPath: yr.keyPath
                    });
                }(t);
            }))), s;
        }, t.prototype.be = function(t) {
            var e = 0;
            return t.store(ur.store).$t((function(t, n) {
                e += ni(n);
            })).next((function() {
                var n = new ar(e);
                return t.store(ar.store).put(ar.key, n);
            }));
        }, t.prototype.Re = function(t) {
            var e = this, n = t.store(nr.store), r = t.store(rr.store);
            return n.Nt().next((function(n) {
                return br.forEach(n, (function(n) {
                    var i = IDBKeyRange.bound([ n.userId, -1 ], [ n.userId, n.lastAcknowledgedBatchId ]);
                    return r.Nt(rr.userMutationsIndex, i).next((function(r) {
                        return br.forEach(r, (function(r) {
                            O(r.userId === n.userId);
                            var i = jr(e.R, r);
                            return ei(t, n.userId, i).next((function() {}));
                        }));
                    }));
                }));
            }));
        }, 
        /**
         * Ensures that every document in the remote document cache has a corresponding sentinel row
         * with a sequence number. Missing rows are given the most recently used sequence number.
         */
        t.prototype.ve = function(t) {
            var e = t.store(hr.store), n = t.store(ur.store);
            return t.store(fr.store).get(fr.key).next((function(t) {
                var r = [];
                return n.$t((function(n, i) {
                    var o = new W(n), s = function(t) {
                        return [ 0, $n(t) ];
                    }(o);
                    r.push(e.get(s).next((function(n) {
                        return n ? br.resolve() : function(n) {
                            return e.put(new hr(0, $n(n), t.highestListenSequenceNumber));
                        }(o);
                    })));
                })).next((function() {
                    return br.waitFor(r);
                }));
            }));
        }, t.prototype.Pe = function(t, e) {
            // Create the index.
            t.createObjectStore(lr.store, {
                keyPath: lr.keyPath
            });
            var n = e.store(lr.store), r = new $r, i = function(t) {
                if (r.add(t)) {
                    var e = t.lastSegment(), i = t.popLast();
                    return n.put({
                        collectionId: e,
                        parent: $n(i)
                    });
                }
            };
            // Helper to add an index entry iff we haven't already written it.
            // Index existing remote documents.
                    return e.store(ur.store).$t({
                kt: !0
            }, (function(t, e) {
                var n = new W(t);
                return i(n.popLast());
            })).next((function() {
                return e.store(ir.store).$t({
                    kt: !0
                }, (function(t, e) {
                    t[0];
                    var n = t[1];
                    t[2];
                    var r = Zn(n);
                    return i(r.popLast());
                }));
            }));
        }, t.prototype.Ve = function(t) {
            var e = this, n = t.store(cr.store);
            return n.$t((function(t, r) {
                var i = Kr(r), o = Qr(e.R, i);
                return n.put(o);
            }));
        }, t;
    }();

    function Ai(t) {
        t.createObjectStore(hr.store, {
            keyPath: hr.keyPath
        }).createIndex(hr.documentTargetsIndex, hr.documentTargetsKeyPath, {
            unique: !0
        }), 
        // NOTE: This is unique only because the TargetId is the suffix.
        t.createObjectStore(cr.store, {
            keyPath: cr.keyPath
        }).createIndex(cr.queryTargetsIndexName, cr.queryTargetsKeyPath, {
            unique: !0
        }), t.createObjectStore(fr.store);
    }

    var ki = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.", Ci = /** @class */ function() {
        function t(
        /**
         * Whether to synchronize the in-memory state of multiple tabs and share
         * access to local persistence.
         */
        e, n, r, i, o, s, u, a, c, 
        /**
         * If set to true, forcefully obtains database access. Existing tabs will
         * no longer be able to access IndexedDB.
         */
        h) {
            if (this.allowTabSynchronization = e, this.persistenceKey = n, this.clientId = r, 
            this.Se = o, this.window = s, this.document = u, this.De = c, this.Ce = h, this.Ne = null, 
            this.xe = !1, this.isPrimary = !1, this.networkEnabled = !0, 
            /** Our window.unload handler, if registered. */
            this.Fe = null, this.inForeground = !1, 
            /** Our 'visibilitychange' listener if registered. */
            this.ke = null, 
            /** The client metadata refresh task. */
            this.$e = null, 
            /** The last time we garbage collected the client metadata object store. */
            this.Oe = Number.NEGATIVE_INFINITY, 
            /** A listener to notify on primary state changes. */
            this.Me = function(t) {
                return Promise.resolve();
            }, !t.yt()) throw new N(S.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
            this.referenceDelegate = new gi(this, i), this.Le = n + "main", this.R = new Pr(a), 
            this.Be = new Er(this.Le, 11, new Di(this.R)), this.qe = new ci(this.referenceDelegate, this.R), 
            this.Ut = new Xr, this.Ue = function(t, e) {
                return new Ei(t, e);
            }(this.R, this.Ut), this.Ke = new zr, this.window && this.window.localStorage ? this.Qe = this.window.localStorage : (this.Qe = null, 
            !1 === h && C("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
        }
        /**
         * Attempt to start IndexedDb persistence.
         *
         * @returns Whether persistence was enabled.
         */    return t.prototype.start = function() {
            var t = this;
            // NOTE: This is expected to fail sometimes (in the case of another tab
            // already having the persistence lock), so it's the first thing we should
            // do.
                    return this.je().then((function() {
                if (!t.isPrimary && !t.allowTabSynchronization) 
                // Fail `start()` if `synchronizeTabs` is disabled and we cannot
                // obtain the primary lease.
                throw new N(S.FAILED_PRECONDITION, ki);
                return t.We(), t.Ge(), t.ze(), t.runTransaction("getHighestListenSequenceNumber", "readonly", (function(e) {
                    return t.qe.getHighestSequenceNumber(e);
                }));
            })).then((function(e) {
                t.Ne = new _(e, t.De);
            })).then((function() {
                t.xe = !0;
            })).catch((function(e) {
                return t.Be && t.Be.close(), Promise.reject(e);
            }));
        }, 
        /**
         * Registers a listener that gets called when the primary state of the
         * instance changes. Upon registering, this listener is invoked immediately
         * with the current primary state.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.He = function(t) {
            var e = this;
            return this.Me = function(i) {
                return __awaiter(e, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        return this.started ? [ 2 /*return*/ , t(i) ] : [ 2 /*return*/ ];
                    }));
                }));
            }, t(this.isPrimary);
        }, 
        /**
         * Registers a listener that gets called when the database receives a
         * version change event indicating that it has deleted.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.setDatabaseDeletedListener = function(t) {
            var e = this;
            this.Be.vt((function(i) {
                return __awaiter(e, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        switch (e.label) {
                          case 0:
                            return null === i.newVersion ? [ 4 /*yield*/ , t() ] : [ 3 /*break*/ , 2 ];

                          case 1:
                            e.sent(), e.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }, 
        /**
         * Adjusts the current network state in the client's metadata, potentially
         * affecting the primary lease.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.setNetworkEnabled = function(t) {
            var e = this;
            this.networkEnabled !== t && (this.networkEnabled = t, 
            // Schedule a primary lease refresh for immediate execution. The eventual
            // lease update will be propagated via `primaryStateListener`.
            this.Se.enqueueAndForget((function() {
                return __awaiter(e, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        switch (t.label) {
                          case 0:
                            return this.started ? [ 4 /*yield*/ , this.je() ] : [ 3 /*break*/ , 2 ];

                          case 1:
                            t.sent(), t.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            })));
        }, 
        /**
         * Updates the client metadata in IndexedDb and attempts to either obtain or
         * extend the primary lease for the local client. Asynchronously notifies the
         * primary state listener if the client either newly obtained or released its
         * primary lease.
         */
        t.prototype.je = function() {
            var t = this;
            return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (function(e) {
                return Ri(e).put(new dr(t.clientId, Date.now(), t.networkEnabled, t.inForeground)).next((function() {
                    if (t.isPrimary) return t.Je(e).next((function(e) {
                        e || (t.isPrimary = !1, t.Se.enqueueRetryable((function() {
                            return t.Me(!1);
                        })));
                    }));
                })).next((function() {
                    return t.Ye(e);
                })).next((function(n) {
                    return t.isPrimary && !n ? t.Xe(e).next((function() {
                        return !1;
                    })) : !!n && t.Ze(e).next((function() {
                        return !0;
                    }));
                }));
            })).catch((function(e) {
                if (Sr(e)) 
                // Proceed with the existing state. Any subsequent access to
                // IndexedDB will verify the lease.
                return k("IndexedDbPersistence", "Failed to extend owner lease: ", e), t.isPrimary;
                if (!t.allowTabSynchronization) throw e;
                return k("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", e), 
                /* isPrimary= */ !1;
            })).then((function(e) {
                t.isPrimary !== e && t.Se.enqueueRetryable((function() {
                    return t.Me(e);
                })), t.isPrimary = e;
            }));
        }, t.prototype.Je = function(t) {
            var e = this;
            return xi(t).get(er.key).next((function(t) {
                return br.resolve(e.tn(t));
            }));
        }, t.prototype.en = function(t) {
            return Ri(t).delete(this.clientId);
        }, 
        /**
         * If the garbage collection threshold has passed, prunes the
         * RemoteDocumentChanges and the ClientMetadata store based on the last update
         * time of all clients.
         */
        t.prototype.nn = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e, n, i, o = this;
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return !this.isPrimary || this.sn(this.Oe, 18e5) ? [ 3 /*break*/ , 2 ] : (this.Oe = Date.now(), 
                        [ 4 /*yield*/ , this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (function(t) {
                            var e = xr(t, dr.store);
                            return e.Nt().next((function(t) {
                                var n = o.rn(t, 18e5), r = t.filter((function(t) {
                                    return -1 === n.indexOf(t);
                                }));
                                // Delete metadata for clients that are no longer considered active.
                                                            return br.forEach(r, (function(t) {
                                    return e.delete(t.clientId);
                                })).next((function() {
                                    return r;
                                }));
                            }));
                        })).catch((function() {
                            return [];
                        })) ]);

                      case 1:
                        // Delete potential leftover entries that may continue to mark the
                        // inactive clients as zombied in LocalStorage.
                        // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                        // the client atomically, but we can't. So we opt to delete the IndexedDb
                        // entries first to avoid potentially reviving a zombied client.
                        if (t = r.sent(), this.Qe) for (e = 0, n = t; e < n.length; e++) i = n[e], this.Qe.removeItem(this.on(i.clientId));
                        r.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Schedules a recurring timer to update the client metadata and to either
         * extend or acquire the primary lease if the client is eligible.
         */
        t.prototype.ze = function() {
            var t = this;
            this.$e = this.Se.enqueueAfterDelay("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (function() {
                return t.je().then((function() {
                    return t.nn();
                })).then((function() {
                    return t.ze();
                }));
            }));
        }, 
        /** Checks whether `client` is the local client. */ t.prototype.tn = function(t) {
            return !!t && t.ownerId === this.clientId;
        }, 
        /**
         * Evaluate the state of all active clients and determine whether the local
         * client is or can act as the holder of the primary lease. Returns whether
         * the client is eligible for the lease, but does not actually acquire it.
         * May return 'false' even if there is no active leaseholder and another
         * (foreground) client should become leaseholder instead.
         */
        t.prototype.Ye = function(t) {
            var e = this;
            return this.Ce ? br.resolve(!0) : xi(t).get(er.key).next((function(n) {
                // A client is eligible for the primary lease if:
                // - its network is enabled and the client's tab is in the foreground.
                // - its network is enabled and no other client's tab is in the
                //   foreground.
                // - every clients network is disabled and the client's tab is in the
                //   foreground.
                // - every clients network is disabled and no other client's tab is in
                //   the foreground.
                // - the `forceOwningTab` setting was passed in.
                if (null !== n && e.sn(n.leaseTimestampMs, 5e3) && !e.cn(n.ownerId)) {
                    if (e.tn(n) && e.networkEnabled) return !0;
                    if (!e.tn(n)) {
                        if (!n.allowTabSynchronization) 
                        // Fail the `canActAsPrimary` check if the current leaseholder has
                        // not opted into multi-tab synchronization. If this happens at
                        // client startup, we reject the Promise returned by
                        // `enablePersistence()` and the user can continue to use Firestore
                        // with in-memory persistence.
                        // If this fails during a lease refresh, we will instead block the
                        // AsyncQueue from executing further operations. Note that this is
                        // acceptable since mixing & matching different `synchronizeTabs`
                        // settings is not supported.
                        // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                        // no longer be turned off.
                        throw new N(S.FAILED_PRECONDITION, ki);
                        return !1;
                    }
                }
                return !(!e.networkEnabled || !e.inForeground) || Ri(t).Nt().next((function(t) {
                    return void 0 === e.rn(t, 5e3).find((function(t) {
                        if (e.clientId !== t.clientId) {
                            var n = !e.networkEnabled && t.networkEnabled, r = !e.inForeground && t.inForeground, i = e.networkEnabled === t.networkEnabled;
                            if (n || r && i) return !0;
                        }
                        return !1;
                    }));
                }));
            })).next((function(t) {
                return e.isPrimary !== t && k("IndexedDbPersistence", "Client " + (t ? "is" : "is not") + " eligible for a primary lease."), 
                t;
            }));
        }, t.prototype.shutdown = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t = this;
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                        // has obtained the primary lease.
                        // The shutdown() operations are idempotent and can be called even when
                        // start() aborted (e.g. because it couldn't acquire the persistence lease).
                        return this.xe = !1, this.un(), this.$e && (this.$e.cancel(), this.$e = null), this.an(), 
                        this.hn(), [ 4 /*yield*/ , this.Be.runTransaction("shutdown", "readwrite", [ er.store, dr.store ], (function(e) {
                            var n = new Cr(e, _.o);
                            return t.Xe(n).next((function() {
                                return t.en(n);
                            }));
                        })) ];

                      case 1:
                        // The shutdown() operations are idempotent and can be called even when
                        // start() aborted (e.g. because it couldn't acquire the persistence lease).
                        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                        // has obtained the primary lease.
                        return e.sent(), this.Be.close(), 
                        // Remove the entry marking the client as zombied from LocalStorage since
                        // we successfully deleted its metadata from IndexedDb.
                        this.ln(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Returns clients that are not zombied and have an updateTime within the
         * provided threshold.
         */
        t.prototype.rn = function(t, e) {
            var n = this;
            return t.filter((function(t) {
                return n.sn(t.updateTimeMs, e) && !n.cn(t.clientId);
            }));
        }, 
        /**
         * Returns the IDs of the clients that are currently active. If multi-tab
         * is not supported, returns an array that only contains the local client's
         * ID.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.fn = function() {
            var t = this;
            return this.runTransaction("getActiveClients", "readonly", (function(e) {
                return Ri(e).Nt().next((function(e) {
                    return t.rn(e, 18e5).map((function(t) {
                        return t.clientId;
                    }));
                }));
            }));
        }, Object.defineProperty(t.prototype, "started", {
            get: function() {
                return this.xe;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.getMutationQueue = function(t) {
            return ri.Qt(t, this.R, this.Ut, this.referenceDelegate);
        }, t.prototype.getTargetCache = function() {
            return this.qe;
        }, t.prototype.getRemoteDocumentCache = function() {
            return this.Ue;
        }, t.prototype.getIndexManager = function() {
            return this.Ut;
        }, t.prototype.getBundleCache = function() {
            return this.Ke;
        }, t.prototype.runTransaction = function(t, e, n) {
            var r = this;
            k("IndexedDbPersistence", "Starting transaction:", t);
            var i, o = "readonly" === e ? "readonly" : "readwrite";
            // Do all transactions as readwrite against all object stores, since we
            // are the only reader/writer.
            return this.Be.runTransaction(t, o, vr, (function(o) {
                return i = new Cr(o, r.Ne ? r.Ne.next() : _.o), "readwrite-primary" === e ? r.Je(i).next((function(t) {
                    return !!t || r.Ye(i);
                })).next((function(e) {
                    if (!e) throw C("Failed to obtain primary lease for action '" + t + "'."), r.isPrimary = !1, 
                    r.Se.enqueueRetryable((function() {
                        return r.Me(!1);
                    })), new N(S.FAILED_PRECONDITION, mr);
                    return n(i);
                })).next((function(t) {
                    return r.Ze(i).next((function() {
                        return t;
                    }));
                })) : r.dn(i).next((function() {
                    return n(i);
                }));
            })).then((function(t) {
                return i.raiseOnCommittedEvent(), t;
            }));
        }, 
        /**
         * Verifies that the current tab is the primary leaseholder or alternatively
         * that the leaseholder has opted into multi-tab synchronization.
         */
        // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
        // be turned off.
        t.prototype.dn = function(t) {
            var e = this;
            return xi(t).get(er.key).next((function(t) {
                if (null !== t && e.sn(t.leaseTimestampMs, 5e3) && !e.cn(t.ownerId) && !e.tn(t) && !(e.Ce || e.allowTabSynchronization && t.allowTabSynchronization)) throw new N(S.FAILED_PRECONDITION, ki);
            }));
        }, 
        /**
         * Obtains or extends the new primary lease for the local client. This
         * method does not verify that the client is eligible for this lease.
         */
        t.prototype.Ze = function(t) {
            var e = new er(this.clientId, this.allowTabSynchronization, Date.now());
            return xi(t).put(er.key, e);
        }, t.yt = function() {
            return Er.yt();
        }, 
        /** Checks the primary lease and removes it if we are the current primary. */ t.prototype.Xe = function(t) {
            var e = this, n = xi(t);
            return n.get(er.key).next((function(t) {
                return e.tn(t) ? (k("IndexedDbPersistence", "Releasing primary lease."), n.delete(er.key)) : br.resolve();
            }));
        }, 
        /** Verifies that `updateTimeMs` is within `maxAgeMs`. */ t.prototype.sn = function(t, e) {
            var n = Date.now();
            return !(t < n - e || t > n && (C("Detected an update time that is in the future: " + t + " > " + n), 
            1));
        }, t.prototype.We = function() {
            var t = this;
            null !== this.document && "function" == typeof this.document.addEventListener && (this.ke = function() {
                t.Se.enqueueAndForget((function() {
                    return t.inForeground = "visible" === t.document.visibilityState, t.je();
                }));
            }, this.document.addEventListener("visibilitychange", this.ke), this.inForeground = "visible" === this.document.visibilityState);
        }, t.prototype.an = function() {
            this.ke && (this.document.removeEventListener("visibilitychange", this.ke), this.ke = null);
        }, 
        /**
         * Attaches a window.unload handler that will synchronously write our
         * clientId to a "zombie client id" location in LocalStorage. This can be used
         * by tabs trying to acquire the primary lease to determine that the lease
         * is no longer valid even if the timestamp is recent. This is particularly
         * important for the refresh case (so the tab correctly re-acquires the
         * primary lease). LocalStorage is used for this rather than IndexedDb because
         * it is a synchronous API and so can be used reliably from  an unload
         * handler.
         */
        t.prototype.Ge = function() {
            var t, e = this;
            "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.Fe = function() {
                // Note: In theory, this should be scheduled on the AsyncQueue since it
                // accesses internal state. We execute this code directly during shutdown
                // to make sure it gets a chance to run.
                e.un(), e.Se.enqueueAndForget((function() {
                    return e.shutdown();
                }));
            }, this.window.addEventListener("pagehide", this.Fe));
        }, t.prototype.hn = function() {
            this.Fe && (this.window.removeEventListener("pagehide", this.Fe), this.Fe = null);
        }, 
        /**
         * Returns whether a client is "zombied" based on its LocalStorage entry.
         * Clients become zombied when their tab closes without running all of the
         * cleanup logic in `shutdown()`.
         */
        t.prototype.cn = function(t) {
            var e;
            try {
                var n = null !== (null === (e = this.Qe) || void 0 === e ? void 0 : e.getItem(this.on(t)));
                return k("IndexedDbPersistence", "Client '" + t + "' " + (n ? "is" : "is not") + " zombied in LocalStorage"), 
                n;
            } catch (t) {
                // Gracefully handle if LocalStorage isn't working.
                return C("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
            }
        }, 
        /**
         * Record client as zombied (a client that had its tab closed). Zombied
         * clients are ignored during primary tab selection.
         */
        t.prototype.un = function() {
            if (this.Qe) try {
                this.Qe.setItem(this.on(this.clientId), String(Date.now()));
            } catch (t) {
                // Gracefully handle if LocalStorage isn't available / working.
                C("Failed to set zombie client id.", t);
            }
        }, 
        /** Removes the zombied client entry if it exists. */ t.prototype.ln = function() {
            if (this.Qe) try {
                this.Qe.removeItem(this.on(this.clientId));
            } catch (t) {
                // Ignore
            }
        }, t.prototype.on = function(t) {
            return "firestore_zombie_" + this.persistenceKey + "_" + t;
        }, t;
    }();

    /**
     * Oldest acceptable age in milliseconds for client metadata before the client
     * is considered inactive and its associated data is garbage collected.
     */
    /**
     * An IndexedDB-backed instance of Persistence. Data is stored persistently
     * across sessions.
     *
     * On Web only, the Firestore SDKs support shared access to its persistence
     * layer. This allows multiple browser tabs to read and write to IndexedDb and
     * to synchronize state even without network connectivity. Shared access is
     * currently optional and not enabled unless all clients invoke
     * `enablePersistence()` with `{synchronizeTabs:true}`.
     *
     * In multi-tab mode, if multiple clients are active at the same time, the SDK
     * will designate one client as the “primary client”. An effort is made to pick
     * a visible, network-connected and active client, and this client is
     * responsible for letting other clients know about its presence. The primary
     * client writes a unique client-generated identifier (the client ID) to
     * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
     * update this entry, another client can acquire the lease and take over as
     * primary.
     *
     * Some persistence operations in the SDK are designated as primary-client only
     * operations. This includes the acknowledgment of mutations and all updates of
     * remote documents. The effects of these operations are written to persistence
     * and then broadcast to other tabs via LocalStorage (see
     * `WebStorageSharedClientState`), which then refresh their state from
     * persistence.
     *
     * Similarly, the primary client listens to notifications sent by secondary
     * clients to discover persistence changes written by secondary clients, such as
     * the addition of new mutations and query targets.
     *
     * If multi-tab is not enabled and another tab already obtained the primary
     * lease, IndexedDbPersistence enters a failed state and all subsequent
     * operations will automatically fail.
     *
     * Additionally, there is an optimization so that when a tab is closed, the
     * primary lease is released immediately (this is especially important to make
     * sure that a refreshed tab is able to immediately re-acquire the primary
     * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
     * since it is an asynchronous API. So in addition to attempting to give up the
     * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
     * LocalStorage which acts as an indicator that another tab should go ahead and
     * take the primary lease immediately regardless of the current lease timestamp.
     *
     * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
     * longer optional.
     */
    /**
     * Helper to get a typed SimpleDbStore for the primary client object store.
     */
    function xi(t) {
        return xr(t, er.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the client metadata object store.
     */ function Ri(t) {
        return xr(t, dr.store);
    }

    /**
     * Generates a string used as a prefix when storing data in IndexedDB and
     * LocalStorage.
     */ function Li(t, e) {
        // Use two different prefix formats:
        //   * firestore / persistenceKey / projectID . databaseID / ...
        //   * firestore / persistenceKey / projectID / ...
        // projectIDs are DNS-compatible names and cannot contain dots
        // so there's no danger of collisions.
        var n = t.projectId;
        return t.isDefaultDatabase || (n += "." + t.database), "firestore/" + e + "/" + n + "/"
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */;
    }

    var Pi = /** @class */ function() {
        function t(t, e, n) {
            this.Ue = t, this._n = e, this.Ut = n
            /**
         * Get the local view of the document identified by `key`.
         *
         * @returns Local view of the document or null if we don't have any cached
         * state for it.
         */;
        }
        return t.prototype.mn = function(t, e) {
            var n = this;
            return this._n.getAllMutationBatchesAffectingDocumentKey(t, e).next((function(r) {
                return n.yn(t, e, r);
            }));
        }, 
        /** Internal version of `getDocument` that allows reusing batches. */ t.prototype.yn = function(t, e, n) {
            return this.Ue.getEntry(t, e).next((function(t) {
                for (var e = 0, r = n; e < r.length; e++) {
                    r[e].applyToLocalView(t);
                }
                return t;
            }));
        }, 
        // Returns the view of the given `docs` as they would appear after applying
        // all mutations in the given `batches`.
        t.prototype.gn = function(t, e) {
            t.forEach((function(t, n) {
                for (var r = 0, i = e; r < i.length; r++) {
                    i[r].applyToLocalView(n);
                }
            }));
        }, 
        /**
         * Gets the local view of the documents identified by `keys`.
         *
         * If we don't have cached state for a document in `keys`, a NoDocument will
         * be stored for that key in the resulting set.
         */
        t.prototype.pn = function(t, e) {
            var n = this;
            return this.Ue.getEntries(t, e).next((function(e) {
                return n.En(t, e).next((function() {
                    return e;
                }));
            }));
        }, 
        /**
         * Applies the local view the given `baseDocs` without retrieving documents
         * from the local store.
         */
        t.prototype.En = function(t, e) {
            var n = this;
            return this._n.getAllMutationBatchesAffectingDocumentKeys(t, e).next((function(t) {
                return n.gn(e, t);
            }));
        }, 
        /**
         * Performs a query against the local view of all documents.
         *
         * @param transaction - The persistence transaction.
         * @param query - The query to match documents against.
         * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
         *     documents that have been read since this snapshot version (exclusive).
         */
        t.prototype.getDocumentsMatchingQuery = function(t, e, n) {
            /**
     * Returns whether the query matches a single document by path (rather than a
     * collection).
     */
            return function(t) {
                return at.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
            }(e) ? this.Tn(t, e.path) : Zt(e) ? this.In(t, e, n) : this.An(t, e, n);
        }, t.prototype.Tn = function(t, e) {
            // Just do a simple document lookup.
            return this.mn(t, new at(e)).next((function(t) {
                var e = tn();
                return t.isFoundDocument() && (e = e.insert(t.key, t)), e;
            }));
        }, t.prototype.In = function(t, e, n) {
            var r = this, i = e.collectionGroup, o = tn();
            return this.Ut.getCollectionParents(t, i).next((function(s) {
                return br.forEach(s, (function(s) {
                    var u = function(t, e) {
                        return new zt(e, 
                        /*collectionGroup=*/ null, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
                    }(e, s.child(i));
                    return r.An(t, u, n).next((function(t) {
                        t.forEach((function(t, e) {
                            o = o.insert(t, e);
                        }));
                    }));
                })).next((function() {
                    return o;
                }));
            }));
        }, t.prototype.An = function(t, e, n) {
            var r, i, o = this;
            // Query the remote documents and overlay mutations.
                    return this.Ue.getDocumentsMatchingQuery(t, e, n).next((function(n) {
                return r = n, o._n.getAllMutationBatchesAffectingQuery(t, e);
            })).next((function(e) {
                return i = e, o.Rn(t, i, r).next((function(t) {
                    r = t;
                    for (var e = 0, n = i; e < n.length; e++) for (var o = n[e], s = 0, u = o.mutations; s < u.length; s++) {
                        var a = u[s], c = a.key, h = r.get(c);
                        null == h && (
                        // Create invalid document to apply mutations on top of
                        h = St.newInvalidDocument(c), r = r.insert(c, h)), Ce(a, h, o.localWriteTime), h.isFoundDocument() || (r = r.remove(c));
                    }
                }));
            })).next((function() {
                // Finally, filter out any documents that don't actually match
                // the query.
                return r.forEach((function(t, n) {
                    se(e, n) || (r = r.remove(t));
                })), r;
            }));
        }, t.prototype.Rn = function(t, e, n) {
            for (var r = on(), i = 0, o = e; i < o.length; i++) for (var s = 0, u = o[i].mutations; s < u.length; s++) {
                var a = u[s];
                a instanceof Pe && null === n.get(a.key) && (r = r.add(a.key));
            }
            var c = n;
            return this.Ue.getEntries(t, r).next((function(t) {
                return t.forEach((function(t, e) {
                    e.isFoundDocument() && (c = c.insert(t, e));
                })), c;
            }));
        }, t;
    }(), Fi = /** @class */ function() {
        function t(t, e, n, r) {
            this.targetId = t, this.fromCache = e, this.bn = n, this.vn = r;
        }
        return t.Pn = function(e, n) {
            for (var r = on(), i = on(), o = 0, s = n.docChanges; o < s.length; o++) {
                var u = s[o];
                switch (u.type) {
                  case 0 /* Added */ :
                    r = r.add(u.doc.key);
                    break;

                  case 1 /* Removed */ :
                    i = i.add(u.doc.key);
                    // do nothing
                            }
            }
            return new t(e, n.fromCache, r, i);
        }, t;
    }(), Mi = /** @class */ function() {
        function t() {}
        /** Sets the document view to query against. */    return t.prototype.Vn = function(t) {
            this.Sn = t;
        }, 
        /** Returns all local documents matching the specified query. */ t.prototype.getDocumentsMatchingQuery = function(t, e, n, r) {
            var i = this;
            // Queries that match all documents don't benefit from using
            // key-based lookups. It is more efficient to scan all documents in a
            // collection, rather than to perform individual lookups.
                    return function(t) {
                return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.explicitOrderBy.length || 1 === t.explicitOrderBy.length && t.explicitOrderBy[0].field.isKeyField());
            }(e) || n.isEqual(j.min()) ? this.Dn(t, e) : this.Sn.pn(t, r).next((function(o) {
                var s = i.Cn(e, o);
                return (Yt(e) || $t(e)) && i.Nn(e.limitType, s, r, n) ? i.Dn(t, e) : (A() <= LogLevel.DEBUG && k("QueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), oe(e)), 
                i.Sn.getDocumentsMatchingQuery(t, e, n).next((function(t) {
                    // We merge `previousResults` into `updateResults`, since
                    // `updateResults` is already a DocumentMap. If a document is
                    // contained in both lists, then its contents are the same.
                    return s.forEach((function(e) {
                        t = t.insert(e.key, e);
                    })), t;
                })));
            }));
            // Queries that have never seen a snapshot without limbo free documents
            // should also be run as a full collection scan.
            }, 
        /** Applies the query filter and sorting to the provided documents.  */ t.prototype.Cn = function(t, e) {
            // Sort the documents and re-apply the query filter since previously
            // matching documents do not necessarily still match the query.
            var n = new Ye(ue(t));
            return e.forEach((function(e, r) {
                se(t, r) && (n = n.add(r));
            })), n;
        }, 
        /**
         * Determines if a limit query needs to be refilled from cache, making it
         * ineligible for index-free execution.
         *
         * @param sortedPreviousResults - The documents that matched the query when it
         * was last synchronized, sorted by the query's comparator.
         * @param remoteKeys - The document keys that matched the query at the last
         * snapshot.
         * @param limboFreeSnapshotVersion - The version of the snapshot when the
         * query was last synchronized.
         */
        t.prototype.Nn = function(t, e, n, r) {
            // The query needs to be refilled if a previously matching document no
            // longer matches.
            if (n.size !== e.size) return !0;
            // Limit queries are not eligible for index-free query execution if there is
            // a potential that an older document from cache now sorts before a document
            // that was previously part of the limit. This, however, can only happen if
            // the document at the edge of the limit goes out of limit.
            // If a document that is not the limit boundary sorts differently,
            // the boundary of the limit itself did not change and documents from cache
            // will continue to be "rejected" by this boundary. Therefore, we can ignore
            // any modifications that don't affect the last document.
                    var i = "F" /* First */ === t ? e.last() : e.first();
            return !!i && (i.hasPendingWrites || i.version.compareTo(r) > 0);
        }, t.prototype.Dn = function(t, e) {
            return A() <= LogLevel.DEBUG && k("QueryEngine", "Using full collection scan to execute query:", oe(e)), 
            this.Sn.getDocumentsMatchingQuery(t, e, j.min());
        }, t;
    }(), Vi = /** @class */ function() {
        function t(
        /** Manages our in-memory or durable persistence. */
        t, e, n, r) {
            this.persistence = t, this.xn = e, this.R = r, 
            /**
                 * Maps a targetID to data about its target.
                 *
                 * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
                 * of `applyRemoteEvent()` idempotent.
                 */
            this.Fn = new ze(V), 
            /** Maps a target to its targetID. */
            // TODO(wuandy): Evaluate if TargetId can be part of Target.
            this.kn = new bi((function(t) {
                return At(t);
            }), kt), 
            /**
                 * The read time of the last entry processed by `getNewDocumentChanges()`.
                 *
                 * PORTING NOTE: This is only used for multi-tab synchronization.
                 */
            this.$n = j.min(), this._n = t.getMutationQueue(n), this.On = t.getRemoteDocumentCache(), 
            this.qe = t.getTargetCache(), this.Mn = new Pi(this.On, this._n, this.persistence.getIndexManager()), 
            this.Ke = t.getBundleCache(), this.xn.Vn(this.Mn);
        }
        return t.prototype.collectGarbage = function(t) {
            var e = this;
            return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (function(n) {
                return t.collect(n, e.Fn);
            }));
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A readonly view of the local state of all documents we're tracking (i.e. we
     * have a cached version in remoteDocumentCache or local mutations for the
     * document). The view is computed by applying the mutations in the
     * MutationQueue to the RemoteDocumentCache.
     */ function qi(
    /** Manages our in-memory or durable persistence. */
    t, e, n, r) {
        return new Vi(t, e, n, r);
    }

    /**
     * Tells the LocalStore that the currently authenticated user has changed.
     *
     * In response the local store switches the mutation queue to the new user and
     * returns any resulting document changes.
     */
    // PORTING NOTE: Android and iOS only return the documents affected by the
    // change.
    function Ui(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i, o, s;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return n = P$1(t), i = n._n, o = n.Mn, [ 4 /*yield*/ , n.persistence.runTransaction("Handle user change", "readonly", (function(t) {
                        // Swap out the mutation queue, grabbing the pending mutation batches
                        // before and after.
                        var r;
                        return n._n.getAllMutationBatches(t).next((function(s) {
                            return r = s, i = n.persistence.getMutationQueue(e), 
                            // Recreate our LocalDocumentsView using the new
                            // MutationQueue.
                            o = new Pi(n.On, i, n.persistence.getIndexManager()), i.getAllMutationBatches(t);
                        })).next((function(e) {
                            for (var n = [], i = [], s = on(), u = 0, a = r
                            // Union the old/new changed keys.
                            ; u < a.length; u++) {
                                var c = a[u];
                                n.push(c.batchId);
                                for (var h = 0, f = c.mutations; h < f.length; h++) {
                                    var l = f[h];
                                    s = s.add(l.key);
                                }
                            }
                            for (var d = 0, p = e; d < p.length; d++) {
                                var y = p[d];
                                i.push(y.batchId);
                                for (var v = 0, m = y.mutations; v < m.length; v++) {
                                    var g = m[v];
                                    s = s.add(g.key);
                                }
                            }
                            // Return the set of all (potentially) changed documents and the list
                            // of mutation batch IDs that were affected by change.
                                                    return o.pn(t, s).next((function(t) {
                                return {
                                    Ln: t,
                                    removedBatchIds: n,
                                    addedBatchIds: i
                                };
                            }));
                        }));
                    })) ];

                  case 1:
                    return s = r.sent(), [ 2 /*return*/ , (n._n = i, n.Mn = o, n.xn.Vn(n.Mn), s) ];
                }
            }));
        }));
    }

    /* Accepts locally generated Mutations and commit them to storage. */
    /**
     * Acknowledges the given batch.
     *
     * On the happy path when a batch is acknowledged, the local store will
     *
     *  + remove the batch from the mutation queue;
     *  + apply the changes to the remote document cache;
     *  + recalculate the latency compensated view implied by those changes (there
     *    may be mutations in the queue that affect the documents but haven't been
     *    acknowledged yet); and
     *  + give the changed documents back the sync engine
     *
     * @returns The resulting (modified) documents.
     */ function Bi(t, e) {
        var n = P$1(t);
        return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (function(t) {
            var r = e.batch.keys(), i = n.On.newChangeBuffer({
                trackRemovals: !0
            });
            return function(t, e, n, r) {
                var i = n.batch, o = i.keys(), s = br.resolve();
                return o.forEach((function(t) {
                    s = s.next((function() {
                        return r.getEntry(e, t);
                    })).next((function(e) {
                        var o = n.docVersions.get(t);
                        O(null !== o), e.version.compareTo(o) < 0 && (i.applyToRemoteDocument(e, n), e.isValidDocument() && 
                        // We use the commitVersion as the readTime rather than the
                        // document's updateTime since the updateTime is not advanced
                        // for updates that do not modify the underlying document.
                        r.addEntry(e, n.commitVersion));
                    }));
                })), s.next((function() {
                    return t._n.removeMutationBatch(e, i);
                }));
            }(n, t, e, i).next((function() {
                return i.apply(t);
            })).next((function() {
                return n._n.performConsistencyCheck(t);
            })).next((function() {
                return n.Mn.pn(t, r);
            }));
        }));
    }

    /**
     * Removes mutations from the MutationQueue for the specified batch;
     * LocalDocuments will be recalculated.
     *
     * @returns The resulting modified documents.
     */
    /**
     * Returns the last consistent snapshot processed (used by the RemoteStore to
     * determine whether to buffer incoming snapshots from the backend).
     */ function ji(t) {
        var e = P$1(t);
        return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (function(t) {
            return e.qe.getLastRemoteSnapshotVersion(t);
        }));
    }

    /**
     * Updates the "ground-state" (remote) documents. We assume that the remote
     * event reflects any write batches that have been acknowledged or rejected
     * (i.e. we do not re-apply local mutations to updates from this event).
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */ function Ki(t, e) {
        var n = P$1(t), r = e.snapshotVersion, i = n.Fn;
        return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (function(t) {
            var o = n.On.newChangeBuffer({
                trackRemovals: !0
            });
            // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                    i = n.Fn;
            var s = [];
            e.targetChanges.forEach((function(e, o) {
                var u = i.get(o);
                if (u) {
                    // Only update the remote keys if the target is still active. This
                    // ensures that we can persist the updated target data along with
                    // the updated assignment.
                    s.push(n.qe.removeMatchingKeys(t, e.removedDocuments, o).next((function() {
                        return n.qe.addMatchingKeys(t, e.addedDocuments, o);
                    })));
                    var a = e.resumeToken;
                    // Update the resume token if the change includes one.
                                    if (a.approximateByteSize() > 0) {
                        var c = u.withResumeToken(a, r).withSequenceNumber(t.currentSequenceNumber);
                        i = i.insert(o, c), 
                        // Update the target data if there are target changes (or if
                        // sufficient time has passed since the last update).
                        /**
         * Returns true if the newTargetData should be persisted during an update of
         * an active target. TargetData should always be persisted when a target is
         * being released and should not call this function.
         *
         * While the target is active, TargetData updates can be omitted when nothing
         * about the target has changed except metadata like the resume token or
         * snapshot version. Occasionally it's worth the extra write to prevent these
         * values from getting too stale after a crash, but this doesn't have to be
         * too frequent.
         */
                        function(t, e, n) {
                            // Always persist target data if we don't already have a resume token.
                            return O(e.resumeToken.approximateByteSize() > 0), 0 === t.resumeToken.approximateByteSize() || (
                            // Don't allow resume token changes to be buffered indefinitely. This
                            // allows us to be reasonably up-to-date after a crash and avoids needing
                            // to loop over all active queries on shutdown. Especially in the browser
                            // we may not get time to do anything interesting while the current tab is
                            // closing.
                            e.snapshotVersion.toMicroseconds() - t.snapshotVersion.toMicroseconds() >= 3e8 || n.addedDocuments.size + n.modifiedDocuments.size + n.removedDocuments.size > 0);
                        }(u, c, e) && s.push(n.qe.updateTargetData(t, c));
                    }
                }
            }));
            var u = Je();
            // HACK: The only reason we allow a null snapshot version is so that we
            // can synthesize remote events when we get permission denied errors while
            // trying to resolve the state of a locally cached document that is in
            // limbo.
                    if (e.documentUpdates.forEach((function(r, i) {
                e.resolvedLimboDocuments.has(r) && s.push(n.persistence.referenceDelegate.updateLimboDocument(t, r));
            })), 
            // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
            // documents in advance in a single call.
            s.push(Qi(t, o, e.documentUpdates, r, void 0).next((function(t) {
                u = t;
            }))), !r.isEqual(j.min())) {
                var a = n.qe.getLastRemoteSnapshotVersion(t).next((function(e) {
                    return n.qe.setTargetsMetadata(t, t.currentSequenceNumber, r);
                }));
                s.push(a);
            }
            return br.waitFor(s).next((function() {
                return o.apply(t);
            })).next((function() {
                return n.Mn.En(t, u);
            })).next((function() {
                return u;
            }));
        })).then((function(t) {
            return n.Fn = i, t;
        }));
    }

    /**
     * Populates document change buffer with documents from backend or a bundle.
     * Returns the document changes resulting from applying those documents.
     *
     * @param txn - Transaction to use to read existing documents from storage.
     * @param documentBuffer - Document buffer to collect the resulted changes to be
     *        applied to storage.
     * @param documents - Documents to be applied.
     * @param globalVersion - A `SnapshotVersion` representing the read time if all
     *        documents have the same read time.
     * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
     *        have their own read time.
     *
     * Note: this function will use `documentVersions` if it is defined;
     * when it is not defined, resorts to `globalVersion`.
     */ function Qi(t, e, n, r, 
    // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
    // this parameter.
    i) {
        var o = on();
        return n.forEach((function(t) {
            return o = o.add(t);
        })), e.getEntries(t, o).next((function(t) {
            var o = Je();
            return n.forEach((function(n, s) {
                var u = t.get(n), a = (null == i ? void 0 : i.get(n)) || r;
                // Note: The order of the steps below is important, since we want
                // to ensure that rejected limbo resolutions (which fabricate
                // NoDocuments with SnapshotVersion.min()) never add documents to
                // cache.
                            s.isNoDocument() && s.version.isEqual(j.min()) ? (
                // NoDocuments with SnapshotVersion.min() are used in manufactured
                // events. We remove these documents from cache since we lost
                // access.
                e.removeEntry(n, a), o = o.insert(n, s)) : !u.isValidDocument() || s.version.compareTo(u.version) > 0 || 0 === s.version.compareTo(u.version) && u.hasPendingWrites ? (e.addEntry(s, a), 
                o = o.insert(n, s)) : k("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", u.version, " Watch version:", s.version);
            })), o;
        }))
        /**
     * Gets the mutation batch after the passed in batchId in the mutation queue
     * or null if empty.
     * @param afterBatchId - If provided, the batch to search after.
     * @returns The next mutation or null if there wasn't one.
     */;
    }

    function Gi(t, e) {
        var n = P$1(t);
        return n.persistence.runTransaction("Get next mutation batch", "readonly", (function(t) {
            return void 0 === e && (e = -1), n._n.getNextMutationBatchAfterBatchId(t, e);
        }));
    }

    /**
     * Reads the current value of a Document with a given key or null if not
     * found - used for testing.
     */
    /**
     * Assigns the given target an internal ID so that its results can be pinned so
     * they don't get GC'd. A target must be allocated in the local store before
     * the store can be used to manage its view.
     *
     * Allocating an already allocated `Target` will return the existing `TargetData`
     * for that `Target`.
     */ function zi(t, e) {
        var n = P$1(t);
        return n.persistence.runTransaction("Allocate target", "readwrite", (function(t) {
            var r;
            return n.qe.getTargetData(t, e).next((function(i) {
                return i ? (
                // This target has been listened to previously, so reuse the
                // previous targetID.
                // TODO(mcg): freshen last accessed date?
                r = i, br.resolve(r)) : n.qe.allocateTargetId(t).next((function(i) {
                    return r = new Or(e, i, 0 /* Listen */ , t.currentSequenceNumber), n.qe.addTargetData(t, r).next((function() {
                        return r;
                    }));
                }));
            }));
        })).then((function(t) {
            // If Multi-Tab is enabled, the existing target data may be newer than
            // the in-memory data
            var r = n.Fn.get(t.targetId);
            return (null === r || t.snapshotVersion.compareTo(r.snapshotVersion) > 0) && (n.Fn = n.Fn.insert(t.targetId, t), 
            n.kn.set(e, t.targetId)), t;
        }));
    }

    /**
     * Returns the TargetData as seen by the LocalStore, including updates that may
     * have not yet been persisted to the TargetCache.
     */
    // Visible for testing.
    /**
     * Unpins all the documents associated with the given target. If
     * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
     * directly removes the associated target data from the target cache.
     *
     * Releasing a non-existing `Target` is a no-op.
     */
    // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
    function Wi(t, e, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, o, s, u;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    n = P$1(t), o = n.Fn.get(e), s = i ? "readwrite" : "readwrite-primary", r.label = 1;

                  case 1:
                    return r.trys.push([ 1, 4, , 5 ]), i ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , n.persistence.runTransaction("Release target", s, (function(t) {
                        return n.persistence.referenceDelegate.removeTarget(t, o);
                    })) ];

                  case 2:
                    r.sent(), r.label = 3;

                  case 3:
                    return [ 3 /*break*/ , 5 ];

                  case 4:
                    if (!Sr(u = r.sent())) throw u;
                    // All `releaseTarget` does is record the final metadata state for the
                    // target, but we've been recording this periodically during target
                    // activity. If we lose this write this could cause a very slight
                    // difference in the order of target deletion during GC, but we
                    // don't define exact LRU semantics so this is acceptable.
                                    return k("LocalStore", "Failed to update sequence numbers for target " + e + ": " + u), 
                    [ 3 /*break*/ , 5 ];

                  case 5:
                    return n.Fn = n.Fn.remove(e), n.kn.delete(o.target), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Runs the specified query against the local store and returns the results,
     * potentially taking advantage of query data from previous executions (such
     * as the set of remote keys).
     *
     * @param usePreviousResults - Whether results from previous executions can
     * be used to optimize this query execution.
     */ function Hi(t, e, n) {
        var r = P$1(t), i = j.min(), o = on();
        return r.persistence.runTransaction("Execute query", "readonly", (function(t) {
            return function(t, e, n) {
                var r = P$1(t), i = r.kn.get(n);
                return void 0 !== i ? br.resolve(r.Fn.get(i)) : r.qe.getTargetData(e, n);
            }(r, t, ee(e)).next((function(e) {
                if (e) return i = e.lastLimboFreeSnapshotVersion, r.qe.getMatchingKeysForTargetId(t, e.targetId).next((function(t) {
                    o = t;
                }));
            })).next((function() {
                return r.xn.getDocumentsMatchingQuery(t, e, n ? i : j.min(), n ? o : on());
            })).next((function(t) {
                return {
                    documents: t,
                    Bn: o
                };
            }));
        }));
    }

    // PORTING NOTE: Multi-Tab only.
    function Yi(t, e) {
        var n = P$1(t), r = P$1(n.qe), i = n.Fn.get(e);
        return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (function(t) {
            return r.lt(t, e).next((function(t) {
                return t ? t.target : null;
            }));
        }));
    }

    /**
     * Returns the set of documents that have been updated since the last call.
     * If this is the first call, returns the set of changes since client
     * initialization. Further invocations will return document that have changed
     * since the prior call.
     */
    // PORTING NOTE: Multi-Tab only.
    function $i(t) {
        var e = P$1(t);
        return e.persistence.runTransaction("Get new document changes", "readonly", (function(t) {
            return function(t, e, n) {
                var r = P$1(t), i = Je(), o = Vr(n), s = Si(e), u = IDBKeyRange.lowerBound(o, !0);
                return s.$t({
                    index: ur.readTimeIndex,
                    range: u
                }, (function(t, e) {
                    // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
                    // the documents directly since we want to keep sentinel deletes.
                    var n = Fr(r.R, e);
                    i = i.insert(n.key, n), o = e.readTime;
                })).next((function() {
                    return {
                        wn: i,
                        readTime: qr(o)
                    };
                }));
            }(e.On, t, e.$n);
        })).then((function(t) {
            var n = t.wn, r = t.readTime;
            return e.$n = r, n;
        }));
    }

    /**
     * Reads the newest document change from persistence and moves the internal
     * synchronization marker forward so that calls to `getNewDocumentChanges()`
     * only return changes that happened after client initialization.
     */
    // PORTING NOTE: Multi-Tab only.
    function Xi(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e;
            return __generator(this, (function(n) {
                return [ 2 /*return*/ , (e = P$1(t)).persistence.runTransaction("Synchronize last document change read time", "readonly", (function(t) {
                    return function(t) {
                        var e = Si(t), n = j.min();
                        // If there are no existing entries, we return SnapshotVersion.min().
                                            return e.$t({
                            index: ur.readTimeIndex,
                            reverse: !0
                        }, (function(t, e, r) {
                            e.readTime && (n = qr(e.readTime)), r.done();
                        })).next((function() {
                            return n;
                        }));
                    }(t);
                })).then((function(t) {
                    e.$n = t;
                })) ];
            }));
        }));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var to = /** @class */ function() {
        function t(t) {
            this.R = t, this.Qn = new Map, this.jn = new Map;
        }
        return t.prototype.getBundleMetadata = function(t, e) {
            return br.resolve(this.Qn.get(e));
        }, t.prototype.saveBundleMetadata = function(t, e) {
            /** Decodes a BundleMetadata proto into a BundleMetadata object. */
            var n;
            return this.Qn.set(e.id, {
                id: (n = e).id,
                version: n.version,
                createTime: Tn(n.createTime)
            }), br.resolve();
        }, t.prototype.getNamedQuery = function(t, e) {
            return br.resolve(this.jn.get(e));
        }, t.prototype.saveNamedQuery = function(t, e) {
            return this.jn.set(e.name, function(t) {
                return {
                    name: t.name,
                    query: Gr(t.bundledQuery),
                    readTime: Tn(t.readTime)
                };
            }(e)), br.resolve();
        }, t;
    }(), eo = /** @class */ function() {
        function t() {
            // A set of outstanding references to a document sorted by key.
            this.Wn = new Ye(no.Gn), 
            // A set of outstanding references to a document sorted by target id.
            this.zn = new Ye(no.Hn)
            /** Returns true if the reference set contains no references. */;
        }
        return t.prototype.isEmpty = function() {
            return this.Wn.isEmpty();
        }, 
        /** Adds a reference to the given document key for the given ID. */ t.prototype.addReference = function(t, e) {
            var n = new no(t, e);
            this.Wn = this.Wn.add(n), this.zn = this.zn.add(n);
        }, 
        /** Add references to the given document keys for the given ID. */ t.prototype.Jn = function(t, e) {
            var n = this;
            t.forEach((function(t) {
                return n.addReference(t, e);
            }));
        }, 
        /**
         * Removes a reference to the given document key for the given
         * ID.
         */
        t.prototype.removeReference = function(t, e) {
            this.Yn(new no(t, e));
        }, t.prototype.Xn = function(t, e) {
            var n = this;
            t.forEach((function(t) {
                return n.removeReference(t, e);
            }));
        }, 
        /**
         * Clears all references with a given ID. Calls removeRef() for each key
         * removed.
         */
        t.prototype.Zn = function(t) {
            var e = this, n = new at(new W([])), r = new no(n, t), i = new no(n, t + 1), o = [];
            return this.zn.forEachInRange([ r, i ], (function(t) {
                e.Yn(t), o.push(t.key);
            })), o;
        }, t.prototype.ts = function() {
            var t = this;
            this.Wn.forEach((function(e) {
                return t.Yn(e);
            }));
        }, t.prototype.Yn = function(t) {
            this.Wn = this.Wn.delete(t), this.zn = this.zn.delete(t);
        }, t.prototype.es = function(t) {
            var e = new at(new W([])), n = new no(e, t), r = new no(e, t + 1), i = on();
            return this.zn.forEachInRange([ n, r ], (function(t) {
                i = i.add(t.key);
            })), i;
        }, t.prototype.containsKey = function(t) {
            var e = new no(t, 0), n = this.Wn.firstAfterOrEqual(e);
            return null !== n && t.isEqual(n.key);
        }, t;
    }(), no = /** @class */ function() {
        function t(t, e) {
            this.key = t, this.ns = e
            /** Compare by key then by ID */;
        }
        return t.Gn = function(t, e) {
            return at.comparator(t.key, e.key) || V(t.ns, e.ns);
        }, 
        /** Compare by ID then by key */ t.Hn = function(t, e) {
            return V(t.ns, e.ns) || at.comparator(t.key, e.key);
        }, t;
    }(), ro = /** @class */ function() {
        function t(t, e) {
            this.Ut = t, this.referenceDelegate = e, 
            /**
                 * The set of all mutations that have been sent but not yet been applied to
                 * the backend.
                 */
            this._n = [], 
            /** Next value to use when assigning sequential IDs to each mutation batch. */
            this.ss = 1, 
            /** An ordered mapping between documents and the mutations batch IDs. */
            this.rs = new Ye(no.Gn);
        }
        return t.prototype.checkEmpty = function(t) {
            return br.resolve(0 === this._n.length);
        }, t.prototype.addMutationBatch = function(t, e, n, r) {
            var i = this.ss;
            this.ss++, this._n.length > 0 && this._n[this._n.length - 1];
            var o = new Rr(i, e, n, r);
            this._n.push(o);
            // Track references by document key and index collection parents.
            for (var s = 0, u = r; s < u.length; s++) {
                var a = u[s];
                this.rs = this.rs.add(new no(a.key, i)), this.Ut.addToCollectionParentIndex(t, a.key.path.popLast());
            }
            return br.resolve(o);
        }, t.prototype.lookupMutationBatch = function(t, e) {
            return br.resolve(this.os(e));
        }, t.prototype.getNextMutationBatchAfterBatchId = function(t, e) {
            var n = e + 1, r = this.cs(n), i = r < 0 ? 0 : r;
            // The requested batchId may still be out of range so normalize it to the
            // start of the queue.
                    return br.resolve(this._n.length > i ? this._n[i] : null);
        }, t.prototype.getHighestUnacknowledgedBatchId = function() {
            return br.resolve(0 === this._n.length ? -1 : this.ss - 1);
        }, t.prototype.getAllMutationBatches = function(t) {
            return br.resolve(this._n.slice());
        }, t.prototype.getAllMutationBatchesAffectingDocumentKey = function(t, e) {
            var n = this, r = new no(e, 0), i = new no(e, Number.POSITIVE_INFINITY), o = [];
            return this.rs.forEachInRange([ r, i ], (function(t) {
                var e = n.os(t.ns);
                o.push(e);
            })), br.resolve(o);
        }, t.prototype.getAllMutationBatchesAffectingDocumentKeys = function(t, e) {
            var n = this, r = new Ye(V);
            return e.forEach((function(t) {
                var e = new no(t, 0), i = new no(t, Number.POSITIVE_INFINITY);
                n.rs.forEachInRange([ e, i ], (function(t) {
                    r = r.add(t.ns);
                }));
            })), br.resolve(this.us(r));
        }, t.prototype.getAllMutationBatchesAffectingQuery = function(t, e) {
            // Use the query path as a prefix for testing if a document matches the
            // query.
            var n = e.path, r = n.length + 1, i = n;
            // Construct a document reference for actually scanning the index. Unlike
            // the prefix the document key in this reference must have an even number of
            // segments. The empty segment can be used a suffix of the query path
            // because it precedes all other segments in an ordered traversal.
                    at.isDocumentKey(i) || (i = i.child(""));
            var o = new no(new at(i), 0), s = new Ye(V);
            // Find unique batchIDs referenced by all documents potentially matching the
            // query.
                    return this.rs.forEachWhile((function(t) {
                var e = t.key.path;
                return !!n.isPrefixOf(e) && (
                // Rows with document keys more than one segment longer than the query
                // path can't be matches. For example, a query on 'rooms' can't match
                // the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                e.length === r && (s = s.add(t.ns)), !0);
            }), o), br.resolve(this.us(s));
        }, t.prototype.us = function(t) {
            var e = this, n = [];
            // Construct an array of matching batches, sorted by batchID to ensure that
            // multiple mutations affecting the same document key are applied in order.
                    return t.forEach((function(t) {
                var r = e.os(t);
                null !== r && n.push(r);
            })), n;
        }, t.prototype.removeMutationBatch = function(t, e) {
            var n = this;
            O(0 === this.hs(e.batchId, "removed")), this._n.shift();
            var r = this.rs;
            return br.forEach(e.mutations, (function(i) {
                var o = new no(i.key, e.batchId);
                return r = r.delete(o), n.referenceDelegate.markPotentiallyOrphaned(t, i.key);
            })).next((function() {
                n.rs = r;
            }));
        }, t.prototype.Gt = function(t) {
            // No-op since the memory mutation queue does not maintain a separate cache.
        }, t.prototype.containsKey = function(t, e) {
            var n = new no(e, 0), r = this.rs.firstAfterOrEqual(n);
            return br.resolve(e.isEqual(r && r.key));
        }, t.prototype.performConsistencyCheck = function(t) {
            return this._n.length, br.resolve();
        }, 
        /**
         * Finds the index of the given batchId in the mutation queue and asserts that
         * the resulting index is within the bounds of the queue.
         *
         * @param batchId - The batchId to search for
         * @param action - A description of what the caller is doing, phrased in passive
         * form (e.g. "acknowledged" in a routine that acknowledges batches).
         */
        t.prototype.hs = function(t, e) {
            return this.cs(t);
        }, 
        /**
         * Finds the index of the given batchId in the mutation queue. This operation
         * is O(1).
         *
         * @returns The computed index of the batch with the given batchId, based on
         * the state of the queue. Note this index can be negative if the requested
         * batchId has already been remvoed from the queue or past the end of the
         * queue if the batchId is larger than the last added batch.
         */
        t.prototype.cs = function(t) {
            return 0 === this._n.length ? 0 : t - this._n[0].batchId;
            // Examine the front of the queue to figure out the difference between the
            // batchId and indexes in the array. Note that since the queue is ordered
            // by batchId, if the first batch has a larger batchId then the requested
            // batchId doesn't exist in the queue.
            }, 
        /**
         * A version of lookupMutationBatch that doesn't return a promise, this makes
         * other functions that uses this code easier to read and more efficent.
         */
        t.prototype.os = function(t) {
            var e = this.cs(t);
            return e < 0 || e >= this._n.length ? null : this._n[e];
        }, t;
    }(), io = /** @class */ function() {
        /**
         * @param sizer - Used to assess the size of a document. For eager GC, this is
         * expected to just return 0 to avoid unnecessarily doing the work of
         * calculating the size.
         */
        function t(t, e) {
            this.Ut = t, this.ls = e, 
            /** Underlying cache of documents and their read times. */
            this.docs = new ze(at.comparator), 
            /** Size of all cached documents. */
            this.size = 0
            /**
         * Adds the supplied entry to the cache and updates the cache size as appropriate.
         *
         * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */;
        }
        return t.prototype.addEntry = function(t, e, n) {
            var r = e.key, i = this.docs.get(r), o = i ? i.size : 0, s = this.ls(e);
            return this.docs = this.docs.insert(r, {
                document: e.clone(),
                size: s,
                readTime: n
            }), this.size += s - o, this.Ut.addToCollectionParentIndex(t, r.path.popLast());
        }, 
        /**
         * Removes the specified entry from the cache and updates the cache size as appropriate.
         *
         * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */
        t.prototype.removeEntry = function(t) {
            var e = this.docs.get(t);
            e && (this.docs = this.docs.remove(t), this.size -= e.size);
        }, t.prototype.getEntry = function(t, e) {
            var n = this.docs.get(e);
            return br.resolve(n ? n.document.clone() : St.newInvalidDocument(e));
        }, t.prototype.getEntries = function(t, e) {
            var n = this, r = Je();
            return e.forEach((function(t) {
                var e = n.docs.get(t);
                r = r.insert(t, e ? e.document.clone() : St.newInvalidDocument(t));
            })), br.resolve(r);
        }, t.prototype.getDocumentsMatchingQuery = function(t, e, n) {
            for (var r = Je(), i = new at(e.path.child("")), o = this.docs.getIteratorFrom(i)
            // Documents are ordered by key, so we can use a prefix scan to narrow down
            // the documents we need to match the query against.
            ; o.hasNext(); ) {
                var s = o.getNext(), u = s.key, a = s.value, c = a.document, h = a.readTime;
                if (!e.path.isPrefixOf(u.path)) break;
                h.compareTo(n) <= 0 || se(e, c) && (r = r.insert(c.key, c.clone()));
            }
            return br.resolve(r);
        }, t.prototype.fs = function(t, e) {
            return br.forEach(this.docs, (function(t) {
                return e(t);
            }));
        }, t.prototype.newChangeBuffer = function(t) {
            // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
            // a separate changelog and does not need special handling for removals.
            return new oo(this);
        }, t.prototype.getSize = function(t) {
            return br.resolve(this.size);
        }, t;
    }(), oo = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).Ie = t, n;
        }
        return __extends$1(n, e), n.prototype.applyChanges = function(t) {
            var e = this, n = [];
            return this.changes.forEach((function(r, i) {
                i.document.isValidDocument() ? n.push(e.Ie.addEntry(t, i.document, e.getReadTime(r))) : e.Ie.removeEntry(r);
            })), br.waitFor(n);
        }, n.prototype.getFromCache = function(t, e) {
            return this.Ie.getEntry(t, e);
        }, n.prototype.getAllFromCache = function(t, e) {
            return this.Ie.getEntries(t, e);
        }, n;
    }(Ii), so = /** @class */ function() {
        function t(t) {
            this.persistence = t, 
            /**
                 * Maps a target to the data about that target
                 */
            this.ds = new bi((function(t) {
                return At(t);
            }), kt), 
            /** The last received snapshot version. */
            this.lastRemoteSnapshotVersion = j.min(), 
            /** The highest numbered target ID encountered. */
            this.highestTargetId = 0, 
            /** The highest sequence number encountered. */
            this.ws = 0, 
            /**
                 * A ordered bidirectional mapping between documents and the remote target
                 * IDs.
                 */
            this._s = new eo, this.targetCount = 0, this.ys = ai.Jt();
        }
        return t.prototype.forEachTarget = function(t, e) {
            return this.ds.forEach((function(t, n) {
                return e(n);
            })), br.resolve();
        }, t.prototype.getLastRemoteSnapshotVersion = function(t) {
            return br.resolve(this.lastRemoteSnapshotVersion);
        }, t.prototype.getHighestSequenceNumber = function(t) {
            return br.resolve(this.ws);
        }, t.prototype.allocateTargetId = function(t) {
            return this.highestTargetId = this.ys.next(), br.resolve(this.highestTargetId);
        }, t.prototype.setTargetsMetadata = function(t, e, n) {
            return n && (this.lastRemoteSnapshotVersion = n), e > this.ws && (this.ws = e), 
            br.resolve();
        }, t.prototype.te = function(t) {
            this.ds.set(t.target, t);
            var e = t.targetId;
            e > this.highestTargetId && (this.ys = new ai(e), this.highestTargetId = e), t.sequenceNumber > this.ws && (this.ws = t.sequenceNumber);
        }, t.prototype.addTargetData = function(t, e) {
            return this.te(e), this.targetCount += 1, br.resolve();
        }, t.prototype.updateTargetData = function(t, e) {
            return this.te(e), br.resolve();
        }, t.prototype.removeTargetData = function(t, e) {
            return this.ds.delete(e.target), this._s.Zn(e.targetId), this.targetCount -= 1, 
            br.resolve();
        }, t.prototype.removeTargets = function(t, e, n) {
            var r = this, i = 0, o = [];
            return this.ds.forEach((function(s, u) {
                u.sequenceNumber <= e && null === n.get(u.targetId) && (r.ds.delete(s), o.push(r.removeMatchingKeysForTargetId(t, u.targetId)), 
                i++);
            })), br.waitFor(o).next((function() {
                return i;
            }));
        }, t.prototype.getTargetCount = function(t) {
            return br.resolve(this.targetCount);
        }, t.prototype.getTargetData = function(t, e) {
            var n = this.ds.get(e) || null;
            return br.resolve(n);
        }, t.prototype.addMatchingKeys = function(t, e, n) {
            return this._s.Jn(e, n), br.resolve();
        }, t.prototype.removeMatchingKeys = function(t, e, n) {
            this._s.Xn(e, n);
            var r = this.persistence.referenceDelegate, i = [];
            return r && e.forEach((function(e) {
                i.push(r.markPotentiallyOrphaned(t, e));
            })), br.waitFor(i);
        }, t.prototype.removeMatchingKeysForTargetId = function(t, e) {
            return this._s.Zn(e), br.resolve();
        }, t.prototype.getMatchingKeysForTargetId = function(t, e) {
            var n = this._s.es(e);
            return br.resolve(n);
        }, t.prototype.containsKey = function(t, e) {
            return br.resolve(this._s.containsKey(e));
        }, t;
    }(), uo = /** @class */ function() {
        /**
         * The constructor accepts a factory for creating a reference delegate. This
         * allows both the delegate and this instance to have strong references to
         * each other without having nullable fields that would then need to be
         * checked or asserted on every access.
         */
        function t(t, e) {
            var n = this;
            this.gs = {}, this.Ne = new _(0), this.xe = !1, this.xe = !0, this.referenceDelegate = t(this), 
            this.qe = new so(this), this.Ut = new Yr, this.Ue = function(t, e) {
                return new io(t, (function(t) {
                    return n.referenceDelegate.ps(t);
                }));
            }(this.Ut), this.R = new Pr(e), this.Ke = new to(this.R);
        }
        return t.prototype.start = function() {
            return Promise.resolve();
        }, t.prototype.shutdown = function() {
            // No durable state to ensure is closed on shutdown.
            return this.xe = !1, Promise.resolve();
        }, Object.defineProperty(t.prototype, "started", {
            get: function() {
                return this.xe;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.setDatabaseDeletedListener = function() {
            // No op.
        }, t.prototype.setNetworkEnabled = function() {
            // No op.
        }, t.prototype.getIndexManager = function() {
            return this.Ut;
        }, t.prototype.getMutationQueue = function(t) {
            var e = this.gs[t.toKey()];
            return e || (e = new ro(this.Ut, this.referenceDelegate), this.gs[t.toKey()] = e), 
            e;
        }, t.prototype.getTargetCache = function() {
            return this.qe;
        }, t.prototype.getRemoteDocumentCache = function() {
            return this.Ue;
        }, t.prototype.getBundleCache = function() {
            return this.Ke;
        }, t.prototype.runTransaction = function(t, e, n) {
            var r = this;
            k("MemoryPersistence", "Starting transaction:", t);
            var i = new ao(this.Ne.next());
            return this.referenceDelegate.Es(), n(i).next((function(t) {
                return r.referenceDelegate.Ts(i).next((function() {
                    return t;
                }));
            })).toPromise().then((function(t) {
                return i.raiseOnCommittedEvent(), t;
            }));
        }, t.prototype.Is = function(t, e) {
            return br.or(Object.values(this.gs).map((function(n) {
                return function() {
                    return n.containsKey(t, e);
                };
            })));
        }, t;
    }(), ao = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).currentSequenceNumber = t, n;
        }
        return __extends$1(n, e), n;
    }(gr), co = /** @class */ function() {
        function t(t) {
            this.persistence = t, 
            /** Tracks all documents that are active in Query views. */
            this.As = new eo, 
            /** The list of documents that are potentially GCed after each transaction. */
            this.Rs = null;
        }
        return t.bs = function(e) {
            return new t(e);
        }, Object.defineProperty(t.prototype, "vs", {
            get: function() {
                if (this.Rs) return this.Rs;
                throw L();
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.addReference = function(t, e, n) {
            return this.As.addReference(n, e), this.vs.delete(n.toString()), br.resolve();
        }, t.prototype.removeReference = function(t, e, n) {
            return this.As.removeReference(n, e), this.vs.add(n.toString()), br.resolve();
        }, t.prototype.markPotentiallyOrphaned = function(t, e) {
            return this.vs.add(e.toString()), br.resolve();
        }, t.prototype.removeTarget = function(t, e) {
            var n = this;
            this.As.Zn(e.targetId).forEach((function(t) {
                return n.vs.add(t.toString());
            }));
            var r = this.persistence.getTargetCache();
            return r.getMatchingKeysForTargetId(t, e.targetId).next((function(t) {
                t.forEach((function(t) {
                    return n.vs.add(t.toString());
                }));
            })).next((function() {
                return r.removeTargetData(t, e);
            }));
        }, t.prototype.Es = function() {
            this.Rs = new Set;
        }, t.prototype.Ts = function(t) {
            var e = this, n = this.persistence.getRemoteDocumentCache().newChangeBuffer();
            // Remove newly orphaned documents.
                    return br.forEach(this.vs, (function(r) {
                var i = at.fromPath(r);
                return e.Ps(t, i).next((function(t) {
                    t || n.removeEntry(i);
                }));
            })).next((function() {
                return e.Rs = null, n.apply(t);
            }));
        }, t.prototype.updateLimboDocument = function(t, e) {
            var n = this;
            return this.Ps(t, e).next((function(t) {
                t ? n.vs.delete(e.toString()) : n.vs.add(e.toString());
            }));
        }, t.prototype.ps = function(t) {
            // For eager GC, we don't care about the document size, there are no size thresholds.
            return 0;
        }, t.prototype.Ps = function(t, e) {
            var n = this;
            return br.or([ function() {
                return br.resolve(n.As.containsKey(e));
            }, function() {
                return n.persistence.getTargetCache().containsKey(t, e);
            }, function() {
                return n.persistence.Is(t, e);
            } ]);
        }, t;
    }(), ho = /** @class */ function() {
        function t(t) {
            this.uid = t;
        }
        return t.prototype.isAuthenticated = function() {
            return null != this.uid;
        }, 
        /**
         * Returns a key representing this user, suitable for inclusion in a
         * dictionary.
         */
        t.prototype.toKey = function() {
            return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
        }, t.prototype.isEqual = function(t) {
            return t.uid === this.uid;
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A collection of references to a document from some kind of numbered entity
     * (either a target ID or batch ID). As references are added to or removed from
     * the set corresponding events are emitted to a registered garbage collector.
     *
     * Each reference is represented by a DocumentReference object. Each of them
     * contains enough information to uniquely identify the reference. They are all
     * stored primarily in a set sorted by key. A document is considered garbage if
     * there's no references in that set (this can be efficiently checked thanks to
     * sorting by key).
     *
     * ReferenceSet also keeps a secondary set that contains references sorted by
     * IDs. This one is used to efficiently implement removal of all references by
     * some target ID.
     */
    /** Assembles the key for a client state in WebStorage */
    function fo(t, e) {
        return "firestore_clients_" + t + "_" + e;
    }

    // The format of the WebStorage key that stores the mutation state is:
    //     firestore_mutations_<persistence_prefix>_<batch_id>
    //     (for unauthenticated users)
    // or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
    // 'user_uid' is last to avoid needing to escape '_' characters that it might
    // contain.
    /** Assembles the key for a mutation batch in WebStorage */ function lo(t, e, n) {
        var r = "firestore_mutations_" + t + "_" + n;
        return e.isAuthenticated() && (r += "_" + e.uid), r;
    }

    // The format of the WebStorage key that stores a query target's metadata is:
    //     firestore_targets_<persistence_prefix>_<target_id>
    /** Assembles the key for a query state in WebStorage */ function po(t, e) {
        return "firestore_targets_" + t + "_" + e;
    }

    // The WebStorage prefix that stores the primary tab's online state. The
    // format of the key is:
    //     firestore_online_state_<persistence_prefix>
    /**
     * Holds the state of a mutation batch, including its user ID, batch ID and
     * whether the batch is 'pending', 'acknowledged' or 'rejected'.
     */
    // Visible for testing
    /** A user with a null UID. */ ho.UNAUTHENTICATED = new ho(null), 
    // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    ho.GOOGLE_CREDENTIALS = new ho("google-credentials-uid"), ho.FIRST_PARTY = new ho("first-party-uid");

    var yo = /** @class */ function() {
        function t(t, e, n, r) {
            this.user = t, this.batchId = e, this.state = n, this.error = r
            /**
         * Parses a MutationMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.Vs = function(e, n, r) {
            var i, o = JSON.parse(r), s = "object" == typeof o && -1 !== [ "pending", "acknowledged", "rejected" ].indexOf(o.state) && (void 0 === o.error || "object" == typeof o.error);
            return s && o.error && ((s = "string" == typeof o.error.message && "string" == typeof o.error.code) && (i = new N(o.error.code, o.error.message))), 
            s ? new t(e, n, o.state, i) : (C("SharedClientState", "Failed to parse mutation state for ID '" + n + "': " + r), 
            null);
        }, t.prototype.Ss = function() {
            var t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }, t;
    }(), vo = /** @class */ function() {
        function t(t, e, n) {
            this.targetId = t, this.state = e, this.error = n
            /**
         * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.Vs = function(e, n) {
            var r, i = JSON.parse(n), o = "object" == typeof i && -1 !== [ "not-current", "current", "rejected" ].indexOf(i.state) && (void 0 === i.error || "object" == typeof i.error);
            return o && i.error && ((o = "string" == typeof i.error.message && "string" == typeof i.error.code) && (r = new N(i.error.code, i.error.message))), 
            o ? new t(e, i.state, r) : (C("SharedClientState", "Failed to parse target state for ID '" + e + "': " + n), 
            null);
        }, t.prototype.Ss = function() {
            var t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }, t;
    }(), mo = /** @class */ function() {
        function t(t, e) {
            this.clientId = t, this.activeTargetIds = e
            /**
         * Parses a RemoteClientState from the JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.Vs = function(e, n) {
            for (var r = JSON.parse(n), i = "object" == typeof r && r.activeTargetIds instanceof Array, o = un(), s = 0; i && s < r.activeTargetIds.length; ++s) i = ut(r.activeTargetIds[s]), 
            o = o.add(r.activeTargetIds[s]);
            return i ? new t(e, o) : (C("SharedClientState", "Failed to parse client data for instance '" + e + "': " + n), 
            null);
        }, t;
    }(), go = /** @class */ function() {
        function t(t, e) {
            this.clientId = t, this.onlineState = e
            /**
         * Parses a SharedOnlineState from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.Vs = function(e) {
            var n = JSON.parse(e);
            return "object" == typeof n && -1 !== [ "Unknown", "Online", "Offline" ].indexOf(n.onlineState) && "string" == typeof n.clientId ? new t(n.clientId, n.onlineState) : (C("SharedClientState", "Failed to parse online state: " + e), 
            null);
        }, t;
    }(), wo = /** @class */ function() {
        function t() {
            this.activeTargetIds = un();
        }
        return t.prototype.Ds = function(t) {
            this.activeTargetIds = this.activeTargetIds.add(t);
        }, t.prototype.Cs = function(t) {
            this.activeTargetIds = this.activeTargetIds.delete(t);
        }, 
        /**
         * Converts this entry into a JSON-encoded format we can use for WebStorage.
         * Does not encode `clientId` as it is part of the key in WebStorage.
         */
        t.prototype.Ss = function() {
            var t = {
                activeTargetIds: this.activeTargetIds.toArray(),
                updateTimeMs: Date.now()
            };
            return JSON.stringify(t);
        }, t;
    }(), bo = /** @class */ function() {
        function t(t, e, n, r, i) {
            this.window = t, this.Se = e, this.persistenceKey = n, this.Ns = r, this.syncEngine = null, 
            this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.xs = this.Fs.bind(this), 
            this.ks = new ze(V), this.started = !1, 
            /**
                 * Captures WebStorage events that occur before `start()` is called. These
                 * events are replayed once `WebStorageSharedClientState` is started.
                 */
            this.$s = [];
            // Escape the special characters mentioned here:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
            var o = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
            this.storage = this.window.localStorage, this.currentUser = i, this.Os = fo(this.persistenceKey, this.Ns), 
            this.Ms = 
            /** Assembles the key for the current sequence number. */
            function(t) {
                return "firestore_sequence_number_" + t;
            }(this.persistenceKey), this.ks = this.ks.insert(this.Ns, new wo), this.Ls = new RegExp("^firestore_clients_" + o + "_([^_]*)$"), 
            this.Bs = new RegExp("^firestore_mutations_" + o + "_(\\d+)(?:_(.*))?$"), this.qs = new RegExp("^firestore_targets_" + o + "_(\\d+)$"), 
            this.Us = 
            /** Assembles the key for the online state of the primary tab. */
            function(t) {
                return "firestore_online_state_" + t;
            }(this.persistenceKey), this.Ks = function(t) {
                return "firestore_bundle_loaded_" + t;
            }(this.persistenceKey), 
            // Rather than adding the storage observer during start(), we add the
            // storage observer during initialization. This ensures that we collect
            // events before other components populate their initial state (during their
            // respective start() calls). Otherwise, we might for example miss a
            // mutation that is added after LocalStore's start() processed the existing
            // mutations but before we observe WebStorage events.
            this.window.addEventListener("storage", this.xs);
        }
        /** Returns 'true' if WebStorage is available in the current environment. */    return t.yt = function(t) {
            return !(!t || !t.localStorage);
        }, t.prototype.start = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e, n, i, o, s, u, a, c, h, f, l = this;
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.syncEngine.fn() ];

                      case 1:
                        for (t = r.sent(), e = 0, n = t; e < n.length; e++) (i = n[e]) !== this.Ns && (o = this.getItem(fo(this.persistenceKey, i))) && (s = mo.Vs(i, o)) && (this.ks = this.ks.insert(s.clientId, s));
                        for (this.Qs(), (u = this.storage.getItem(this.Us)) && (a = this.js(u)) && this.Ws(a), 
                        c = 0, h = this.$s; c < h.length; c++) f = h[c], this.Fs(f);
                        return this.$s = [], 
                        // Register a window unload hook to remove the client metadata entry from
                        // WebStorage even if `shutdown()` was not called.
                        this.window.addEventListener("pagehide", (function() {
                            return l.shutdown();
                        })), this.started = !0, [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.writeSequenceNumber = function(t) {
            this.setItem(this.Ms, JSON.stringify(t));
        }, t.prototype.getAllActiveQueryTargets = function() {
            return this.Gs(this.ks);
        }, t.prototype.isActiveQueryTarget = function(t) {
            var e = !1;
            return this.ks.forEach((function(n, r) {
                r.activeTargetIds.has(t) && (e = !0);
            })), e;
        }, t.prototype.addPendingMutation = function(t) {
            this.zs(t, "pending");
        }, t.prototype.updateMutationState = function(t, e, n) {
            this.zs(t, e, n), 
            // Once a final mutation result is observed by other clients, they no longer
            // access the mutation's metadata entry. Since WebStorage replays events
            // in order, it is safe to delete the entry right after updating it.
            this.Hs(t);
        }, t.prototype.addLocalQueryTarget = function(t) {
            var e = "not-current";
            // Lookup an existing query state if the target ID was already registered
            // by another tab
                    if (this.isActiveQueryTarget(t)) {
                var n = this.storage.getItem(po(this.persistenceKey, t));
                if (n) {
                    var r = vo.Vs(t, n);
                    r && (e = r.state);
                }
            }
            return this.Js.Ds(t), this.Qs(), e;
        }, t.prototype.removeLocalQueryTarget = function(t) {
            this.Js.Cs(t), this.Qs();
        }, t.prototype.isLocalQueryTarget = function(t) {
            return this.Js.activeTargetIds.has(t);
        }, t.prototype.clearQueryState = function(t) {
            this.removeItem(po(this.persistenceKey, t));
        }, t.prototype.updateQueryState = function(t, e, n) {
            this.Ys(t, e, n);
        }, t.prototype.handleUserChange = function(t, e, n) {
            var r = this;
            e.forEach((function(t) {
                r.Hs(t);
            })), this.currentUser = t, n.forEach((function(t) {
                r.addPendingMutation(t);
            }));
        }, t.prototype.setOnlineState = function(t) {
            this.Xs(t);
        }, t.prototype.notifyBundleLoaded = function() {
            this.Zs();
        }, t.prototype.shutdown = function() {
            this.started && (this.window.removeEventListener("storage", this.xs), this.removeItem(this.Os), 
            this.started = !1);
        }, t.prototype.getItem = function(t) {
            var e = this.storage.getItem(t);
            return k("SharedClientState", "READ", t, e), e;
        }, t.prototype.setItem = function(t, e) {
            k("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
        }, t.prototype.removeItem = function(t) {
            k("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
        }, t.prototype.Fs = function(t) {
            var e = this, i = t;
            // Note: The function is typed to take Event to be interface-compatible with
            // `Window.addEventListener`.
                    if (i.storageArea === this.storage) {
                if (k("SharedClientState", "EVENT", i.key, i.newValue), i.key === this.Os) return void C("Received WebStorage notification for local change. Another client might have garbage-collected our state");
                this.Se.enqueueRetryable((function() {
                    return __awaiter(e, void 0, void 0, (function() {
                        var t, e, n, o, s, u;
                        return __generator(this, (function(r) {
                            if (this.started) {
                                if (null !== i.key) if (this.Ls.test(i.key)) {
                                    if (null == i.newValue) return t = this.ti(i.key), [ 2 /*return*/ , this.ei(t, null) ];
                                    if (e = this.ni(i.key, i.newValue)) return [ 2 /*return*/ , this.ei(e.clientId, e) ];
                                } else if (this.Bs.test(i.key)) {
                                    if (null !== i.newValue && (n = this.si(i.key, i.newValue))) return [ 2 /*return*/ , this.ii(n) ];
                                } else if (this.qs.test(i.key)) {
                                    if (null !== i.newValue && (o = this.ri(i.key, i.newValue))) return [ 2 /*return*/ , this.oi(o) ];
                                } else if (i.key === this.Us) {
                                    if (null !== i.newValue && (s = this.js(i.newValue))) return [ 2 /*return*/ , this.Ws(s) ];
                                } else if (i.key === this.Ms) (u = function(t) {
                                    var e = _.o;
                                    if (null != t) try {
                                        var n = JSON.parse(t);
                                        O("number" == typeof n), e = n;
                                    } catch (t) {
                                        C("SharedClientState", "Failed to read sequence number from WebStorage", t);
                                    }
                                    return e;
                                }(i.newValue)) !== _.o && this.sequenceNumberHandler(u); else if (i.key === this.Ks) return [ 2 /*return*/ , this.syncEngine.ci() ];
                            } else this.$s.push(i);
                            return [ 2 /*return*/ ];
                        }));
                    }));
                }));
            }
        }, Object.defineProperty(t.prototype, "Js", {
            get: function() {
                return this.ks.get(this.Ns);
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.Qs = function() {
            this.setItem(this.Os, this.Js.Ss());
        }, t.prototype.zs = function(t, e, n) {
            var r = new yo(this.currentUser, t, e, n), i = lo(this.persistenceKey, this.currentUser, t);
            this.setItem(i, r.Ss());
        }, t.prototype.Hs = function(t) {
            var e = lo(this.persistenceKey, this.currentUser, t);
            this.removeItem(e);
        }, t.prototype.Xs = function(t) {
            var e = {
                clientId: this.Ns,
                onlineState: t
            };
            this.storage.setItem(this.Us, JSON.stringify(e));
        }, t.prototype.Ys = function(t, e, n) {
            var r = po(this.persistenceKey, t), i = new vo(t, e, n);
            this.setItem(r, i.Ss());
        }, t.prototype.Zs = function() {
            this.setItem(this.Ks, "value-not-used");
        }, 
        /**
         * Parses a client state key in WebStorage. Returns null if the key does not
         * match the expected key format.
         */
        t.prototype.ti = function(t) {
            var e = this.Ls.exec(t);
            return e ? e[1] : null;
        }, 
        /**
         * Parses a client state in WebStorage. Returns 'null' if the value could not
         * be parsed.
         */
        t.prototype.ni = function(t, e) {
            var n = this.ti(t);
            return mo.Vs(n, e);
        }, 
        /**
         * Parses a mutation batch state in WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.si = function(t, e) {
            var n = this.Bs.exec(t), r = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
            return yo.Vs(new ho(i), r, e);
        }, 
        /**
         * Parses a query target state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.ri = function(t, e) {
            var n = this.qs.exec(t), r = Number(n[1]);
            return vo.Vs(r, e);
        }, 
        /**
         * Parses an online state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.js = function(t) {
            return go.Vs(t);
        }, t.prototype.ii = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    return t.user.uid === this.currentUser.uid ? [ 2 /*return*/ , this.syncEngine.ui(t.batchId, t.state, t.error) ] : (k("SharedClientState", "Ignoring mutation for non-active user " + t.user.uid), 
                    [ 2 /*return*/ ]);
                }));
            }));
        }, t.prototype.oi = function(t) {
            return this.syncEngine.ai(t.targetId, t.state, t.error);
        }, t.prototype.ei = function(t, e) {
            var n = this, r = e ? this.ks.insert(t, e) : this.ks.remove(t), i = this.Gs(this.ks), o = this.Gs(r), s = [], u = [];
            return o.forEach((function(t) {
                i.has(t) || s.push(t);
            })), i.forEach((function(t) {
                o.has(t) || u.push(t);
            })), this.syncEngine.hi(s, u).then((function() {
                n.ks = r;
            }));
        }, t.prototype.Ws = function(t) {
            // We check whether the client that wrote this online state is still active
            // by comparing its client ID to the list of clients kept active in
            // IndexedDb. If a client does not update their IndexedDb client state
            // within 5 seconds, it is considered inactive and we don't emit an online
            // state event.
            this.ks.get(t.clientId) && this.onlineStateHandler(t.onlineState);
        }, t.prototype.Gs = function(t) {
            var e = un();
            return t.forEach((function(t, n) {
                e = e.unionWith(n.activeTargetIds);
            })), e;
        }, t;
    }(), Io = /** @class */ function() {
        function t() {
            this.li = new wo, this.fi = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
        }
        return t.prototype.addPendingMutation = function(t) {
            // No op.
        }, t.prototype.updateMutationState = function(t, e, n) {
            // No op.
        }, t.prototype.addLocalQueryTarget = function(t) {
            return this.li.Ds(t), this.fi[t] || "not-current";
        }, t.prototype.updateQueryState = function(t, e, n) {
            this.fi[t] = e;
        }, t.prototype.removeLocalQueryTarget = function(t) {
            this.li.Cs(t);
        }, t.prototype.isLocalQueryTarget = function(t) {
            return this.li.activeTargetIds.has(t);
        }, t.prototype.clearQueryState = function(t) {
            delete this.fi[t];
        }, t.prototype.getAllActiveQueryTargets = function() {
            return this.li.activeTargetIds;
        }, t.prototype.isActiveQueryTarget = function(t) {
            return this.li.activeTargetIds.has(t);
        }, t.prototype.start = function() {
            return this.li = new wo, Promise.resolve();
        }, t.prototype.handleUserChange = function(t, e, n) {
            // No op.
        }, t.prototype.setOnlineState = function(t) {
            // No op.
        }, t.prototype.shutdown = function() {}, t.prototype.writeSequenceNumber = function(t) {}, 
        t.prototype.notifyBundleLoaded = function() {
            // No op.
        }, t;
    }(), Eo = /** @class */ function() {
        function t() {}
        return t.prototype.di = function(t) {
            // No-op.
        }, t.prototype.shutdown = function() {
            // No-op.
        }, t;
    }(), To = /** @class */ function() {
        function t() {
            var t = this;
            this.wi = function() {
                return t._i();
            }, this.mi = function() {
                return t.yi();
            }, this.gi = [], this.pi();
        }
        return t.prototype.di = function(t) {
            this.gi.push(t);
        }, t.prototype.shutdown = function() {
            window.removeEventListener("online", this.wi), window.removeEventListener("offline", this.mi);
        }, t.prototype.pi = function() {
            window.addEventListener("online", this.wi), window.addEventListener("offline", this.mi);
        }, t.prototype._i = function() {
            k("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
            for (var t = 0, e = this.gi; t < e.length; t++) {
                (0, e[t])(0 /* AVAILABLE */);
            }
        }, t.prototype.yi = function() {
            k("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
            for (var t = 0, e = this.gi; t < e.length; t++) {
                (0, e[t])(1 /* UNAVAILABLE */);
            }
        }, 
        // TODO(chenbrian): Consider passing in window either into this component or
        // here for testing via FakeWindow.
        /** Checks that all used attributes of window are available. */
        t.yt = function() {
            return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
        }, t;
    }(), _o = {
        BatchGetDocuments: "batchGet",
        Commit: "commit",
        RunQuery: "runQuery"
    }, So = /** @class */ function() {
        function t(t) {
            this.Ei = t.Ei, this.Ti = t.Ti;
        }
        return t.prototype.Ii = function(t) {
            this.Ai = t;
        }, t.prototype.Ri = function(t) {
            this.bi = t;
        }, t.prototype.onMessage = function(t) {
            this.vi = t;
        }, t.prototype.close = function() {
            this.Ti();
        }, t.prototype.send = function(t) {
            this.Ei(t);
        }, t.prototype.Pi = function() {
            this.Ai();
        }, t.prototype.Vi = function(t) {
            this.bi(t);
        }, t.prototype.Si = function(t) {
            this.vi(t);
        }, t;
    }(), No = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this, t) || this).forceLongPolling = t.forceLongPolling, n.autoDetectLongPolling = t.autoDetectLongPolling, 
            n.useFetchStreams = t.useFetchStreams, n;
        }
        /**
         * Base class for all Rest-based connections to the backend (WebChannel and
         * HTTP).
         */
        return __extends$1(n, e), n.prototype.ki = function(t, e, n, r) {
            return new Promise((function(i, o) {
                var s = new XhrIo;
                s.listenOnce(EventType.COMPLETE, (function() {
                    try {
                        switch (s.getLastErrorCode()) {
                          case ErrorCode$1.NO_ERROR:
                            var e = s.getResponseJson();
                            k("Connection", "XHR received:", JSON.stringify(e)), i(e);
                            break;

                          case ErrorCode$1.TIMEOUT:
                            k("Connection", 'RPC "' + t + '" timed out'), o(new N(S.DEADLINE_EXCEEDED, "Request time out"));
                            break;

                          case ErrorCode$1.HTTP_ERROR:
                            var n = s.getStatus();
                            if (k("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", s.getResponseText()), 
                            n > 0) {
                                var r = s.getResponseJson().error;
                                if (r && r.status && r.message) {
                                    var u = function(t) {
                                        var e = t.toLowerCase().replace(/_/g, "-");
                                        return Object.values(S).indexOf(e) >= 0 ? e : S.UNKNOWN;
                                    }(r.status);
                                    o(new N(u, r.message));
                                } else o(new N(S.UNKNOWN, "Server responded with status " + s.getStatus()));
                            } else 
                            // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            o(new N(S.UNAVAILABLE, "Connection failed."));
                            break;

                          default:
                            L();
                        }
                    } finally {
                        k("Connection", 'RPC "' + t + '" completed.');
                    }
                }));
                var u = JSON.stringify(r);
                s.send(e, "POST", u, n, 15);
            }));
        }, n.prototype.Oi = function(t, e) {
            var n = [ this.Di, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], r = createWebChannelTransport(), i = getStatEventTarget(), f = {
                // Required for backend stickiness, routing behavior is based on this
                // parameter.
                httpSessionIdParam: "gsessionid",
                initMessageHeaders: {},
                messageUrlParams: {
                    // This param is used to improve routing and project isolation by the
                    // backend and must be included in every request.
                    database: "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database
                },
                sendRawJson: !0,
                supportsCrossDomainXhr: !0,
                internalChannelParams: {
                    // Override the default timeout (randomized between 10-20 seconds) since
                    // a large write batch on a slow internet connection may take a long
                    // time to send to the backend. Rather than have WebChannel impose a
                    // tight timeout which could lead to infinite timeouts and retries, we
                    // set it very large (5-10 minutes) and rely on the browser's builtin
                    // timeouts to kick in if the request isn't working.
                    forwardChannelRequestTimeoutMs: 6e5
                },
                forceLongPolling: this.forceLongPolling,
                detectBufferingProxy: this.autoDetectLongPolling
            };
            this.useFetchStreams && (f.xmlHttpFactory = new FetchXmlHttpFactory({})), this.Fi(f.initMessageHeaders, e), 
            // Sending the custom headers we just added to request.initMessageHeaders
            // (Authorization, etc.) will trigger the browser to make a CORS preflight
            // request because the XHR will no longer meet the criteria for a "simple"
            // CORS request:
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
            // Therefore to avoid the CORS preflight request (an extra network
            // roundtrip), we use the httpHeadersOverwriteParam option to specify that
            // the headers should instead be encoded into a special "$httpHeaders" query
            // parameter, which is recognized by the webchannel backend. This is
            // formally defined here:
            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
            // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
            // doesn't have an Origin header. So we have to exclude a few browser environments that are
            // known to (sometimes) not include an Origin. See
            // https://github.com/firebase/firebase-js-sdk/issues/1491.
            isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (f.httpHeadersOverwriteParam = "$httpHeaders");
            var l = n.join("");
            k("Connection", "Creating WebChannel: " + l, f);
            var d = r.createWebChannel(l, f), p = !1, y = !1, v = new So({
                Ei: function(t) {
                    y ? k("Connection", "Not sending because WebChannel is closed:", t) : (p || (k("Connection", "Opening WebChannel transport."), 
                    d.open(), p = !0), k("Connection", "WebChannel sending:", t), d.send(t));
                },
                Ti: function() {
                    return d.close();
                }
            }), m = function(t, e, n) {
                // TODO(dimond): closure typing seems broken because WebChannel does
                // not implement goog.events.Listenable
                t.listen(e, (function(t) {
                    try {
                        n(t);
                    } catch (t) {
                        setTimeout((function() {
                            throw t;
                        }), 0);
                    }
                }));
            };
            // WebChannel supports sending the first message with the handshake - saving
            // a network round trip. However, it will have to call send in the same
            // JS event loop as open. In order to enforce this, we delay actually
            // opening the WebChannel until send is called. Whether we have called
            // open is tracked with this variable.
                    // Closure events are guarded and exceptions are swallowed, so catch any
            // exception and rethrow using a setTimeout so they become visible again.
            // Note that eventually this function could go away if we are confident
            // enough the code is exception free.
            return m(d, WebChannel.EventType.OPEN, (function() {
                y || k("Connection", "WebChannel transport opened.");
            })), m(d, WebChannel.EventType.CLOSE, (function() {
                y || (y = !0, k("Connection", "WebChannel transport closed"), v.Vi());
            })), m(d, WebChannel.EventType.ERROR, (function(t) {
                y || (y = !0, x("Connection", "WebChannel transport errored:", t), v.Vi(new N(S.UNAVAILABLE, "The operation could not be completed")));
            })), m(d, WebChannel.EventType.MESSAGE, (function(t) {
                var e;
                if (!y) {
                    var n = t.data[0];
                    O(!!n);
                    // TODO(b/35143891): There is a bug in One Platform that caused errors
                    // (and only errors) to be wrapped in an extra array. To be forward
                    // compatible with the bug we need to check either condition. The latter
                    // can be removed once the fix has been rolled out.
                    // Use any because msgData.error is not typed.
                    var r = n, i = r.error || (null === (e = r[0]) || void 0 === e ? void 0 : e.error);
                    if (i) {
                        k("Connection", "WebChannel received error:", i);
                        // error.status will be a string like 'OK' or 'NOT_FOUND'.
                        var o = i.status, s = 
                        /**
     * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
     *
     * @returns The Code equivalent to the given status string or undefined if
     *     there is no match.
     */
                        function(t) {
                            // lookup by string
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            var e = qe[t];
                            if (void 0 !== e) return Ge(e);
                        }(o), u = i.message;
                        void 0 === s && (s = S.INTERNAL, u = "Unknown error status: " + o + " with message " + i.message), 
                        // Mark closed so no further events are propagated
                        y = !0, v.Vi(new N(s, u)), d.close();
                    } else k("Connection", "WebChannel received:", n), v.Si(n);
                }
            })), m(i, Event.STAT_EVENT, (function(t) {
                t.stat === Stat.PROXY ? k("Connection", "Detected buffering proxy") : t.stat === Stat.NOPROXY && k("Connection", "Detected no buffering proxy");
            })), setTimeout((function() {
                // Technically we could/should wait for the WebChannel opened event,
                // but because we want to send the first message with the WebChannel
                // handshake we pretend the channel opened here (asynchronously), and
                // then delay the actual open until the first message is sent.
                v.Pi();
            }), 0), v;
        }, n;
    }(/** @class */ function() {
        function t(t) {
            this.databaseInfo = t, this.databaseId = t.databaseId;
            var e = t.ssl ? "https" : "http";
            this.Di = e + "://" + t.host, this.Ci = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
        }
        return t.prototype.Ni = function(t, e, n, r) {
            var i = this.xi(t, e);
            k("RestConnection", "Sending: ", i, n);
            var o = {};
            return this.Fi(o, r), this.ki(t, i, o, n).then((function(t) {
                return k("RestConnection", "Received: ", t), t;
            }), (function(e) {
                throw x("RestConnection", t + " failed with error: ", e, "url: ", i, "request:", n), 
                e;
            }));
        }, t.prototype.$i = function(t, e, n, r) {
            // The REST API automatically aggregates all of the streamed results, so we
            // can just use the normal invoke() method.
            return this.Ni(t, e, n, r);
        }, 
        /**
         * Modifies the headers for a request, adding any authorization token if
         * present and any additional headers for the request.
         */
        t.prototype.Fi = function(t, e) {
            if (t["X-Goog-Api-Client"] = "gl-js/ fire/8.7.0", 
            // Content-Type: text/plain will avoid preflight requests which might
            // mess with CORS and redirects by proxies. If we add custom headers
            // we will need to change this code to potentially use the $httpOverwrite
            // parameter supported by ESF to avoid triggering preflight requests.
            t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), 
            e) for (var n in e.authHeaders) e.authHeaders.hasOwnProperty(n) && (t[n] = e.authHeaders[n]);
        }, t.prototype.xi = function(t, e) {
            var n = _o[t];
            return this.Di + "/v1/" + e + ":" + n;
        }, t;
    }());

    /**
     * Holds the state of a query target, including its target ID and whether the
     * target is 'not-current', 'current' or 'rejected'.
     */
    // Visible for testing
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Initializes the WebChannelConnection for the browser. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The Platform's 'window' implementation or null if not available. */
    function Do() {
        // `window` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof window ? window : null;
    }

    /** The Platform's 'document' implementation or null if not available. */ function Ao() {
        // `document` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof document ? document : null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function ko(t) {
        return new wn(t, /* useProto3Json= */ !0);
    }

    /**
     * An instance of the Platform's 'TextEncoder' implementation.
     */
    /**
     * A helper for running delayed tasks following an exponential backoff curve
     * between attempts.
     *
     * Each delay is made up of a "base" delay which follows the exponential
     * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
     * base delay. This prevents clients from accidentally synchronizing their
     * delays causing spikes of load to the backend.
     */ var Co = /** @class */ function() {
        function t(
        /**
         * The AsyncQueue to run backoff operations on.
         */
        t, 
        /**
         * The ID to use when scheduling backoff operations on the AsyncQueue.
         */
        e, 
        /**
         * The initial delay (used as the base delay on the first retry attempt).
         * Note that jitter will still be applied, so the actual delay could be as
         * little as 0.5*initialDelayMs.
         */
        n
        /**
         * The multiplier to use to determine the extended base delay after each
         * attempt.
         */ , r
        /**
         * The maximum base delay after which no further backoff is performed.
         * Note that jitter will still be applied, so the actual delay could be as
         * much as 1.5*maxDelayMs.
         */ , i) {
            void 0 === n && (n = 1e3), void 0 === r && (r = 1.5), void 0 === i && (i = 6e4), 
            this.Se = t, this.timerId = e, this.Mi = n, this.Li = r, this.Bi = i, this.qi = 0, 
            this.Ui = null, 
            /** The last backoff attempt, as epoch milliseconds. */
            this.Ki = Date.now(), this.reset();
        }
        /**
         * Resets the backoff delay.
         *
         * The very next backoffAndWait() will have no delay. If it is called again
         * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
         * subsequent ones will increase according to the backoffFactor.
         */    return t.prototype.reset = function() {
            this.qi = 0;
        }, 
        /**
         * Resets the backoff delay to the maximum delay (e.g. for use after a
         * RESOURCE_EXHAUSTED error).
         */
        t.prototype.Qi = function() {
            this.qi = this.Bi;
        }, 
        /**
         * Returns a promise that resolves after currentDelayMs, and increases the
         * delay for any subsequent attempts. If there was a pending backoff operation
         * already, it will be canceled.
         */
        t.prototype.ji = function(t) {
            var e = this;
            // Cancel any pending backoff operation.
                    this.cancel();
            // First schedule using the current base (which may be 0 and should be
            // honored as such).
            var n = Math.floor(this.qi + this.Wi()), r = Math.max(0, Date.now() - this.Ki), i = Math.max(0, n - r);
            // Guard against lastAttemptTime being in the future due to a clock change.
                    i > 0 && k("ExponentialBackoff", "Backing off for " + i + " ms (base delay: " + this.qi + " ms, delay with jitter: " + n + " ms, last attempt: " + r + " ms ago)"), 
            this.Ui = this.Se.enqueueAfterDelay(this.timerId, i, (function() {
                return e.Ki = Date.now(), t();
            })), 
            // Apply backoff factor to determine next delay and ensure it is within
            // bounds.
            this.qi *= this.Li, this.qi < this.Mi && (this.qi = this.Mi), this.qi > this.Bi && (this.qi = this.Bi);
        }, t.prototype.Gi = function() {
            null !== this.Ui && (this.Ui.skipDelay(), this.Ui = null);
        }, t.prototype.cancel = function() {
            null !== this.Ui && (this.Ui.cancel(), this.Ui = null);
        }, 
        /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ t.prototype.Wi = function() {
            return (Math.random() - .5) * this.qi;
        }, t;
    }(), xo = /** @class */ function() {
        function t(t, e, n, r, i, o) {
            this.Se = t, this.zi = n, this.Hi = r, this.Ji = i, this.listener = o, this.state = 0 /* Initial */ , 
            /**
                 * A close count that's incremented every time the stream is closed; used by
                 * getCloseGuardedDispatcher() to invalidate callbacks that happen after
                 * close.
                 */
            this.Yi = 0, this.Xi = null, this.stream = null, this.Zi = new Co(t, e)
            /**
         * Returns true if start() has been called and no error has occurred. True
         * indicates the stream is open or in the process of opening (which
         * encompasses respecting backoff, getting auth tokens, and starting the
         * actual RPC). Use isOpen() to determine if the stream is open and ready for
         * outbound requests.
         */;
        }
        return t.prototype.tr = function() {
            return 1 /* Starting */ === this.state || 2 /* Open */ === this.state || 4 /* Backoff */ === this.state;
        }, 
        /**
         * Returns true if the underlying RPC is open (the onOpen() listener has been
         * called) and the stream is ready for outbound requests.
         */
        t.prototype.er = function() {
            return 2 /* Open */ === this.state;
        }, 
        /**
         * Starts the RPC. Only allowed if isStarted() returns false. The stream is
         * not immediately ready for use: onOpen() will be invoked when the RPC is
         * ready for outbound requests, at which point isOpen() will return true.
         *
         * When start returns, isStarted() will return true.
         */
        t.prototype.start = function() {
            3 /* Error */ !== this.state ? this.auth() : this.nr();
        }, 
        /**
         * Stops the RPC. This call is idempotent and allowed regardless of the
         * current isStarted() state.
         *
         * When stop returns, isStarted() and isOpen() will both return false.
         */
        t.prototype.stop = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.tr() ? [ 4 /*yield*/ , this.close(0 /* Initial */) ] : [ 3 /*break*/ , 2 ];

                      case 1:
                        t.sent(), t.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * After an error the stream will usually back off on the next attempt to
         * start it. If the error warrants an immediate restart of the stream, the
         * sender can use this to indicate that the receiver should not back off.
         *
         * Each error will call the onClose() listener. That function can decide to
         * inhibit backoff if required.
         */
        t.prototype.sr = function() {
            this.state = 0 /* Initial */ , this.Zi.reset();
        }, 
        /**
         * Marks this stream as idle. If no further actions are performed on the
         * stream for one minute, the stream will automatically close itself and
         * notify the stream's onClose() handler with Status.OK. The stream will then
         * be in a !isStarted() state, requiring the caller to start the stream again
         * before further use.
         *
         * Only streams that are in state 'Open' can be marked idle, as all other
         * states imply pending network operations.
         */
        t.prototype.ir = function() {
            var t = this;
            // Starts the idle time if we are in state 'Open' and are not yet already
            // running a timer (in which case the previous idle timeout still applies).
                    this.er() && null === this.Xi && (this.Xi = this.Se.enqueueAfterDelay(this.zi, 6e4, (function() {
                return t.rr();
            })));
        }, 
        /** Sends a message to the underlying stream. */ t.prototype.cr = function(t) {
            this.ur(), this.stream.send(t);
        }, 
        /** Called by the idle timer when the stream should close due to inactivity. */ t.prototype.rr = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    return this.er() ? [ 2 /*return*/ , this.close(0 /* Initial */) ] : [ 2 /*return*/ ];
                }));
            }));
        }, 
        /** Marks the stream as active again. */ t.prototype.ur = function() {
            this.Xi && (this.Xi.cancel(), this.Xi = null);
        }, 
        /**
         * Closes the stream and cleans up as necessary:
         *
         * * closes the underlying GRPC stream;
         * * calls the onClose handler with the given 'error';
         * * sets internal stream state to 'finalState';
         * * adjusts the backoff timer based on the error
         *
         * A new stream can be opened by calling start().
         *
         * @param finalState - the intended state of the stream after closing.
         * @param error - the error the connection was closed with.
         */
        t.prototype.close = function(t, e) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        // Notify the listener that the stream closed.
                        // Cancel any outstanding timers (they're guaranteed not to execute).
                        return this.ur(), this.Zi.cancel(), 
                        // Invalidates any stream-related callbacks (e.g. from auth or the
                        // underlying stream), guaranteeing they won't execute.
                        this.Yi++, 3 /* Error */ !== t ? 
                        // If this is an intentional close ensure we don't delay our next connection attempt.
                        this.Zi.reset() : e && e.code === S.RESOURCE_EXHAUSTED ? (
                        // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                        C(e.toString()), C("Using maximum backoff delay to prevent overloading the backend."), 
                        this.Zi.Qi()) : e && e.code === S.UNAUTHENTICATED && 
                        // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
                        // just expired.
                        this.Ji.invalidateToken(), 
                        // Clean up the underlying stream because we are no longer interested in events.
                        null !== this.stream && (this.ar(), this.stream.close(), this.stream = null), 
                        // This state must be assigned before calling onClose() to allow the callback to
                        // inhibit backoff or otherwise manipulate the state in its non-started state.
                        this.state = t, [ 4 /*yield*/ , this.listener.Ri(e) ];

                      case 1:
                        // Cancel any outstanding timers (they're guaranteed not to execute).
                        // Notify the listener that the stream closed.
                        return n.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Can be overridden to perform additional cleanup before the stream is closed.
         * Calling super.tearDown() is not required.
         */
        t.prototype.ar = function() {}, t.prototype.auth = function() {
            var t = this;
            this.state = 1 /* Starting */;
            var e = this.hr(this.Yi), n = this.Yi;
            // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                    this.Ji.getToken().then((function(e) {
                // Stream can be stopped while waiting for authentication.
                // TODO(mikelehen): We really should just use dispatchIfNotClosed
                // and let this dispatch onto the queue, but that opened a spec test can
                // of worms that I don't want to deal with in this PR.
                t.Yi === n && 
                // Normally we'd have to schedule the callback on the AsyncQueue.
                // However, the following calls are safe to be called outside the
                // AsyncQueue since they don't chain asynchronous calls
                t.lr(e);
            }), (function(n) {
                e((function() {
                    var e = new N(S.UNKNOWN, "Fetching auth token failed: " + n.message);
                    return t.dr(e);
                }));
            }));
        }, t.prototype.lr = function(t) {
            var e = this, n = this.hr(this.Yi);
            this.stream = this.wr(t), this.stream.Ii((function() {
                n((function() {
                    return e.state = 2 /* Open */ , e.listener.Ii();
                }));
            })), this.stream.Ri((function(t) {
                n((function() {
                    return e.dr(t);
                }));
            })), this.stream.onMessage((function(t) {
                n((function() {
                    return e.onMessage(t);
                }));
            }));
        }, t.prototype.nr = function() {
            var t = this;
            this.state = 4 /* Backoff */ , this.Zi.ji((function() {
                return __awaiter(t, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        return this.state = 0 /* Initial */ , this.start(), [ 2 /*return*/ ];
                    }));
                }));
            }));
        }, 
        // Visible for tests
        t.prototype.dr = function(t) {
            // In theory the stream could close cleanly, however, in our current model
            // we never expect this to happen because if we stop a stream ourselves,
            // this callback will never be called. To prevent cases where we retry
            // without a backoff accidentally, we set the stream to error in all cases.
            return k("PersistentStream", "close with error: " + t), this.stream = null, this.close(3 /* Error */ , t);
        }, 
        /**
         * Returns a "dispatcher" function that dispatches operations onto the
         * AsyncQueue but only runs them if closeCount remains unchanged. This allows
         * us to turn auth / stream callbacks into no-ops if the stream is closed /
         * re-opened, etc.
         */
        t.prototype.hr = function(t) {
            var e = this;
            return function(n) {
                e.Se.enqueueAndForget((function() {
                    return e.Yi === t ? n() : (k("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                    Promise.resolve());
                }));
            };
        }, t;
    }(), Ro = /** @class */ function(e) {
        function n(t, n, r, i, o) {
            var s = this;
            return (s = e.call(this, t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , n, r, o) || this).R = i, 
            s;
        }
        return __extends$1(n, e), n.prototype.wr = function(t) {
            return this.Hi.Oi("Listen", t);
        }, n.prototype.onMessage = function(t) {
            // A successful response means the stream is healthy
            this.Zi.reset();
            var e = function(t, e) {
                var n;
                if ("targetChange" in e) {
                    e.targetChange;
                    // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
                    // if unset
                    var r = function(t) {
                        return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : L();
                    }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], o = function(t, e) {
                        return t.I ? (O(void 0 === e || "string" == typeof e), X.fromBase64String(e || "")) : (O(void 0 === e || e instanceof Uint8Array), 
                        X.fromUint8Array(e || new Uint8Array));
                    }(t, e.targetChange.resumeToken), s = (u = e.targetChange.cause) && function(t) {
                        var e = void 0 === t.code ? S.UNKNOWN : Ge(t.code);
                        return new N(e, t.message || "");
                    }(u);
                    n = new ln(r, i, o, s || null);
                } else if ("documentChange" in e) {
                    e.documentChange, (r = e.documentChange).document, r.document.name, r.document.updateTime, 
                    i = Dn(t, r.document.name), o = Tn(r.document.updateTime);
                    var u = new Tt({
                        mapValue: {
                            fields: r.document.fields
                        }
                    }), a = (s = St.newFoundDocument(i, o, u), r.targetIds || []), c = r.removedTargetIds || [];
                    n = new hn(a, c, s.key, s);
                } else if ("documentDelete" in e) e.documentDelete, (r = e.documentDelete).document, 
                i = Dn(t, r.document), o = r.readTime ? Tn(r.readTime) : j.min(), u = St.newNoDocument(i, o), 
                s = r.removedTargetIds || [], n = new hn([], s, u.key, u); else if ("documentRemove" in e) e.documentRemove, 
                (r = e.documentRemove).document, i = Dn(t, r.document), o = r.removedTargetIds || [], 
                n = new hn([], o, i, null); else {
                    if (!("filter" in e)) return L();
                    e.filter;
                    var h = e.filter;
                    h.targetId, r = h.count || 0, i = new Ke(r), o = h.targetId, n = new fn(o, i);
                }
                return n;
            }(this.R, t), n = function(t) {
                // We have only reached a consistent snapshot for the entire stream if there
                // is a read_time set and it applies to all targets (i.e. the list of
                // targets is empty). The backend is guaranteed to send such responses.
                if (!("targetChange" in t)) return j.min();
                var e = t.targetChange;
                return e.targetIds && e.targetIds.length ? j.min() : e.readTime ? Tn(e.readTime) : j.min();
            }(t);
            return this.listener._r(e, n);
        }, 
        /**
         * Registers interest in the results of the given target. If the target
         * includes a resumeToken it will be included in the request. Results that
         * affect the target will be streamed back as WatchChange messages that
         * reference the targetId.
         */
        n.prototype.mr = function(t) {
            var e = {};
            e.database = Cn(this.R), e.addTarget = function(t, e) {
                var n, r = e.target;
                return (n = Ct(r) ? {
                    documents: Fn(t, r)
                } : {
                    query: Mn(t, r)
                }).targetId = e.targetId, e.resumeToken.approximateByteSize() > 0 ? n.resumeToken = In(t, e.resumeToken) : e.snapshotVersion.compareTo(j.min()) > 0 && (
                // TODO(wuandy): Consider removing above check because it is most likely true.
                // Right now, many tests depend on this behaviour though (leaving min() out
                // of serialization).
                n.readTime = bn(t, e.snapshotVersion.toTimestamp())), n;
            }(this.R, t);
            var n = function(t, e) {
                var n = function(t, e) {
                    switch (e) {
                      case 0 /* Listen */ :
                        return null;

                      case 1 /* ExistenceFilterMismatch */ :
                        return "existence-filter-mismatch";

                      case 2 /* LimboResolution */ :
                        return "limbo-document";

                      default:
                        return L();
                    }
                }(0, e.purpose);
                return null == n ? null : {
                    "goog-listen-tags": n
                };
            }(this.R, t);
            n && (e.labels = n), this.cr(e);
        }, 
        /**
         * Unregisters interest in the results of the target associated with the
         * given targetId.
         */
        n.prototype.yr = function(t) {
            var e = {};
            e.database = Cn(this.R), e.removeTarget = t, this.cr(e);
        }, n;
    }(xo), Lo = /** @class */ function(e) {
        function n(t, n, r, i, o) {
            var s = this;
            return (s = e.call(this, t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , n, r, o) || this).R = i, 
            s.gr = !1, s;
        }
        return __extends$1(n, e), Object.defineProperty(n.prototype, "pr", {
            /**
             * Tracks whether or not a handshake has been successfully exchanged and
             * the stream is ready to accept mutations.
             */
            get: function() {
                return this.gr;
            },
            enumerable: !1,
            configurable: !0
        }), 
        // Override of PersistentStream.start
        n.prototype.start = function() {
            this.gr = !1, this.lastStreamToken = void 0, e.prototype.start.call(this);
        }, n.prototype.ar = function() {
            this.gr && this.Er([]);
        }, n.prototype.wr = function(t) {
            return this.Hi.Oi("Write", t);
        }, n.prototype.onMessage = function(t) {
            if (
            // Always capture the last stream token.
            O(!!t.streamToken), this.lastStreamToken = t.streamToken, this.gr) {
                // A successful first write response means the stream is healthy,
                // Note, that we could consider a successful handshake healthy, however,
                // the write itself might be causing an error we want to back off from.
                this.Zi.reset();
                var e = function(t, e) {
                    return t && t.length > 0 ? (O(void 0 !== e), t.map((function(t) {
                        return function(t, e) {
                            // NOTE: Deletes don't have an updateTime.
                            var n = t.updateTime ? Tn(t.updateTime) : Tn(e);
                            return n.isEqual(j.min()) && (
                            // The Firestore Emulator currently returns an update time of 0 for
                            // deletes of non-existing documents (rather than null). This breaks the
                            // test "get deleted doc while offline with source=cache" as NoDocuments
                            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
                            // TODO(#2149): Remove this when Emulator is fixed
                            n = Tn(e)), new Se(n, t.transformResults || []);
                        }(t, e);
                    }))) : [];
                }(t.writeResults, t.commitTime), n = Tn(t.commitTime);
                return this.listener.Tr(n, e);
            }
            // The first response is always the handshake response
                    return O(!t.writeResults || 0 === t.writeResults.length), this.gr = !0, 
            this.listener.Ir();
        }, 
        /**
         * Sends an initial streamToken to the server, performing the handshake
         * required to make the StreamingWrite RPC work. Subsequent
         * calls should wait until onHandshakeComplete was called.
         */
        n.prototype.Ar = function() {
            // TODO(dimond): Support stream resumption. We intentionally do not set the
            // stream token on the handshake, ignoring any stream token we might have.
            var t = {};
            t.database = Cn(this.R), this.cr(t);
        }, 
        /** Sends a group of mutations to the Firestore backend to apply. */ n.prototype.Er = function(t) {
            var e = this, n = {
                streamToken: this.lastStreamToken,
                writes: t.map((function(t) {
                    return On(e.R, t);
                }))
            };
            this.cr(n);
        }, n;
    }(xo), Oo = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this) || this).credentials = t, i.Hi = n, i.R = r, i.Rr = !1, 
            i;
        }
        return __extends$1(n, e), n.prototype.br = function() {
            if (this.Rr) throw new N(S.FAILED_PRECONDITION, "The client has already been terminated.");
        }, 
        /** Gets an auth token and invokes the provided RPC. */ n.prototype.Ni = function(t, e, n) {
            var r = this;
            return this.br(), this.credentials.getToken().then((function(i) {
                return r.Hi.Ni(t, e, n, i);
            })).catch((function(t) {
                throw "FirebaseError" === t.name ? (t.code === S.UNAUTHENTICATED && r.credentials.invalidateToken(), 
                t) : new N(S.UNKNOWN, t.toString());
            }));
        }, 
        /** Gets an auth token and invokes the provided RPC with streamed results. */ n.prototype.$i = function(t, e, n) {
            var r = this;
            return this.br(), this.credentials.getToken().then((function(i) {
                return r.Hi.$i(t, e, n, i);
            })).catch((function(t) {
                throw "FirebaseError" === t.name ? (t.code === S.UNAUTHENTICATED && r.credentials.invalidateToken(), 
                t) : new N(S.UNKNOWN, t.toString());
            }));
        }, n.prototype.terminate = function() {
            this.Rr = !0;
        }, n;
    }((function() {})), Po = /** @class */ function() {
        function t(t, e) {
            this.asyncQueue = t, this.onlineStateHandler = e, 
            /** The current OnlineState. */
            this.state = "Unknown" /* Unknown */ , 
            /**
                 * A count of consecutive failures to open the stream. If it reaches the
                 * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
                 * Offline.
                 */
            this.vr = 0, 
            /**
                 * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
                 * transition from OnlineState.Unknown to OnlineState.Offline without waiting
                 * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
                 */
            this.Pr = null, 
            /**
                 * Whether the client should log a warning message if it fails to connect to
                 * the backend (initially true, cleared after a successful stream, or if we've
                 * logged the message already).
                 */
            this.Vr = !0
            /**
         * Called by RemoteStore when a watch stream is started (including on each
         * backoff attempt).
         *
         * If this is the first attempt, it sets the OnlineState to Unknown and starts
         * the onlineStateTimer.
         */;
        }
        return t.prototype.Sr = function() {
            var t = this;
            0 === this.vr && (this.Dr("Unknown" /* Unknown */), this.Pr = this.asyncQueue.enqueueAfterDelay("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (function() {
                return t.Pr = null, t.Cr("Backend didn't respond within 10 seconds."), t.Dr("Offline" /* Offline */), 
                Promise.resolve();
            })));
        }, 
        /**
         * Updates our OnlineState as appropriate after the watch stream reports a
         * failure. The first failure moves us to the 'Unknown' state. We then may
         * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
         * actually transition to the 'Offline' state.
         */
        t.prototype.Nr = function(t) {
            "Online" /* Online */ === this.state ? this.Dr("Unknown" /* Unknown */) : (this.vr++, 
            this.vr >= 1 && (this.Fr(), this.Cr("Connection failed 1 times. Most recent error: " + t.toString()), 
            this.Dr("Offline" /* Offline */)));
        }, 
        /**
         * Explicitly sets the OnlineState to the specified state.
         *
         * Note that this resets our timers / failure counters, etc. used by our
         * Offline heuristics, so must not be used in place of
         * handleWatchStreamStart() and handleWatchStreamFailure().
         */
        t.prototype.set = function(t) {
            this.Fr(), this.vr = 0, "Online" /* Online */ === t && (
            // We've connected to watch at least once. Don't warn the developer
            // about being offline going forward.
            this.Vr = !1), this.Dr(t);
        }, t.prototype.Dr = function(t) {
            t !== this.state && (this.state = t, this.onlineStateHandler(t));
        }, t.prototype.Cr = function(t) {
            var e = "Could not reach Cloud Firestore backend. " + t + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
            this.Vr ? (C(e), this.Vr = !1) : k("OnlineStateTracker", e);
        }, t.prototype.Fr = function() {
            null !== this.Pr && (this.Pr.cancel(), this.Pr = null);
        }, t;
    }(), Fo = function(
    /**
         * The local store, used to fill the write pipeline with outbound mutations.
         */
    t, 
    /** The client-side proxy for interacting with the backend. */
    e, i, o, s) {
        var u = this;
        this.localStore = t, this.datastore = e, this.asyncQueue = i, this.remoteSyncer = {}, 
        /**
                 * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
                 * LocalStore via fillWritePipeline() and have or will send to the write
                 * stream.
                 *
                 * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
                 * restart the write stream. When the stream is established the writes in the
                 * pipeline will be sent in order.
                 *
                 * Writes remain in writePipeline until they are acknowledged by the backend
                 * and thus will automatically be re-sent if the stream is interrupted /
                 * restarted before they're acknowledged.
                 *
                 * Write responses from the backend are linked to their originating request
                 * purely based on order, and so we can just shift() writes from the front of
                 * the writePipeline as we receive responses.
                 */
        this.kr = [], 
        /**
                 * A mapping of watched targets that the client cares about tracking and the
                 * user has explicitly called a 'listen' for this target.
                 *
                 * These targets may or may not have been sent to or acknowledged by the
                 * server. On re-establishing the listen stream, these targets should be sent
                 * to the server. The targets removed with unlistens are removed eagerly
                 * without waiting for confirmation from the listen stream.
                 */
        this.$r = new Map, 
        /**
                 * A set of reasons for why the RemoteStore may be offline. If empty, the
                 * RemoteStore may start its network connections.
                 */
        this.Or = new Set, 
        /**
                 * Event handlers that get called when the network is disabled or enabled.
                 *
                 * PORTING NOTE: These functions are used on the Web client to create the
                 * underlying streams (to support tree-shakeable streams). On Android and iOS,
                 * the streams are created during construction of RemoteStore.
                 */
        this.Mr = [], this.Lr = s, this.Lr.di((function(t) {
            i.enqueueAndForget((function() {
                return __awaiter(u, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        switch (t.label) {
                          case 0:
                            return Go(this) ? (k("RemoteStore", "Restarting streams for network reachability change."), 
                            [ 4 /*yield*/ , function(t) {
                                return __awaiter(this, void 0, void 0, (function() {
                                    var e;
                                    return __generator(this, (function(n) {
                                        switch (n.label) {
                                          case 0:
                                            return (e = P$1(t)).Or.add(4 /* ConnectivityChange */), [ 4 /*yield*/ , Vo(e) ];

                                          case 1:
                                            return n.sent(), e.Br.set("Unknown" /* Unknown */), e.Or.delete(4 /* ConnectivityChange */), 
                                            [ 4 /*yield*/ , Mo(e) ];

                                          case 2:
                                            return n.sent(), [ 2 /*return*/ ];
                                        }
                                    }));
                                }));
                            }(this) ]) : [ 3 /*break*/ , 2 ];

                          case 1:
                            t.sent(), t.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        })), this.Br = new Po(i, o);
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A PersistentStream is an abstract base class that represents a streaming RPC
     * to the Firestore backend. It's built on top of the connections own support
     * for streaming RPCs, and adds several critical features for our clients:
     *
     *   - Exponential backoff on failure
     *   - Authentication via CredentialsProvider
     *   - Dispatching all callbacks into the shared worker queue
     *   - Closing idle streams after 60 seconds of inactivity
     *
     * Subclasses of PersistentStream implement serialization of models to and
     * from the JSON representation of the protocol buffers for a specific
     * streaming RPC.
     *
     * ## Starting and Stopping
     *
     * Streaming RPCs are stateful and need to be start()ed before messages can
     * be sent and received. The PersistentStream will call the onOpen() function
     * of the listener once the stream is ready to accept requests.
     *
     * Should a start() fail, PersistentStream will call the registered onClose()
     * listener with a FirestoreError indicating what went wrong.
     *
     * A PersistentStream can be started and stopped repeatedly.
     *
     * Generic types:
     *  SendType: The type of the outgoing message of the underlying
     *    connection stream
     *  ReceiveType: The type of the incoming message of the underlying
     *    connection stream
     *  ListenerType: The type of the listener that will be used for callbacks
     */ function Mo(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, n;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    if (!Go(t)) return [ 3 /*break*/ , 4 ];
                    e = 0, n = t.Mr, r.label = 1;

                  case 1:
                    return e < n.length ? [ 4 /*yield*/ , (0, n[e])(/* enabled= */ !0) ] : [ 3 /*break*/ , 4 ];

                  case 2:
                    r.sent(), r.label = 3;

                  case 3:
                    return e++, [ 3 /*break*/ , 1 ];

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Temporarily disables the network. The network can be re-enabled using
     * enableNetwork().
     */ function Vo(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, n;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    e = 0, n = t.Mr, r.label = 1;

                  case 1:
                    return e < n.length ? [ 4 /*yield*/ , (0, n[e])(/* enabled= */ !1) ] : [ 3 /*break*/ , 4 ];

                  case 2:
                    r.sent(), r.label = 3;

                  case 3:
                    return e++, [ 3 /*break*/ , 1 ];

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Starts new listen for the given target. Uses resume token if provided. It
     * is a no-op if the target of given `TargetData` is already being listened to.
     */ function qo(t, e) {
        var n = P$1(t);
        n.$r.has(e.targetId) || (
        // Mark this as something the client is currently listening for.
        n.$r.set(e.targetId, e), Qo(n) ? 
        // The listen will be sent in onWatchStreamOpen
        Ko(n) : ss(n).er() && Bo(n, e));
    }

    /**
     * Removes the listen from server. It is a no-op if the given target id is
     * not being listened to.
     */ function Uo(t, e) {
        var n = P$1(t), r = ss(n);
        n.$r.delete(e), r.er() && jo(n, e), 0 === n.$r.size && (r.er() ? r.ir() : Go(n) && 
        // Revert to OnlineState.Unknown if the watch stream is not open and we
        // have no listeners, since without any listens to send we cannot
        // confirm if the stream is healthy and upgrade to OnlineState.Online.
        n.Br.set("Unknown" /* Unknown */));
    }

    /**
     * We need to increment the the expected number of pending responses we're due
     * from watch so we wait for the ack to process any messages from this target.
     */ function Bo(t, e) {
        t.qr.U(e.targetId), ss(t).mr(e)
        /**
     * We need to increment the expected number of pending responses we're due
     * from watch so we wait for the removal on the server before we process any
     * messages from this target.
     */;
    }

    function jo(t, e) {
        t.qr.U(e), ss(t).yr(e);
    }

    function Ko(t) {
        t.qr = new pn({
            getRemoteKeysForTarget: function(e) {
                return t.remoteSyncer.getRemoteKeysForTarget(e);
            },
            lt: function(e) {
                return t.$r.get(e) || null;
            }
        }), ss(t).start(), t.Br.Sr()
        /**
     * Returns whether the watch stream should be started because it's necessary
     * and has not yet been started.
     */;
    }

    function Qo(t) {
        return Go(t) && !ss(t).tr() && t.$r.size > 0;
    }

    function Go(t) {
        return 0 === P$1(t).Or.size;
    }

    function zo(t) {
        t.qr = void 0;
    }

    function Wo(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                return t.$r.forEach((function(e, n) {
                    Bo(t, e);
                })), [ 2 /*return*/ ];
            }));
        }));
    }

    function Ho(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(n) {
                return zo(t), 
                // If we still need the watch stream, retry the connection.
                Qo(t) ? (t.Br.Nr(e), Ko(t)) : 
                // No need to restart watch stream because there are no active targets.
                // The online state is set to unknown because there is no active attempt
                // at establishing a connection
                t.Br.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
            }));
        }));
    }

    function Yo(t, e, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var o, s, u;
            return __generator(this, (function(a) {
                switch (a.label) {
                  case 0:
                    if (t.Br.set("Online" /* Online */), !(e instanceof ln && 2 /* Removed */ === e.state && e.cause)) 
                    // Mark the client as online since we got a message from the server
                    return [ 3 /*break*/ , 6 ];
                    a.label = 1;

                  case 1:
                    return a.trys.push([ 1, 3, , 5 ]), [ 4 /*yield*/ , 
                    /** Handles an error on a target */
                    function(t, e) {
                        return __awaiter(this, void 0, void 0, (function() {
                            var n, i, o, s;
                            return __generator(this, (function(r) {
                                switch (r.label) {
                                  case 0:
                                    n = e.cause, i = 0, o = e.targetIds, r.label = 1;

                                  case 1:
                                    return i < o.length ? (s = o[i], t.$r.has(s) ? [ 4 /*yield*/ , t.remoteSyncer.rejectListen(s, n) ] : [ 3 /*break*/ , 3 ]) : [ 3 /*break*/ , 5 ];

                                  case 2:
                                    r.sent(), t.$r.delete(s), t.qr.removeTarget(s), r.label = 3;

                                  case 3:
                                    r.label = 4;

                                  case 4:
                                    return i++, [ 3 /*break*/ , 1 ];

                                  case 5:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    }(t, e) ];

                  case 2:
                    return a.sent(), [ 3 /*break*/ , 5 ];

                  case 3:
                    return o = a.sent(), k("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), o), 
                    [ 4 /*yield*/ , $o(t, o) ];

                  case 4:
                    return a.sent(), [ 3 /*break*/ , 5 ];

                  case 5:
                    return [ 3 /*break*/ , 13 ];

                  case 6:
                    if (e instanceof hn ? t.qr.X(e) : e instanceof fn ? t.qr.rt(e) : t.qr.et(e), i.isEqual(j.min())) return [ 3 /*break*/ , 13 ];
                    a.label = 7;

                  case 7:
                    return a.trys.push([ 7, 11, , 13 ]), [ 4 /*yield*/ , ji(t.localStore) ];

                  case 8:
                    return s = a.sent(), i.compareTo(s) >= 0 ? [ 4 /*yield*/ , 
                    /**
                     * Takes a batch of changes from the Datastore, repackages them as a
                     * RemoteEvent, and passes that on to the listener, which is typically the
                     * SyncEngine.
                     */
                    function(t, e) {
                        var n = t.qr.ut(e);
                        // Update in-memory resume tokens. LocalStore will update the
                        // persistent view of these when applying the completed RemoteEvent.
                                            return n.targetChanges.forEach((function(n, r) {
                            if (n.resumeToken.approximateByteSize() > 0) {
                                var i = t.$r.get(r);
                                // A watched target might have been removed already.
                                                            i && t.$r.set(r, i.withResumeToken(n.resumeToken, e));
                            }
                        })), 
                        // Re-establish listens for the targets that have been invalidated by
                        // existence filter mismatches.
                        n.targetMismatches.forEach((function(e) {
                            var n = t.$r.get(e);
                            if (n) {
                                // Clear the resume token for the target, since we're in a known mismatch
                                // state.
                                t.$r.set(e, n.withResumeToken(X.EMPTY_BYTE_STRING, n.snapshotVersion)), 
                                // Cause a hard reset by unwatching and rewatching immediately, but
                                // deliberately don't send a resume token so that we get a full update.
                                jo(t, e);
                                // Mark the target we send as being on behalf of an existence filter
                                // mismatch, but don't actually retain that in listenTargets. This ensures
                                // that we flag the first re-listen this way without impacting future
                                // listens of this target (that might happen e.g. on reconnect).
                                var r = new Or(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                                Bo(t, r);
                            }
                        })), t.remoteSyncer.applyRemoteEvent(n);
                    }(t, i) ] : [ 3 /*break*/ , 10 ];

                    // We have received a target change with a global snapshot if the snapshot
                    // version is not equal to SnapshotVersion.min().
                                  case 9:
                    // We have received a target change with a global snapshot if the snapshot
                    // version is not equal to SnapshotVersion.min().
                    a.sent(), a.label = 10;

                  case 10:
                    return [ 3 /*break*/ , 13 ];

                  case 11:
                    return k("RemoteStore", "Failed to raise snapshot:", u = a.sent()), [ 4 /*yield*/ , $o(t, u) ];

                  case 12:
                    return a.sent(), [ 3 /*break*/ , 13 ];

                  case 13:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Recovery logic for IndexedDB errors that takes the network offline until
     * `op` succeeds. Retries are scheduled with backoff using
     * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
     * validated via a generic operation.
     *
     * The returned Promise is resolved once the network is disabled and before
     * any retry attempt.
     */ function $o(t, e, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var o = this;
            return __generator(this, (function(s) {
                switch (s.label) {
                  case 0:
                    if (!Sr(e)) throw e;
                    // Disable network and raise offline snapshots
                    return t.Or.add(1 /* IndexedDbFailed */), [ 4 /*yield*/ , Vo(t) ];

                  case 1:
                    // Disable network and raise offline snapshots
                    return s.sent(), t.Br.set("Offline" /* Offline */), i || (
                    // Use a simple read operation to determine if IndexedDB recovered.
                    // Ideally, we would expose a health check directly on SimpleDb, but
                    // RemoteStore only has access to persistence through LocalStore.
                    i = function() {
                        return ji(t.localStore);
                    }), 
                    // Probe IndexedDB periodically and re-enable network
                    t.asyncQueue.enqueueRetryable((function() {
                        return __awaiter(o, void 0, void 0, (function() {
                            return __generator(this, (function(e) {
                                switch (e.label) {
                                  case 0:
                                    return k("RemoteStore", "Retrying IndexedDB access"), [ 4 /*yield*/ , i() ];

                                  case 1:
                                    return e.sent(), t.Or.delete(1 /* IndexedDbFailed */), [ 4 /*yield*/ , Mo(t) ];

                                  case 2:
                                    return e.sent(), [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    })), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Executes `op`. If `op` fails, takes the network offline until `op`
     * succeeds. Returns after the first attempt.
     */ function Xo(t, e) {
        return e().catch((function(n) {
            return $o(t, n, e);
        }));
    }

    function Jo(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, n, i, o, s;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    e = P$1(t), n = us(e), i = e.kr.length > 0 ? e.kr[e.kr.length - 1].batchId : -1, r.label = 1;

                  case 1:
                    if (!
                    /**
     * Returns true if we can add to the write pipeline (i.e. the network is
     * enabled and the write pipeline is not full).
     */
                    function(t) {
                        return Go(t) && t.kr.length < 10;
                    }
                    /**
     * Queues additional writes to be sent to the write stream, sending them
     * immediately if the write stream is established.
     */ (e)) return [ 3 /*break*/ , 7 ];
                    r.label = 2;

                  case 2:
                    return r.trys.push([ 2, 4, , 6 ]), [ 4 /*yield*/ , Gi(e.localStore, i) ];

                  case 3:
                    return null === (o = r.sent()) ? (0 === e.kr.length && n.ir(), [ 3 /*break*/ , 7 ]) : (i = o.batchId, 
                    function(t, e) {
                        t.kr.push(e);
                        var n = us(t);
                        n.er() && n.pr && n.Er(e.mutations);
                    }(e, o), [ 3 /*break*/ , 6 ]);

                  case 4:
                    return s = r.sent(), [ 4 /*yield*/ , $o(e, s) ];

                  case 5:
                    return r.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 3 /*break*/ , 1 ];

                  case 7:
                    return Zo(e) && ts(e), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function Zo(t) {
        return Go(t) && !us(t).tr() && t.kr.length > 0;
    }

    function ts(t) {
        us(t).start();
    }

    function es(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                return us(t).Ar(), [ 2 /*return*/ ];
            }));
        }));
    }

    function ns(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, n, i, o;
            return __generator(this, (function(r) {
                // Send the write pipeline now that the stream is established.
                for (e = us(t), n = 0, i = t.kr; n < i.length; n++) o = i[n], e.Er(o.mutations);
                return [ 2 /*return*/ ];
            }));
        }));
    }

    function rs(t, e, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, o;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return n = t.kr.shift(), o = Lr.from(n, e, i), [ 4 /*yield*/ , Xo(t, (function() {
                        return t.remoteSyncer.applySuccessfulWrite(o);
                    })) ];

                  case 1:
                    // It's possible that with the completion of this mutation another
                    // slot has freed up.
                    return r.sent(), [ 4 /*yield*/ , Jo(t) ];

                  case 2:
                    // It's possible that with the completion of this mutation another
                    // slot has freed up.
                    return r.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function is(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    return e && us(t).pr ? [ 4 /*yield*/ , function(t, e) {
                        return __awaiter(this, void 0, void 0, (function() {
                            var n, i;
                            return __generator(this, (function(r) {
                                switch (r.label) {
                                  case 0:
                                    return Qe(i = e.code) && i !== S.ABORTED ? (n = t.kr.shift(), 
                                    // In this case it's also unlikely that the server itself is melting
                                    // down -- this was just a bad request so inhibit backoff on the next
                                    // restart.
                                    us(t).sr(), [ 4 /*yield*/ , Xo(t, (function() {
                                        return t.remoteSyncer.rejectFailedWrite(n.batchId, e);
                                    })) ]) : [ 3 /*break*/ , 3 ];

                                  case 1:
                                    // It's possible that with the completion of this mutation
                                    // another slot has freed up.
                                    return r.sent(), [ 4 /*yield*/ , Jo(t) ];

                                  case 2:
                                    // In this case it's also unlikely that the server itself is melting
                                    // down -- this was just a bad request so inhibit backoff on the next
                                    // restart.
                                    // It's possible that with the completion of this mutation
                                    // another slot has freed up.
                                    r.sent(), r.label = 3;

                                  case 3:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    }(t, e) ] : [ 3 /*break*/ , 2 ];

                    // This error affects the actual write.
                                  case 1:
                    // This error affects the actual write.
                    i.sent(), i.label = 2;

                  case 2:
                    // If the write stream closed after the write handshake completes, a write
                    // operation failed and we fail the pending operation.
                    // The write stream might have been started by refilling the write
                    // pipeline for failed writes
                    return Zo(t) && ts(t), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Toggles the network state when the client gains or loses its primary lease.
     */ function os(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return n = P$1(t), e ? (n.Or.delete(2 /* IsSecondary */), [ 4 /*yield*/ , Mo(n) ]) : [ 3 /*break*/ , 2 ];

                  case 1:
                    return r.sent(), [ 3 /*break*/ , 5 ];

                  case 2:
                    return e ? [ 3 /*break*/ , 4 ] : (n.Or.add(2 /* IsSecondary */), [ 4 /*yield*/ , Vo(n) ]);

                  case 3:
                    r.sent(), n.Br.set("Unknown" /* Unknown */), r.label = 4;

                  case 4:
                    r.label = 5;

                  case 5:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * If not yet initialized, registers the WatchStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */ function ss(t) {
        var e = this;
        return t.Ur || (
        // Create stream (but note that it is not started yet).
        t.Ur = function(t, e, n) {
            var r = P$1(t);
            return r.br(), new Ro(e, r.Hi, r.credentials, r.R, n);
        }(t.datastore, t.asyncQueue, {
            Ii: Wo.bind(null, t),
            Ri: Ho.bind(null, t),
            _r: Yo.bind(null, t)
        }), t.Mr.push((function(i) {
            return __awaiter(e, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return i ? (t.Ur.sr(), Qo(t) ? Ko(t) : t.Br.set("Unknown" /* Unknown */), [ 3 /*break*/ , 3 ]) : [ 3 /*break*/ , 1 ];

                      case 1:
                        return [ 4 /*yield*/ , t.Ur.stop() ];

                      case 2:
                        e.sent(), zo(t), e.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }))), t.Ur
        /**
     * If not yet initialized, registers the WriteStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */;
    }

    function us(t) {
        var e = this;
        return t.Kr || (
        // Create stream (but note that it is not started yet).
        t.Kr = function(t, e, n) {
            var r = P$1(t);
            return r.br(), new Lo(e, r.Hi, r.credentials, r.R, n);
        }(t.datastore, t.asyncQueue, {
            Ii: es.bind(null, t),
            Ri: is.bind(null, t),
            Ir: ns.bind(null, t),
            Tr: rs.bind(null, t)
        }), t.Mr.push((function(i) {
            return __awaiter(e, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return i ? (t.Kr.sr(), [ 4 /*yield*/ , Jo(t) ]) : [ 3 /*break*/ , 2 ];

                      case 1:
                        // This will start the write stream if necessary.
                        return e.sent(), [ 3 /*break*/ , 4 ];

                      case 2:
                        return [ 4 /*yield*/ , t.Kr.stop() ];

                      case 3:
                        e.sent(), t.kr.length > 0 && (k("RemoteStore", "Stopping write stream with " + t.kr.length + " pending writes"), 
                        t.kr = []), e.label = 4;

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }))), t.Kr
        /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Represents an operation scheduled to be run in the future on an AsyncQueue.
     *
     * It is created via DelayedOperation.createAndSchedule().
     *
     * Supports cancellation (via cancel()) and early execution (via skipDelay()).
     *
     * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
     * in newer versions of TypeScript defines `finally`, which is not available in
     * IE.
     */;
    }

    var as = /** @class */ function() {
        function t(t, e, n, r, i) {
            this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = i, 
            this.deferred = new wr, this.then = this.deferred.promise.then.bind(this.deferred.promise), 
            // It's normal for the deferred promise to be canceled (due to cancellation)
            // and so we attach a dummy catch callback to avoid
            // 'UnhandledPromiseRejectionWarning' log spam.
            this.deferred.promise.catch((function(t) {}))
            /**
         * Creates and returns a DelayedOperation that has been scheduled to be
         * executed on the provided asyncQueue after the provided delayMs.
         *
         * @param asyncQueue - The queue to schedule the operation on.
         * @param id - A Timer ID identifying the type of operation this is.
         * @param delayMs - The delay (ms) before the operation should be scheduled.
         * @param op - The operation to run.
         * @param removalCallback - A callback to be called synchronously once the
         *   operation is executed or canceled, notifying the AsyncQueue to remove it
         *   from its delayedOperations list.
         *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
         *   the DelayedOperation class public.
         */;
        }
        return t.createAndSchedule = function(e, n, r, i, o) {
            var s = new t(e, n, Date.now() + r, i, o);
            return s.start(r), s;
        }, 
        /**
         * Starts the timer. This is called immediately after construction by
         * createAndSchedule().
         */
        t.prototype.start = function(t) {
            var e = this;
            this.timerHandle = setTimeout((function() {
                return e.handleDelayElapsed();
            }), t);
        }, 
        /**
         * Queues the operation to run immediately (if it hasn't already been run or
         * canceled).
         */
        t.prototype.skipDelay = function() {
            return this.handleDelayElapsed();
        }, 
        /**
         * Cancels the operation if it hasn't already been executed or canceled. The
         * promise will be rejected.
         *
         * As long as the operation has not yet been run, calling cancel() provides a
         * guarantee that the operation will not be run.
         */
        t.prototype.cancel = function(t) {
            null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new N(S.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
        }, t.prototype.handleDelayElapsed = function() {
            var t = this;
            this.asyncQueue.enqueueAndForget((function() {
                return null !== t.timerHandle ? (t.clearTimeout(), t.op().then((function(e) {
                    return t.deferred.resolve(e);
                }))) : Promise.resolve();
            }));
        }, t.prototype.clearTimeout = function() {
            null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), 
            this.timerHandle = null);
        }, t;
    }();

    /**
     * Returns a FirestoreError that can be surfaced to the user if the provided
     * error is an IndexedDbTransactionError. Re-throws the error otherwise.
     */ function cs(t, e) {
        if (C("AsyncQueue", e + ": " + t), Sr(t)) return new N(S.UNAVAILABLE, e + ": " + t);
        throw t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentSet is an immutable (copy-on-write) collection that holds documents
     * in order specified by the provided comparator. We always add a document key
     * comparator on top of what is provided to guarantee document equality based on
     * the key.
     */ var hs = /** @class */ function() {
        /** The default ordering is by key if the comparator is omitted */
        function t(t) {
            // We are adding document key comparator to the end as it's the only
            // guaranteed unique property of a document.
            this.comparator = t ? function(e, n) {
                return t(e, n) || at.comparator(e.key, n.key);
            } : function(t, e) {
                return at.comparator(t.key, e.key);
            }, this.keyedMap = tn(), this.sortedSet = new ze(this.comparator)
            /**
         * Returns an empty copy of the existing DocumentSet, using the same
         * comparator.
         */;
        }
        return t.emptySet = function(e) {
            return new t(e.comparator);
        }, t.prototype.has = function(t) {
            return null != this.keyedMap.get(t);
        }, t.prototype.get = function(t) {
            return this.keyedMap.get(t);
        }, t.prototype.first = function() {
            return this.sortedSet.minKey();
        }, t.prototype.last = function() {
            return this.sortedSet.maxKey();
        }, t.prototype.isEmpty = function() {
            return this.sortedSet.isEmpty();
        }, 
        /**
         * Returns the index of the provided key in the document set, or -1 if the
         * document key is not present in the set;
         */
        t.prototype.indexOf = function(t) {
            var e = this.keyedMap.get(t);
            return e ? this.sortedSet.indexOf(e) : -1;
        }, Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this.sortedSet.size;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /** Iterates documents in order defined by "comparator" */ t.prototype.forEach = function(t) {
            this.sortedSet.inorderTraversal((function(e, n) {
                return t(e), !1;
            }));
        }, 
        /** Inserts or updates a document with the same key */ t.prototype.add = function(t) {
            // First remove the element if we have it.
            var e = this.delete(t.key);
            return e.copy(e.keyedMap.insert(t.key, t), e.sortedSet.insert(t, null));
        }, 
        /** Deletes a document with a given key */ t.prototype.delete = function(t) {
            var e = this.get(t);
            return e ? this.copy(this.keyedMap.remove(t), this.sortedSet.remove(e)) : this;
        }, t.prototype.isEqual = function(e) {
            if (!(e instanceof t)) return !1;
            if (this.size !== e.size) return !1;
            for (var n = this.sortedSet.getIterator(), r = e.sortedSet.getIterator(); n.hasNext(); ) {
                var i = n.getNext().key, o = r.getNext().key;
                if (!i.isEqual(o)) return !1;
            }
            return !0;
        }, t.prototype.toString = function() {
            var t = [];
            return this.forEach((function(e) {
                t.push(e.toString());
            })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
        }, t.prototype.copy = function(e, n) {
            var r = new t;
            return r.comparator = this.comparator, r.keyedMap = e, r.sortedSet = n, r;
        }, t;
    }(), fs = /** @class */ function() {
        function t() {
            this.Qr = new ze(at.comparator);
        }
        return t.prototype.track = function(t) {
            var e = t.doc.key, n = this.Qr.get(e);
            n ? 
            // Merge the new change with the existing change.
            0 /* Added */ !== t.type && 3 /* Metadata */ === n.type ? this.Qr = this.Qr.insert(e, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== n.type ? this.Qr = this.Qr.insert(e, {
                type: n.type,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 2 /* Modified */ === n.type ? this.Qr = this.Qr.insert(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 0 /* Added */ === n.type ? this.Qr = this.Qr.insert(e, {
                type: 0 /* Added */ ,
                doc: t.doc
            }) : 1 /* Removed */ === t.type && 0 /* Added */ === n.type ? this.Qr = this.Qr.remove(e) : 1 /* Removed */ === t.type && 2 /* Modified */ === n.type ? this.Qr = this.Qr.insert(e, {
                type: 1 /* Removed */ ,
                doc: n.doc
            }) : 0 /* Added */ === t.type && 1 /* Removed */ === n.type ? this.Qr = this.Qr.insert(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            L() : this.Qr = this.Qr.insert(e, t);
        }, t.prototype.jr = function() {
            var t = [];
            return this.Qr.inorderTraversal((function(e, n) {
                t.push(n);
            })), t;
        }, t;
    }(), ls = /** @class */ function() {
        function t(t, e, n, r, i, o, s, u) {
            this.query = t, this.docs = e, this.oldDocs = n, this.docChanges = r, this.mutatedKeys = i, 
            this.fromCache = o, this.syncStateChanged = s, this.excludesMetadataChanges = u
            /** Returns a view snapshot as if all documents in the snapshot were added. */;
        }
        return t.fromInitialDocuments = function(e, n, r, i) {
            var o = [];
            return n.forEach((function(t) {
                o.push({
                    type: 0 /* Added */ ,
                    doc: t
                });
            })), new t(e, n, hs.emptySet(n), o, r, i, 
            /* syncStateChanged= */ !0, 
            /* excludesMetadataChanges= */ !1);
        }, Object.defineProperty(t.prototype, "hasPendingWrites", {
            get: function() {
                return !this.mutatedKeys.isEmpty();
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(t) {
            if (!(this.fromCache === t.fromCache && this.syncStateChanged === t.syncStateChanged && this.mutatedKeys.isEqual(t.mutatedKeys) && re(this.query, t.query) && this.docs.isEqual(t.docs) && this.oldDocs.isEqual(t.oldDocs))) return !1;
            var e = this.docChanges, n = t.docChanges;
            if (e.length !== n.length) return !1;
            for (var r = 0; r < e.length; r++) if (e[r].type !== n[r].type || !e[r].doc.isEqual(n[r].doc)) return !1;
            return !0;
        }, t;
    }(), ds = function() {
        this.Wr = void 0, this.listeners = [];
    }, ps = function() {
        this.queries = new bi((function(t) {
            return ie(t);
        }), re), this.onlineState = "Unknown" /* Unknown */ , this.Gr = new Set;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
     * duplicate events for the same doc.
     */ function ys(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i, o, s, u, a, c;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    if (n = P$1(t), i = e.query, o = !1, (s = n.queries.get(i)) || (o = !0, s = new ds), 
                    !o) return [ 3 /*break*/ , 4 ];
                    r.label = 1;

                  case 1:
                    return r.trys.push([ 1, 3, , 4 ]), u = s, [ 4 /*yield*/ , n.onListen(i) ];

                  case 2:
                    return u.Wr = r.sent(), [ 3 /*break*/ , 4 ];

                  case 3:
                    return a = r.sent(), c = cs(a, "Initialization of query '" + oe(e.query) + "' failed"), 
                    [ 2 /*return*/ , void e.onError(c) ];

                  case 4:
                    return n.queries.set(i, s), s.listeners.push(e), 
                    // Run global snapshot listeners if a consistent snapshot has been emitted.
                    e.zr(n.onlineState), s.Wr && e.Hr(s.Wr) && ws(n), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function vs(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i, o, s, u;
            return __generator(this, (function(r) {
                return n = P$1(t), i = e.query, o = !1, (s = n.queries.get(i)) && (u = s.listeners.indexOf(e)) >= 0 && (s.listeners.splice(u, 1), 
                o = 0 === s.listeners.length), o ? [ 2 /*return*/ , (n.queries.delete(i), n.onUnlisten(i)) ] : [ 2 /*return*/ ];
            }));
        }));
    }

    function ms(t, e) {
        for (var n = P$1(t), r = !1, i = 0, o = e; i < o.length; i++) {
            var s = o[i], u = s.query, a = n.queries.get(u);
            if (a) {
                for (var c = 0, h = a.listeners; c < h.length; c++) {
                    h[c].Hr(s) && (r = !0);
                }
                a.Wr = s;
            }
        }
        r && ws(n);
    }

    function gs(t, e, n) {
        var r = P$1(t), i = r.queries.get(e);
        if (i) for (var o = 0, s = i.listeners; o < s.length; o++) {
            s[o].onError(n);
        }
        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
        // after an error.
            r.queries.delete(e);
    }

    // Call all global snapshot listeners that have been set.
    function ws(t) {
        t.Gr.forEach((function(t) {
            t.next();
        }));
    }

    /**
     * QueryListener takes a series of internal view snapshots and determines
     * when to raise the event.
     *
     * It uses an Observer to dispatch events.
     */ var bs = /** @class */ function() {
        function t(t, e, n) {
            this.query = t, this.Jr = e, 
            /**
                 * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
                 * observer. This flag is set to true once we've actually raised an event.
                 */
            this.Yr = !1, this.Xr = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {}
            /**
         * Applies the new ViewSnapshot to this listener, raising a user-facing event
         * if applicable (depending on what changed, whether the user has opted into
         * metadata-only changes, etc.). Returns true if a user-facing event was
         * indeed raised.
         */;
        }
        return t.prototype.Hr = function(t) {
            if (!this.options.includeMetadataChanges) {
                for (
                // Remove the metadata only changes.
                var e = [], n = 0, r = t.docChanges; n < r.length; n++) {
                    var i = r[n];
                    3 /* Metadata */ !== i.type && e.push(i);
                }
                t = new ls(t.query, t.docs, t.oldDocs, e, t.mutatedKeys, t.fromCache, t.syncStateChanged, 
                /* excludesMetadataChanges= */ !0);
            }
            var o = !1;
            return this.Yr ? this.Zr(t) && (this.Jr.next(t), o = !0) : this.eo(t, this.onlineState) && (this.no(t), 
            o = !0), this.Xr = t, o;
        }, t.prototype.onError = function(t) {
            this.Jr.error(t);
        }, 
        /** Returns whether a snapshot was raised. */ t.prototype.zr = function(t) {
            this.onlineState = t;
            var e = !1;
            return this.Xr && !this.Yr && this.eo(this.Xr, t) && (this.no(this.Xr), e = !0), 
            e;
        }, t.prototype.eo = function(t, e) {
            // Always raise the first event when we're synced
            if (!t.fromCache) return !0;
            // NOTE: We consider OnlineState.Unknown as online (it should become Offline
            // or Online if we wait long enough).
                    var n = "Offline" /* Offline */ !== e;
            // Don't raise the event if we're online, aren't synced yet (checked
            // above) and are waiting for a sync.
                    return !(this.options.so && n || t.docs.isEmpty() && "Offline" /* Offline */ !== e);
            // Raise data from cache if we have any documents or we are offline
            }, t.prototype.Zr = function(t) {
            // We don't need to handle includeDocumentMetadataChanges here because
            // the Metadata only changes have already been stripped out if needed.
            // At this point the only changes we will see are the ones we should
            // propagate.
            if (t.docChanges.length > 0) return !0;
            var e = this.Xr && this.Xr.hasPendingWrites !== t.hasPendingWrites;
            return !(!t.syncStateChanged && !e) && !0 === this.options.includeMetadataChanges;
            // Generally we should have hit one of the cases above, but it's possible
            // to get here if there were only metadata docChanges and they got
            // stripped out.
            }, t.prototype.no = function(t) {
            t = ls.fromInitialDocuments(t.query, t.docs, t.mutatedKeys, t.fromCache), this.Yr = !0, 
            this.Jr.next(t);
        }, t;
    }();

    /**
     * Returns a `LoadBundleTaskProgress` representing the progress that the loading
     * has succeeded.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Ss = function(t) {
        this.key = t;
    }, Ns = function(t) {
        this.key = t;
    }, Ds = /** @class */ function() {
        function t(t, 
        /** Documents included in the remote target */
        e) {
            this.query = t, this.uo = e, this.ao = null, 
            /**
                 * A flag whether the view is current with the backend. A view is considered
                 * current after it has seen the current flag from the backend and did not
                 * lose consistency within the watch stream (e.g. because of an existence
                 * filter mismatch).
                 */
            this.current = !1, 
            /** Documents in the view but not in the remote target */
            this.ho = on(), 
            /** Document Keys that have local changes */
            this.mutatedKeys = on(), this.lo = ue(t), this.fo = new hs(this.lo);
        }
        return Object.defineProperty(t.prototype, "wo", {
            /**
             * The set of remote documents that the server has told us belongs to the target associated with
             * this view.
             */
            get: function() {
                return this.uo;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Iterates over a set of doc changes, applies the query limit, and computes
         * what the new results should be, what the changes were, and whether we may
         * need to go back to the local cache for more results. Does not make any
         * changes to the view.
         * @param docChanges - The doc changes to apply to this view.
         * @param previousChanges - If this is being called with a refill, then start
         *        with this set of docs and changes instead of the current view.
         * @returns a new set of docs, changes, and refill flag.
         */
        t.prototype._o = function(t, e) {
            var n = this, r = e ? e.mo : new fs, i = e ? e.fo : this.fo, o = e ? e.mutatedKeys : this.mutatedKeys, s = i, u = !1, a = Yt(this.query) && i.size === this.query.limit ? i.last() : null, c = $t(this.query) && i.size === this.query.limit ? i.first() : null;
            // Drop documents out to meet limit/limitToLast requirement.
            if (t.inorderTraversal((function(t, e) {
                var h = i.get(t), f = se(n.query, e) ? e : null, l = !!h && n.mutatedKeys.has(h.key), d = !!f && (f.hasLocalMutations || 
                // We only consider committed mutations for documents that were
                // mutated during the lifetime of the view.
                n.mutatedKeys.has(f.key) && f.hasCommittedMutations), p = !1;
                // Calculate change
                h && f ? h.data.isEqual(f.data) ? l !== d && (r.track({
                    type: 3 /* Metadata */ ,
                    doc: f
                }), p = !0) : n.yo(h, f) || (r.track({
                    type: 2 /* Modified */ ,
                    doc: f
                }), p = !0, (a && n.lo(f, a) > 0 || c && n.lo(f, c) < 0) && (
                // This doc moved from inside the limit to outside the limit.
                // That means there may be some other doc in the local cache
                // that should be included instead.
                u = !0)) : !h && f ? (r.track({
                    type: 0 /* Added */ ,
                    doc: f
                }), p = !0) : h && !f && (r.track({
                    type: 1 /* Removed */ ,
                    doc: h
                }), p = !0, (a || c) && (
                // A doc was removed from a full limit query. We'll need to
                // requery from the local cache to see if we know about some other
                // doc that should be in the results.
                u = !0)), p && (f ? (s = s.add(f), o = d ? o.add(t) : o.delete(t)) : (s = s.delete(t), 
                o = o.delete(t)));
            })), Yt(this.query) || $t(this.query)) for (;s.size > this.query.limit; ) {
                var h = Yt(this.query) ? s.last() : s.first();
                s = s.delete(h.key), o = o.delete(h.key), r.track({
                    type: 1 /* Removed */ ,
                    doc: h
                });
            }
            return {
                fo: s,
                mo: r,
                Nn: u,
                mutatedKeys: o
            };
        }, t.prototype.yo = function(t, e) {
            // We suppress the initial change event for documents that were modified as
            // part of a write acknowledgment (e.g. when the value of a server transform
            // is applied) as Watch will send us the same document again.
            // By suppressing the event, we only raise two user visible events (one with
            // `hasPendingWrites` and the final state of the document) instead of three
            // (one with `hasPendingWrites`, the modified document with
            // `hasPendingWrites` and the final state of the document).
            return t.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
        }, 
        /**
         * Updates the view with the given ViewDocumentChanges and optionally updates
         * limbo docs and sync state from the provided target change.
         * @param docChanges - The set of changes to make to the view's docs.
         * @param updateLimboDocuments - Whether to update limbo documents based on
         *        this change.
         * @param targetChange - A target change to apply for computing limbo docs and
         *        sync state.
         * @returns A new ViewChange with the given docs, changes, and sync state.
         */
        // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
        t.prototype.applyChanges = function(t, e, n) {
            var r = this, i = this.fo;
            this.fo = t.fo, this.mutatedKeys = t.mutatedKeys;
            // Sort changes based on type and query comparator
            var o = t.mo.jr();
            o.sort((function(t, e) {
                return function(t, e) {
                    var n = function(t) {
                        switch (t) {
                          case 0 /* Added */ :
                            return 1;

                          case 2 /* Modified */ :
                          case 3 /* Metadata */ :
                            // A metadata change is converted to a modified change at the public
                            // api layer.  Since we sort by document key and then change type,
                            // metadata and modified changes must be sorted equivalently.
                            return 2;

                          case 1 /* Removed */ :
                            return 0;

                          default:
                            return L();
                        }
                    };
                    return n(t) - n(e);
                }(t.type, e.type) || r.lo(t.doc, e.doc);
            })), this.po(n);
            var s = e ? this.Eo() : [], u = 0 === this.ho.size && this.current ? 1 /* Synced */ : 0 /* Local */ , a = u !== this.ao;
            return this.ao = u, 0 !== o.length || a ? {
                snapshot: new ls(this.query, t.fo, i, o, t.mutatedKeys, 0 /* Local */ === u, a, 
                /* excludesMetadataChanges= */ !1),
                To: s
            } : {
                To: s
            };
            // no changes
            }, 
        /**
         * Applies an OnlineState change to the view, potentially generating a
         * ViewChange if the view's syncState changes as a result.
         */
        t.prototype.zr = function(t) {
            return this.current && "Offline" /* Offline */ === t ? (
            // If we're offline, set `current` to false and then call applyChanges()
            // to refresh our syncState and generate a ViewChange as appropriate. We
            // are guaranteed to get a new TargetChange that sets `current` back to
            // true once the client is back online.
            this.current = !1, this.applyChanges({
                fo: this.fo,
                mo: new fs,
                mutatedKeys: this.mutatedKeys,
                Nn: !1
            }, 
            /* updateLimboDocuments= */ !1)) : {
                To: []
            };
        }, 
        /**
         * Returns whether the doc for the given key should be in limbo.
         */
        t.prototype.Io = function(t) {
            // If the remote end says it's part of this query, it's not in limbo.
            return !this.uo.has(t) && 
            // The local store doesn't think it's a result, so it shouldn't be in limbo.
            !!this.fo.has(t) && !this.fo.get(t).hasLocalMutations;
        }, 
        /**
         * Updates syncedDocuments, current, and limbo docs based on the given change.
         * Returns the list of changes to which docs are in limbo.
         */
        t.prototype.po = function(t) {
            var e = this;
            t && (t.addedDocuments.forEach((function(t) {
                return e.uo = e.uo.add(t);
            })), t.modifiedDocuments.forEach((function(t) {})), t.removedDocuments.forEach((function(t) {
                return e.uo = e.uo.delete(t);
            })), this.current = t.current);
        }, t.prototype.Eo = function() {
            var t = this;
            // We can only determine limbo documents when we're in-sync with the server.
                    if (!this.current) return [];
            // TODO(klimt): Do this incrementally so that it's not quadratic when
            // updating many documents.
                    var e = this.ho;
            this.ho = on(), this.fo.forEach((function(e) {
                t.Io(e.key) && (t.ho = t.ho.add(e.key));
            }));
            // Diff the new limbo docs with the old limbo docs.
            var n = [];
            return e.forEach((function(e) {
                t.ho.has(e) || n.push(new Ns(e));
            })), this.ho.forEach((function(t) {
                e.has(t) || n.push(new Ss(t));
            })), n;
        }, 
        /**
         * Update the in-memory state of the current view with the state read from
         * persistence.
         *
         * We update the query view whenever a client's primary status changes:
         * - When a client transitions from primary to secondary, it can miss
         *   LocalStorage updates and its query views may temporarily not be
         *   synchronized with the state on disk.
         * - For secondary to primary transitions, the client needs to update the list
         *   of `syncedDocuments` since secondary clients update their query views
         *   based purely on synthesized RemoteEvents.
         *
         * @param queryResult.documents - The documents that match the query according
         * to the LocalStore.
         * @param queryResult.remoteKeys - The keys of the documents that match the
         * query according to the backend.
         *
         * @returns The ViewChange that resulted from this synchronization.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Ao = function(t) {
            this.uo = t.Bn, this.ho = on();
            var e = this._o(t.documents);
            return this.applyChanges(e, /*updateLimboDocuments=*/ !0);
        }, 
        /**
         * Returns a view snapshot as if this query was just listened to. Contains
         * a document add for every existing document and the `fromCache` and
         * `hasPendingWrites` status of the already established view.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Ro = function() {
            return ls.fromInitialDocuments(this.query, this.fo, this.mutatedKeys, 0 /* Local */ === this.ao);
        }, t;
    }(), As = function(
    /**
         * The query itself.
         */
    t, 
    /**
         * The target number created by the client that is used in the watch
         * stream to identify this query.
         */
    e, 
    /**
         * The view is responsible for computing the final merged truth of what
         * docs are in the query. It gets notified of local and remote changes,
         * and applies the query filters and limits to determine the most correct
         * possible results.
         */
    n) {
        this.query = t, this.targetId = e, this.view = n;
    }, ks = function(t) {
        this.key = t, 
        /**
                 * Set to true once we've received a document. This is used in
                 * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
                 * decide whether it needs to manufacture a delete event for the target once
                 * the target is CURRENT.
                 */
        this.bo = !1;
    }, Cs = /** @class */ function() {
        function t(t, e, n, 
        // PORTING NOTE: Manages state synchronization in multi-tab environments.
        r, i, o) {
            this.localStore = t, this.remoteStore = e, this.eventManager = n, this.sharedClientState = r, 
            this.currentUser = i, this.maxConcurrentLimboResolutions = o, this.vo = {}, this.Po = new bi((function(t) {
                return ie(t);
            }), re), this.Vo = new Map, 
            /**
                 * The keys of documents that are in limbo for which we haven't yet started a
                 * limbo resolution query. The strings in this set are the result of calling
                 * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
                 *
                 * The `Set` type was chosen because it provides efficient lookup and removal
                 * of arbitrary elements and it also maintains insertion order, providing the
                 * desired queue-like FIFO semantics.
                 */
            this.So = new Set, 
            /**
                 * Keeps track of the target ID for each document that is in limbo with an
                 * active target.
                 */
            this.Do = new ze(at.comparator), 
            /**
                 * Keeps track of the information about an active limbo resolution for each
                 * active target ID that was started for the purpose of limbo resolution.
                 */
            this.Co = new Map, this.No = new eo, 
            /** Stores user completion handlers, indexed by User and BatchId. */
            this.xo = {}, 
            /** Stores user callbacks waiting for all pending writes to be acknowledged. */
            this.Fo = new Map, this.ko = ai.Yt(), this.onlineState = "Unknown" /* Unknown */ , 
            // The primary state is set to `true` or `false` immediately after Firestore
            // startup. In the interim, a client should only be considered primary if
            // `isPrimary` is true.
            this.$o = void 0;
        }
        return Object.defineProperty(t.prototype, "isPrimaryClient", {
            get: function() {
                return !0 === this.$o;
            },
            enumerable: !1,
            configurable: !0
        }), t;
    }();

    /**
     * Initiates the new listen, resolves promise when listen enqueued to the
     * server. All the subsequent view snapshots or errors are sent to the
     * subscribed handlers. Returns the initial snapshot.
     */
    function xs(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i, o, s, u, a;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return n = su(t), (s = n.Po.get(e)) ? (
                    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
                    // already exists when EventManager calls us for the first time. This
                    // happens when the primary tab is already listening to this query on
                    // behalf of another tab and the user of the primary also starts listening
                    // to the query. EventManager will not have an assigned target ID in this
                    // case and calls `listen` to obtain this ID.
                    i = s.targetId, n.sharedClientState.addLocalQueryTarget(i), o = s.view.Ro(), [ 3 /*break*/ , 4 ]) : [ 3 /*break*/ , 1 ];

                  case 1:
                    return [ 4 /*yield*/ , zi(n.localStore, ee(e)) ];

                  case 2:
                    return u = r.sent(), a = n.sharedClientState.addLocalQueryTarget(u.targetId), i = u.targetId, 
                    [ 4 /*yield*/ , Rs(n, e, i, "current" === a) ];

                  case 3:
                    o = r.sent(), n.isPrimaryClient && qo(n.remoteStore, u), r.label = 4;

                  case 4:
                    return [ 2 /*return*/ , o ];
                }
            }));
        }));
    }

    /**
     * Registers a view for a previously unknown query and computes its initial
     * snapshot.
     */ function Rs(t, e, i, o) {
        return __awaiter(this, void 0, void 0, (function() {
            var s, u, a, c, h, f;
            return __generator(this, (function(l) {
                switch (l.label) {
                  case 0:
                    // PORTING NOTE: On Web only, we inject the code that registers new Limbo
                    // targets based on view changes. This allows us to only depend on Limbo
                    // changes when user code includes queries.
                    return t.Oo = function(e, i, o) {
                        return function(t, e, i, o) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var n, s, u;
                                return __generator(this, (function(r) {
                                    switch (r.label) {
                                      case 0:
                                        return n = e.view._o(i), n.Nn ? [ 4 /*yield*/ , Hi(t.localStore, e.query, 
                                        /* usePreviousResults= */ !1).then((function(t) {
                                            var r = t.documents;
                                            return e.view._o(r, n);
                                        })) ] : [ 3 /*break*/ , 2 ];

                                      case 1:
                                        // The query has a limit and some docs were removed, so we need
                                        // to re-run the query against the local store to make sure we
                                        // didn't lose any good docs that had been past the limit.
                                        n = r.sent(), r.label = 2;

                                      case 2:
                                        return s = o && o.targetChanges.get(e.targetId), u = e.view.applyChanges(n, 
                                        /* updateLimboDocuments= */ t.isPrimaryClient, s), [ 2 /*return*/ , (Gs(t, e.targetId, u.To), 
                                        u.snapshot) ];
                                    }
                                }));
                            }));
                        }(t, e, i, o);
                    }, [ 4 /*yield*/ , Hi(t.localStore, e, 
                    /* usePreviousResults= */ !0) ];

                  case 1:
                    return s = l.sent(), u = new Ds(e, s.Bn), a = u._o(s.documents), c = cn.createSynthesizedTargetChangeForCurrentChange(i, o && "Offline" /* Offline */ !== t.onlineState), 
                    h = u.applyChanges(a, 
                    /* updateLimboDocuments= */ t.isPrimaryClient, c), Gs(t, i, h.To), f = new As(e, i, u), 
                    [ 2 /*return*/ , (t.Po.set(e, f), t.Vo.has(i) ? t.Vo.get(i).push(e) : t.Vo.set(i, [ e ]), 
                    h.snapshot) ];
                }
            }));
        }));
    }

    /** Stops listening to the query. */ function Ls(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i, o;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return n = P$1(t), i = n.Po.get(e), (o = n.Vo.get(i.targetId)).length > 1 ? [ 2 /*return*/ , (n.Vo.set(i.targetId, o.filter((function(t) {
                        return !re(t, e);
                    }))), void n.Po.delete(e)) ] : n.isPrimaryClient ? (
                    // We need to remove the local query target first to allow us to verify
                    // whether any other client is still interested in this target.
                    n.sharedClientState.removeLocalQueryTarget(i.targetId), n.sharedClientState.isActiveQueryTarget(i.targetId) ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , Wi(n.localStore, i.targetId, 
                    /*keepPersistedTargetData=*/ !1).then((function() {
                        n.sharedClientState.clearQueryState(i.targetId), Uo(n.remoteStore, i.targetId), 
                        Ks(n, i.targetId);
                    })).catch(di) ]) : [ 3 /*break*/ , 3 ];

                  case 1:
                    r.sent(), r.label = 2;

                  case 2:
                    return [ 3 /*break*/ , 5 ];

                  case 3:
                    return Ks(n, i.targetId), [ 4 /*yield*/ , Wi(n.localStore, i.targetId, 
                    /*keepPersistedTargetData=*/ !0) ];

                  case 4:
                    r.sent(), r.label = 5;

                  case 5:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Initiates the write of local mutation batch which involves adding the
     * writes to the mutation queue, notifying the remote store about new
     * mutations and raising events for any changes this write caused.
     *
     * The promise returned by this call is resolved when the above steps
     * have completed, *not* when the write was acked by the backend. The
     * userCallback is resolved once the write was acked/rejected by the
     * backend (or failed locally for any other reason).
     */ function Os(t, e, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, o, s, u;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    n = uu(t), r.label = 1;

                  case 1:
                    return r.trys.push([ 1, 5, , 6 ]), [ 4 /*yield*/ , function(t, e) {
                        var n, r = P$1(t), i = B.now(), o = e.reduce((function(t, e) {
                            return t.add(e.key);
                        }), on());
                        return r.persistence.runTransaction("Locally write mutations", "readwrite", (function(t) {
                            return r.Mn.pn(t, o).next((function(o) {
                                n = o;
                                for (
                                // For non-idempotent mutations (such as `FieldValue.increment()`),
                                // we record the base state in a separate patch mutation. This is
                                // later used to guarantee consistent values and prevents flicker
                                // even if the backend sends us an update that already includes our
                                // transform.
                                var s = [], u = 0, a = e; u < a.length; u++) {
                                    var c = a[u], h = xe(c, n.get(c.key));
                                    null != h && 
                                    // NOTE: The base state should only be applied if there's some
                                    // existing document to override, so use a Precondition of
                                    // exists=true
                                    s.push(new Pe(c.key, h, _t(h.value.mapValue), Ne.exists(!0)));
                                }
                                return r._n.addMutationBatch(t, i, s, e);
                            }));
                        })).then((function(t) {
                            return t.applyToLocalDocumentSet(n), {
                                batchId: t.batchId,
                                changes: n
                            };
                        }));
                    }(n.localStore, e) ];

                  case 2:
                    return o = r.sent(), n.sharedClientState.addPendingMutation(o.batchId), function(t, e, n) {
                        var r = t.xo[t.currentUser.toKey()];
                        r || (r = new ze(V)), r = r.insert(e, n), t.xo[t.currentUser.toKey()] = r;
                    }(n, o.batchId, i), [ 4 /*yield*/ , Hs(n, o.changes) ];

                  case 3:
                    return r.sent(), [ 4 /*yield*/ , Jo(n.remoteStore) ];

                  case 4:
                    return r.sent(), [ 3 /*break*/ , 6 ];

                  case 5:
                    return s = r.sent(), u = cs(s, "Failed to persist write"), i.reject(u), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Applies one remote event to the sync engine, notifying any views of the
     * changes, and releasing any pending mutation batches that would become
     * visible because of the snapshot version the remote event contains.
     */ function Ps(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    n = P$1(t), r.label = 1;

                  case 1:
                    return r.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , Ki(n.localStore, e) ];

                  case 2:
                    return i = r.sent(), 
                    // Update `receivedDocument` as appropriate for any limbo targets.
                    e.targetChanges.forEach((function(t, e) {
                        var r = n.Co.get(e);
                        r && (
                        // Since this is a limbo resolution lookup, it's for a single document
                        // and it could be added, modified, or removed, but not a combination.
                        O(t.addedDocuments.size + t.modifiedDocuments.size + t.removedDocuments.size <= 1), 
                        t.addedDocuments.size > 0 ? r.bo = !0 : t.modifiedDocuments.size > 0 ? O(r.bo) : t.removedDocuments.size > 0 && (O(r.bo), 
                        r.bo = !1));
                    })), [ 4 /*yield*/ , Hs(n, i, e) ];

                  case 3:
                    // Update `receivedDocument` as appropriate for any limbo targets.
                    return r.sent(), [ 3 /*break*/ , 6 ];

                  case 4:
                    return [ 4 /*yield*/ , di(r.sent()) ];

                  case 5:
                    return r.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Applies an OnlineState change to the sync engine and notifies any views of
     * the change.
     */ function Fs(t, e, n) {
        var r = P$1(t);
        // If we are the secondary client, we explicitly ignore the remote store's
        // online state (the local client may go offline, even though the primary
        // tab remains online) and only apply the primary tab's online state from
        // SharedClientState.
            if (r.isPrimaryClient && 0 /* RemoteStore */ === n || !r.isPrimaryClient && 1 /* SharedClientState */ === n) {
            var i = [];
            r.Po.forEach((function(t, n) {
                var r = n.view.zr(e);
                r.snapshot && i.push(r.snapshot);
            })), function(t, e) {
                var n = P$1(t);
                n.onlineState = e;
                var r = !1;
                n.queries.forEach((function(t, n) {
                    for (var i = 0, o = n.listeners; i < o.length; i++) {
                        // Run global snapshot listeners if a consistent snapshot has been emitted.
                        o[i].zr(e) && (r = !0);
                    }
                })), r && ws(n);
            }(r.eventManager, e), i.length && r.vo._r(i), r.onlineState = e, r.isPrimaryClient && r.sharedClientState.setOnlineState(e);
        }
    }

    /**
     * Rejects the listen for the given targetID. This can be triggered by the
     * backend for any active target.
     *
     * @param syncEngine - The sync engine implementation.
     * @param targetId - The targetID corresponds to one previously initiated by the
     * user as part of TargetData passed to listen() on RemoteStore.
     * @param err - A description of the condition that has forced the rejection.
     * Nearly always this will be an indication that the user is no longer
     * authorized to see the data matching the target.
     */ function Ms(t, e, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, o, s, u, a, c;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    // PORTING NOTE: Multi-tab only.
                    return (n = P$1(t)).sharedClientState.updateQueryState(e, "rejected", i), o = n.Co.get(e), 
                    (s = o && o.key) ? (u = (u = new ze(at.comparator)).insert(s, St.newNoDocument(s, j.min())), 
                    a = on().add(s), c = new an(j.min(), 
                    /* targetChanges= */ new Map, 
                    /* targetMismatches= */ new Ye(V), u, a), [ 4 /*yield*/ , Ps(n, c) ]) : [ 3 /*break*/ , 2 ];

                  case 1:
                    return r.sent(), 
                    // Since this query failed, we won't want to manually unlisten to it.
                    // We only remove it from bookkeeping after we successfully applied the
                    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
                    // this query when the RemoteStore restarts the Watch stream, which should
                    // re-trigger the target failure.
                    n.Do = n.Do.remove(s), n.Co.delete(e), Ws(n), [ 3 /*break*/ , 4 ];

                  case 2:
                    return [ 4 /*yield*/ , Wi(n.localStore, e, 
                    /* keepPersistedTargetData */ !1).then((function() {
                        return Ks(n, e, i);
                    })).catch(di) ];

                  case 3:
                    r.sent(), r.label = 4;

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function Vs(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i, o;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    n = P$1(t), i = e.batch.batchId, r.label = 1;

                  case 1:
                    return r.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , Bi(n.localStore, e) ];

                  case 2:
                    return o = r.sent(), 
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught
                    // up), so we raise user callbacks first so that they consistently happen
                    // before listen events.
                    js(n, i, /*error=*/ null), Bs(n, i), n.sharedClientState.updateMutationState(i, "acknowledged"), 
                    [ 4 /*yield*/ , Hs(n, o) ];

                  case 3:
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught
                    // up), so we raise user callbacks first so that they consistently happen
                    // before listen events.
                    return r.sent(), [ 3 /*break*/ , 6 ];

                  case 4:
                    return [ 4 /*yield*/ , di(r.sent()) ];

                  case 5:
                    return r.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function qs(t, e, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, o;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    n = P$1(t), r.label = 1;

                  case 1:
                    return r.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , function(t, e) {
                        var n = P$1(t);
                        return n.persistence.runTransaction("Reject batch", "readwrite-primary", (function(t) {
                            var r;
                            return n._n.lookupMutationBatch(t, e).next((function(e) {
                                return O(null !== e), r = e.keys(), n._n.removeMutationBatch(t, e);
                            })).next((function() {
                                return n._n.performConsistencyCheck(t);
                            })).next((function() {
                                return n.Mn.pn(t, r);
                            }));
                        }));
                    }(n.localStore, e) ];

                  case 2:
                    return o = r.sent(), 
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught up),
                    // so we raise user callbacks first so that they consistently happen before
                    // listen events.
                    js(n, e, i), Bs(n, e), n.sharedClientState.updateMutationState(e, "rejected", i), 
                    [ 4 /*yield*/ , Hs(n, o) ];

                  case 3:
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught up),
                    // so we raise user callbacks first so that they consistently happen before
                    // listen events.
                    return r.sent(), [ 3 /*break*/ , 6 ];

                  case 4:
                    return [ 4 /*yield*/ , di(r.sent()) ];

                  case 5:
                    return r.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Registers a user callback that resolves when all pending mutations at the moment of calling
     * are acknowledged .
     */ function Us(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i, o, s, u;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    Go((n = P$1(t)).remoteStore) || k("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), 
                    r.label = 1;

                  case 1:
                    return r.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , function(t) {
                        var e = P$1(t);
                        return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (function(t) {
                            return e._n.getHighestUnacknowledgedBatchId(t);
                        }));
                    }(n.localStore) ];

                  case 2:
                    return -1 === (i = r.sent()) ? [ 2 /*return*/ , void e.resolve() ] : ((o = n.Fo.get(i) || []).push(e), 
                    n.Fo.set(i, o), [ 3 /*break*/ , 4 ]);

                  case 3:
                    return s = r.sent(), u = cs(s, "Initialization of waitForPendingWrites() operation failed"), 
                    e.reject(u), [ 3 /*break*/ , 4 ];

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
     * if there are any.
     */ function Bs(t, e) {
        (t.Fo.get(e) || []).forEach((function(t) {
            t.resolve();
        })), t.Fo.delete(e)
        /** Reject all outstanding callbacks waiting for pending writes to complete. */;
    }

    function js(t, e, n) {
        var r = P$1(t), i = r.xo[r.currentUser.toKey()];
        // NOTE: Mutations restored from persistence won't have callbacks, so it's
        // okay for there to be no callback for this ID.
        if (i) {
            var o = i.get(e);
            o && (n ? o.reject(n) : o.resolve(), i = i.remove(e)), r.xo[r.currentUser.toKey()] = i;
        }
    }

    function Ks(t, e, n) {
        void 0 === n && (n = null), t.sharedClientState.removeLocalQueryTarget(e);
        for (var r = 0, i = t.Vo.get(e); r < i.length; r++) {
            var o = i[r];
            t.Po.delete(o), n && t.vo.Mo(o, n);
        }
        t.Vo.delete(e), t.isPrimaryClient && t.No.Zn(e).forEach((function(e) {
            t.No.containsKey(e) || 
            // We removed the last reference for this key
            Qs(t, e);
        }));
    }

    function Qs(t, e) {
        t.So.delete(e.path.canonicalString());
        // It's possible that the target already got removed because the query failed. In that case,
        // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
        var n = t.Do.get(e);
        null !== n && (Uo(t.remoteStore, n), t.Do = t.Do.remove(e), t.Co.delete(n), Ws(t));
    }

    function Gs(t, e, n) {
        for (var r = 0, i = n; r < i.length; r++) {
            var o = i[r];
            o instanceof Ss ? (t.No.addReference(o.key, e), zs(t, o)) : o instanceof Ns ? (k("SyncEngine", "Document no longer in limbo: " + o.key), 
            t.No.removeReference(o.key, e), t.No.containsKey(o.key) || 
            // We removed the last reference for this key
            Qs(t, o.key)) : L();
        }
    }

    function zs(t, e) {
        var n = e.key, r = n.path.canonicalString();
        t.Do.get(n) || t.So.has(r) || (k("SyncEngine", "New document in limbo: " + n), t.So.add(r), 
        Ws(t));
    }

    /**
     * Starts listens for documents in limbo that are enqueued for resolution,
     * subject to a maximum number of concurrent resolutions.
     *
     * Without bounding the number of concurrent resolutions, the server can fail
     * with "resource exhausted" errors which can lead to pathological client
     * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
     */ function Ws(t) {
        for (;t.So.size > 0 && t.Do.size < t.maxConcurrentLimboResolutions; ) {
            var e = t.So.values().next().value;
            t.So.delete(e);
            var n = new at(W.fromString(e)), r = t.ko.next();
            t.Co.set(r, new ks(n)), t.Do = t.Do.insert(n, r), qo(t.remoteStore, new Or(ee(Ht(n.path)), r, 2 /* LimboResolution */ , _.o));
        }
    }

    function Hs(t, e, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var o, s, u, a;
            return __generator(this, (function(c) {
                switch (c.label) {
                  case 0:
                    return o = P$1(t), s = [], u = [], a = [], o.Po.isEmpty() ? [ 3 /*break*/ , 3 ] : (o.Po.forEach((function(t, n) {
                        a.push(o.Oo(n, e, i).then((function(t) {
                            if (t) {
                                o.isPrimaryClient && o.sharedClientState.updateQueryState(n.targetId, t.fromCache ? "not-current" : "current"), 
                                s.push(t);
                                var e = Fi.Pn(n.targetId, t);
                                u.push(e);
                            }
                        })));
                    })), [ 4 /*yield*/ , Promise.all(a) ]);

                  case 1:
                    return c.sent(), o.vo._r(s), [ 4 /*yield*/ , function(t, e) {
                        return __awaiter(this, void 0, void 0, (function() {
                            var n, i, o, s, u, a, c, h, f;
                            return __generator(this, (function(r) {
                                switch (r.label) {
                                  case 0:
                                    n = P$1(t), r.label = 1;

                                  case 1:
                                    return r.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (function(t) {
                                        return br.forEach(e, (function(e) {
                                            return br.forEach(e.bn, (function(r) {
                                                return n.persistence.referenceDelegate.addReference(t, e.targetId, r);
                                            })).next((function() {
                                                return br.forEach(e.vn, (function(r) {
                                                    return n.persistence.referenceDelegate.removeReference(t, e.targetId, r);
                                                }));
                                            }));
                                        }));
                                    })) ];

                                  case 2:
                                    return r.sent(), [ 3 /*break*/ , 4 ];

                                  case 3:
                                    if (!Sr(i = r.sent())) throw i;
                                    // If `notifyLocalViewChanges` fails, we did not advance the sequence
                                    // number for the documents that were included in this transaction.
                                    // This might trigger them to be deleted earlier than they otherwise
                                    // would have, but it should not invalidate the integrity of the data.
                                                                    return k("LocalStore", "Failed to update sequence numbers: " + i), 
                                    [ 3 /*break*/ , 4 ];

                                  case 4:
                                    for (o = 0, s = e; o < s.length; o++) u = s[o], a = u.targetId, u.fromCache || (c = n.Fn.get(a), 
                                    h = c.snapshotVersion, f = c.withLastLimboFreeSnapshotVersion(h), 
                                    // Advance the last limbo free snapshot version
                                    n.Fn = n.Fn.insert(a, f));
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    }(o.localStore, u) ];

                  case 2:
                    c.sent(), c.label = 3;

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function Ys(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return (n = P$1(t)).currentUser.isEqual(e) ? [ 3 /*break*/ , 3 ] : (k("SyncEngine", "User change. New user:", e.toKey()), 
                    [ 4 /*yield*/ , Ui(n.localStore, e) ]);

                  case 1:
                    return i = r.sent(), n.currentUser = e, 
                    // Fails tasks waiting for pending writes requested by previous user.
                    function(t, e) {
                        t.Fo.forEach((function(t) {
                            t.forEach((function(t) {
                                t.reject(new N(S.CANCELLED, "'waitForPendingWrites' promise is rejected due to a user change."));
                            }));
                        })), t.Fo.clear();
                    }(n), 
                    // TODO(b/114226417): Consider calling this only in the primary tab.
                    n.sharedClientState.handleUserChange(e, i.removedBatchIds, i.addedBatchIds), [ 4 /*yield*/ , Hs(n, i.Ln) ];

                  case 2:
                    r.sent(), r.label = 3;

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function $s(t, e) {
        var n = P$1(t), r = n.Co.get(e);
        if (r && r.bo) return on().add(r.key);
        var i = on(), o = n.Vo.get(e);
        if (!o) return i;
        for (var s = 0, u = o; s < u.length; s++) {
            var a = u[s], c = n.Po.get(a);
            i = i.unionWith(c.view.wo);
        }
        return i;
    }

    /**
     * Reconcile the list of synced documents in an existing view with those
     * from persistence.
     */ function Xs(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i, o;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return [ 4 /*yield*/ , Hi((n = P$1(t)).localStore, e.query, 
                    /* usePreviousResults= */ !0) ];

                  case 1:
                    return i = r.sent(), o = e.view.Ao(i), [ 2 /*return*/ , (n.isPrimaryClient && Gs(n, e.targetId, o.To), 
                    o) ];
                }
            }));
        }));
    }

    /**
     * Retrieves newly changed documents from remote document cache and raises
     * snapshots if needed.
     */
    // PORTING NOTE: Multi-Tab only.
    function Js(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e;
            return __generator(this, (function(n) {
                return [ 2 /*return*/ , $i((e = P$1(t)).localStore).then((function(t) {
                    return Hs(e, t);
                })) ];
            }));
        }));
    }

    /** Applies a mutation state to an existing batch.  */
    // PORTING NOTE: Multi-Tab only.
    function Zs(t, e, i, o) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, s;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return [ 4 /*yield*/ , function(t, e) {
                        var n = P$1(t), r = P$1(n._n);
                        return n.persistence.runTransaction("Lookup mutation documents", "readonly", (function(t) {
                            return r.jt(t, e).next((function(e) {
                                return e ? n.Mn.pn(t, e) : br.resolve(null);
                            }));
                        }));
                    }((n = P$1(t)).localStore, e) ];

                  case 1:
                    return null === (s = r.sent()) ? [ 3 /*break*/ , 6 ] : "pending" !== i ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , Jo(n.remoteStore) ];

                  case 2:
                    // If we are the primary client, we need to send this write to the
                    // backend. Secondary clients will ignore these writes since their remote
                    // connection is disabled.
                    return r.sent(), [ 3 /*break*/ , 4 ];

                  case 3:
                    "acknowledged" === i || "rejected" === i ? (
                    // NOTE: Both these methods are no-ops for batches that originated from
                    // other clients.
                    js(n, e, o || null), Bs(n, e), function(t, e) {
                        P$1(P$1(t)._n).Gt(e);
                    }(n.localStore, e)) : L(), r.label = 4;

                  case 4:
                    return [ 4 /*yield*/ , Hs(n, s) ];

                  case 5:
                    return r.sent(), [ 3 /*break*/ , 7 ];

                  case 6:
                    // A throttled tab may not have seen the mutation before it was completed
                    // and removed from the mutation queue, in which case we won't have cached
                    // the affected documents. In this case we can safely ignore the update
                    // since that means we didn't apply the mutation locally at all (if we
                    // had, we would have cached the affected documents), and so we will just
                    // see any resulting document changes via normal remote document updates
                    // as applicable.
                    k("SyncEngine", "Cannot apply mutation batch with id: " + e), r.label = 7;

                  case 7:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    function tu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i, o, s, u, a, c, h;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return su(n = P$1(t)), uu(n), !0 !== e || !0 === n.$o ? [ 3 /*break*/ , 3 ] : (i = n.sharedClientState.getAllActiveQueryTargets(), 
                    [ 4 /*yield*/ , eu(n, i.toArray()) ]);

                  case 1:
                    return o = r.sent(), n.$o = !0, [ 4 /*yield*/ , os(n.remoteStore, !0) ];

                  case 2:
                    for (r.sent(), s = 0, u = o; s < u.length; s++) a = u[s], qo(n.remoteStore, a);
                    return [ 3 /*break*/ , 7 ];

                  case 3:
                    return !1 !== e || !1 === n.$o ? [ 3 /*break*/ , 7 ] : (c = [], h = Promise.resolve(), 
                    n.Vo.forEach((function(t, e) {
                        n.sharedClientState.isLocalQueryTarget(e) ? c.push(e) : h = h.then((function() {
                            return Ks(n, e), Wi(n.localStore, e, 
                            /*keepPersistedTargetData=*/ !0);
                        })), Uo(n.remoteStore, e);
                    })), [ 4 /*yield*/ , h ]);

                  case 4:
                    return r.sent(), [ 4 /*yield*/ , eu(n, c) ];

                  case 5:
                    return r.sent(), 
                    // PORTING NOTE: Multi-Tab only.
                    function(t) {
                        var e = P$1(t);
                        e.Co.forEach((function(t, n) {
                            Uo(e.remoteStore, n);
                        })), e.No.ts(), e.Co = new Map, e.Do = new ze(at.comparator);
                    }(n), n.$o = !1, [ 4 /*yield*/ , os(n.remoteStore, !1) ];

                  case 6:
                    r.sent(), r.label = 7;

                  case 7:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function eu(t, e, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, i, o, s, u, a, c, h, f, l, d, p, y, v;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    n = P$1(t), i = [], o = [], s = 0, u = e, r.label = 1;

                  case 1:
                    return s < u.length ? (a = u[s], c = void 0, (h = n.Vo.get(a)) && 0 !== h.length ? [ 4 /*yield*/ , zi(n.localStore, ee(h[0])) ] : [ 3 /*break*/ , 7 ]) : [ 3 /*break*/ , 13 ];

                  case 2:
                    // For queries that have a local View, we fetch their current state
                    // from LocalStore (as the resume token and the snapshot version
                    // might have changed) and reconcile their views with the persisted
                    // state (the list of syncedDocuments may have gotten out of sync).
                    c = r.sent(), f = 0, l = h, r.label = 3;

                  case 3:
                    return f < l.length ? (d = l[f], p = n.Po.get(d), [ 4 /*yield*/ , Xs(n, p) ]) : [ 3 /*break*/ , 6 ];

                  case 4:
                    (y = r.sent()).snapshot && o.push(y.snapshot), r.label = 5;

                  case 5:
                    return f++, [ 3 /*break*/ , 3 ];

                  case 6:
                    return [ 3 /*break*/ , 11 ];

                  case 7:
                    return [ 4 /*yield*/ , Yi(n.localStore, a) ];

                  case 8:
                    return v = r.sent(), [ 4 /*yield*/ , zi(n.localStore, v) ];

                  case 9:
                    return c = r.sent(), [ 4 /*yield*/ , Rs(n, nu(v), a, 
                    /*current=*/ !1) ];

                  case 10:
                    r.sent(), r.label = 11;

                  case 11:
                    i.push(c), r.label = 12;

                  case 12:
                    return s++, [ 3 /*break*/ , 1 ];

                  case 13:
                    return [ 2 /*return*/ , (n.vo._r(o), i) ];
                }
            }));
        }));
    }

    /**
     * Creates a `Query` object from the specified `Target`. There is no way to
     * obtain the original `Query`, so we synthesize a `Query` from the `Target`
     * object.
     *
     * The synthesized result might be different from the original `Query`, but
     * since the synthesized `Query` should return the same results as the
     * original one (only the presentation of results might differ), the potential
     * difference will not cause issues.
     */
    // PORTING NOTE: Multi-Tab only.
    function nu(t) {
        return Wt(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
    }

    /** Returns the IDs of the clients that are currently active. */
    // PORTING NOTE: Multi-Tab only.
    function ru(t) {
        var e = P$1(t);
        return P$1(P$1(e.localStore).persistence).fn();
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    function iu(t, e, i, o) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, s, u;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return (n = P$1(t)).$o ? (
                    // If we receive a target state notification via WebStorage, we are
                    // either already secondary or another tab has taken the primary lease.
                    k("SyncEngine", "Ignoring unexpected query state notification."), [ 3 /*break*/ , 8 ]) : [ 3 /*break*/ , 1 ];

                  case 1:
                    if (!n.Vo.has(e)) return [ 3 /*break*/ , 8 ];
                    switch (i) {
                      case "current":
                      case "not-current":
                        return [ 3 /*break*/ , 2 ];

                      case "rejected":
                        return [ 3 /*break*/ , 5 ];
                    }
                    return [ 3 /*break*/ , 7 ];

                  case 2:
                    return [ 4 /*yield*/ , $i(n.localStore) ];

                  case 3:
                    return s = r.sent(), u = an.createSynthesizedRemoteEventForCurrentChange(e, "current" === i), 
                    [ 4 /*yield*/ , Hs(n, s, u) ];

                  case 4:
                    return r.sent(), [ 3 /*break*/ , 8 ];

                  case 5:
                    return [ 4 /*yield*/ , Wi(n.localStore, e, 
                    /* keepPersistedTargetData */ !0) ];

                  case 6:
                    return r.sent(), Ks(n, e, o), [ 3 /*break*/ , 8 ];

                  case 7:
                    L(), r.label = 8;

                  case 8:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /** Adds or removes Watch targets for queries from different tabs. */ function ou(t, e, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, o, s, u, a, c, h, f, l, d;
            return __generator(this, (function(p) {
                switch (p.label) {
                  case 0:
                    if (!(n = su(t)).$o) return [ 3 /*break*/ , 10 ];
                    o = 0, s = e, p.label = 1;

                  case 1:
                    return o < s.length ? (u = s[o], n.Vo.has(u) ? (
                    // A target might have been added in a previous attempt
                    k("SyncEngine", "Adding an already active target " + u), [ 3 /*break*/ , 5 ]) : [ 4 /*yield*/ , Yi(n.localStore, u) ]) : [ 3 /*break*/ , 6 ];

                  case 2:
                    return a = p.sent(), [ 4 /*yield*/ , zi(n.localStore, a) ];

                  case 3:
                    return c = p.sent(), [ 4 /*yield*/ , Rs(n, nu(a), c.targetId, 
                    /*current=*/ !1) ];

                  case 4:
                    p.sent(), qo(n.remoteStore, c), p.label = 5;

                  case 5:
                    return o++, [ 3 /*break*/ , 1 ];

                  case 6:
                    h = function(t) {
                        return __generator(this, (function(e) {
                            switch (e.label) {
                              case 0:
                                return n.Vo.has(t) ? [ 4 /*yield*/ , Wi(n.localStore, t, 
                                /* keepPersistedTargetData */ !1).then((function() {
                                    Uo(n.remoteStore, t), Ks(n, t);
                                })).catch(di) ] : [ 3 /*break*/ , 2 ];

                                // Release queries that are still active.
                                                          case 1:
                                // Release queries that are still active.
                                e.sent(), e.label = 2;

                              case 2:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }, f = 0, l = i, p.label = 7;

                  case 7:
                    return f < l.length ? (d = l[f], [ 5 /*yield**/ , h(d) ]) : [ 3 /*break*/ , 10 ];

                  case 8:
                    p.sent(), p.label = 9;

                  case 9:
                    return f++, [ 3 /*break*/ , 7 ];

                  case 10:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function su(t) {
        var e = P$1(t);
        return e.remoteStore.remoteSyncer.applyRemoteEvent = Ps.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = $s.bind(null, e), 
        e.remoteStore.remoteSyncer.rejectListen = Ms.bind(null, e), e.vo._r = ms.bind(null, e.eventManager), 
        e.vo.Mo = gs.bind(null, e.eventManager), e;
    }

    function uu(t) {
        var e = P$1(t);
        return e.remoteStore.remoteSyncer.applySuccessfulWrite = Vs.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = qs.bind(null, e), 
        e
        /**
     * Loads a Firestore bundle into the SDK. The returned promise resolves when
     * the bundle finished loading.
     *
     * @param syncEngine - SyncEngine to use.
     * @param bundleReader - Bundle to load into the SDK.
     * @param task - LoadBundleTask used to update the loading progress to public API.
     */;
    }

    var cu = /** @class */ function() {
        function t() {
            this.synchronizeTabs = !1;
        }
        return t.prototype.initialize = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return this.R = ko(t.databaseInfo.databaseId), this.sharedClientState = this.Bo(t), 
                        this.persistence = this.qo(t), [ 4 /*yield*/ , this.persistence.start() ];

                      case 1:
                        return e.sent(), this.gcScheduler = this.Uo(t), this.localStore = this.Ko(t), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.Uo = function(t) {
            return null;
        }, t.prototype.Ko = function(t) {
            return qi(this.persistence, new Mi, t.initialUser, this.R);
        }, t.prototype.qo = function(t) {
            return new uo(co.bs, this.R);
        }, t.prototype.Bo = function(t) {
            return new Io;
        }, t.prototype.terminate = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.gcScheduler && this.gcScheduler.stop(), [ 4 /*yield*/ , this.sharedClientState.shutdown() ];

                      case 1:
                        return t.sent(), [ 4 /*yield*/ , this.persistence.shutdown() ];

                      case 2:
                        return t.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t;
    }(), hu = /** @class */ function(e) {
        function i(t, n, r) {
            var i = this;
            return (i = e.call(this) || this).Qo = t, i.cacheSizeBytes = n, i.forceOwnership = r, 
            i.synchronizeTabs = !1, i;
        }
        return __extends$1(i, e), i.prototype.initialize = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return [ 4 /*yield*/ , e.prototype.initialize.call(this, t) ];

                      case 1:
                        return n.sent(), [ 4 /*yield*/ , Xi(this.localStore) ];

                      case 2:
                        return n.sent(), [ 4 /*yield*/ , this.Qo.initialize(this, t) ];

                      case 3:
                        // Enqueue writes from a previous session
                        return n.sent(), [ 4 /*yield*/ , uu(this.Qo.syncEngine) ];

                      case 4:
                        // Enqueue writes from a previous session
                        return n.sent(), [ 4 /*yield*/ , Jo(this.Qo.remoteStore) ];

                      case 5:
                        return n.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, i.prototype.Ko = function(t) {
            return qi(this.persistence, new Mi, t.initialUser, this.R);
        }, i.prototype.Uo = function(t) {
            var e = this.persistence.referenceDelegate.garbageCollector;
            return new vi(e, t.asyncQueue);
        }, i.prototype.qo = function(t) {
            var e = Li(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey), n = void 0 !== this.cacheSizeBytes ? ti.withCacheSize(this.cacheSizeBytes) : ti.DEFAULT;
            return new Ci(this.synchronizeTabs, e, t.clientId, n, t.asyncQueue, Do(), Ao(), this.R, this.sharedClientState, !!this.forceOwnership);
        }, i.prototype.Bo = function(t) {
            return new Io;
        }, i;
    }(cu), fu = /** @class */ function(e) {
        function i(t, n) {
            var r = this;
            return (r = e.call(this, t, n, /* forceOwnership= */ !1) || this).Qo = t, r.cacheSizeBytes = n, 
            r.synchronizeTabs = !0, r;
        }
        return __extends$1(i, e), i.prototype.initialize = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var i, o = this;
                return __generator(this, (function(s) {
                    switch (s.label) {
                      case 0:
                        return [ 4 /*yield*/ , e.prototype.initialize.call(this, t) ];

                      case 1:
                        return s.sent(), i = this.Qo.syncEngine, this.sharedClientState instanceof bo ? (this.sharedClientState.syncEngine = {
                            ui: Zs.bind(null, i),
                            ai: iu.bind(null, i),
                            hi: ou.bind(null, i),
                            fn: ru.bind(null, i),
                            ci: Js.bind(null, i)
                        }, [ 4 /*yield*/ , this.sharedClientState.start() ]) : [ 3 /*break*/ , 3 ];

                      case 2:
                        s.sent(), s.label = 3;

                      case 3:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return [ 4 /*yield*/ , this.persistence.He((function(t) {
                            return __awaiter(o, void 0, void 0, (function() {
                                return __generator(this, (function(e) {
                                    switch (e.label) {
                                      case 0:
                                        return [ 4 /*yield*/ , tu(this.Qo.syncEngine, t) ];

                                      case 1:
                                        return e.sent(), this.gcScheduler && (t && !this.gcScheduler.started ? this.gcScheduler.start(this.localStore) : t || this.gcScheduler.stop()), 
                                        [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        })) ];

                      case 4:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return s.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, i.prototype.Bo = function(t) {
            var e = Do();
            if (!bo.yt(e)) throw new N(S.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
            var n = Li(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey);
            return new bo(e, t.asyncQueue, n, t.clientId, t.initialUser);
        }, i;
    }(hu), lu = /** @class */ function() {
        function t() {}
        return t.prototype.initialize = function(t, e) {
            return __awaiter(this, void 0, void 0, (function() {
                var n = this;
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return this.localStore ? [ 3 /*break*/ , 2 ] : (this.localStore = t.localStore, 
                        this.sharedClientState = t.sharedClientState, this.datastore = this.createDatastore(e), 
                        this.remoteStore = this.createRemoteStore(e), this.eventManager = this.createEventManager(e), 
                        this.syncEngine = this.createSyncEngine(e, 
                        /* startAsPrimary=*/ !t.synchronizeTabs), this.sharedClientState.onlineStateHandler = function(t) {
                            return Fs(n.syncEngine, t, 1 /* SharedClientState */);
                        }, this.remoteStore.remoteSyncer.handleCredentialChange = Ys.bind(null, this.syncEngine), 
                        [ 4 /*yield*/ , os(this.remoteStore, this.syncEngine.isPrimaryClient) ]);

                      case 1:
                        r.sent(), r.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.createEventManager = function(t) {
            return new ps;
        }, t.prototype.createDatastore = function(t) {
            var e, n = ko(t.databaseInfo.databaseId), r = (e = t.databaseInfo, new No(e));
            /** Return the Platform-specific connectivity monitor. */ return function(t, e, n) {
                return new Oo(t, e, n);
            }(t.credentials, r, n);
        }, t.prototype.createRemoteStore = function(t) {
            var e, n, r, i, o, s = this;
            return e = this.localStore, n = this.datastore, r = t.asyncQueue, i = function(t) {
                return Fs(s.syncEngine, t, 0 /* RemoteStore */);
            }, o = To.yt() ? new To : new Eo, new Fo(e, n, r, i, o);
        }, t.prototype.createSyncEngine = function(t, e) {
            return function(t, e, n, 
            // PORTING NOTE: Manages state synchronization in multi-tab environments.
            r, i, o, s) {
                var u = new Cs(t, e, n, r, i, o);
                return s && (u.$o = !0), u;
            }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t.initialUser, t.maxConcurrentLimboResolutions, e);
        }, t.prototype.terminate = function() {
            return function(t) {
                return __awaiter(this, void 0, void 0, (function() {
                    var e;
                    return __generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            return e = P$1(t), k("RemoteStore", "RemoteStore shutting down."), e.Or.add(5 /* Shutdown */), 
                            [ 4 /*yield*/ , Vo(e) ];

                          case 1:
                            return n.sent(), e.Lr.shutdown(), 
                            // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                            // triggering spurious listener events with cached data, etc.
                            e.Br.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
                        }
                    }));
                }));
            }(this.remoteStore);
        }, t;
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /*
     * A wrapper implementation of Observer<T> that will dispatch events
     * asynchronously. To allow immediate silencing, a mute call is added which
     * causes events scheduled to no longer be raised.
     */ var pu = /** @class */ function() {
        function t(t) {
            this.observer = t, 
            /**
                 * When set to true, will not raise future events. Necessary to deal with
                 * async detachment of listener.
                 */
            this.muted = !1;
        }
        return t.prototype.next = function(t) {
            this.observer.next && this.jo(this.observer.next, t);
        }, t.prototype.error = function(t) {
            this.observer.error ? this.jo(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
        }, t.prototype.Wo = function() {
            this.muted = !0;
        }, t.prototype.jo = function(t, e) {
            var n = this;
            this.muted || setTimeout((function() {
                n.muted || t(e);
            }), 0);
        }, t;
    }(), vu = /** @class */ function() {
        function t(t) {
            this.datastore = t, 
            // The version of each document that was read during this transaction.
            this.readVersions = new Map, this.mutations = [], this.committed = !1, 
            /**
                 * A deferred usage error that occurred previously in this transaction that
                 * will cause the transaction to fail once it actually commits.
                 */
            this.lastWriteError = null, 
            /**
                 * Set of documents that have been written in the transaction.
                 *
                 * When there's more than one write to the same key in a transaction, any
                 * writes after the first are handled differently.
                 */
            this.writtenDocs = new Set;
        }
        return t.prototype.lookup = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, i = this;
                return __generator(this, (function(o) {
                    switch (o.label) {
                      case 0:
                        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new N(S.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                        return [ 4 /*yield*/ , function(t, e) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var n, i, o, s, u, a;
                                return __generator(this, (function(r) {
                                    switch (r.label) {
                                      case 0:
                                        return n = P$1(t), i = Cn(n.R) + "/documents", o = {
                                            documents: e.map((function(t) {
                                                return Nn(n.R, t);
                                            }))
                                        }, [ 4 /*yield*/ , n.$i("BatchGetDocuments", i, o) ];

                                      case 1:
                                        return s = r.sent(), u = new Map, s.forEach((function(t) {
                                            var e = function(t, e) {
                                                return "found" in e ? function(t, e) {
                                                    O(!!e.found), e.found.name, e.found.updateTime;
                                                    var n = Dn(t, e.found.name), r = Tn(e.found.updateTime), i = new Tt({
                                                        mapValue: {
                                                            fields: e.found.fields
                                                        }
                                                    });
                                                    return St.newFoundDocument(n, r, i);
                                                }(t, e) : "missing" in e ? function(t, e) {
                                                    O(!!e.missing), O(!!e.readTime);
                                                    var n = Dn(t, e.missing), r = Tn(e.readTime);
                                                    return St.newNoDocument(n, r);
                                                }(t, e) : L();
                                            }(n.R, t);
                                            u.set(e.key.toString(), e);
                                        })), a = [], [ 2 /*return*/ , (e.forEach((function(t) {
                                            var e = u.get(t.toString());
                                            O(!!e), a.push(e);
                                        })), a) ];
                                    }
                                }));
                            }));
                        }(this.datastore, t) ];

                      case 1:
                        return [ 2 /*return*/ , ((e = o.sent()).forEach((function(t) {
                            return i.recordVersion(t);
                        })), e) ];
                    }
                }));
            }));
        }, t.prototype.set = function(t, e) {
            this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
        }, t.prototype.update = function(t, e) {
            try {
                this.write(e.toMutation(t, this.preconditionForUpdate(t)));
            } catch (t) {
                this.lastWriteError = t;
            }
            this.writtenDocs.add(t.toString());
        }, t.prototype.delete = function(t) {
            this.write(new Be(t, this.precondition(t))), this.writtenDocs.add(t.toString());
        }, t.prototype.commit = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e = this;
                return __generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;
                        return t = this.readVersions, 
                        // For each mutation, note that the doc was written.
                        this.mutations.forEach((function(e) {
                            t.delete(e.key.toString());
                        })), 
                        // For each document that was read but not written to, we want to perform
                        // a `verify` operation.
                        t.forEach((function(t, n) {
                            var r = at.fromPath(n);
                            e.mutations.push(new je(r, e.precondition(r)));
                        })), [ 4 /*yield*/ , function(t, e) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var n, i, o;
                                return __generator(this, (function(r) {
                                    switch (r.label) {
                                      case 0:
                                        return n = P$1(t), i = Cn(n.R) + "/documents", o = {
                                            writes: e.map((function(t) {
                                                return On(n.R, t);
                                            }))
                                        }, [ 4 /*yield*/ , n.Ni("Commit", i, o) ];

                                      case 1:
                                        return r.sent(), [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        }(this.datastore, this.mutations) ];

                      case 1:
                        // For each mutation, note that the doc was written.
                        return i.sent(), this.committed = !0, [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.recordVersion = function(t) {
            var e;
            if (t.isFoundDocument()) e = t.version; else {
                if (!t.isNoDocument()) throw L();
                // For deleted docs, we must use baseVersion 0 when we overwrite them.
                            e = j.min();
            }
            var n = this.readVersions.get(t.key.toString());
            if (n) {
                if (!e.isEqual(n)) 
                // This transaction will fail no matter what.
                throw new N(S.ABORTED, "Document version changed between two reads.");
            } else this.readVersions.set(t.key.toString(), e);
        }, 
        /**
         * Returns the version of this document when it was read in this transaction,
         * as a precondition, or no precondition if it was not read.
         */
        t.prototype.precondition = function(t) {
            var e = this.readVersions.get(t.toString());
            return !this.writtenDocs.has(t.toString()) && e ? Ne.updateTime(e) : Ne.none();
        }, 
        /**
         * Returns the precondition for a document if the operation is an update.
         */
        t.prototype.preconditionForUpdate = function(t) {
            var e = this.readVersions.get(t.toString());
            // The first time a document is written, we want to take into account the
            // read time and existence
                    if (!this.writtenDocs.has(t.toString()) && e) {
                if (e.isEqual(j.min())) 
                // The document doesn't exist, so fail the transaction.
                // This has to be validated locally because you can't send a
                // precondition that a document does not exist without changing the
                // semantics of the backend write to be an insert. This is the reverse
                // of what we want, since we want to assert that the document doesn't
                // exist but then send the update and have it fail. Since we can't
                // express that to the backend, we have to validate locally.
                // Note: this can change once we can send separate verify writes in the
                // transaction.
                throw new N(S.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
                // Document exists, base precondition on document update time.
                            return Ne.updateTime(e);
            }
            // Document was not read, so we just use the preconditions for a blind
            // update.
                    return Ne.exists(!0);
        }, t.prototype.write = function(t) {
            this.ensureCommitNotCalled(), this.mutations.push(t);
        }, t.prototype.ensureCommitNotCalled = function() {}, t;
    }(), mu = /** @class */ function() {
        function t(t, e, n, r) {
            this.asyncQueue = t, this.datastore = e, this.updateFunction = n, this.deferred = r, 
            this.ec = 5, this.Zi = new Co(this.asyncQueue, "transaction_retry" /* TransactionRetry */)
            /** Runs the transaction and sets the result on deferred. */;
        }
        return t.prototype.run = function() {
            this.ec -= 1, this.nc();
        }, t.prototype.nc = function() {
            var t = this;
            this.Zi.ji((function() {
                return __awaiter(t, void 0, void 0, (function() {
                    var t, e, n = this;
                    return __generator(this, (function(r) {
                        return t = new vu(this.datastore), (e = this.sc(t)) && e.then((function(e) {
                            n.asyncQueue.enqueueAndForget((function() {
                                return t.commit().then((function() {
                                    n.deferred.resolve(e);
                                })).catch((function(t) {
                                    n.ic(t);
                                }));
                            }));
                        })).catch((function(t) {
                            n.ic(t);
                        })), [ 2 /*return*/ ];
                    }));
                }));
            }));
        }, t.prototype.sc = function(t) {
            try {
                var e = this.updateFunction(t);
                return !ot(e) && e.catch && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), 
                null);
            } catch (t) {
                // Do not retry errors thrown by user provided updateFunction.
                return this.deferred.reject(t), null;
            }
        }, t.prototype.ic = function(t) {
            var e = this;
            this.ec > 0 && this.rc(t) ? (this.ec -= 1, this.asyncQueue.enqueueAndForget((function() {
                return e.nc(), Promise.resolve();
            }))) : this.deferred.reject(t);
        }, t.prototype.rc = function(t) {
            if ("FirebaseError" === t.name) {
                // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
                // non-matching document versions with ABORTED. These errors should be retried.
                var e = t.code;
                return "aborted" === e || "failed-precondition" === e || !Qe(e);
            }
            return !1;
        }, t;
    }(), gu = /** @class */ function() {
        function t(t, 
        /**
         * Asynchronous queue responsible for all of our internal processing. When
         * we get incoming work from the user (via public API) or the network
         * (incoming GRPC messages), we should always schedule onto this queue.
         * This ensures all of our work is properly serialized (e.g. we don't
         * start processing a new operation while the previous one is waiting for
         * an async I/O to complete).
         */
        e, i) {
            var o = this;
            this.credentials = t, this.asyncQueue = e, this.databaseInfo = i, this.user = ho.UNAUTHENTICATED, 
            this.clientId = M.u(), this.credentialListener = function() {
                return Promise.resolve();
            }, this.credentials.setChangeListener(e, (function(t) {
                return __awaiter(o, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        switch (e.label) {
                          case 0:
                            return k("FirestoreClient", "Received user=", t.uid), [ 4 /*yield*/ , this.credentialListener(t) ];

                          case 1:
                            return e.sent(), this.user = t, [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }
        return t.prototype.getConfiguration = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    return [ 2 /*return*/ , {
                        asyncQueue: this.asyncQueue,
                        databaseInfo: this.databaseInfo,
                        clientId: this.clientId,
                        credentials: this.credentials,
                        initialUser: this.user,
                        maxConcurrentLimboResolutions: 100
                    } ];
                }));
            }));
        }, t.prototype.setCredentialChangeListener = function(t) {
            this.credentialListener = t;
        }, 
        /**
         * Checks that the client has not been terminated. Ensures that other methods on
         * this class cannot be called after the client is terminated.
         */
        t.prototype.verifyNotTerminated = function() {
            if (this.asyncQueue.isShuttingDown) throw new N(S.FAILED_PRECONDITION, "The client has already been terminated.");
        }, t.prototype.terminate = function() {
            var t = this;
            this.asyncQueue.enterRestrictedMode();
            var e = new wr;
            return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((function() {
                return __awaiter(t, void 0, void 0, (function() {
                    var t, n;
                    return __generator(this, (function(r) {
                        switch (r.label) {
                          case 0:
                            return r.trys.push([ 0, 5, , 6 ]), this.onlineComponents ? [ 4 /*yield*/ , this.onlineComponents.terminate() ] : [ 3 /*break*/ , 2 ];

                          case 1:
                            r.sent(), r.label = 2;

                          case 2:
                            return this.offlineComponents ? [ 4 /*yield*/ , this.offlineComponents.terminate() ] : [ 3 /*break*/ , 4 ];

                          case 3:
                            r.sent(), r.label = 4;

                          case 4:
                            // `removeChangeListener` must be called after shutting down the
                            // RemoteStore as it will prevent the RemoteStore from retrieving
                            // auth tokens.
                            return this.credentials.removeChangeListener(), e.resolve(), [ 3 /*break*/ , 6 ];

                          case 5:
                            return t = r.sent(), n = cs(t, "Failed to shutdown persistence"), e.reject(n), [ 3 /*break*/ , 6 ];

                          case 6:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), e.promise;
        }, t;
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class representing a bundle.
     *
     * Takes a bundle stream or buffer, and presents abstractions to read bundled
     * elements out of the underlying content.
     */ function wu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var i, o, s = this;
            return __generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return t.asyncQueue.verifyOperationInProgress(), k("FirestoreClient", "Initializing OfflineComponentProvider"), 
                    [ 4 /*yield*/ , t.getConfiguration() ];

                  case 1:
                    return i = u.sent(), [ 4 /*yield*/ , e.initialize(i) ];

                  case 2:
                    return u.sent(), o = i.initialUser, t.setCredentialChangeListener((function(t) {
                        return __awaiter(s, void 0, void 0, (function() {
                            return __generator(this, (function(n) {
                                switch (n.label) {
                                  case 0:
                                    return o.isEqual(t) ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , Ui(e.localStore, t) ];

                                  case 1:
                                    n.sent(), o = t, n.label = 2;

                                  case 2:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    })), 
                    // When a user calls clearPersistence() in one client, all other clients
                    // need to be terminated to allow the delete to succeed.
                    e.persistence.setDatabaseDeletedListener((function() {
                        return t.terminate();
                    })), t.offlineComponents = e, [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function bu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var i, o;
            return __generator(this, (function(s) {
                switch (s.label) {
                  case 0:
                    return t.asyncQueue.verifyOperationInProgress(), [ 4 /*yield*/ , Iu(t) ];

                  case 1:
                    return i = s.sent(), k("FirestoreClient", "Initializing OnlineComponentProvider"), 
                    [ 4 /*yield*/ , t.getConfiguration() ];

                  case 2:
                    return o = s.sent(), [ 4 /*yield*/ , e.initialize(i, o) ];

                  case 3:
                    return s.sent(), 
                    // The CredentialChangeListener of the online component provider takes
                    // precedence over the offline component provider.
                    t.setCredentialChangeListener((function(t) {
                        return function(t, e) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var n, i;
                                return __generator(this, (function(r) {
                                    switch (r.label) {
                                      case 0:
                                        return (n = P$1(t)).asyncQueue.verifyOperationInProgress(), k("RemoteStore", "RemoteStore received new credentials"), 
                                        i = Go(n), 
                                        // Tear down and re-create our network streams. This will ensure we get a
                                        // fresh auth token for the new user and re-fill the write pipeline with
                                        // new mutations from the LocalStore (since mutations are per-user).
                                        n.Or.add(3 /* CredentialChange */), [ 4 /*yield*/ , Vo(n) ];

                                      case 1:
                                        return r.sent(), i && 
                                        // Don't set the network status to Unknown if we are offline.
                                        n.Br.set("Unknown" /* Unknown */), [ 4 /*yield*/ , n.remoteSyncer.handleCredentialChange(e) ];

                                      case 2:
                                        return r.sent(), n.Or.delete(3 /* CredentialChange */), [ 4 /*yield*/ , Mo(n) ];

                                      case 3:
                                        // Tear down and re-create our network streams. This will ensure we get a
                                        // fresh auth token for the new user and re-fill the write pipeline with
                                        // new mutations from the LocalStore (since mutations are per-user).
                                        return r.sent(), [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        }(e.remoteStore, t);
                    })), t.onlineComponents = e, [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function Iu(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return t.offlineComponents ? [ 3 /*break*/ , 2 ] : (k("FirestoreClient", "Using default OfflineComponentProvider"), 
                    [ 4 /*yield*/ , wu(t, new cu) ]);

                  case 1:
                    e.sent(), e.label = 2;

                  case 2:
                    return [ 2 /*return*/ , t.offlineComponents ];
                }
            }));
        }));
    }

    function Eu(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return t.onlineComponents ? [ 3 /*break*/ , 2 ] : (k("FirestoreClient", "Using default OnlineComponentProvider"), 
                    [ 4 /*yield*/ , bu(t, new lu) ]);

                  case 1:
                    e.sent(), e.label = 2;

                  case 2:
                    return [ 2 /*return*/ , t.onlineComponents ];
                }
            }));
        }));
    }

    function Tu(t) {
        return Iu(t).then((function(t) {
            return t.persistence;
        }));
    }

    function _u(t) {
        return Iu(t).then((function(t) {
            return t.localStore;
        }));
    }

    function Su(t) {
        return Eu(t).then((function(t) {
            return t.remoteStore;
        }));
    }

    function Nu(t) {
        return Eu(t).then((function(t) {
            return t.syncEngine;
        }));
    }

    function Du(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, n;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return [ 4 /*yield*/ , Eu(t) ];

                  case 1:
                    return e = r.sent(), [ 2 /*return*/ , ((n = e.eventManager).onListen = xs.bind(null, e.syncEngine), 
                    n.onUnlisten = Ls.bind(null, e.syncEngine), n) ];
                }
            }));
        }));
    }

    /** Enables the network connection and re-enqueues all pending operations. */ function Au(t, e, i) {
        var o = this;
        void 0 === i && (i = {});
        var s = new wr;
        return t.asyncQueue.enqueueAndForget((function() {
            return __awaiter(o, void 0, void 0, (function() {
                var n;
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return n = function(t, e, n, r, i) {
                            var o = new pu({
                                next: function(o) {
                                    // Remove query first before passing event to user to avoid
                                    // user actions affecting the now stale query.
                                    e.enqueueAndForget((function() {
                                        return vs(t, s);
                                    }));
                                    var u = o.docs.has(n);
                                    !u && o.fromCache ? 
                                    // TODO(dimond): If we're online and the document doesn't
                                    // exist then we resolve with a doc.exists set to false. If
                                    // we're offline however, we reject the Promise in this
                                    // case. Two options: 1) Cache the negative response from
                                    // the server so we can deliver that even when you're
                                    // offline 2) Actually reject the Promise in the online case
                                    // if the document doesn't exist.
                                    i.reject(new N(S.UNAVAILABLE, "Failed to get document because the client is offline.")) : u && o.fromCache && r && "server" === r.source ? i.reject(new N(S.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(o);
                                },
                                error: function(t) {
                                    return i.reject(t);
                                }
                            }), s = new bs(Ht(n.path), o, {
                                includeMetadataChanges: !0,
                                so: !0
                            });
                            return ys(t, s);
                        }, [ 4 /*yield*/ , Du(t) ];

                      case 1:
                        return [ 2 /*return*/ , n.apply(void 0, [ r.sent(), t.asyncQueue, e, i, s ]) ];
                    }
                }));
            }));
        })), s.promise;
    }

    function ku(t, e, i) {
        var o = this;
        void 0 === i && (i = {});
        var s = new wr;
        return t.asyncQueue.enqueueAndForget((function() {
            return __awaiter(o, void 0, void 0, (function() {
                var n;
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return n = function(t, e, n, r, i) {
                            var o = new pu({
                                next: function(n) {
                                    // Remove query first before passing event to user to avoid
                                    // user actions affecting the now stale query.
                                    e.enqueueAndForget((function() {
                                        return vs(t, s);
                                    })), n.fromCache && "server" === r.source ? i.reject(new N(S.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                                },
                                error: function(t) {
                                    return i.reject(t);
                                }
                            }), s = new bs(n, o, {
                                includeMetadataChanges: !0,
                                so: !0
                            });
                            return ys(t, s);
                        }, [ 4 /*yield*/ , Du(t) ];

                      case 1:
                        return [ 2 /*return*/ , n.apply(void 0, [ r.sent(), t.asyncQueue, e, i, s ]) ];
                    }
                }));
            }));
        })), s.promise;
    }

    var Cu = 
    /**
         * Constructs a DatabaseInfo using the provided host, databaseId and
         * persistenceKey.
         *
         * @param databaseId - The database to use.
         * @param appId - The Firebase App Id.
         * @param persistenceKey - A unique identifier for this Firestore's local
         * storage (used in conjunction with the databaseId).
         * @param host - The Firestore backend host to connect to.
         * @param ssl - Whether to use SSL when connecting.
         * @param forceLongPolling - Whether to use the forceLongPolling option
         * when using WebChannel as the network transport.
         * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
         * option when using WebChannel as the network transport.
         * @param useFetchStreams Whether to use the Fetch API instead of
         * XMLHTTPRequest
         */
    function(t, e, n, r, i, o, s, u) {
        this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = i, 
        this.forceLongPolling = o, this.autoDetectLongPolling = s, this.useFetchStreams = u;
    }, xu = /** @class */ function() {
        function t(t, e) {
            this.projectId = t, this.database = e || "(default)";
        }
        return Object.defineProperty(t.prototype, "isDefaultDatabase", {
            get: function() {
                return "(default)" === this.database;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(e) {
            return e instanceof t && e.projectId === this.projectId && e.database === this.database;
        }, t;
    }(), Ru = new Map, Lu = function(t, e) {
        this.user = e, this.type = "OAuth", this.authHeaders = {}, 
        // Set the headers using Object Literal notation to avoid minification
        this.authHeaders.Authorization = "Bearer " + t;
    }, Ou = /** @class */ function() {
        function t() {
            /**
             * Stores the listener registered with setChangeListener()
             * This isn't actually necessary since the UID never changes, but we use this
             * to verify the listen contract is adhered to in tests.
             */
            this.changeListener = null;
        }
        return t.prototype.getToken = function() {
            return Promise.resolve(null);
        }, t.prototype.invalidateToken = function() {}, t.prototype.setChangeListener = function(t, e) {
            this.changeListener = e, 
            // Fire with initial user.
            t.enqueueRetryable((function() {
                return e(ho.UNAUTHENTICATED);
            }));
        }, t.prototype.removeChangeListener = function() {
            this.changeListener = null;
        }, t;
    }(), Pu = /** @class */ function() {
        function t(t) {
            this.token = t, 
            /**
                 * Stores the listener registered with setChangeListener()
                 * This isn't actually necessary since the UID never changes, but we use this
                 * to verify the listen contract is adhered to in tests.
                 */
            this.changeListener = null;
        }
        return t.prototype.getToken = function() {
            return Promise.resolve(this.token);
        }, t.prototype.invalidateToken = function() {}, t.prototype.setChangeListener = function(t, e) {
            var n = this;
            this.changeListener = e, 
            // Fire with initial user.
            t.enqueueRetryable((function() {
                return e(n.token.user);
            }));
        }, t.prototype.removeChangeListener = function() {
            this.changeListener = null;
        }, t;
    }(), Fu = /** @class */ function() {
        function t(t) {
            var e = this;
            /** Tracks the current User. */        this.currentUser = ho.UNAUTHENTICATED, 
            /** Promise that allows blocking on the initialization of Firebase Auth. */
            this.oc = new wr, 
            /**
                 * Counter used to detect if the token changed while a getToken request was
                 * outstanding.
                 */
            this.cc = 0, this.forceRefresh = !1, this.auth = null, this.asyncQueue = null, this.uc = function() {
                e.cc++, e.currentUser = e.ac(), e.oc.resolve(), e.changeListener && e.asyncQueue.enqueueRetryable((function() {
                    return e.changeListener(e.currentUser);
                }));
            };
            var n = function(t) {
                k("FirebaseCredentialsProvider", "Auth detected"), e.auth = t, e.auth.addAuthTokenListener(e.uc);
            };
            t.onInit((function(t) {
                return n(t);
            })), 
            // Our users can initialize Auth right after Firestore, so we give it
            // a chance to register itself with the component framework before we
            // determine whether to start up in unauthenticated mode.
            setTimeout((function() {
                if (!e.auth) {
                    var r = t.getImmediate({
                        optional: !0
                    });
                    r ? n(r) : (
                    // If auth is still not available, proceed with `null` user
                    k("FirebaseCredentialsProvider", "Auth not yet detected"), e.oc.resolve());
                }
            }), 0);
        }
        return t.prototype.getToken = function() {
            var t = this, e = this.cc, n = this.forceRefresh;
            // Take note of the current value of the tokenCounter so that this method
            // can fail (with an ABORTED error) if there is a token change while the
            // request is outstanding.
                    return this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then((function(n) {
                // Cancel the request since the token changed while the request was
                // outstanding so the response is potentially for a previous user (which
                // user, we can't be sure).
                return t.cc !== e ? (k("FirebaseCredentialsProvider", "getToken aborted due to token change."), 
                t.getToken()) : n ? (O("string" == typeof n.accessToken), new Lu(n.accessToken, t.currentUser)) : null;
            })) : Promise.resolve(null);
        }, t.prototype.invalidateToken = function() {
            this.forceRefresh = !0;
        }, t.prototype.setChangeListener = function(t, e) {
            var i = this;
            this.asyncQueue = t, 
            // Blocks the AsyncQueue until the next user is available.
            this.asyncQueue.enqueueRetryable((function() {
                return __awaiter(i, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        switch (t.label) {
                          case 0:
                            return [ 4 /*yield*/ , this.oc.promise ];

                          case 1:
                            return t.sent(), [ 4 /*yield*/ , e(this.currentUser) ];

                          case 2:
                            return t.sent(), this.changeListener = e, [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }, t.prototype.removeChangeListener = function() {
            this.auth && this.auth.removeAuthTokenListener(this.uc), this.changeListener = function() {
                return Promise.resolve();
            };
        }, 
        // Auth.getUid() can return null even with a user logged in. It is because
        // getUid() is synchronous, but the auth code populating Uid is asynchronous.
        // This method should only be called in the AuthTokenListener callback
        // to guarantee to get the actual user.
        t.prototype.ac = function() {
            var t = this.auth && this.auth.getUid();
            return O(null === t || "string" == typeof t), new ho(t);
        }, t;
    }(), Mu = /** @class */ function() {
        function t(t, e, n) {
            this.hc = t, this.lc = e, this.fc = n, this.type = "FirstParty", this.user = ho.FIRST_PARTY;
        }
        return Object.defineProperty(t.prototype, "authHeaders", {
            get: function() {
                var t = {
                    "X-Goog-AuthUser": this.lc
                }, e = this.hc.auth.getAuthHeaderValueForFirstParty([]);
                // Use array notation to prevent minification
                            return e && (t.Authorization = e), this.fc && (t["X-Goog-Iam-Authorization-Token"] = this.fc), 
                t;
            },
            enumerable: !1,
            configurable: !0
        }), t;
    }(), Vu = /** @class */ function() {
        function t(t, e, n) {
            this.hc = t, this.lc = e, this.fc = n;
        }
        return t.prototype.getToken = function() {
            return Promise.resolve(new Mu(this.hc, this.lc, this.fc));
        }, t.prototype.setChangeListener = function(t, e) {
            // Fire with initial uid.
            t.enqueueRetryable((function() {
                return e(ho.FIRST_PARTY);
            }));
        }, t.prototype.removeChangeListener = function() {}, t.prototype.invalidateToken = function() {}, 
        t;
    }();

    /** The default database name for a project. */
    /** Represents the database ID a Firestore client is associated with. */
    /**
     * Builds a CredentialsProvider depending on the type of
     * the credentials passed in.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function qu(t, e, n) {
        if (!n) throw new N(S.INVALID_ARGUMENT, "Function " + t + "() cannot be called with an empty " + e + ".");
    }

    function Uu(t, e) {
        if (void 0 === e) return {
            merge: !1
        };
        if (void 0 !== e.mergeFields && void 0 !== e.merge) throw new N(S.INVALID_ARGUMENT, "Invalid options passed to function " + t + '(): You cannot specify both "merge" and "mergeFields".');
        return e;
    }

    /**
     * Validates that two boolean options are not set at the same time.
     */ function Bu(t, e, n, r) {
        if (!0 === e && !0 === r) throw new N(S.INVALID_ARGUMENT, t + " and " + n + " cannot be used together.");
    }

    /**
     * Validates that `path` refers to a document (indicated by the fact it contains
     * an even numbers of segments).
     */ function ju(t) {
        if (!at.isDocumentKey(t)) throw new N(S.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t + " has " + t.length + ".");
    }

    /**
     * Validates that `path` refers to a collection (indicated by the fact it
     * contains an odd numbers of segments).
     */ function Ku(t) {
        if (at.isDocumentKey(t)) throw new N(S.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + t + " has " + t.length + ".");
    }

    /**
     * Returns true if it's a non-null object without a custom prototype
     * (i.e. excludes Array, Date, etc.).
     */
    /** Returns a string describing the type / value of the provided input. */ function Qu(t) {
        if (void 0 === t) return "undefined";
        if (null === t) return "null";
        if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), 
        JSON.stringify(t);
        if ("number" == typeof t || "boolean" == typeof t) return "" + t;
        if ("object" == typeof t) {
            if (t instanceof Array) return "an array";
            var e = 
            /** Hacky method to try to get the constructor name for an object. */
            function(t) {
                if (t.constructor) {
                    var e = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                    if (e && e.length > 1) return e[1];
                }
                return null;
            }(t);
            return e ? "a custom " + e + " object" : "an object";
        }
        return "function" == typeof t ? "a function" : L();
    }

    function Gu(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        if ("_delegate" in t && (
        // Unwrap Compat types
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t = t._delegate), !(t instanceof e)) {
            if (e.name === t.constructor.name) throw new N(S.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
            var n = Qu(t);
            throw new N(S.INVALID_ARGUMENT, "Expected type '" + e.name + "', but it was: " + n);
        }
        return t;
    }

    function zu(t, e) {
        if (e <= 0) throw new N(S.INVALID_ARGUMENT, "Function " + t + "() requires a positive number, but it was: " + e + ".");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // settings() defaults:
    /**
     * A concrete type describing all the values that can be applied via a
     * user-supplied firestore.Settings object. This is a separate type so that
     * defaults can be supplied and the value can be checked for equality.
     */ var Wu = /** @class */ function() {
        function t(t) {
            var e;
            if (void 0 === t.host) {
                if (void 0 !== t.ssl) throw new N(S.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
                this.host = "firestore.googleapis.com", this.ssl = !0;
            } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
            if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
            void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
                if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new N(S.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
                this.cacheSizeBytes = t.cacheSizeBytes;
            }
            this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
            this.useFetchStreams = !!t.useFetchStreams, Bu("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
        }
        return t.prototype.isEqual = function(t) {
            return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
        }, t;
    }(), Hu = /** @class */ function() {
        /** @hideconstructor */
        function t(t, e) {
            this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new Wu({}), 
            this._settingsFrozen = !1, t instanceof xu ? (this._databaseId = t, this._credentials = new Ou) : (this._app = t, 
            this._databaseId = function(t) {
                if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new N(S.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
                return new xu(t.options.projectId);
            }(t), this._credentials = new Fu(e));
        }
        return Object.defineProperty(t.prototype, "app", {
            /**
             * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
             * instance.
             */
            get: function() {
                if (!this._app) throw new N(S.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
                return this._app;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "_initialized", {
            get: function() {
                return this._settingsFrozen;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "_terminated", {
            get: function() {
                return void 0 !== this._terminateTask;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype._setSettings = function(t) {
            if (this._settingsFrozen) throw new N(S.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
            this._settings = new Wu(t), void 0 !== t.credentials && (this._credentials = function(t) {
                if (!t) return new Ou;
                switch (t.type) {
                  case "gapi":
                    var e = t.client;
                    // Make sure this really is a Gapi client.
                                    return O(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), 
                    new Vu(e, t.sessionIndex || "0", t.iamToken || null);

                  case "provider":
                    return t.client;

                  default:
                    throw new N(S.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
                }
            }(t.credentials));
        }, t.prototype._getSettings = function() {
            return this._settings;
        }, t.prototype._freezeSettings = function() {
            return this._settingsFrozen = !0, this._settings;
        }, t.prototype._delete = function() {
            return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
        }, 
        /** Returns a JSON-serializable representation of this Firestore instance. */ t.prototype.toJSON = function() {
            return {
                app: this._app,
                databaseId: this._databaseId,
                settings: this._settings
            };
        }, 
        /**
         * Terminates all components used by this client. Subclasses can override
         * this method to clean up their own dependencies, but must also call this
         * method.
         *
         * Only ever called once.
         */
        t.prototype._terminate = function() {
            /**
     * Removes all components associated with the provided instance. Must be called
     * when the `Firestore` instance is terminated.
     */
            return t = this, (e = Ru.get(t)) && (k("ComponentProvider", "Removing Datastore"), 
            Ru.delete(t), e.terminate()), Promise.resolve();
            var t, e;
        }, t;
    }(), Yu = /** @class */ function() {
        /** @hideconstructor */
        function t(t, 
        /**
         * If provided, the `FirestoreDataConverter` associated with this instance.
         */
        e, n) {
            this.converter = e, this._key = n, 
            /** The type of this Firestore reference. */
            this.type = "document", this.firestore = t;
        }
        return Object.defineProperty(t.prototype, "_path", {
            get: function() {
                return this._key.path;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "id", {
            /**
             * The document's identifier within its collection.
             */
            get: function() {
                return this._key.path.lastSegment();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "path", {
            /**
             * A string representing the path of the referenced document (relative
             * to the root of the database).
             */
            get: function() {
                return this._key.path.canonicalString();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "parent", {
            /**
             * The collection this `DocumentReference` belongs to.
             */
            get: function() {
                return new Xu(this.firestore, this.converter, this._key.path.popLast());
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.withConverter = function(e) {
            return new t(this.firestore, e, this._key);
        }, t;
    }(), $u = /** @class */ function() {
        // This is the lite version of the Query class in the main SDK.
        /** @hideconstructor protected */
        function t(t, 
        /**
         * If provided, the `FirestoreDataConverter` associated with this instance.
         */
        e, n) {
            this.converter = e, this._query = n, 
            /** The type of this Firestore reference. */
            this.type = "query", this.firestore = t;
        }
        return t.prototype.withConverter = function(e) {
            return new t(this.firestore, e, this._query);
        }, t;
    }(), Xu = /** @class */ function(e) {
        /** @hideconstructor */
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this, t, n, Ht(r)) || this)._path = r, 
            /** The type of this Firestore reference. */
            i.type = "collection", i;
        }
        return __extends$1(n, e), Object.defineProperty(n.prototype, "id", {
            /** The collection's identifier. */ get: function() {
                return this._query.path.lastSegment();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(n.prototype, "path", {
            /**
             * A string representing the path of the referenced collection (relative
             * to the root of the database).
             */
            get: function() {
                return this._query.path.canonicalString();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(n.prototype, "parent", {
            /**
             * A reference to the containing `DocumentReference` if this is a
             * subcollection. If this isn't a subcollection, the reference is null.
             */
            get: function() {
                var t = this._path.popLast();
                return t.isEmpty() ? null : new Yu(this.firestore, 
                /* converter= */ null, new at(t));
            },
            enumerable: !1,
            configurable: !0
        }), n.prototype.withConverter = function(t) {
            return new n(this.firestore, t, this._path);
        }, n;
    }($u);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */ function Ju(t, n) {
        for (var r, i = [], o = 2; o < arguments.length; o++) i[o - 2] = arguments[o];
        if (t = getModularInstance(t), qu("collection", "path", n), t instanceof Hu) return Ku(r = W.fromString.apply(W, __spreadArray([ n ], i))), 
        new Xu(t, /* converter= */ null, r);
        if (!(t instanceof Yu || t instanceof Xu)) throw new N(S.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        return Ku(r = W.fromString.apply(W, __spreadArray([ t.path ], i)).child(W.fromString(n))), new Xu(t.firestore, 
        /* converter= */ null, r);
    }

    // TODO(firestorelite): Consider using ErrorFactory -
    // https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
    /**
     * Creates and returns a new `Query` instance that includes all documents in the
     * database that are contained in a collection or subcollection with the
     * given `collectionId`.
     *
     * @param firestore - A reference to the root Firestore instance.
     * @param collectionId - Identifies the collections to query over. Every
     * collection or subcollection with this ID as the last segment of its path
     * will be included. Cannot contain a slash.
     * @returns The created `Query`.
     */ function Zu(t, n) {
        for (var r, i = [], o = 2; o < arguments.length; o++) i[o - 2] = arguments[o];
        if (t = getModularInstance(t), 
        // We allow omission of 'pathString' but explicitly prohibit passing in both
        // 'undefined' and 'null'.
        1 === arguments.length && (n = M.u()), qu("doc", "path", n), t instanceof Hu) return ju(r = W.fromString.apply(W, __spreadArray([ n ], i))), 
        new Yu(t, 
        /* converter= */ null, new at(r));
        if (!(t instanceof Yu || t instanceof Xu)) throw new N(S.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        return ju(r = t._path.child(W.fromString.apply(W, __spreadArray([ n ], i)))), new Yu(t.firestore, t instanceof Xu ? t.converter : null, new at(r));
    }

    /**
     * Returns true if the provided references are equal.
     *
     * @param left - A reference to compare.
     * @param right - A reference to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function ta(t, e) {
        return t = getModularInstance(t), e = getModularInstance(e), (t instanceof Yu || t instanceof Xu) && (e instanceof Yu || e instanceof Xu) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter
        /**
     * Returns true if the provided queries point to the same collection and apply
     * the same constraints.
     *
     * @param left - A `Query` to compare.
     * @param right - A `Query` to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */;
    }

    function ea(t, e) {
        return t = getModularInstance(t), e = getModularInstance(e), t instanceof $u && e instanceof $u && t.firestore === e.firestore && re(t._query, e._query) && t.converter === e.converter
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */;
    }

    var na = /** @class */ function() {
        function t() {
            var t = this;
            // The last promise in the queue.
                    this.dc = Promise.resolve(), 
            // A list of retryable operations. Retryable operations are run in order and
            // retried with backoff.
            this.wc = [], 
            // Is this AsyncQueue being shut down? Once it is set to true, it will not
            // be changed again.
            this._c = !1, 
            // Operations scheduled to be queued in the future. Operations are
            // automatically removed after they are run or canceled.
            this.mc = [], 
            // visible for testing
            this.yc = null, 
            // Flag set while there's an outstanding AsyncQueue operation, used for
            // assertion sanity-checks.
            this.gc = !1, 
            // List of TimerIds to fast-forward delays for.
            this.Ec = [], 
            // Backoff timer used to schedule retries for retryable operations
            this.Zi = new Co(this, "async_queue_retry" /* AsyncQueueRetry */), 
            // Visibility handler that triggers an immediate retry of all retryable
            // operations. Meant to speed up recovery when we regain file system access
            // after page comes into foreground.
            this.Tc = function() {
                var e = Ao();
                e && k("AsyncQueue", "Visibility state changed to " + e.visibilityState), t.Zi.Gi();
            };
            var e = Ao();
            e && "function" == typeof e.addEventListener && e.addEventListener("visibilitychange", this.Tc);
        }
        return Object.defineProperty(t.prototype, "isShuttingDown", {
            get: function() {
                return this._c;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Adds a new operation to the queue without waiting for it to complete (i.e.
         * we ignore the Promise result).
         */
        t.prototype.enqueueAndForget = function(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueue(t);
        }, t.prototype.enqueueAndForgetEvenWhileRestricted = function(t) {
            this.Ic(), 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.Ac(t);
        }, t.prototype.enterRestrictedMode = function() {
            if (!this._c) {
                this._c = !0;
                var t = Ao();
                t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this.Tc);
            }
        }, t.prototype.enqueue = function(t) {
            return this.Ic(), this._c ? new Promise((function(t) {})) : this.Ac(t);
        }, t.prototype.enqueueRetryable = function(t) {
            var e = this;
            this.enqueueAndForget((function() {
                return e.wc.push(t), e.Rc();
            }));
        }, 
        /**
         * Runs the next operation from the retryable queue. If the operation fails,
         * reschedules with backoff.
         */
        t.prototype.Rc = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        if (0 === this.wc.length) return [ 3 /*break*/ , 5 ];
                        n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , this.wc[0]() ];

                      case 2:
                        return n.sent(), this.wc.shift(), this.Zi.reset(), [ 3 /*break*/ , 4 ];

                      case 3:
                        if (!Sr(t = n.sent())) throw t;
                        // Failure will be handled by AsyncQueue
                                            return k("AsyncQueue", "Operation failed with retryable error: " + t), 
                        [ 3 /*break*/ , 4 ];

                      case 4:
                        this.wc.length > 0 && 
                        // If there are additional operations, we re-schedule `retryNextOp()`.
                        // This is necessary to run retryable operations that failed during
                        // their initial attempt since we don't know whether they are already
                        // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                        // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                        // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                        // call scheduled here.
                        // Since `backoffAndRun()` cancels an existing backoff and schedules a
                        // new backoff on every call, there is only ever a single additional
                        // operation in the queue.
                        this.Zi.ji((function() {
                            return e.Rc();
                        })), n.label = 5;

                      case 5:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.Ac = function(t) {
            var e = this, n = this.dc.then((function() {
                return e.gc = !0, t().catch((function(t) {
                    // Re-throw the error so that this.tail becomes a rejected Promise and
                    // all further attempts to chain (via .then) will just short-circuit
                    // and return the rejected Promise.
                    throw e.yc = t, e.gc = !1, C("INTERNAL UNHANDLED ERROR: ", 
                    /**
     * Chrome includes Error.message in Error.stack. Other browsers do not.
     * This returns expected output of message + stack when available.
     * @param error - Error or FirestoreError
     */
                    function(t) {
                        var e = t.message || "";
                        return t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack), 
                        e;
                    }(t)), t;
                })).then((function(t) {
                    return e.gc = !1, t;
                }));
            }));
            return this.dc = n, n;
        }, t.prototype.enqueueAfterDelay = function(t, e, n) {
            var r = this;
            this.Ic(), 
            // Fast-forward delays for timerIds that have been overriden.
            this.Ec.indexOf(t) > -1 && (e = 0);
            var i = as.createAndSchedule(this, t, e, n, (function(t) {
                return r.bc(t);
            }));
            return this.mc.push(i), i;
        }, t.prototype.Ic = function() {
            this.yc && L();
        }, t.prototype.verifyOperationInProgress = function() {}, 
        /**
         * Waits until all currently queued tasks are finished executing. Delayed
         * operations are not run.
         */
        t.prototype.vc = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t;
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return [ 4 /*yield*/ , t = this.dc ];

                      case 1:
                        e.sent(), e.label = 2;

                      case 2:
                        if (t !== this.dc) return [ 3 /*break*/ , 0 ];
                        e.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * For Tests: Determine if a delayed operation with a particular TimerId
         * exists.
         */
        t.prototype.Pc = function(t) {
            for (var e = 0, n = this.mc; e < n.length; e++) {
                if (n[e].timerId === t) return !0;
            }
            return !1;
        }, 
        /**
         * For Tests: Runs some or all delayed operations early.
         *
         * @param lastTimerId - Delayed operations up to and including this TimerId
         * will be drained. Pass TimerId.All to run all delayed operations.
         * @returns a Promise that resolves once all operations have been run.
         */
        t.prototype.Vc = function(t) {
            var e = this;
            // Note that draining may generate more delayed ops, so we do that first.
                    return this.vc().then((function() {
                // Run ops in the same order they'd run if they ran naturally.
                e.mc.sort((function(t, e) {
                    return t.targetTimeMs - e.targetTimeMs;
                }));
                for (var n = 0, r = e.mc; n < r.length; n++) {
                    var i = r[n];
                    if (i.skipDelay(), "all" /* All */ !== t && i.timerId === t) break;
                }
                return e.vc();
            }));
        }, 
        /**
         * For Tests: Skip all subsequent delays for a timer id.
         */
        t.prototype.Sc = function(t) {
            this.Ec.push(t);
        }, 
        /** Called once a DelayedOperation is run or canceled. */ t.prototype.bc = function(t) {
            // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
            var e = this.mc.indexOf(t);
            this.mc.splice(e, 1);
        }, t;
    }();

    function ra(t) {
        /**
     * Returns true if obj is an object and contains at least one of the specified
     * methods.
     */
        return function(t, e) {
            if ("object" != typeof t || null === t) return !1;
            for (var n = t, r = 0, i = [ "next", "error", "complete" ]; r < i.length; r++) {
                var o = i[r];
                if (o in n && "function" == typeof n[o]) return !0;
            }
            return !1;
        }(t);
    }

    var oa = -1, sa = /** @class */ function(e) {
        /** @hideconstructor */
        function n(t, n) {
            var r = this;
            return (r = e.call(this, t, n) || this).type = "firestore", r._queue = new na, r._persistenceKey = "name" in t ? t.name : "[DEFAULT]", 
            r;
        }
        return __extends$1(n, e), n.prototype._terminate = function() {
            return this._firestoreClient || 
            // The client must be initialized to ensure that all subsequent API
            // usage throws an exception.
            aa(this), this._firestoreClient.terminate();
        }, n;
    }(Hu);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** DOMException error code constants. */
    /**
     * @internal
     */
    function ua(t) {
        return t._firestoreClient || aa(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
    }

    function aa(t) {
        var e, n = t._freezeSettings(), r = function(t, e, n, r) {
            return new Cu(t, e, n, r.host, r.ssl, r.experimentalForceLongPolling, r.experimentalAutoDetectLongPolling, r.useFetchStreams);
        }(t._databaseId, (null === (e = t._app) || void 0 === e ? void 0 : e.options.appId) || "", t._persistenceKey, n);
        t._firestoreClient = new gu(t._credentials, t._queue, r);
    }

    /**
     * Attempts to enable persistent storage, if possible.
     *
     * Must be called before any other functions (other than
     * {@link initializeFirestore}, {@link getFirestore} or
     * {@link clearIndexedDbPersistence}.
     *
     * If this fails, `enableIndexedDbPersistence()` will reject the promise it
     * returns. Note that even after this failure, the `Firestore` instance will
     * remain usable, however offline persistence will be disabled.
     *
     * There are several reasons why this can fail, which can be identified by
     * the `code` on the error.
     *
     *   * failed-precondition: The app is already open in another browser tab.
     *   * unimplemented: The browser is incompatible with the offline
     *     persistence implementation.
     *
     * @param firestore - The `Firestore` instance to enable persistence for.
     * @param persistenceSettings - Optional settings object to configure
     * persistence.
     * @returns A promise that represents successfully enabling persistent storage.
     */
    /**
     * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
     * If the operation fails with a recoverable error (see
     * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
     * but the client remains usable.
     */ function ca(t, e, i) {
        var o = this, s = new wr;
        return t.asyncQueue.enqueue((function() {
            return __awaiter(o, void 0, void 0, (function() {
                var n;
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return r.trys.push([ 0, 3, , 4 ]), [ 4 /*yield*/ , wu(t, i) ];

                      case 1:
                        return r.sent(), [ 4 /*yield*/ , bu(t, e) ];

                      case 2:
                        return r.sent(), s.resolve(), [ 3 /*break*/ , 4 ];

                      case 3:
                        if (!
                        /**
             * Decides whether the provided error allows us to gracefully disable
             * persistence (as opposed to crashing the client).
             */
                        function(t) {
                            return "FirebaseError" === t.name ? t.code === S.FAILED_PRECONDITION || t.code === S.UNIMPLEMENTED : !("undefined" != typeof DOMException && t instanceof DOMException) || (22 === t.code || 20 === t.code || 
                            // Firefox Private Browsing mode disables IndexedDb and returns
                            // INVALID_STATE for any usage.
                            11 === t.code);
                        }(n = r.sent())) throw n;
                        return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + n), 
                        s.reject(n), [ 3 /*break*/ , 4 ];

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        })).then((function() {
            return s.promise;
        }));
    }

    /**
     * Re-enables use of the network for this Firestore instance after a prior
     * call to {@link disableNetwork}.
     *
     * @returns A promise that is resolved once the network has been enabled.
     */
    function ha(t) {
        if (t._initialized || t._terminated) throw new N(S.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `FieldPath` refers to a field in a document. The path may consist of a
     * single field name (referring to a top-level field in the document), or a
     * list of field names (referring to a nested field in the document).
     *
     * Create a `FieldPath` by providing field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     */ var fa = /** @class */ function() {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        function t() {
            for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
            for (var n = 0; n < t.length; ++n) if (0 === t[n].length) throw new N(S.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
            this._internalPath = new Y(t);
        }
        /**
         * Returns true if this `FieldPath` is equal to the provided one.
         *
         * @param other - The `FieldPath` to compare against.
         * @returns true if this `FieldPath` is equal to the provided one.
         */    return t.prototype.isEqual = function(t) {
            return this._internalPath.isEqual(t._internalPath);
        }, t;
    }(), la = /** @class */ function() {
        /** @hideconstructor */
        function t(t) {
            this._byteString = t;
        }
        /**
         * Creates a new `Bytes` object from the given Base64 string, converting it to
         * bytes.
         *
         * @param base64 - The Base64 string used to create the `Bytes` object.
         */    return t.fromBase64String = function(e) {
            try {
                return new t(X.fromBase64String(e));
            } catch (e) {
                throw new N(S.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e);
            }
        }, 
        /**
         * Creates a new `Bytes` object from the given Uint8Array.
         *
         * @param array - The Uint8Array used to create the `Bytes` object.
         */
        t.fromUint8Array = function(e) {
            return new t(X.fromUint8Array(e));
        }, 
        /**
         * Returns the underlying bytes as a Base64-encoded string.
         *
         * @returns The Base64-encoded string created from the `Bytes` object.
         */
        t.prototype.toBase64 = function() {
            return this._byteString.toBase64();
        }, 
        /**
         * Returns the underlying bytes in a new `Uint8Array`.
         *
         * @returns The Uint8Array created from the `Bytes` object.
         */
        t.prototype.toUint8Array = function() {
            return this._byteString.toUint8Array();
        }, 
        /**
         * Returns a string representation of the `Bytes` object.
         *
         * @returns A string representation of the `Bytes` object.
         */
        t.prototype.toString = function() {
            return "Bytes(base64: " + this.toBase64() + ")";
        }, 
        /**
         * Returns true if this `Bytes` object is equal to the provided one.
         *
         * @param other - The `Bytes` object to compare against.
         * @returns true if this `Bytes` object is equal to the provided one.
         */
        t.prototype.isEqual = function(t) {
            return this._byteString.isEqual(t._byteString);
        }, t;
    }(), da = 
    /**
         * @param _methodName - The public API endpoint that returns this class.
         * @hideconstructor
         */
    function(t) {
        this._methodName = t;
    }, pa = /** @class */ function() {
        /**
         * Creates a new immutable `GeoPoint` object with the provided latitude and
         * longitude values.
         * @param latitude - The latitude as number between -90 and 90.
         * @param longitude - The longitude as number between -180 and 180.
         */
        function t(t, e) {
            if (!isFinite(t) || t < -90 || t > 90) throw new N(S.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
            if (!isFinite(e) || e < -180 || e > 180) throw new N(S.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
            this._lat = t, this._long = e;
        }
        return Object.defineProperty(t.prototype, "latitude", {
            /**
             * The latitude of this `GeoPoint` instance.
             */
            get: function() {
                return this._lat;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "longitude", {
            /**
             * The longitude of this `GeoPoint` instance.
             */
            get: function() {
                return this._long;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Returns true if this `GeoPoint` is equal to the provided one.
         *
         * @param other - The `GeoPoint` to compare against.
         * @returns true if this `GeoPoint` is equal to the provided one.
         */
        t.prototype.isEqual = function(t) {
            return this._lat === t._lat && this._long === t._long;
        }, 
        /** Returns a JSON-serializable representation of this GeoPoint. */ t.prototype.toJSON = function() {
            return {
                latitude: this._lat,
                longitude: this._long
            };
        }, 
        /**
         * Actually private to JS consumers of our API, so this function is prefixed
         * with an underscore.
         */
        t.prototype._compareTo = function(t) {
            return V(this._lat, t._lat) || V(this._long, t._long);
        }, t;
    }(), ya = /^__.*__$/, va = /** @class */ function() {
        function t(t, e, n) {
            this.data = t, this.fieldMask = e, this.fieldTransforms = n;
        }
        return t.prototype.toMutation = function(t, e) {
            return null !== this.fieldMask ? new Pe(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Oe(t, this.data, e, this.fieldTransforms);
        }, t;
    }(), ma = /** @class */ function() {
        function t(t, 
        // The fieldMask does not include document transforms.
        e, n) {
            this.data = t, this.fieldMask = e, this.fieldTransforms = n;
        }
        return t.prototype.toMutation = function(t, e) {
            return new Pe(t, this.data, this.fieldMask, e, this.fieldTransforms);
        }, t;
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing an array of bytes.
     */ function ga(t) {
        switch (t) {
          case 0 /* Set */ :
     // fall through
                  case 2 /* MergeSet */ :
     // fall through
                  case 1 /* Update */ :
            return !0;

          case 3 /* Argument */ :
          case 4 /* ArrayArgument */ :
            return !1;

          default:
            throw L();
        }
    }

    /** A "context" object passed around while parsing user data. */ var wa = /** @class */ function() {
        /**
         * Initializes a ParseContext with the given source and path.
         *
         * @param settings - The settings for the parser.
         * @param databaseId - The database ID of the Firestore instance.
         * @param serializer - The serializer to use to generate the Value proto.
         * @param ignoreUndefinedProperties - Whether to ignore undefined properties
         * rather than throw.
         * @param fieldTransforms - A mutable list of field transforms encountered
         * while parsing the data.
         * @param fieldMask - A mutable list of field paths encountered while parsing
         * the data.
         *
         * TODO(b/34871131): We don't support array paths right now, so path can be
         * null to indicate the context represents any location within an array (in
         * which case certain features will not work and errors will be somewhat
         * compromised).
         */
        function t(t, e, n, r, i, o) {
            this.settings = t, this.databaseId = e, this.R = n, this.ignoreUndefinedProperties = r, 
            // Minor hack: If fieldTransforms is undefined, we assume this is an
            // external call and we need to validate the entire path.
            void 0 === i && this.Dc(), this.fieldTransforms = i || [], this.fieldMask = o || [];
        }
        return Object.defineProperty(t.prototype, "path", {
            get: function() {
                return this.settings.path;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "Cc", {
            get: function() {
                return this.settings.Cc;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /** Returns a new context with the specified settings overwritten. */ t.prototype.Nc = function(e) {
            return new t(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.R, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
        }, t.prototype.xc = function(t) {
            var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.Nc({
                path: n,
                Fc: !1
            });
            return r.kc(t), r;
        }, t.prototype.$c = function(t) {
            var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.Nc({
                path: n,
                Fc: !1
            });
            return r.Dc(), r;
        }, t.prototype.Oc = function(t) {
            // TODO(b/34871131): We don't support array paths right now; so make path
            // undefined.
            return this.Nc({
                path: void 0,
                Fc: !0
            });
        }, t.prototype.Mc = function(t) {
            return qa(t, this.settings.methodName, this.settings.Lc || !1, this.path, this.settings.Bc);
        }, 
        /** Returns 'true' if 'fieldPath' was traversed when creating this context. */ t.prototype.contains = function(t) {
            return void 0 !== this.fieldMask.find((function(e) {
                return t.isPrefixOf(e);
            })) || void 0 !== this.fieldTransforms.find((function(e) {
                return t.isPrefixOf(e.field);
            }));
        }, t.prototype.Dc = function() {
            // TODO(b/34871131): Remove null check once we have proper paths for fields
            // within arrays.
            if (this.path) for (var t = 0; t < this.path.length; t++) this.kc(this.path.get(t));
        }, t.prototype.kc = function(t) {
            if (0 === t.length) throw this.Mc("Document fields must not be empty");
            if (ga(this.Cc) && ya.test(t)) throw this.Mc('Document fields cannot begin and end with "__"');
        }, t;
    }(), ba = /** @class */ function() {
        function t(t, e, n) {
            this.databaseId = t, this.ignoreUndefinedProperties = e, this.R = n || ko(t)
            /** Creates a new top-level parse context. */;
        }
        return t.prototype.qc = function(t, e, n, r) {
            return void 0 === r && (r = !1), new wa({
                Cc: t,
                methodName: e,
                Bc: n,
                path: Y.emptyPath(),
                Fc: !1,
                Lc: r
            }, this.databaseId, this.R, this.ignoreUndefinedProperties);
        }, t;
    }();

    /**
     * Helper for parsing raw user input (provided via the API) into internal model
     * classes.
     */ function Ia(t) {
        var e = t._freezeSettings(), n = ko(t._databaseId);
        return new ba(t._databaseId, !!e.ignoreUndefinedProperties, n);
    }

    /** Parse document data from a set() call. */ function Ea(t, e, n, r, i, o) {
        void 0 === o && (o = {});
        var s = t.qc(o.merge || o.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, i);
        Pa("Data must be an object, but it was:", s, r);
        var u, a, c = La(r, s);
        if (o.merge) u = new $(s.fieldMask), a = s.fieldTransforms; else if (o.mergeFields) {
            for (var h = [], f = 0, l = o.mergeFields; f < l.length; f++) {
                var d = Fa(e, l[f], n);
                if (!s.contains(d)) throw new N(S.INVALID_ARGUMENT, "Field '" + d + "' is specified in your field mask but missing from your input data.");
                Ua(h, d) || h.push(d);
            }
            u = new $(h), a = s.fieldTransforms.filter((function(t) {
                return u.covers(t.field);
            }));
        } else u = null, a = s.fieldTransforms;
        return new va(new Tt(c), u, a);
    }

    var Ta = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends$1(n, e), n.prototype._toFieldTransform = function(t) {
            if (2 /* MergeSet */ !== t.Cc) throw 1 /* Update */ === t.Cc ? t.Mc(this._methodName + "() can only appear at the top level of your update data") : t.Mc(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
            // No transform to add for a delete, but we need to add it to our
            // fieldMask so it gets deleted.
                    return t.fieldMask.push(t.path), null;
        }, n.prototype.isEqual = function(t) {
            return t instanceof n;
        }, n;
    }(da);

    /**
     * Creates a child context for parsing SerializableFieldValues.
     *
     * This is different than calling `ParseContext.contextWith` because it keeps
     * the fieldTransforms and fieldMask separate.
     *
     * The created context has its `dataSource` set to `UserDataSource.Argument`.
     * Although these values are used with writes, any elements in these FieldValues
     * are not considered writes since they cannot contain any FieldValue sentinels,
     * etc.
     *
     * @param fieldValue - The sentinel FieldValue for which to create a child
     *     context.
     * @param context - The parent context.
     * @param arrayElement - Whether or not the FieldValue has an array.
     */ function _a$3(t, e, n) {
        return new wa({
            Cc: 3 /* Argument */ ,
            Bc: e.settings.Bc,
            methodName: t._methodName,
            Fc: n
        }, e.databaseId, e.R, e.ignoreUndefinedProperties);
    }

    var Sa = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends$1(n, e), n.prototype._toFieldTransform = function(t) {
            return new _e(t.path, new ve);
        }, n.prototype.isEqual = function(t) {
            return t instanceof n;
        }, n;
    }(da), Na = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this, t) || this).Uc = n, r;
        }
        return __extends$1(n, e), n.prototype._toFieldTransform = function(t) {
            var e = _a$3(this, t, 
            /*array=*/ !0), n = this.Uc.map((function(t) {
                return Ra(t, e);
            })), r = new me(n);
            return new _e(t.path, r);
        }, n.prototype.isEqual = function(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }, n;
    }(da), Da = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this, t) || this).Uc = n, r;
        }
        return __extends$1(n, e), n.prototype._toFieldTransform = function(t) {
            var e = _a$3(this, t, 
            /*array=*/ !0), n = this.Uc.map((function(t) {
                return Ra(t, e);
            })), r = new we(n);
            return new _e(t.path, r);
        }, n.prototype.isEqual = function(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }, n;
    }(da), Aa = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this, t) || this).Kc = n, r;
        }
        return __extends$1(n, e), n.prototype._toFieldTransform = function(t) {
            var e = new Ie(t.R, fe(t.R, this.Kc));
            return new _e(t.path, e);
        }, n.prototype.isEqual = function(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }, n;
    }(da);

    /** Parse update data from an update() call. */ function ka(t, e, n, r) {
        var i = t.qc(1 /* Update */ , e, n);
        Pa("Data must be an object, but it was:", i, r);
        var o = [], s = Tt.empty();
        Q(r, (function(t, r) {
            var u = Va(e, t, n);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    r = getModularInstance(r);
            var a = i.$c(u);
            if (r instanceof Ta) 
            // Add it to the field mask, but don't add anything to updateData.
            o.push(u); else {
                var c = Ra(r, a);
                null != c && (o.push(u), s.set(u, c));
            }
        }));
        var u = new $(o);
        return new ma(s, u, i.fieldTransforms);
    }

    /** Parse update data from a list of field/value arguments. */ function Ca(t, e, n, r, i, o) {
        var s = t.qc(1 /* Update */ , e, n), u = [ Fa(e, r, n) ], a = [ i ];
        if (o.length % 2 != 0) throw new N(S.INVALID_ARGUMENT, "Function " + e + "() needs to be called with an even number of arguments that alternate between field names and values.");
        for (var c = 0; c < o.length; c += 2) u.push(Fa(e, o[c])), a.push(o[c + 1]);
        // We iterate in reverse order to pick the last value for a field if the
        // user specified the field multiple times.
        for (var h = [], l = Tt.empty(), d = u.length - 1; d >= 0; --d) if (!Ua(h, u[d])) {
            var p = u[d], y = a[d];
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
            y = getModularInstance(y);
            var v = s.$c(p);
            if (y instanceof Ta) 
            // Add it to the field mask, but don't add anything to updateData.
            h.push(p); else {
                var m = Ra(y, v);
                null != m && (h.push(p), l.set(p, m));
            }
        }
        var g = new $(h);
        return new ma(l, g, s.fieldTransforms);
    }

    /**
     * Parse a "query value" (e.g. value in a where filter or a value in a cursor
     * bound).
     *
     * @param allowArrays - Whether the query value is an array that may directly
     * contain additional arrays (e.g. the operand of an `in` query).
     */ function xa(t, e, n, r) {
        return void 0 === r && (r = !1), Ra(n, t.qc(r ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));
    }

    /**
     * Parses user data to Protobuf Values.
     *
     * @param input - Data to be parsed.
     * @param context - A context object representing the current path being parsed,
     * the source of the data being parsed, etc.
     * @returns The parsed value, or null if the value was a FieldValue sentinel
     * that should not be included in the resulting parsed data.
     */ function Ra(t, e) {
        if (Oa(
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        t = getModularInstance(t))) return Pa("Unsupported field value:", e, t), La(t, e);
        if (t instanceof da) 
        // FieldValues usually parse into transforms (except FieldValue.delete())
        // in which case we do not want to include this field in our parsed data
        // (as doing so will overwrite the field directly prior to the transform
        // trying to transform it). So we don't add this location to
        // context.fieldMask and we return null as our parsing result.
        /**
         * "Parses" the provided FieldValueImpl, adding any necessary transforms to
         * context.fieldTransforms.
         */
        return function(t, e) {
            // Sentinels are only supported with writes, and not within arrays.
            if (!ga(e.Cc)) throw e.Mc(t._methodName + "() can only be used with update() and set()");
            if (!e.path) throw e.Mc(t._methodName + "() is not currently supported inside arrays");
            var n = t._toFieldTransform(e);
            n && e.fieldTransforms.push(n);
        }(t, e), null;
        if (void 0 === t && e.ignoreUndefinedProperties) 
        // If the input is undefined it can never participate in the fieldMask, so
        // don't handle this below. If `ignoreUndefinedProperties` is false,
        // `parseScalarValue` will reject an undefined value.
        return null;
        if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        e.path && e.fieldMask.push(e.path), t instanceof Array) {
            // TODO(b/34871131): Include the path containing the array in the error
            // message.
            // In the case of IN queries, the parsed data is an array (representing
            // the set of values to be included for the IN query) that may directly
            // contain additional arrays (each representing an individual field
            // value), so we disable this validation.
            if (e.settings.Fc && 4 /* ArrayArgument */ !== e.Cc) throw e.Mc("Nested arrays are not supported");
            return function(t, e) {
                for (var n = [], r = 0, i = 0, o = t; i < o.length; i++) {
                    var s = Ra(o[i], e.Oc(r));
                    null == s && (
                    // Just include nulls in the array for fields being replaced with a
                    // sentinel.
                    s = {
                        nullValue: "NULL_VALUE"
                    }), n.push(s), r++;
                }
                return {
                    arrayValue: {
                        values: n
                    }
                };
            }(t, e);
        }
        return function(t, e) {
            if (null === (t = getModularInstance(t))) return {
                nullValue: "NULL_VALUE"
            };
            if ("number" == typeof t) return fe(e.R, t);
            if ("boolean" == typeof t) return {
                booleanValue: t
            };
            if ("string" == typeof t) return {
                stringValue: t
            };
            if (t instanceof Date) {
                var n = B.fromDate(t);
                return {
                    timestampValue: bn(e.R, n)
                };
            }
            if (t instanceof B) {
                // Firestore backend truncates precision down to microseconds. To ensure
                // offline mode works the same with regards to truncation, perform the
                // truncation immediately without waiting for the backend to do that.
                n = new B(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
                return {
                    timestampValue: bn(e.R, n)
                };
            }
            if (t instanceof pa) return {
                geoPointValue: {
                    latitude: t.latitude,
                    longitude: t.longitude
                }
            };
            if (t instanceof la) return {
                bytesValue: In(e.R, t._byteString)
            };
            if (t instanceof Yu) {
                n = e.databaseId;
                var r = t.firestore._databaseId;
                if (!r.isEqual(n)) throw e.Mc("Document reference is for database " + r.projectId + "/" + r.database + " but should be for database " + n.projectId + "/" + n.database);
                return {
                    referenceValue: _n(t.firestore._databaseId || e.databaseId, t._key.path)
                };
            }
            throw e.Mc("Unsupported field value: " + Qu(t));
        }(t, e);
    }

    function La(t, e) {
        var n = {};
        return G(t) ? 
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        e.path && e.path.length > 0 && e.fieldMask.push(e.path) : Q(t, (function(t, r) {
            var i = Ra(r, e.xc(t));
            null != i && (n[t] = i);
        })), {
            mapValue: {
                fields: n
            }
        };
    }

    function Oa(t) {
        return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof B || t instanceof pa || t instanceof la || t instanceof Yu || t instanceof da);
    }

    function Pa(t, e, n) {
        if (!Oa(n) || !function(t) {
            return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
        }(n)) {
            var r = Qu(n);
            throw "an object" === r ? e.Mc(t + " a custom object") : e.Mc(t + " " + r);
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function Fa(t, e, n) {
        if (
        // If required, replace the FieldPath Compat class with with the firestore-exp
        // FieldPath.
        (e = getModularInstance(e)) instanceof fa) return e._internalPath;
        if ("string" == typeof e) return Va(t, e);
        throw qa("Field path arguments must be of type string or FieldPath.", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
    }

    /**
     * Matches any characters in a field path string that are reserved.
     */ var Ma = new RegExp("[~\\*/\\[\\]]");

    /**
     * Wraps fromDotSeparatedString with an error message about the method that
     * was thrown.
     * @param methodName - The publicly visible method name
     * @param path - The dot-separated string form of a field path which will be
     * split on dots.
     * @param targetDoc - The document against which the field path will be
     * evaluated.
     */ function Va(t, n, r) {
        if (n.search(Ma) >= 0) throw qa("Invalid field path (" + n + "). Paths must not contain '~', '*', '/', '[', or ']'", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, r);
        try {
            return (new (fa.bind.apply(fa, __spreadArray([ void 0 ], n.split(".")))))._internalPath;
        } catch (e) {
            throw qa("Invalid field path (" + n + "). Paths must not be empty, begin with '.', end with '.', or contain '..'", t, 
            /* hasConverter= */ !1, 
            /* path= */ void 0, r);
        }
    }

    function qa(t, e, n, r, i) {
        var o = r && !r.isEmpty(), s = void 0 !== i, u = "Function " + e + "() called with invalid data";
        n && (u += " (via `toFirestore()`)");
        var a = "";
        return (o || s) && (a += " (found", o && (a += " in field " + r), s && (a += " in document " + i), 
        a += ")"), new N(S.INVALID_ARGUMENT, (u += ". ") + t + a)
        /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */;
    }

    function Ua(t, e) {
        return t.some((function(t) {
            return t.isEqual(e);
        }));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */ var Ba = /** @class */ function() {
        // Note: This class is stripped down version of the DocumentSnapshot in
        // the legacy SDK. The changes are:
        // - No support for SnapshotMetadata.
        // - No support for SnapshotOptions.
        /** @hideconstructor protected */
        function t(t, e, n, r, i) {
            this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, 
            this._converter = i;
        }
        return Object.defineProperty(t.prototype, "id", {
            /** Property of the `DocumentSnapshot` that provides the document's ID. */ get: function() {
                return this._key.path.lastSegment();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "ref", {
            /**
             * The `DocumentReference` for the document included in the `DocumentSnapshot`.
             */
            get: function() {
                return new Yu(this._firestore, this._converter, this._key);
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Signals whether or not the document at the snapshot's location exists.
         *
         * @returns true if the document exists.
         */
        t.prototype.exists = function() {
            return null !== this._document;
        }, 
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * @returns An `Object` containing all fields in the document or `undefined`
         * if the document doesn't exist.
         */
        t.prototype.data = function() {
            if (this._document) {
                if (this._converter) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    var t = new ja(this._firestore, this._userDataWriter, this._key, this._document, 
                    /* converter= */ null);
                    return this._converter.fromFirestore(t);
                }
                return this._userDataWriter.convertValue(this._document.data.value);
            }
        }, 
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t.prototype.get = function(t) {
            if (this._document) {
                var e = this._document.data.field(Ka("DocumentSnapshot.get", t));
                if (null !== e) return this._userDataWriter.convertValue(e);
            }
        }, t;
    }(), ja = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * @override
         * @returns An `Object` containing all fields in the document.
         */    return __extends$1(n, e), n.prototype.data = function() {
            return e.prototype.data.call(this);
        }, n;
    }(Ba);

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */
    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */
    function Ka(t, e) {
        return "string" == typeof e ? Va(t, e) : e instanceof fa ? e._internalPath : e._delegate._internalPath;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Metadata about a snapshot, describing the state of the snapshot.
     */ var Qa = /** @class */ function() {
        /** @hideconstructor */
        function t(t, e) {
            this.hasPendingWrites = t, this.fromCache = e
            /**
         * Returns true if this `SnapshotMetadata` is equal to the provided one.
         *
         * @param other - The `SnapshotMetadata` to compare against.
         * @returns true if this `SnapshotMetadata` is equal to the provided one.
         */;
        }
        return t.prototype.isEqual = function(t) {
            return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
        }, t;
    }(), Ga = /** @class */ function(e) {
        /** @hideconstructor protected */
        function n(t, n, r, i, o, s) {
            var u = this;
            return (u = e.call(this, t, n, r, i, s) || this)._firestore = t, u._firestoreImpl = t, 
            u.metadata = o, u;
        }
        /**
         * Property of the `DocumentSnapshot` that signals whether or not the data
         * exists. True if the document exists.
         */    return __extends$1(n, e), n.prototype.exists = function() {
            return e.prototype.exists.call(this);
        }, 
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * By default, `FieldValue.serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document or `undefined` if
         * the document doesn't exist.
         */
        n.prototype.data = function(t) {
            if (void 0 === t && (t = {}), this._document) {
                if (this._converter) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    var e = new za(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, 
                    /* converter= */ null);
                    return this._converter.fromFirestore(e, t);
                }
                return this._userDataWriter.convertValue(this._document.data.value, t.serverTimestamps);
            }
        }, 
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
         * its final value will be returned as `null`. You can override this by
         * passing an options object.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @param options - An options object to configure how the field is retrieved
         * from the snapshot (for example the desired behavior for server timestamps
         * that have not yet been set to their final value).
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        n.prototype.get = function(t, e) {
            if (void 0 === e && (e = {}), this._document) {
                var n = this._document.data.field(Ka("DocumentSnapshot.get", t));
                if (null !== n) return this._userDataWriter.convertValue(n, e.serverTimestamps);
            }
        }, n;
    }(Ba), za = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * By default, `FieldValue.serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @override
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document.
         */    return __extends$1(n, e), n.prototype.data = function(t) {
            return void 0 === t && (t = {}), e.prototype.data.call(this, t);
        }, n;
    }(Ga), Wa = /** @class */ function() {
        /** @hideconstructor */
        function t(t, e, n, r) {
            this._firestore = t, this._userDataWriter = e, this._snapshot = r, this.metadata = new Qa(r.hasPendingWrites, r.fromCache), 
            this.query = n;
        }
        return Object.defineProperty(t.prototype, "docs", {
            /** An array of all the documents in the `QuerySnapshot`. */ get: function() {
                var t = [];
                return this.forEach((function(e) {
                    return t.push(e);
                })), t;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "size", {
            /** The number of documents in the `QuerySnapshot`. */ get: function() {
                return this._snapshot.docs.size;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "empty", {
            /** True if there are no documents in the `QuerySnapshot`. */ get: function() {
                return 0 === this.size;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Enumerates all of the documents in the `QuerySnapshot`.
         *
         * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
         * each document in the snapshot.
         * @param thisArg - The `this` binding for the callback.
         */
        t.prototype.forEach = function(t, e) {
            var n = this;
            this._snapshot.docs.forEach((function(r) {
                t.call(e, new za(n._firestore, n._userDataWriter, r.key, r, new Qa(n._snapshot.mutatedKeys.has(r.key), n._snapshot.fromCache), n.query.converter));
            }));
        }, 
        /**
         * Returns an array of the documents changes since the last snapshot. If this
         * is the first snapshot, all documents will be in the list as 'added'
         * changes.
         *
         * @param options - `SnapshotListenOptions` that control whether metadata-only
         * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
         * snapshot events.
         */
        t.prototype.docChanges = function(t) {
            void 0 === t && (t = {});
            var e = !!t.includeMetadataChanges;
            if (e && this._snapshot.excludesMetadataChanges) throw new N(S.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
            return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e || (this._cachedChanges = 
            /** Calculates the array of DocumentChanges for a given ViewSnapshot. */
            function(t, e) {
                if (t._snapshot.oldDocs.isEmpty()) {
                    var n = 0;
                    return t._snapshot.docChanges.map((function(e) {
                        return {
                            type: "added",
                            doc: new za(t._firestore, t._userDataWriter, e.doc.key, e.doc, new Qa(t._snapshot.mutatedKeys.has(e.doc.key), t._snapshot.fromCache), t.query.converter),
                            oldIndex: -1,
                            newIndex: n++
                        };
                    }));
                }
                // A DocumentSet that is updated incrementally as changes are applied to use
                // to lookup the index of a document.
                var r = t._snapshot.oldDocs;
                return t._snapshot.docChanges.filter((function(t) {
                    return e || 3 /* Metadata */ !== t.type;
                })).map((function(e) {
                    var n = new za(t._firestore, t._userDataWriter, e.doc.key, e.doc, new Qa(t._snapshot.mutatedKeys.has(e.doc.key), t._snapshot.fromCache), t.query.converter), i = -1, o = -1;
                    return 0 /* Added */ !== e.type && (i = r.indexOf(e.doc.key), r = r.delete(e.doc.key)), 
                    1 /* Removed */ !== e.type && (o = (r = r.add(e.doc)).indexOf(e.doc.key)), {
                        type: Ha(e.type),
                        doc: n,
                        oldIndex: i,
                        newIndex: o
                    };
                }));
            }(this, e), this._cachedChangesIncludeMetadataChanges = e), this._cachedChanges;
        }, t;
    }();

    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */ function Ha(t) {
        switch (t) {
          case 0 /* Added */ :
            return "added";

          case 2 /* Modified */ :
          case 3 /* Metadata */ :
            return "modified";

          case 1 /* Removed */ :
            return "removed";

          default:
            return L();
        }
    }

    // TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
    // metadata
    /**
     * Returns true if the provided snapshots are equal.
     *
     * @param left - A snapshot to compare.
     * @param right - A snapshot to compare.
     * @returns true if the snapshots are equal.
     */ function Ya(t, e) {
        return t instanceof Ga && e instanceof Ga ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof Wa && e instanceof Wa && t._firestore === e._firestore && ea(t.query, e.query) && t.metadata.isEqual(e.metadata) && t._snapshot.isEqual(e._snapshot);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function $a(t) {
        if ($t(t) && 0 === t.explicitOrderBy.length) throw new N(S.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }

    /**
     * A `QueryConstraint` is used to narrow the set of documents returned by a
     * Firestore query. `QueryConstraint`s are created by invoking {@link where},
     * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
     * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
     * can then be passed to {@link query} to create a new query instance that
     * also contains this `QueryConstraint`.
     */ var Xa = function() {};

    /**
     * Creates a new immutable instance of `Query` that is extended to also include
     * additional query constraints.
     *
     * @param query - The Query instance to use as a base for the new constraints.
     * @param queryConstraints - The list of `QueryConstraint`s to apply.
     * @throws if any of the provided query constraints cannot be combined with the
     * existing or new constraints.
     */ function Ja(t) {
        for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
        for (var r = 0, i = e; r < i.length; r++) {
            var o = i[r];
            t = o._apply(t);
        }
        return t;
    }

    var Za = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this) || this).Qc = t, i.jc = n, i.Wc = r, i.type = "where", 
            i;
        }
        return __extends$1(n, e), n.prototype._apply = function(t) {
            var e = Ia(t.firestore), n = function(t, e, n, r, i, o, s) {
                var u;
                if (i.isKeyField()) {
                    if ("array-contains" /* ARRAY_CONTAINS */ === o || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === o) throw new N(S.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o + "' queries on FieldPath.documentId().");
                    if ("in" /* IN */ === o || "not-in" /* NOT_IN */ === o) {
                        sc(s, o);
                        for (var a = [], c = 0, h = s; c < h.length; c++) {
                            var f = h[c];
                            a.push(oc(r, t, f));
                        }
                        u = {
                            arrayValue: {
                                values: a
                            }
                        };
                    } else u = oc(r, t, s);
                } else "in" /* IN */ !== o && "not-in" /* NOT_IN */ !== o && "array-contains-any" /* ARRAY_CONTAINS_ANY */ !== o || sc(s, o), 
                u = xa(n, "where", s, 
                /* allowArrays= */ "in" /* IN */ === o || "not-in" /* NOT_IN */ === o);
                var l = xt.create(i, o, u);
                return function(t, e) {
                    if (e.g()) {
                        var n = Jt(t);
                        if (null !== n && !n.isEqual(e.field)) throw new N(S.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '" + n.toString() + "' and '" + e.field.toString() + "'");
                        var r = Xt(t);
                        null !== r && uc(t, e.field, r);
                    }
                    var i = function(t, e) {
                        for (var n = 0, r = t.filters; n < r.length; n++) {
                            var i = r[n];
                            if (e.indexOf(i.op) >= 0) return i.op;
                        }
                        return null;
                    }(t, 
                    /**
     * Given an operator, returns the set of operators that cannot be used with it.
     *
     * Operators in a query must adhere to the following set of rules:
     * 1. Only one array operator is allowed.
     * 2. Only one disjunctive operator is allowed.
     * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
     * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
     *
     * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
     * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
     */
                    function(t) {
                        switch (t) {
                          case "!=" /* NOT_EQUAL */ :
                            return [ "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ];

                          case "array-contains" /* ARRAY_CONTAINS */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "not-in" /* NOT_IN */ ];

                          case "in" /* IN */ :
                            return [ "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "not-in" /* NOT_IN */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ , "!=" /* NOT_EQUAL */ ];

                          default:
                            return [];
                        }
                    }(e.op));
                    if (null !== i) 
                    // Special case when it's a duplicate op to give a slightly clearer error message.
                    throw i === e.op ? new N(S.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + e.op.toString() + "' filter.") : new N(S.INVALID_ARGUMENT, "Invalid query. You cannot use '" + e.op.toString() + "' filters with '" + i.toString() + "' filters.");
                }(t, l), l;
            }(t._query, 0, e, t.firestore._databaseId, this.Qc, this.jc, this.Wc);
            return new $u(t.firestore, t.converter, function(t, e) {
                var n = t.filters.concat([ e ]);
                return new zt(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
            }(t._query, n));
        }, n;
    }(Xa), tc = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).Qc = t, r.Gc = n, r.type = "orderBy", r;
        }
        return __extends$1(n, e), n.prototype._apply = function(t) {
            var e = function(t, e, n) {
                if (null !== t.startAt) throw new N(S.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
                if (null !== t.endAt) throw new N(S.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
                var r = new jt(e, n);
                return function(t, e) {
                    if (null === Xt(t)) {
                        // This is the first order by. It must match any inequality.
                        var n = Jt(t);
                        null !== n && uc(t, n, e.field);
                    }
                }(t, r), r;
            }(t._query, this.Qc, this.Gc);
            return new $u(t.firestore, t.converter, function(t, e) {
                // TODO(dimond): validate that orderBy does not list the same key twice.
                var n = t.explicitOrderBy.concat([ e ]);
                return new zt(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
            }(t._query, e));
        }, n;
    }(Xa), ec = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this) || this).type = t, i.zc = n, i.Hc = r, i;
        }
        return __extends$1(n, e), n.prototype._apply = function(t) {
            return new $u(t.firestore, t.converter, ne(t._query, this.zc, this.Hc));
        }, n;
    }(Xa), nc = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this) || this).type = t, i.Jc = n, i.Yc = r, i;
        }
        return __extends$1(n, e), n.prototype._apply = function(t) {
            var e = ic(t, this.type, this.Jc, this.Yc);
            return new $u(t.firestore, t.converter, function(t, e) {
                return new zt(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
            }(t._query, e));
        }, n;
    }(Xa), rc = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this) || this).type = t, i.Jc = n, i.Yc = r, i;
        }
        return __extends$1(n, e), n.prototype._apply = function(t) {
            var e = ic(t, this.type, this.Jc, this.Yc);
            return new $u(t.firestore, t.converter, function(t, e) {
                return new zt(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
            }(t._query, e));
        }, n;
    }(Xa);

    /**
     * Creates a `QueryConstraint` that enforces that documents must contain the
     * specified field and that the value should satisfy the relation constraint
     * provided.
     *
     * @param fieldPath - The path to compare
     * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
     *   "&lt;=", "!=").
     * @param value - The value for comparison
     * @returns The created `Query`.
     */
    /** Helper function to create a bound from a document or fields */
    function ic(t, e, n, r) {
        if (n[0] = getModularInstance(n[0]), n[0] instanceof Ba) return function(t, e, n, r, i) {
            if (!r) throw new N(S.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n + "().");
            // Because people expect to continue/end a query at the exact document
            // provided, we need to use the implicit sort order rather than the explicit
            // sort order, because it's guaranteed to contain the document key. That way
            // the position becomes unambiguous and the query continues/ends exactly at
            // the provided document. Without the key (by using the explicit sort
            // orders), multiple documents could match the position, yielding duplicate
            // results.
            for (var o = [], s = 0, u = te(t); s < u.length; s++) {
                var a = u[s];
                if (a.field.isKeyField()) o.push(vt(e, r.key)); else {
                    var c = r.data.field(a.field);
                    if (nt(c)) throw new N(S.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + a.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                    if (null === c) {
                        var h = a.field.canonicalString();
                        throw new N(S.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + h + "' (used as the orderBy) does not exist.");
                    }
                    o.push(c);
                }
            }
            return new Ut(o, i);
        }(t._query, t.firestore._databaseId, e, n[0]._document, r);
        var i = Ia(t.firestore);
        return function(t, e, n, r, i, o) {
            // Use explicit order by's because it has to match the query the user made
            var s = t.explicitOrderBy;
            if (i.length > s.length) throw new N(S.INVALID_ARGUMENT, "Too many arguments provided to " + r + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
            for (var u = [], a = 0; a < i.length; a++) {
                var c = i[a];
                if (s[a].field.isKeyField()) {
                    if ("string" != typeof c) throw new N(S.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + r + "(), but got a " + typeof c);
                    if (!Zt(t) && -1 !== c.indexOf("/")) throw new N(S.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + r + "() must be a plain document ID, but '" + c + "' contains a slash.");
                    var h = t.path.child(W.fromString(c));
                    if (!at.isDocumentKey(h)) throw new N(S.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + r + "() must result in a valid document path, but '" + h + "' is not because it contains an odd number of segments.");
                    var f = new at(h);
                    u.push(vt(e, f));
                } else {
                    var l = xa(n, r, c);
                    u.push(l);
                }
            }
            return new Ut(u, o);
        }(t._query, t.firestore._databaseId, i, e, n, r);
    }

    function oc(t, e, n) {
        if ("string" == typeof (n = getModularInstance(n))) {
            if ("" === n) throw new N(S.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
            if (!Zt(e) && -1 !== n.indexOf("/")) throw new N(S.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + n + "' contains a '/' character.");
            var r = e.path.child(W.fromString(n));
            if (!at.isDocumentKey(r)) throw new N(S.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + r + "' is not because it has an odd number of segments (" + r.length + ").");
            return vt(t, new at(r));
        }
        if (n instanceof Yu) return vt(t, n._key);
        throw new N(S.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + Qu(n) + ".");
    }

    /**
     * Validates that the value passed into a disjunctive filter satisfies all
     * array requirements.
     */ function sc(t, e) {
        if (!Array.isArray(t) || 0 === t.length) throw new N(S.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e.toString() + "' filters.");
        if (t.length > 10) throw new N(S.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters support a maximum of 10 elements in the value array.");
    }

    function uc(t, e, n) {
        if (!n.isEqual(e)) throw new N(S.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '" + e.toString() + "' and so you must also use '" + e.toString() + "' as your first argument to orderBy(), but your first orderBy() is on field '" + n.toString() + "' instead.");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts Firestore's internal types to the JavaScript types that we expose
     * to the user.
     *
     * @internal
     */ var ac = /** @class */ function() {
        function t() {}
        return t.prototype.convertValue = function(t, e) {
            switch (void 0 === e && (e = "none"), ct(t)) {
              case 0 /* NullValue */ :
                return null;

              case 1 /* BooleanValue */ :
                return t.booleanValue;

              case 2 /* NumberValue */ :
                return tt(t.integerValue || t.doubleValue);

              case 3 /* TimestampValue */ :
                return this.convertTimestamp(t.timestampValue);

              case 4 /* ServerTimestampValue */ :
                return this.convertServerTimestamp(t, e);

              case 5 /* StringValue */ :
                return t.stringValue;

              case 6 /* BlobValue */ :
                return this.convertBytes(et(t.bytesValue));

              case 7 /* RefValue */ :
                return this.convertReference(t.referenceValue);

              case 8 /* GeoPointValue */ :
                return this.convertGeoPoint(t.geoPointValue);

              case 9 /* ArrayValue */ :
                return this.convertArray(t.arrayValue, e);

              case 10 /* ObjectValue */ :
                return this.convertObject(t.mapValue, e);

              default:
                throw L();
            }
        }, t.prototype.convertObject = function(t, e) {
            var n = this, r = {};
            return Q(t.fields, (function(t, i) {
                r[t] = n.convertValue(i, e);
            })), r;
        }, t.prototype.convertGeoPoint = function(t) {
            return new pa(tt(t.latitude), tt(t.longitude));
        }, t.prototype.convertArray = function(t, e) {
            var n = this;
            return (t.values || []).map((function(t) {
                return n.convertValue(t, e);
            }));
        }, t.prototype.convertServerTimestamp = function(t, e) {
            switch (e) {
              case "previous":
                var n = rt(t);
                return null == n ? null : this.convertValue(n, e);

              case "estimate":
                return this.convertTimestamp(it(t));

              default:
                return null;
            }
        }, t.prototype.convertTimestamp = function(t) {
            var e = Z(t);
            return new B(e.seconds, e.nanos);
        }, t.prototype.convertDocumentKey = function(t, e) {
            var n = W.fromString(t);
            O(Yn(n));
            var r = new xu(n.get(1), n.get(3)), i = new at(n.popFirst(5));
            return r.isEqual(e) || 
            // TODO(b/64130202): Somehow support foreign references.
            C("Document " + i + " contains a document reference within a different database (" + r.projectId + "/" + r.database + ") which is not supported. It will be treated as a reference in the current database (" + e.projectId + "/" + e.database + ") instead."), 
            i;
        }, t;
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts custom model object of type T into DocumentData by applying the
     * converter if it exists.
     *
     * This function is used when converting user objects to DocumentData
     * because we want to provide the user with a more specific error message if
     * their set() or fails due to invalid data originating from a toFirestore()
     * call.
     */ function cc(t, e, n) {
        // Cast to `any` in order to satisfy the union type constraint on
        // toFirestore().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e;
    }

    var hc = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).firestore = t, n;
        }
        return __extends$1(n, e), n.prototype.convertBytes = function(t) {
            return new la(t);
        }, n.prototype.convertReference = function(t) {
            var e = this.convertDocumentKey(t, this.firestore._databaseId);
            return new Yu(this.firestore, /* converter= */ null, e);
        }, n;
    }(ac), fc = /** @class */ function() {
        /** @hideconstructor */
        function t(t, e) {
            this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, 
            this._dataReader = Ia(t);
        }
        return t.prototype.set = function(t, e, n) {
            this._verifyNotCommitted();
            var r = lc(t, this._firestore), i = cc(r.converter, e, n), o = Ea(this._dataReader, "WriteBatch.set", r._key, i, null !== r.converter, n);
            return this._mutations.push(o.toMutation(r._key, Ne.none())), this;
        }, t.prototype.update = function(t, e, n) {
            for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
            this._verifyNotCommitted();
            var o, s = lc(t, this._firestore);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    return o = "string" == typeof (e = getModularInstance(e)) || e instanceof fa ? Ca(this._dataReader, "WriteBatch.update", s._key, e, n, r) : ka(this._dataReader, "WriteBatch.update", s._key, e), 
            this._mutations.push(o.toMutation(s._key, Ne.exists(!0))), this;
        }, 
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `WriteBatch` instance. Used for chaining method calls.
         */
        t.prototype.delete = function(t) {
            this._verifyNotCommitted();
            var e = lc(t, this._firestore);
            return this._mutations = this._mutations.concat(new Be(e._key, Ne.none())), this;
        }, 
        /**
         * Commits all of the writes in this write batch as a single atomic unit.
         *
         * The result of these writes will only be reflected in document reads that
         * occur after the returned Promise resolves. If the client is offline, the
         * write fails. If you would like to see local modifications or buffer writes
         * until the client is online, use the full Firestore SDK.
         *
         * @returns A Promise resolved once all of the writes in the batch have been
         * successfully written to the backend as an atomic unit (note that it won't
         * resolve while you're offline).
         */
        t.prototype.commit = function() {
            return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
        }, t.prototype._verifyNotCommitted = function() {
            if (this._committed) throw new N(S.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
        }, t;
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A write batch, used to perform multiple writes as a single atomic unit.
     *
     * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
     * provides methods for adding writes to the write batch. None of the writes
     * will be committed (or visible locally) until {@link WriteBatch.commit} is
     * called.
     */ function lc(t, e) {
        if ((t = getModularInstance(t)).firestore !== e) throw new N(S.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
    // legacy SDK.
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */ var dc = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).firestore = t, n;
        }
        return __extends$1(n, e), n.prototype.convertBytes = function(t) {
            return new la(t);
        }, n.prototype.convertReference = function(t) {
            var e = this.convertDocumentKey(t, this.firestore._databaseId);
            return new Yu(this.firestore, /* converter= */ null, e);
        }, n;
    }(ac);

    /**
     * Reads the document referred to by this `DocumentReference` from cache.
     * Returns an error if the document is not currently cached.
     *
     * @returns A Promise resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */ function pc(t, e, n) {
        for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
        t = Gu(t, Yu);
        var o = Gu(t.firestore, sa), s = Ia(o);
        return vc(o, [ ("string" == typeof (
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        e = getModularInstance(e)) || e instanceof fa ? Ca(s, "updateDoc", t._key, e, n, r) : ka(s, "updateDoc", t._key, e)).toMutation(t._key, Ne.exists(!0)) ]);
    }

    /**
     * Deletes the document referred to by the specified `DocumentReference`.
     *
     * @param reference - A reference to the document to delete.
     * @returns A Promise resolved once the document has been successfully
     * deleted from the backend (note that it won't resolve while you're offline).
     */ function yc(t) {
        for (var e, i, o, s = [], u = 1; u < arguments.length; u++) s[u - 1] = arguments[u];
        t = getModularInstance(t);
        var a = {
            includeMetadataChanges: !1
        }, c = 0;
        "object" != typeof s[c] || ra(s[c]) || (a = s[c], c++);
        var h, l, d, p = {
            includeMetadataChanges: a.includeMetadataChanges
        };
        if (ra(s[c])) {
            var y = s[c];
            s[c] = null === (e = y.next) || void 0 === e ? void 0 : e.bind(y), s[c + 1] = null === (i = y.error) || void 0 === i ? void 0 : i.bind(y), 
            s[c + 2] = null === (o = y.complete) || void 0 === o ? void 0 : o.bind(y);
        }
        if (t instanceof Yu) l = Gu(t.firestore, sa), d = Ht(t._key.path), h = {
            next: function(e) {
                s[c] && s[c](mc(l, t, e));
            },
            error: s[c + 1],
            complete: s[c + 2]
        }; else {
            var v = Gu(t, $u);
            l = Gu(v.firestore, sa), d = v._query;
            var m = new dc(l);
            h = {
                next: function(t) {
                    s[c] && s[c](new Wa(l, m, v, t));
                },
                error: s[c + 1],
                complete: s[c + 2]
            }, $a(t._query);
        }
        return function(t, e, i, o) {
            var s = this, u = new pu(o), a = new bs(e, u, i);
            return t.asyncQueue.enqueueAndForget((function() {
                return __awaiter(s, void 0, void 0, (function() {
                    var e;
                    return __generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            return e = ys, [ 4 /*yield*/ , Du(t) ];

                          case 1:
                            return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), a ]) ];
                        }
                    }));
                }));
            })), function() {
                u.Wo(), t.asyncQueue.enqueueAndForget((function() {
                    return __awaiter(s, void 0, void 0, (function() {
                        var e;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                return e = vs, [ 4 /*yield*/ , Du(t) ];

                              case 1:
                                return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), a ]) ];
                            }
                        }));
                    }));
                }));
            };
        }(ua(l), d, p, h);
    }

    /**
     * Locally writes `mutations` on the async queue.
     * @internal
     */ function vc(t, e) {
        return function(t, e) {
            var i = this, o = new wr;
            return t.asyncQueue.enqueueAndForget((function() {
                return __awaiter(i, void 0, void 0, (function() {
                    var n;
                    return __generator(this, (function(r) {
                        switch (r.label) {
                          case 0:
                            return n = Os, [ 4 /*yield*/ , Nu(t) ];

                          case 1:
                            return [ 2 /*return*/ , n.apply(void 0, [ r.sent(), e, o ]) ];
                        }
                    }));
                }));
            })), o.promise;
        }(ua(t), e);
    }

    /**
     * Converts a ViewSnapshot that contains the single document specified by `ref`
     * to a DocumentSnapshot.
     */ function mc(t, e, n) {
        var r = n.docs.get(e._key), i = new dc(t);
        return new Ga(t, i, e._key, r, new Qa(n.hasPendingWrites, n.fromCache), e.converter);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */ var gc = /** @class */ function(e) {
        // This class implements the same logic as the Transaction API in the Lite SDK
        // but is subclassed in order to return its own DocumentSnapshot types.
        /** @hideconstructor */
        function n(t, n) {
            var r = this;
            return (r = e.call(this, t, n) || this)._firestore = t, r;
        }
        /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */    return __extends$1(n, e), n.prototype.get = function(t) {
            var n = this, r = lc(t, this._firestore), i = new dc(this._firestore);
            return e.prototype.get.call(this, t).then((function(t) {
                return new Ga(n._firestore, i, r._key, t._document, new Qa(
                /* hasPendingWrites= */ !1, 
                /* fromCache= */ !1), r.converter);
            }));
        }, n;
    }(/** @class */ function() {
        /** @hideconstructor */
        function t(t, e) {
            this._firestore = t, this._transaction = e, this._dataReader = Ia(t)
            /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */;
        }
        return t.prototype.get = function(t) {
            var e = this, n = lc(t, this._firestore), r = new hc(this._firestore);
            return this._transaction.lookup([ n._key ]).then((function(t) {
                if (!t || 1 !== t.length) return L();
                var i = t[0];
                if (i.isFoundDocument()) return new Ba(e._firestore, r, i.key, i, n.converter);
                if (i.isNoDocument()) return new Ba(e._firestore, r, n._key, null, n.converter);
                throw L();
            }));
        }, t.prototype.set = function(t, e, n) {
            var r = lc(t, this._firestore), i = cc(r.converter, e, n), o = Ea(this._dataReader, "Transaction.set", r._key, i, null !== r.converter, n);
            return this._transaction.set(r._key, o), this;
        }, t.prototype.update = function(t, e, n) {
            for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
            var o, s = lc(t, this._firestore);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    return o = "string" == typeof (e = getModularInstance(e)) || e instanceof fa ? Ca(this._dataReader, "Transaction.update", s._key, e, n, r) : ka(this._dataReader, "Transaction.update", s._key, e), 
            this._transaction.update(s._key, o), this;
        }, 
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `Transaction` instance. Used for chaining method calls.
         */
        t.prototype.delete = function(t) {
            var e = lc(t, this._firestore);
            return this._transaction.delete(e._key), this;
        }, t;
    }());

    /**
     * Executes the given `updateFunction` and then attempts to commit the changes
     * applied within the transaction. If any document read within the transaction
     * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
     * commit after 5 attempts, the transaction fails.
     *
     * The maximum number of writes allowed in a single transaction is 500.
     *
     * @param firestore - A reference to the Firestore database to run this
     * transaction against.
     * @param updateFunction - The function to execute within the transaction
     * context.
     * @returns If the transaction completed successfully or was explicitly aborted
     * (the `updateFunction` returned a failed promise), the promise returned by the
     * `updateFunction `is returned here. Otherwise, if the transaction failed, a
     * rejected promise with the corresponding failure error is returned.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Helper function to assert Uint8Array is available at runtime. */ function wc() {
        if ("undefined" == typeof Uint8Array) throw new N(S.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
    }

    /** Helper function to assert Base64 functions are available at runtime. */ function bc() {
        if ("undefined" == typeof atob) throw new N(S.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
    }

    /** Immutable class holding a blob (binary data) */ var Ic = /** @class */ function() {
        function t(t) {
            this._delegate = t;
        }
        return t.fromBase64String = function(e) {
            return bc(), new t(la.fromBase64String(e));
        }, t.fromUint8Array = function(e) {
            return wc(), new t(la.fromUint8Array(e));
        }, t.prototype.toBase64 = function() {
            return bc(), this._delegate.toBase64();
        }, t.prototype.toUint8Array = function() {
            return wc(), this._delegate.toUint8Array();
        }, t.prototype.isEqual = function(t) {
            return this._delegate.isEqual(t._delegate);
        }, t.prototype.toString = function() {
            return "Blob(base64: " + this.toBase64() + ")";
        }, t;
    }(), Ec = /** @class */ function() {
        function t() {}
        return t.prototype.enableIndexedDbPersistence = function(t, e) {
            return function(t, e) {
                ha(t = Gu(t, sa));
                var n = ua(t), r = t._freezeSettings(), i = new lu;
                return ca(n, i, new hu(i, r.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
            }(t._delegate, {
                forceOwnership: e
            });
        }, t.prototype.enableMultiTabIndexedDbPersistence = function(t) {
            return function(t) {
                ha(t = Gu(t, sa));
                var e = ua(t), n = t._freezeSettings(), r = new lu;
                return ca(e, r, new fu(r, n.cacheSizeBytes));
            }(t._delegate);
        }, t.prototype.clearIndexedDbPersistence = function(t) {
            return function(t) {
                var e = this;
                if (t._initialized && !t._terminated) throw new N(S.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
                var i = new wr;
                return t._queue.enqueueAndForgetEvenWhileRestricted((function() {
                    return __awaiter(e, void 0, void 0, (function() {
                        var e;
                        return __generator(this, (function(o) {
                            switch (o.label) {
                              case 0:
                                return o.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , function(t) {
                                    return __awaiter(this, void 0, void 0, (function() {
                                        var e;
                                        return __generator(this, (function(n) {
                                            switch (n.label) {
                                              case 0:
                                                return Er.yt() ? (e = t + "main", [ 4 /*yield*/ , Er.delete(e) ]) : [ 2 /*return*/ , Promise.resolve() ];

                                              case 1:
                                                return n.sent(), [ 2 /*return*/ ];
                                            }
                                        }));
                                    }));
                                }(Li(t._databaseId, t._persistenceKey)) ];

                              case 1:
                                return o.sent(), i.resolve(), [ 3 /*break*/ , 3 ];

                              case 2:
                                return e = o.sent(), i.reject(e), [ 3 /*break*/ , 3 ];

                              case 3:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }));
                })), i.promise
                /**
     * Waits until all currently pending writes for the active user have been
     * acknowledged by the backend.
     *
     * The returned Promise resolves immediately if there are no outstanding writes.
     * Otherwise, the Promise waits for all previously issued writes (including
     * those written in a previous app session), but it does not wait for writes
     * that were added after the function is called. If you want to wait for
     * additional writes, call `waitForPendingWrites()` again.
     *
     * Any outstanding `waitForPendingWrites()` Promises are rejected during user
     * changes.
     *
     * @returns A Promise which resolves when all currently pending writes have been
     * acknowledged by the backend.
     */;
            }(t._delegate);
        }, t;
    }(), Tc = /** @class */ function() {
        function t(t, e, n) {
            var r = this;
            this._delegate = e, this.Xc = n, this.INTERNAL = {
                delete: function() {
                    return r.terminate();
                }
            }, t instanceof xu || (this.Zc = t);
        }
        return Object.defineProperty(t.prototype, "_databaseId", {
            get: function() {
                return this._delegate._databaseId;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.settings = function(t) {
            var e = this._delegate._getSettings();
            t.merge || e.host === t.host || x("You are overriding the original host. If you did not intend to override your settings, use {merge: true}."), 
            t.merge && 
            // Remove the property from the settings once the merge is completed
            delete (t = Object.assign(Object.assign({}, e), t)).merge, this._delegate._setSettings(t);
        }, t.prototype.useEmulator = function(t, e, n) {
            void 0 === n && (n = {}), function(t, e, n, r) {
                void 0 === r && (r = {});
                var i = (t = Gu(t, Hu))._getSettings();
                if ("firestore.googleapis.com" !== i.host && i.host !== e && x("Host has been set in both settings() and useEmulator(), emulator host will be used"), 
                t._setSettings(Object.assign(Object.assign({}, i), {
                    host: e + ":" + n,
                    ssl: !1
                })), r.mockUserToken) {
                    // Let createMockUserToken validate first (catches common mistakes like
                    // invalid field "uid" and missing field "sub" / "user_id".)
                    var o = createMockUserToken(r.mockUserToken), s = r.mockUserToken.sub || r.mockUserToken.user_id;
                    if (!s) throw new N(S.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
                    t._credentials = new Pu(new Lu(o, new ho(s)));
                }
            }(this._delegate, t, e, n);
        }, t.prototype.enableNetwork = function() {
            return function(t) {
                var e = this;
                return t.asyncQueue.enqueue((function() {
                    return __awaiter(e, void 0, void 0, (function() {
                        var e, n;
                        return __generator(this, (function(r) {
                            switch (r.label) {
                              case 0:
                                return [ 4 /*yield*/ , Tu(t) ];

                              case 1:
                                return e = r.sent(), [ 4 /*yield*/ , Su(t) ];

                              case 2:
                                return n = r.sent(), [ 2 /*return*/ , (e.setNetworkEnabled(!0), function(t) {
                                    var e = P$1(t);
                                    return e.Or.delete(0 /* UserDisabled */), Mo(e);
                                }(n)) ];
                            }
                        }));
                    }));
                }));
            }
            /** Disables the network connection. Pending operations will not complete. */ (ua(Gu(this._delegate, sa)));
        }, t.prototype.disableNetwork = function() {
            return function(t) {
                var e = this;
                return t.asyncQueue.enqueue((function() {
                    return __awaiter(e, void 0, void 0, (function() {
                        var e, i;
                        return __generator(this, (function(o) {
                            switch (o.label) {
                              case 0:
                                return [ 4 /*yield*/ , Tu(t) ];

                              case 1:
                                return e = o.sent(), [ 4 /*yield*/ , Su(t) ];

                              case 2:
                                return i = o.sent(), [ 2 /*return*/ , (e.setNetworkEnabled(!1), function(t) {
                                    return __awaiter(this, void 0, void 0, (function() {
                                        var e;
                                        return __generator(this, (function(n) {
                                            switch (n.label) {
                                              case 0:
                                                return (e = P$1(t)).Or.add(0 /* UserDisabled */), [ 4 /*yield*/ , Vo(e) ];

                                              case 1:
                                                return n.sent(), 
                                                // Set the OnlineState to Offline so get()s return from cache, etc.
                                                e.Br.set("Offline" /* Offline */), [ 2 /*return*/ ];
                                            }
                                        }));
                                    }));
                                }(i)) ];
                            }
                        }));
                    }));
                }));
            }
            /**
     * Returns a Promise that resolves when all writes that were pending at the time
     * this method was called received server acknowledgement. An acknowledgement
     * can be either acceptance or rejection.
     */ (ua(Gu(this._delegate, sa)));
        }, t.prototype.enablePersistence = function(t) {
            var e = !1, n = !1;
            return t && Bu("synchronizeTabs", e = !!t.synchronizeTabs, "experimentalForceOwningTab", n = !!t.experimentalForceOwningTab), 
            e ? this.Xc.enableMultiTabIndexedDbPersistence(this) : this.Xc.enableIndexedDbPersistence(this, n);
        }, t.prototype.clearPersistence = function() {
            return this.Xc.clearIndexedDbPersistence(this);
        }, t.prototype.terminate = function() {
            return this.Zc && (this.Zc._removeServiceInstance("firestore"), this.Zc._removeServiceInstance("firestore-exp")), 
            this._delegate._delete();
        }, t.prototype.waitForPendingWrites = function() {
            return function(t) {
                var e = this, i = new wr;
                return t.asyncQueue.enqueueAndForget((function() {
                    return __awaiter(e, void 0, void 0, (function() {
                        var e;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                return e = Us, [ 4 /*yield*/ , Nu(t) ];

                              case 1:
                                return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), i ]) ];
                            }
                        }));
                    }));
                })), i.promise;
            }(ua(Gu(this._delegate, sa)));
        }, t.prototype.onSnapshotsInSync = function(t) {
            return function(t, e) {
                return function(t, e) {
                    var i = this, o = new pu(e);
                    return t.asyncQueue.enqueueAndForget((function() {
                        return __awaiter(i, void 0, void 0, (function() {
                            var e;
                            return __generator(this, (function(n) {
                                switch (n.label) {
                                  case 0:
                                    return e = function(t, e) {
                                        P$1(t).Gr.add(e), 
                                        // Immediately fire an initial event, indicating all existing listeners
                                        // are in-sync.
                                        e.next();
                                    }, [ 4 /*yield*/ , Du(t) ];

                                  case 1:
                                    return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), o ]) ];
                                }
                            }));
                        }));
                    })), function() {
                        o.Wo(), t.asyncQueue.enqueueAndForget((function() {
                            return __awaiter(i, void 0, void 0, (function() {
                                var e;
                                return __generator(this, (function(n) {
                                    switch (n.label) {
                                      case 0:
                                        return e = function(t, e) {
                                            P$1(t).Gr.delete(e);
                                        }, [ 4 /*yield*/ , Du(t) ];

                                      case 1:
                                        return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), o ]) ];
                                    }
                                }));
                            }));
                        }));
                    }
                    /**
     * Takes an updateFunction in which a set of reads and writes can be performed
     * atomically. In the updateFunction, the client can read and write values
     * using the supplied transaction object. After the updateFunction, all
     * changes will be committed. If a retryable error occurs (ex: some other
     * client has changed any of the data referenced), then the updateFunction
     * will be called again after a backoff. If the updateFunction still fails
     * after all retries, then the transaction will be rejected.
     *
     * The transaction object passed to the updateFunction contains methods for
     * accessing documents and collections. Unlike other datastore access, data
     * accessed with the transaction will not reflect local changes that have not
     * been committed. For this reason, it is required that all reads are
     * performed before any writes. Transactions must be performed while online.
     */;
                }(ua(t = Gu(t, sa)), ra(e) ? e : {
                    next: e
                });
            }(this._delegate, t);
        }, Object.defineProperty(t.prototype, "app", {
            get: function() {
                if (!this.Zc) throw new N(S.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
                return this.Zc;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.collection = function(t) {
            try {
                return new Vc(this, Ju(this._delegate, t));
            } catch (t) {
                throw Cc(t, "collection()", "Firestore.collection()");
            }
        }, t.prototype.doc = function(t) {
            try {
                return new kc(this, Zu(this._delegate, t));
            } catch (t) {
                throw Cc(t, "doc()", "Firestore.doc()");
            }
        }, t.prototype.collectionGroup = function(t) {
            try {
                return new Pc(this, function(t, e) {
                    if (t = Gu(t, Hu), qu("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new N(S.INVALID_ARGUMENT, "Invalid collection ID '" + e + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
                    return new $u(t, 
                    /* converter= */ null, 
                    /**
     * Creates a new Query for a collection group query that matches all documents
     * within the provided collection group.
     */
                    function(t) {
                        return new zt(W.emptyPath(), t);
                    }(e));
                }(this._delegate, t));
            } catch (t) {
                throw Cc(t, "collectionGroup()", "Firestore.collectionGroup()");
            }
        }, t.prototype.runTransaction = function(t) {
            var e = this;
            return function(t, e) {
                return function(t, e) {
                    var i = this, o = new wr;
                    return t.asyncQueue.enqueueAndForget((function() {
                        return __awaiter(i, void 0, void 0, (function() {
                            var n;
                            return __generator(this, (function(r) {
                                switch (r.label) {
                                  case 0:
                                    return [ 4 /*yield*/ , function(t) {
                                        return Eu(t).then((function(t) {
                                            return t.datastore;
                                        }));
                                    }(t) ];

                                  case 1:
                                    return n = r.sent(), new mu(t.asyncQueue, n, e, o).run(), [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    })), o.promise;
                }(ua(t), (function(n) {
                    return e(new gc(t, n));
                }));
            }(this._delegate, (function(n) {
                return t(new Nc(e, n));
            }));
        }, t.prototype.batch = function() {
            var t = this;
            return ua(this._delegate), new Dc(new fc(this._delegate, (function(e) {
                return vc(t._delegate, e);
            })));
        }, t.prototype.loadBundle = function(t) {
            throw new N(S.FAILED_PRECONDITION, '"loadBundle()" does not exist, have you imported "firebase/firestore/bundle"?');
        }, t.prototype.namedQuery = function(t) {
            throw new N(S.FAILED_PRECONDITION, '"namedQuery()" does not exist, have you imported "firebase/firestore/bundle"?');
        }, t;
    }(), _c = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).firestore = t, n;
        }
        return __extends$1(n, e), n.prototype.convertBytes = function(t) {
            return new Ic(new la(t));
        }, n.prototype.convertReference = function(t) {
            var e = this.convertDocumentKey(t, this.firestore._databaseId);
            return kc.tu(e, this.firestore, /* converter= */ null);
        }, n;
    }(ac);

    /**
     * The persistence provider included with the full Firestore SDK.
     */ function Sc(t) {
        var e;
        e = t, D.setLogLevel(e);
    }

    /**
     * A reference to a transaction.
     */ var Nc = /** @class */ function() {
        function t(t, e) {
            this._firestore = t, this._delegate = e, this._userDataWriter = new _c(t);
        }
        return t.prototype.get = function(t) {
            var e = this, n = qc(t);
            return this._delegate.get(n).then((function(t) {
                return new Lc(e._firestore, new Ga(e._firestore._delegate, e._userDataWriter, t._key, t._document, t.metadata, n.converter));
            }));
        }, t.prototype.set = function(t, e, n) {
            var r = qc(t);
            return n ? (Uu("Transaction.set", n), this._delegate.set(r, e, n)) : this._delegate.set(r, e), 
            this;
        }, t.prototype.update = function(t, n, r) {
            for (var i, o = [], s = 3; s < arguments.length; s++) o[s - 3] = arguments[s];
            var u = qc(t);
            return 2 === arguments.length ? this._delegate.update(u, n) : (i = this._delegate).update.apply(i, __spreadArray([ u, n, r ], o)), 
            this;
        }, t.prototype.delete = function(t) {
            var e = qc(t);
            return this._delegate.delete(e), this;
        }, t;
    }(), Dc = /** @class */ function() {
        function t(t) {
            this._delegate = t;
        }
        return t.prototype.set = function(t, e, n) {
            var r = qc(t);
            return n ? (Uu("WriteBatch.set", n), this._delegate.set(r, e, n)) : this._delegate.set(r, e), 
            this;
        }, t.prototype.update = function(t, n, r) {
            for (var i, o = [], s = 3; s < arguments.length; s++) o[s - 3] = arguments[s];
            var u = qc(t);
            return 2 === arguments.length ? this._delegate.update(u, n) : (i = this._delegate).update.apply(i, __spreadArray([ u, n, r ], o)), 
            this;
        }, t.prototype.delete = function(t) {
            var e = qc(t);
            return this._delegate.delete(e), this;
        }, t.prototype.commit = function() {
            return this._delegate.commit();
        }, t;
    }(), Ac = /** @class */ function() {
        function t(t, e, n) {
            this._firestore = t, this._userDataWriter = e, this._delegate = n;
        }
        return t.prototype.fromFirestore = function(t, e) {
            var n = new za(this._firestore._delegate, this._userDataWriter, t._key, t._document, t.metadata, 
            /* converter= */ null);
            return this._delegate.fromFirestore(new Oc(this._firestore, n), null != e ? e : {});
        }, t.prototype.toFirestore = function(t, e) {
            return e ? this._delegate.toFirestore(t, e) : this._delegate.toFirestore(t);
        }, 
        // Use the same instance of `FirestoreDataConverter` for the given instances
        // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will
        // compare equal for two objects created with the same converter instance.
        t.eu = function(e, n) {
            var r = t.nu, i = r.get(e);
            i || (i = new WeakMap, r.set(e, i));
            var o = i.get(n);
            return o || (o = new t(e, new _c(e), n), i.set(n, o)), o;
        }, t;
    }();

    Ac.nu = new WeakMap;

    /**
     * A reference to a particular document in a collection in the database.
     */
    var kc = /** @class */ function() {
        function t(t, e) {
            this.firestore = t, this._delegate = e, this._userDataWriter = new _c(t);
        }
        return t.su = function(e, n, r) {
            if (e.length % 2 != 0) throw new N(S.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + e.canonicalString() + " has " + e.length);
            return new t(n, new Yu(n._delegate, r, new at(e)));
        }, t.tu = function(e, n, r) {
            return new t(n, new Yu(n._delegate, r, e));
        }, Object.defineProperty(t.prototype, "id", {
            get: function() {
                return this._delegate.id;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "parent", {
            get: function() {
                return new Vc(this.firestore, this._delegate.parent);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "path", {
            get: function() {
                return this._delegate.path;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.collection = function(t) {
            try {
                return new Vc(this.firestore, Ju(this._delegate, t));
            } catch (t) {
                throw Cc(t, "collection()", "DocumentReference.collection()");
            }
        }, t.prototype.isEqual = function(t) {
            return (t = getModularInstance(t)) instanceof Yu && ta(this._delegate, t);
        }, t.prototype.set = function(t, e) {
            e = Uu("DocumentReference.set", e);
            try {
                return function(t, e, n) {
                    t = Gu(t, Yu);
                    var r = Gu(t.firestore, sa), i = cc(t.converter, e, n);
                    return vc(r, [ Ea(Ia(r), "setDoc", t._key, i, null !== t.converter, n).toMutation(t._key, Ne.none()) ]);
                }(this._delegate, t, e);
            } catch (t) {
                throw Cc(t, "setDoc()", "DocumentReference.set()");
            }
        }, t.prototype.update = function(t, n) {
            for (var r = [], i = 2; i < arguments.length; i++) r[i - 2] = arguments[i];
            try {
                return 1 === arguments.length ? pc(this._delegate, t) : pc.apply(void 0, __spreadArray([ this._delegate, t, n ], r));
            } catch (t) {
                throw Cc(t, "updateDoc()", "DocumentReference.update()");
            }
        }, t.prototype.delete = function() {
            return vc(Gu((t = this._delegate).firestore, sa), [ new Be(t._key, Ne.none()) ]);
            var t;
            /**
     * Add a new document to specified `CollectionReference` with the given data,
     * assigning it a document ID automatically.
     *
     * @param reference - A reference to the collection to add this document to.
     * @param data - An Object containing the data for the new document.
     * @returns A Promise resolved with a `DocumentReference` pointing to the
     * newly created document after it has been written to the backend (Note that it
     * won't resolve while you're offline).
     */    }, t.prototype.onSnapshot = function() {
            for (var t = this, e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            var r = xc(e), i = Rc(e, (function(e) {
                return new Lc(t.firestore, new Ga(t.firestore._delegate, t._userDataWriter, e._key, e._document, e.metadata, t._delegate.converter));
            }));
            return yc(this._delegate, r, i);
        }, t.prototype.get = function(t) {
            var e = this;
            return ("cache" === (null == t ? void 0 : t.source) ? function(t) {
                t = Gu(t, Yu);
                var e = Gu(t.firestore, sa), i = ua(e), o = new dc(e);
                return function(t, e) {
                    var i = this, o = new wr;
                    return t.asyncQueue.enqueueAndForget((function() {
                        return __awaiter(i, void 0, void 0, (function() {
                            var i;
                            return __generator(this, (function(s) {
                                switch (s.label) {
                                  case 0:
                                    return i = function(t, e, i) {
                                        return __awaiter(this, void 0, void 0, (function() {
                                            var n, o;
                                            return __generator(this, (function(r) {
                                                switch (r.label) {
                                                  case 0:
                                                    return r.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , function(t, e) {
                                                        var n = P$1(t);
                                                        return n.persistence.runTransaction("read document", "readonly", (function(t) {
                                                            return n.Mn.mn(t, e);
                                                        }));
                                                    }(t, e) ];

                                                  case 1:
                                                    return (o = r.sent()).isFoundDocument() ? i.resolve(o) : o.isNoDocument() ? i.resolve(null) : i.reject(new N(S.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")), 
                                                    [ 3 /*break*/ , 3 ];

                                                  case 2:
                                                    return n = r.sent(), o = cs(n, "Failed to get document '" + e + " from cache"), 
                                                    i.reject(o), [ 3 /*break*/ , 3 ];

                                                  case 3:
                                                    return [ 2 /*return*/ ];
                                                }
                                            }));
                                        }));
                                    }, [ 4 /*yield*/ , _u(t) ];

                                  case 1:
                                    return [ 2 /*return*/ , i.apply(void 0, [ s.sent(), e, o ]) ];
                                }
                            }));
                        }));
                    })), o.promise;
                }(i, t._key).then((function(n) {
                    return new Ga(e, o, t._key, n, new Qa(null !== n && n.hasLocalMutations, 
                    /* fromCache= */ !0), t.converter);
                }));
            }(this._delegate) : "server" === (null == t ? void 0 : t.source) ? function(t) {
                t = Gu(t, Yu);
                var e = Gu(t.firestore, sa);
                return Au(ua(e), t._key, {
                    source: "server"
                }).then((function(n) {
                    return mc(e, t, n);
                }));
            }(this._delegate) : function(t) {
                t = Gu(t, Yu);
                var e = Gu(t.firestore, sa);
                return Au(ua(e), t._key).then((function(n) {
                    return mc(e, t, n);
                }));
            }(this._delegate)).then((function(t) {
                return new Lc(e.firestore, new Ga(e.firestore._delegate, e._userDataWriter, t._key, t._document, t.metadata, e._delegate.converter));
            }));
        }, t.prototype.withConverter = function(e) {
            return new t(this.firestore, e ? this._delegate.withConverter(Ac.eu(this.firestore, e)) : this._delegate.withConverter(null));
        }, t;
    }();

    /**
     * Replaces the function name in an error thrown by the firestore-exp API
     * with the function names used in the classic API.
     */ function Cc(t, e, n) {
        return t.message = t.message.replace(e, n), t
        /**
     * Iterates the list of arguments from an `onSnapshot` call and returns the
     * first argument that may be an `SnapshotListenOptions` object. Returns an
     * empty object if none is found.
     */;
    }

    function xc(t) {
        for (var e = 0, n = t; e < n.length; e++) {
            var r = n[e];
            if ("object" == typeof r && !ra(r)) return r;
        }
        return {};
    }

    /**
     * Creates an observer that can be passed to the firestore-exp SDK. The
     * observer converts all observed values into the format expected by the classic
     * SDK.
     *
     * @param args - The list of arguments from an `onSnapshot` call.
     * @param wrapper - The function that converts the firestore-exp type into the
     * type used by this shim.
     */ function Rc(t, e) {
        var n, r, i;
        return {
            next: function(t) {
                i.next && i.next(e(t));
            },
            error: null === (n = (i = ra(t[0]) ? t[0] : ra(t[1]) ? t[1] : "function" == typeof t[0] ? {
                next: t[0],
                error: t[1],
                complete: t[2]
            } : {
                next: t[1],
                error: t[2],
                complete: t[3]
            }).error) || void 0 === n ? void 0 : n.bind(i),
            complete: null === (r = i.complete) || void 0 === r ? void 0 : r.bind(i)
        };
    }

    var Lc = /** @class */ function() {
        function t(t, e) {
            this._firestore = t, this._delegate = e;
        }
        return Object.defineProperty(t.prototype, "ref", {
            get: function() {
                return new kc(this._firestore, this._delegate.ref);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "id", {
            get: function() {
                return this._delegate.id;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "metadata", {
            get: function() {
                return this._delegate.metadata;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "exists", {
            get: function() {
                return this._delegate.exists();
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.data = function(t) {
            return this._delegate.data(t);
        }, t.prototype.get = function(t, e) {
            return this._delegate.get(t, e);
        }, t.prototype.isEqual = function(t) {
            return Ya(this._delegate, t._delegate);
        }, t;
    }(), Oc = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends$1(n, e), n.prototype.data = function(t) {
            return this._delegate.data(t);
        }, n;
    }(Lc), Pc = /** @class */ function() {
        function t(t, e) {
            this.firestore = t, this._delegate = e, this._userDataWriter = new _c(t);
        }
        return t.prototype.where = function(e, n, r) {
            try {
                // The "as string" cast is a little bit of a hack. `where` accepts the
                // FieldPath Compat type as input, but is not typed as such in order to
                // not expose this via our public typings file.
                return new t(this.firestore, Ja(this._delegate, function(t, e, n) {
                    var r = e, i = Ka("where", t);
                    return new Za(i, r, n);
                }(e, n, r)));
            } catch (e) {
                throw Cc(e, /(orderBy|where)\(\)/, "Query.$1()");
            }
        }, t.prototype.orderBy = function(e, n) {
            try {
                // The "as string" cast is a little bit of a hack. `orderBy` accepts the
                // FieldPath Compat type as input, but is not typed as such in order to
                // not expose this via our public typings file.
                return new t(this.firestore, Ja(this._delegate, function(t, e) {
                    void 0 === e && (e = "asc");
                    var n = e, r = Ka("orderBy", t);
                    return new tc(r, n);
                }(e, n)));
            } catch (e) {
                throw Cc(e, /(orderBy|where)\(\)/, "Query.$1()");
            }
        }, t.prototype.limit = function(e) {
            try {
                return new t(this.firestore, Ja(this._delegate, function(t) {
                    return zu("limit", t), new ec("limit", t, "F" /* First */);
                }(e)));
            } catch (e) {
                throw Cc(e, "limit()", "Query.limit()");
            }
        }, t.prototype.limitToLast = function(e) {
            try {
                return new t(this.firestore, Ja(this._delegate, function(t) {
                    return zu("limitToLast", t), new ec("limitToLast", t, "L" /* Last */);
                }(e)));
            } catch (e) {
                throw Cc(e, "limitToLast()", "Query.limitToLast()");
            }
        }, t.prototype.startAt = function() {
            for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            try {
                return new t(this.firestore, Ja(this._delegate, function() {
                    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                    return new nc("startAt", t, /*before=*/ !0);
                }.apply(void 0, e)));
            } catch (e) {
                throw Cc(e, "startAt()", "Query.startAt()");
            }
        }, t.prototype.startAfter = function() {
            for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            try {
                return new t(this.firestore, Ja(this._delegate, function() {
                    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                    return new nc("startAfter", t, 
                    /*before=*/ !1);
                }.apply(void 0, e)));
            } catch (e) {
                throw Cc(e, "startAfter()", "Query.startAfter()");
            }
        }, t.prototype.endBefore = function() {
            for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            try {
                return new t(this.firestore, Ja(this._delegate, function() {
                    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                    return new rc("endBefore", t, /*before=*/ !0);
                }.apply(void 0, e)));
            } catch (e) {
                throw Cc(e, "endBefore()", "Query.endBefore()");
            }
        }, t.prototype.endAt = function() {
            for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            try {
                return new t(this.firestore, Ja(this._delegate, function() {
                    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                    return new rc("endAt", t, /*before=*/ !1);
                }.apply(void 0, e)));
            } catch (e) {
                throw Cc(e, "endAt()", "Query.endAt()");
            }
        }, t.prototype.isEqual = function(t) {
            return ea(this._delegate, t._delegate);
        }, t.prototype.get = function(t) {
            var e = this;
            return ("cache" === (null == t ? void 0 : t.source) ? 
            /**
         * Executes the query and returns the results as a `QuerySnapshot` from cache.
         * Returns an error if the document is not currently cached.
         *
         * @returns A Promise that will be resolved with the results of the query.
         */
            function(t) {
                t = Gu(t, $u);
                var e = Gu(t.firestore, sa), i = ua(e), o = new dc(e);
                return function(t, e) {
                    var i = this, o = new wr;
                    return t.asyncQueue.enqueueAndForget((function() {
                        return __awaiter(i, void 0, void 0, (function() {
                            var i;
                            return __generator(this, (function(s) {
                                switch (s.label) {
                                  case 0:
                                    return i = function(t, e, i) {
                                        return __awaiter(this, void 0, void 0, (function() {
                                            var n, o, s, u, a;
                                            return __generator(this, (function(r) {
                                                switch (r.label) {
                                                  case 0:
                                                    return r.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , Hi(t, e, 
                                                    /* usePreviousResults= */ !0) ];

                                                  case 1:
                                                    return a = r.sent(), n = new Ds(e, a.Bn), o = n._o(a.documents), s = n.applyChanges(o, 
                                                    /* updateLimboDocuments= */ !1), i.resolve(s.snapshot), [ 3 /*break*/ , 3 ];

                                                  case 2:
                                                    return u = r.sent(), a = cs(u, "Failed to execute query '" + e + " against cache"), 
                                                    i.reject(a), [ 3 /*break*/ , 3 ];

                                                  case 3:
                                                    return [ 2 /*return*/ ];
                                                }
                                            }));
                                        }));
                                    }, [ 4 /*yield*/ , _u(t) ];

                                  case 1:
                                    return [ 2 /*return*/ , i.apply(void 0, [ s.sent(), e, o ]) ];
                                }
                            }));
                        }));
                    })), o.promise;
                }(i, t._query).then((function(n) {
                    return new Wa(e, o, t, n);
                }));
            }(this._delegate) : "server" === (null == t ? void 0 : t.source) ? function(t) {
                t = Gu(t, $u);
                var e = Gu(t.firestore, sa), n = ua(e), r = new dc(e);
                return ku(n, t._query, {
                    source: "server"
                }).then((function(n) {
                    return new Wa(e, r, t, n);
                }));
            }(this._delegate) : function(t) {
                t = Gu(t, $u);
                var e = Gu(t.firestore, sa), n = ua(e), r = new dc(e);
                return $a(t._query), ku(n, t._query).then((function(n) {
                    return new Wa(e, r, t, n);
                }));
            }(this._delegate)).then((function(t) {
                return new Mc(e.firestore, new Wa(e.firestore._delegate, e._userDataWriter, e._delegate, t._snapshot));
            }));
        }, t.prototype.onSnapshot = function() {
            for (var t = this, e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            var r = xc(e), i = Rc(e, (function(e) {
                return new Mc(t.firestore, new Wa(t.firestore._delegate, t._userDataWriter, t._delegate, e._snapshot));
            }));
            return yc(this._delegate, r, i);
        }, t.prototype.withConverter = function(e) {
            return new t(this.firestore, e ? this._delegate.withConverter(Ac.eu(this.firestore, e)) : this._delegate.withConverter(null));
        }, t;
    }(), Fc = /** @class */ function() {
        function t(t, e) {
            this._firestore = t, this._delegate = e;
        }
        return Object.defineProperty(t.prototype, "type", {
            get: function() {
                return this._delegate.type;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "doc", {
            get: function() {
                return new Oc(this._firestore, this._delegate.doc);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "oldIndex", {
            get: function() {
                return this._delegate.oldIndex;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "newIndex", {
            get: function() {
                return this._delegate.newIndex;
            },
            enumerable: !1,
            configurable: !0
        }), t;
    }(), Mc = /** @class */ function() {
        function t(t, e) {
            this._firestore = t, this._delegate = e;
        }
        return Object.defineProperty(t.prototype, "query", {
            get: function() {
                return new Pc(this._firestore, this._delegate.query);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "metadata", {
            get: function() {
                return this._delegate.metadata;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this._delegate.size;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "empty", {
            get: function() {
                return this._delegate.empty;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "docs", {
            get: function() {
                var t = this;
                return this._delegate.docs.map((function(e) {
                    return new Oc(t._firestore, e);
                }));
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.docChanges = function(t) {
            var e = this;
            return this._delegate.docChanges(t).map((function(t) {
                return new Fc(e._firestore, t);
            }));
        }, t.prototype.forEach = function(t, e) {
            var n = this;
            this._delegate.forEach((function(r) {
                t.call(e, new Oc(n._firestore, r));
            }));
        }, t.prototype.isEqual = function(t) {
            return Ya(this._delegate, t._delegate);
        }, t;
    }(), Vc = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this, t, n) || this).firestore = t, r._delegate = n, r;
        }
        return __extends$1(n, e), Object.defineProperty(n.prototype, "id", {
            get: function() {
                return this._delegate.id;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(n.prototype, "path", {
            get: function() {
                return this._delegate.path;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(n.prototype, "parent", {
            get: function() {
                var t = this._delegate.parent;
                return t ? new kc(this.firestore, t) : null;
            },
            enumerable: !1,
            configurable: !0
        }), n.prototype.doc = function(t) {
            try {
                return new kc(this.firestore, void 0 === t ? Zu(this._delegate) : Zu(this._delegate, t));
            } catch (t) {
                throw Cc(t, "doc()", "CollectionReference.doc()");
            }
        }, n.prototype.add = function(t) {
            var e = this;
            return function(t, e) {
                var n = Gu(t.firestore, sa), r = Zu(t), i = cc(t.converter, e);
                return vc(n, [ Ea(Ia(t.firestore), "addDoc", r._key, i, null !== t.converter, {}).toMutation(r._key, Ne.exists(!1)) ]).then((function() {
                    return r;
                }));
            }(this._delegate, t).then((function(t) {
                return new kc(e.firestore, t);
            }));
        }, n.prototype.isEqual = function(t) {
            return ta(this._delegate, t._delegate);
        }, n.prototype.withConverter = function(t) {
            return new n(this.firestore, t ? this._delegate.withConverter(Ac.eu(this.firestore, t)) : this._delegate.withConverter(null));
        }, n;
    }(Pc);

    function qc(t) {
        return Gu(t, Yu);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The objects that are a part of this API are exposed to third-parties as
    // compiled javascript so we want to flag our private members with a leading
    // underscore to discourage their use.
    /**
     * A `FieldPath` refers to a field in a document. The path may consist of a
     * single field name (referring to a top-level field in the document), or a list
     * of field names (referring to a nested field in the document).
     */ var Uc = /** @class */ function() {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        function t() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            this._delegate = new (fa.bind.apply(fa, __spreadArray([ void 0 ], t)));
        }
        return t.documentId = function() {
            /**
             * Internal Note: The backend doesn't technically support querying by
             * document ID. Instead it queries by the entire document name (full path
             * included), but in the cases we currently support documentId(), the net
             * effect is the same.
             */
            return new t(Y.keyField().canonicalString());
        }, t.prototype.isEqual = function(t) {
            return (t = getModularInstance(t)) instanceof fa && this._delegate._internalPath.isEqual(t._internalPath);
        }, t;
    }(), Bc = /** @class */ function() {
        function t(t) {
            this._delegate = t;
        }
        return t.serverTimestamp = function() {
            var e = new Sa("serverTimestamp");
            return e._methodName = "FieldValue.serverTimestamp", new t(e);
        }, t.delete = function() {
            var e = new Ta("deleteField");
            return e._methodName = "FieldValue.delete", new t(e);
        }, t.arrayUnion = function() {
            for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            var r = 
            /**
     * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
     * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
     * value that already exists on the server. Each specified element that doesn't
     * already exist in the array will be added to the end. If the field being
     * modified is not already an array it will be overwritten with an array
     * containing exactly the specified elements.
     *
     * @param elements - The elements to union into the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`.
     */
            function() {
                for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                // NOTE: We don't actually parse the data until it's used in set() or
                // update() since we'd need the Firestore instance to do this.
                            return new Na("arrayUnion", t);
            }.apply(void 0, e);
            return r._methodName = "FieldValue.arrayUnion", new t(r);
        }, t.arrayRemove = function() {
            for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            var r = function() {
                for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                // NOTE: We don't actually parse the data until it's used in set() or
                // update() since we'd need the Firestore instance to do this.
                            return new Da("arrayRemove", t);
            }.apply(void 0, e);
            return r._methodName = "FieldValue.arrayRemove", new t(r);
        }, t.increment = function(e) {
            var n = function(t) {
                return new Aa("increment", t);
            }(e);
            return n._methodName = "FieldValue.increment", new t(n);
        }, t.prototype.isEqual = function(t) {
            return this._delegate.isEqual(t._delegate);
        }, t;
    }();

    var P = {
        Firestore: Tc,
        GeoPoint: pa,
        Timestamp: B,
        Blob: Ic,
        Transaction: Nc,
        WriteBatch: Dc,
        DocumentReference: kc,
        DocumentSnapshot: Lc,
        Query: Pc,
        QueryDocumentSnapshot: Oc,
        QuerySnapshot: Mc,
        CollectionReference: Vc,
        FieldPath: Uc,
        FieldValue: Bc,
        setLogLevel: Sc,
        CACHE_SIZE_UNLIMITED: oa
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Registers the main Firestore build with the components framework.
     * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
     */
    function d(e) {
        !
        /**
     * Configures Firestore as part of the Firebase SDK by calling registerService.
     *
     * @param firebase - The FirebaseNamespace to register Firestore with
     * @param firestoreFactory - A factory function that returns a new Firestore
     *    instance.
     */
        function(e, r) {
            e.INTERNAL.registerComponent(new Component("firestore", (function(e) {
                var t = e.getProvider("app").getImmediate();
                return r(t, e.getProvider("auth-internal"));
            }), "PUBLIC" /* PUBLIC */).setServiceProps(Object.assign({}, P)));
        }(e, (function(e, s) {
            return new Tc(e, new sa(e, s), new Ec);
        })), e.registerVersion("@firebase/firestore", "2.3.8");
    }

    d(firebase);

    (function() {/*

     Copyright The Closure Library Authors.
     SPDX-License-Identifier: Apache-2.0
    */
    var k,aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);};function ba(a){a=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global,a];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}return globalThis}var ca=ba(this);
    function da(a,b){if(b){var c=ca;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&aa(c,a,{configurable:!0,writable:!0,value:b});}}function ea(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function fa(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:ea(a)}}
    da("Promise",function(a){function b(g){this.b=0;this.c=void 0;this.a=[];var h=this.f();try{g(h.resolve,h.reject);}catch(m){h.reject(m);}}function c(){this.a=null;}function d(g){return g instanceof b?g:new b(function(h){h(g);})}if(a)return a;c.prototype.b=function(g){if(null==this.a){this.a=[];var h=this;this.c(function(){h.g();});}this.a.push(g);};var e=ca.setTimeout;c.prototype.c=function(g){e(g,0);};c.prototype.g=function(){for(;this.a&&this.a.length;){var g=this.a;this.a=[];for(var h=0;h<g.length;++h){var m=
    g[h];g[h]=null;try{m();}catch(p){this.f(p);}}}this.a=null;};c.prototype.f=function(g){this.c(function(){throw g;});};b.prototype.f=function(){function g(p){return function(v){m||(m=!0,p.call(h,v));}}var h=this,m=!1;return {resolve:g(this.m),reject:g(this.g)}};b.prototype.m=function(g){if(g===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(g instanceof b)this.s(g);else {a:switch(typeof g){case "object":var h=null!=g;break a;case "function":h=!0;break a;default:h=!1;}h?this.v(g):this.h(g);}};
    b.prototype.v=function(g){var h=void 0;try{h=g.then;}catch(m){this.g(m);return}"function"==typeof h?this.u(h,g):this.h(g);};b.prototype.g=function(g){this.i(2,g);};b.prototype.h=function(g){this.i(1,g);};b.prototype.i=function(g,h){if(0!=this.b)throw Error("Cannot settle("+g+", "+h+"): Promise already settled in state"+this.b);this.b=g;this.c=h;this.l();};b.prototype.l=function(){if(null!=this.a){for(var g=0;g<this.a.length;++g)f.b(this.a[g]);this.a=null;}};var f=new c;b.prototype.s=function(g){var h=this.f();
    g.Ra(h.resolve,h.reject);};b.prototype.u=function(g,h){var m=this.f();try{g.call(h,m.resolve,m.reject);}catch(p){m.reject(p);}};b.prototype.then=function(g,h){function m(A,Q){return "function"==typeof A?function(ya){try{p(A(ya));}catch(Ad){v(Ad);}}:Q}var p,v,B=new b(function(A,Q){p=A;v=Q;});this.Ra(m(g,p),m(h,v));return B};b.prototype.catch=function(g){return this.then(void 0,g)};b.prototype.Ra=function(g,h){function m(){switch(p.b){case 1:g(p.c);break;case 2:h(p.c);break;default:throw Error("Unexpected state: "+
    p.b);}}var p=this;null==this.a?f.b(m):this.a.push(m);};b.resolve=d;b.reject=function(g){return new b(function(h,m){m(g);})};b.race=function(g){return new b(function(h,m){for(var p=fa(g),v=p.next();!v.done;v=p.next())d(v.value).Ra(h,m);})};b.all=function(g){var h=fa(g),m=h.next();return m.done?d([]):new b(function(p,v){function B(ya){return function(Ad){A[ya]=Ad;Q--;0==Q&&p(A);}}var A=[],Q=0;do A.push(void 0),Q++,d(m.value).Ra(B(A.length-1),v),m=h.next();while(!m.done)})};return b});
    var ha=ha||{},l=this||self,ia=/^[\w+/_-]+[=]{0,2}$/,ja=null;function ka(a){return (a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&ia.test(a)?a:""}function la(){}function ma(a){var b=typeof a;return "object"!=b?b:a?Array.isArray(a)?"array":b:"null"}function na(a){var b=ma(a);return "array"==b||"object"==b&&"number"==typeof a.length}function oa(a){return "function"==ma(a)}function n(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}
    function pa(a){return Object.prototype.hasOwnProperty.call(a,qa)&&a[qa]||(a[qa]=++ra)}var qa="closure_uid_"+(1E9*Math.random()>>>0),ra=0;function sa(a,b,c){return a.call.apply(a.bind,arguments)}function ta(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}
    function q(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?q=sa:q=ta;return q.apply(null,arguments)}function ua(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}function r(a,b){function c(){}c.prototype=b.prototype;a.bb=b.prototype;a.prototype=new c;a.prototype.constructor=a;}function wa(a){return a}function t(a,b,c){this.code=xa+a;this.message=b||za[a]||"";this.a=c||null;}r(t,Error);t.prototype.w=function(){var a={code:this.code,message:this.message};this.a&&(a.serverResponse=this.a);return a};t.prototype.toJSON=function(){return this.w()};function Aa(a){var b=a&&a.code;return b?new t(b.substring(xa.length),a.message,a.serverResponse):null}
    var xa="auth/",za={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
    "captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.",
    "requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.",
    "internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.",
    "invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
    "invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.",
    "invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.",
    "unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
    "invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.",
    "multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
    "missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
    "missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
    "no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
    "popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",
    "rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.",
    "too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.",
    "unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.",
    "web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};var Ba={ld:{Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",$a:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Xa:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},sd:{Ua:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",$a:"https://securetoken.googleapis.com/v1/token",Xa:"https://identitytoolkit.googleapis.com/v2/",id:"p"},ud:{Ua:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
    $a:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Xa:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},vd:{Ua:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",$a:"https://test-securetoken.sandbox.googleapis.com/v1/token",Xa:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};
    function Ca(a){for(var b in Ba)if(Ba[b].id===a)return a=Ba[b],{firebaseEndpoint:a.Ua,secureTokenEndpoint:a.$a,identityPlatformEndpoint:a.Xa};return null}var Da;Da=Ca("__EID__")?"__EID__":void 0;function Ea(a){if(!a)return !1;try{return !!a.$goog_Thenable}catch(b){return !1}}function u(a){if(Error.captureStackTrace)Error.captureStackTrace(this,u);else {var b=Error().stack;b&&(this.stack=b);}a&&(this.message=String(a));}r(u,Error);u.prototype.name="CustomError";function Fa(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");u.call(this,c+a[d]);}r(Fa,u);Fa.prototype.name="AssertionError";function Ga(a,b){throw new Fa("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));}function Ha(a,b){this.c=a;this.f=b;this.b=0;this.a=null;}Ha.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null;}else a=this.c();return a};function Ia(a,b){a.f(b);100>a.b&&(a.b++,b.next=a.a,a.a=b);}function Ja(){this.b=this.a=null;}var La=new Ha(function(){return new Ka},function(a){a.reset();});Ja.prototype.add=function(a,b){var c=La.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c;};function Ma(){var a=Na,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Ka(){this.next=this.b=this.a=null;}Ka.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null;};Ka.prototype.reset=function(){this.next=this.b=this.a=null;};var Oa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"===typeof a)return "string"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1},w=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c);}:function(a,b,c){for(var d=a.length,e="string"===typeof a?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};
    function Pa(a,b){for(var c="string"===typeof a?a.split(""):a,d=a.length-1;0<=d;--d)d in c&&b.call(void 0,c[d],d,a);}
    var Qa=Array.prototype.filter?function(a,b){return Array.prototype.filter.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=[],e=0,f="string"===typeof a?a.split(""):a,g=0;g<c;g++)if(g in f){var h=f[g];b.call(void 0,h,g,a)&&(d[e++]=h);}return d},Ra=Array.prototype.map?function(a,b){return Array.prototype.map.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=Array(c),e="string"===typeof a?a.split(""):a,f=0;f<c;f++)f in e&&(d[f]=b.call(void 0,e[f],f,a));return d},Sa=Array.prototype.some?function(a,
    b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,d="string"===typeof a?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return !0;return !1};function Ta(a){a:{var b=Ua;for(var c=a.length,d="string"===typeof a?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1;}return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}function Va(a,b){return 0<=Oa(a,b)}
    function Wa(a,b){b=Oa(a,b);var c;(c=0<=b)&&Array.prototype.splice.call(a,b,1);return c}function Xa(a,b){var c=0;Pa(a,function(d,e){b.call(void 0,d,e,a)&&1==Array.prototype.splice.call(a,e,1).length&&c++;});}function Ya(a){return Array.prototype.concat.apply([],arguments)}function Za(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return []}var $a=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]},ab=/&/g,bb=/</g,cb=/>/g,db=/"/g,eb=/'/g,fb=/\x00/g,gb=/[\x00&<>"']/;function x(a,b){return -1!=a.indexOf(b)}function hb(a,b){return a<b?-1:a>b?1:0}var ib;a:{var jb=l.navigator;if(jb){var kb=jb.userAgent;if(kb){ib=kb;break a}}ib="";}function y(a){return x(ib,a)}function lb(a,b){for(var c in a)b.call(void 0,a[c],c,a);}function mb(a){for(var b in a)return !1;return !0}function nb(a){var b={},c;for(c in a)b[c]=a[c];return b}var ob="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function z(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<ob.length;f++)c=ob[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function pb(a,b){a:{try{var c=a&&a.ownerDocument,d=c&&(c.defaultView||c.parentWindow);d=d||l;if(d.Element&&d.Location){var e=d;break a}}catch(g){}e=null;}if(e&&"undefined"!=typeof e[b]&&(!a||!(a instanceof e[b])&&(a instanceof e.Location||a instanceof e.Element))){if(n(a))try{var f=a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a);}catch(g){f="<object could not be stringified>";}else f=void 0===a?"undefined":null===a?"null":typeof a;Ga("Argument is not a %s (or a non-Element, non-Location mock); got: %s",
    b,f);}}function qb(a,b){this.a=a===rb&&b||"";this.b=sb;}qb.prototype.ta=!0;qb.prototype.sa=function(){return this.a};qb.prototype.toString=function(){return "Const{"+this.a+"}"};function tb(a){if(a instanceof qb&&a.constructor===qb&&a.b===sb)return a.a;Ga("expected object of type Const, got '"+a+"'");return "type_error:Const"}var sb={},rb={};var ub;function vb(){if(void 0===ub){var a=null,b=l.trustedTypes;if(b&&b.createPolicy){try{a=b.createPolicy("goog#html",{createHTML:wa,createScript:wa,createScriptURL:wa});}catch(c){l.console&&l.console.error(c.message);}ub=a;}else ub=a;}return ub}function wb(a,b){this.a=b===xb?a:"";}wb.prototype.ta=!0;wb.prototype.sa=function(){return this.a.toString()};wb.prototype.toString=function(){return "TrustedResourceUrl{"+this.a+"}"};function yb(a){if(a instanceof wb&&a.constructor===wb)return a.a;Ga("expected object of type TrustedResourceUrl, got '"+a+"' of type "+ma(a));return "type_error:TrustedResourceUrl"}
    function zb(a,b){var c=tb(a);if(!Ab.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(Bb,function(d,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));d=b[e];return d instanceof qb?tb(d):encodeURIComponent(String(d))});return Cb(a)}var Bb=/%{(\w+)}/g,Ab=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,xb={};
    function Cb(a){var b=vb();a=b?b.createScriptURL(a):a;return new wb(a,xb)}function C(a,b){this.a=b===Db?a:"";}C.prototype.ta=!0;C.prototype.sa=function(){return this.a.toString()};C.prototype.toString=function(){return "SafeUrl{"+this.a+"}"};function Eb(a){if(a instanceof C&&a.constructor===C)return a.a;Ga("expected object of type SafeUrl, got '"+a+"' of type "+ma(a));return "type_error:SafeUrl"}
    var Fb=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,Gb=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Hb=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
    function Ib(a){if(a instanceof C)return a;a="object"==typeof a&&a.ta?a.sa():String(a);if(Hb.test(a))a=new C(a,Db);else {a=String(a);a=a.replace(/(%0A|%0D)/g,"");var b=a.match(Gb);a=b&&Fb.test(b[1])?new C(a,Db):null;}return a}function Jb(a){if(a instanceof C)return a;a="object"==typeof a&&a.ta?a.sa():String(a);Hb.test(a)||(a="about:invalid#zClosurez");return new C(a,Db)}var Db={},Kb=new C("about:invalid#zClosurez",Db);function Lb(a,b,c){this.a=c===Mb?a:"";}Lb.prototype.ta=!0;Lb.prototype.sa=function(){return this.a.toString()};Lb.prototype.toString=function(){return "SafeHtml{"+this.a+"}"};function Nb(a){if(a instanceof Lb&&a.constructor===Lb)return a.a;Ga("expected object of type SafeHtml, got '"+a+"' of type "+ma(a));return "type_error:SafeHtml"}var Mb={};function Ob(a,b){pb(a,"HTMLScriptElement");a.src=yb(b);(b=a.ownerDocument&&a.ownerDocument.defaultView)&&b!=l?b=ka(b.document):(null===ja&&(ja=ka(l.document)),b=ja);b&&a.setAttribute("nonce",b);}function Pb(a,b,c,d){a=a instanceof C?a:Jb(a);b=b||l;c=c instanceof qb?tb(c):c||"";return b.open(Eb(a),c,d,void 0)}function Qb(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")}function Rb(a){gb.test(a)&&(-1!=a.indexOf("&")&&(a=a.replace(ab,"&amp;")),-1!=a.indexOf("<")&&(a=a.replace(bb,"&lt;")),-1!=a.indexOf(">")&&(a=a.replace(cb,"&gt;")),-1!=a.indexOf('"')&&(a=a.replace(db,"&quot;")),-1!=a.indexOf("'")&&(a=a.replace(eb,"&#39;")),-1!=a.indexOf("\x00")&&(a=a.replace(fb,"&#0;")));return a}function Sb(a){Sb[" "](a);return a}Sb[" "]=la;function Tb(a,b){var c=Ub;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)}var Vb=y("Opera"),Wb=y("Trident")||y("MSIE"),Xb=y("Edge"),Yb=Xb||Wb,Zb=y("Gecko")&&!(x(ib.toLowerCase(),"webkit")&&!y("Edge"))&&!(y("Trident")||y("MSIE"))&&!y("Edge"),$b=x(ib.toLowerCase(),"webkit")&&!y("Edge");function ac(){var a=l.document;return a?a.documentMode:void 0}var bc;
    a:{var cc="",dc=function(){var a=ib;if(Zb)return /rv:([^\);]+)(\)|;)/.exec(a);if(Xb)return /Edge\/([\d\.]+)/.exec(a);if(Wb)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if($b)return /WebKit\/(\S+)/.exec(a);if(Vb)return /(?:Version)[ \/]?(\S+)/.exec(a)}();dc&&(cc=dc?dc[1]:"");if(Wb){var ec=ac();if(null!=ec&&ec>parseFloat(cc)){bc=String(ec);break a}}bc=cc;}var Ub={};
    function fc(a){return Tb(a,function(){for(var b=0,c=$a(String(bc)).split("."),d=$a(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",h=d[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];if(0==g[0].length&&0==h[0].length)break;b=hb(0==g[1].length?0:parseInt(g[1],10),0==h[1].length?0:parseInt(h[1],10))||hb(0==g[2].length,0==h[2].length)||hb(g[2],h[2]);g=g[3];h=h[3];}while(0==b)}return 0<=b})}var gc;
    if(l.document&&Wb){var hc=ac();gc=hc?hc:parseInt(bc,10)||void 0;}else gc=void 0;var ic=gc;try{(new self.OffscreenCanvas(0,0)).getContext("2d");}catch(a){}var jc=!Wb||9<=Number(ic);function kc(a){var b=document;return "string"===typeof a?b.getElementById(a):a}function lc(a,b){lb(b,function(c,d){c&&"object"==typeof c&&c.ta&&(c=c.sa());"style"==d?a.style.cssText=c:"class"==d?a.className=c:"for"==d?a.htmlFor=c:mc.hasOwnProperty(d)?a.setAttribute(mc[d],c):0==d.lastIndexOf("aria-",0)||0==d.lastIndexOf("data-",0)?a.setAttribute(d,c):a[d]=c;});}
    var mc={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};
    function nc(a,b,c){var d=arguments,e=document,f=String(d[0]),g=d[1];if(!jc&&g&&(g.name||g.type)){f=["<",f];g.name&&f.push(' name="',Rb(g.name),'"');if(g.type){f.push(' type="',Rb(g.type),'"');var h={};z(h,g);delete h.type;g=h;}f.push(">");f=f.join("");}f=oc(e,f);g&&("string"===typeof g?f.className=g:Array.isArray(g)?f.className=g.join(" "):lc(f,g));2<d.length&&pc(e,f,d);return f}
    function pc(a,b,c){function d(h){h&&b.appendChild("string"===typeof h?a.createTextNode(h):h);}for(var e=2;e<c.length;e++){var f=c[e];if(!na(f)||n(f)&&0<f.nodeType)d(f);else {a:{if(f&&"number"==typeof f.length){if(n(f)){var g="function"==typeof f.item||"string"==typeof f.item;break a}if(oa(f)){g="function"==typeof f.item;break a}}g=!1;}w(g?Za(f):f,d);}}}function oc(a,b){b=String(b);"application/xhtml+xml"===a.contentType&&(b=b.toLowerCase());return a.createElement(b)}function qc(a){l.setTimeout(function(){throw a;},0);}var rc;
    function sc(){var a=l.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!y("Presto")&&(a=function(){var e=oc(document,"IFRAME");e.style.display="none";document.documentElement.appendChild(e);var f=e.contentWindow;e=f.document;e.open();e.close();var g="callImmediate"+Math.random(),h="file:"==f.location.protocol?"*":f.location.protocol+"//"+f.location.host;e=q(function(m){if(("*"==h||m.origin==h)&&m.data==g)this.port1.onmessage();},this);
    f.addEventListener("message",e,!1);this.port1={};this.port2={postMessage:function(){f.postMessage(g,h);}};});if("undefined"!==typeof a&&!y("Trident")&&!y("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var e=c.Hb;c.Hb=null;e();}};return function(e){d.next={Hb:e};d=d.next;b.port2.postMessage(0);}}return function(e){l.setTimeout(e,0);}}function tc(a,b){uc||vc();wc||(uc(),wc=!0);Na.add(a,b);}var uc;function vc(){if(l.Promise&&l.Promise.resolve){var a=l.Promise.resolve(void 0);uc=function(){a.then(xc);};}else uc=function(){var b=xc;!oa(l.setImmediate)||l.Window&&l.Window.prototype&&!y("Edge")&&l.Window.prototype.setImmediate==l.setImmediate?(rc||(rc=sc()),rc(b)):l.setImmediate(b);};}var wc=!1,Na=new Ja;function xc(){for(var a;a=Ma();){try{a.a.call(a.b);}catch(b){qc(b);}Ia(La,a);}wc=!1;}function D(a,b){this.a=yc;this.i=void 0;this.f=this.b=this.c=null;this.g=this.h=!1;if(a!=la)try{var c=this;a.call(b,function(d){zc(c,Ac,d);},function(d){if(!(d instanceof Bc))try{if(d instanceof Error)throw d;throw Error("Promise rejected.");}catch(e){}zc(c,Cc,d);});}catch(d){zc(this,Cc,d);}}var yc=0,Ac=2,Cc=3;function Dc(){this.next=this.f=this.b=this.g=this.a=null;this.c=!1;}Dc.prototype.reset=function(){this.f=this.b=this.g=this.a=null;this.c=!1;};var Ec=new Ha(function(){return new Dc},function(a){a.reset();});
    function Fc(a,b,c){var d=Ec.get();d.g=a;d.b=b;d.f=c;return d}function E(a){if(a instanceof D)return a;var b=new D(la);zc(b,Ac,a);return b}function F(a){return new D(function(b,c){c(a);})}function Gc(a,b,c){Hc(a,b,c,null)||tc(ua(b,a));}function Ic(a){return new D(function(b,c){var d=a.length,e=[];if(d)for(var f=function(p,v){d--;e[p]=v;0==d&&b(e);},g=function(p){c(p);},h=0,m;h<a.length;h++)m=a[h],Gc(m,ua(f,h),g);else b(e);})}
    function Jc(a){return new D(function(b){var c=a.length,d=[];if(c)for(var e=function(h,m,p){c--;d[h]=m?{Qb:!0,value:p}:{Qb:!1,reason:p};0==c&&b(d);},f=0,g;f<a.length;f++)g=a[f],Gc(g,ua(e,f,!0),ua(e,f,!1));else b(d);})}D.prototype.then=function(a,b,c){return Kc(this,oa(a)?a:null,oa(b)?b:null,c)};D.prototype.$goog_Thenable=!0;k=D.prototype;k.oa=function(a,b){a=Fc(a,a,b);a.c=!0;Lc(this,a);return this};k.o=function(a,b){return Kc(this,null,a,b)};
    k.cancel=function(a){if(this.a==yc){var b=new Bc(a);tc(function(){Mc(this,b);},this);}};function Mc(a,b){if(a.a==yc)if(a.c){var c=a.c;if(c.b){for(var d=0,e=null,f=null,g=c.b;g&&(g.c||(d++,g.a==a&&(e=g),!(e&&1<d)));g=g.next)e||(f=g);e&&(c.a==yc&&1==d?Mc(c,b):(f?(d=f,d.next==c.f&&(c.f=d),d.next=d.next.next):Nc(c),Oc(c,e,Cc,b)));}a.c=null;}else zc(a,Cc,b);}function Lc(a,b){a.b||a.a!=Ac&&a.a!=Cc||Pc(a);a.f?a.f.next=b:a.b=b;a.f=b;}
    function Kc(a,b,c,d){var e=Fc(null,null,null);e.a=new D(function(f,g){e.g=b?function(h){try{var m=b.call(d,h);f(m);}catch(p){g(p);}}:f;e.b=c?function(h){try{var m=c.call(d,h);void 0===m&&h instanceof Bc?g(h):f(m);}catch(p){g(p);}}:g;});e.a.c=a;Lc(a,e);return e.a}k.$c=function(a){this.a=yc;zc(this,Ac,a);};k.ad=function(a){this.a=yc;zc(this,Cc,a);};
    function zc(a,b,c){a.a==yc&&(a===c&&(b=Cc,c=new TypeError("Promise cannot resolve to itself")),a.a=1,Hc(c,a.$c,a.ad,a)||(a.i=c,a.a=b,a.c=null,Pc(a),b!=Cc||c instanceof Bc||Qc(a,c)));}function Hc(a,b,c,d){if(a instanceof D)return Lc(a,Fc(b||la,c||null,d)),!0;if(Ea(a))return a.then(b,c,d),!0;if(n(a))try{var e=a.then;if(oa(e))return Rc(a,e,b,c,d),!0}catch(f){return c.call(d,f),!0}return !1}
    function Rc(a,b,c,d,e){function f(m){h||(h=!0,d.call(e,m));}function g(m){h||(h=!0,c.call(e,m));}var h=!1;try{b.call(a,g,f);}catch(m){f(m);}}function Pc(a){a.h||(a.h=!0,tc(a.gc,a));}function Nc(a){var b=null;a.b&&(b=a.b,a.b=b.next,b.next=null);a.b||(a.f=null);return b}k.gc=function(){for(var a;a=Nc(this);)Oc(this,a,this.a,this.i);this.h=!1;};
    function Oc(a,b,c,d){if(c==Cc&&b.b&&!b.c)for(;a&&a.g;a=a.c)a.g=!1;if(b.a)b.a.c=null,Sc(b,c,d);else try{b.c?b.g.call(b.f):Sc(b,c,d);}catch(e){Tc.call(null,e);}Ia(Ec,b);}function Sc(a,b,c){b==Ac?a.g.call(a.f,c):a.b&&a.b.call(a.f,c);}function Qc(a,b){a.g=!0;tc(function(){a.g&&Tc.call(null,b);});}var Tc=qc;function Bc(a){u.call(this,a);}r(Bc,u);Bc.prototype.name="cancel";function Uc(){this.ya=this.ya;this.pa=this.pa;}var Vc=0,Wc={};Uc.prototype.ya=!1;function Xc(a){if(!a.ya&&(a.ya=!0,a.Da(),0!=Vc)){var b=pa(a);delete Wc[b];}}Uc.prototype.Da=function(){if(this.pa)for(;this.pa.length;)this.pa.shift()();};var Yc=Object.freeze||function(a){return a};var Zc=!Wb||9<=Number(ic),$c=Wb&&!fc("9"),ad=function(){if(!l.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{l.addEventListener("test",la,b),l.removeEventListener("test",la,b);}catch(c){}return a}();function G(a,b){this.type=a;this.b=this.target=b;this.defaultPrevented=!1;}G.prototype.preventDefault=function(){this.defaultPrevented=!0;};function bd(a,b){G.call(this,a?a.type:"");this.relatedTarget=this.b=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.a=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.b=b;if(b=a.relatedTarget){if(Zb){a:{try{Sb(b.nodeName);var e=!0;break a}catch(f){}e=!1;}e||(b=null);}}else "mouseover"==
    c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
    a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:cd[a.pointerType]||"";this.a=a;a.defaultPrevented&&this.preventDefault();}}r(bd,G);var cd=Yc({2:"touch",3:"pen",4:"mouse"});bd.prototype.preventDefault=function(){bd.bb.preventDefault.call(this);var a=this.a;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,$c)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1;}catch(b){}};bd.prototype.g=function(){return this.a};var dd="closure_listenable_"+(1E6*Math.random()|0),ed=0;function fd(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.Wa=e;this.key=++ed;this.wa=this.Qa=!1;}function gd(a){a.wa=!0;a.listener=null;a.proxy=null;a.src=null;a.Wa=null;}function hd(a){this.src=a;this.a={};this.b=0;}hd.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var g=id(a,b,d,e);-1<g?(b=a[g],c||(b.Qa=!1)):(b=new fd(b,this.src,f,!!d,e),b.Qa=c,a.push(b));return b};function jd(a,b){var c=b.type;c in a.a&&Wa(a.a[c],b)&&(gd(b),0==a.a[c].length&&(delete a.a[c],a.b--));}function id(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.wa&&f.listener==b&&f.capture==!!c&&f.Wa==d)return e}return -1}var kd="closure_lm_"+(1E6*Math.random()|0),ld={};function nd(a,b,c,d,e){if(d&&d.once)od(a,b,c,d,e);else if(Array.isArray(b))for(var f=0;f<b.length;f++)nd(a,b[f],c,d,e);else c=pd(c),a&&a[dd]?qd(a,b,c,n(d)?!!d.capture:!!d,e):rd(a,b,c,!1,d,e);}
    function rd(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=n(e)?!!e.capture:!!e,h=sd(a);h||(a[kd]=h=new hd(a));c=h.add(b,c,d,g,f);if(!c.proxy){d=td();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)ad||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(ud(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");}}
    function td(){var a=vd,b=Zc?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function od(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)od(a,b[f],c,d,e);else c=pd(c),a&&a[dd]?wd(a,b,c,n(d)?!!d.capture:!!d,e):rd(a,b,c,!0,d,e);}
    function xd(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)xd(a,b[f],c,d,e);else (d=n(d)?!!d.capture:!!d,c=pd(c),a&&a[dd])?(a=a.v,b=String(b).toString(),b in a.a&&(f=a.a[b],c=id(f,c,d,e),-1<c&&(gd(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=sd(a))&&(b=a.a[b.toString()],a=-1,b&&(a=id(b,c,d,e)),(c=-1<a?b[a]:null)&&yd(c));}
    function yd(a){if("number"!==typeof a&&a&&!a.wa){var b=a.src;if(b&&b[dd])jd(b.v,a);else {var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(ud(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=sd(b))?(jd(c,a),0==c.b&&(c.src=null,b[kd]=null)):gd(a);}}}function ud(a){return a in ld?ld[a]:ld[a]="on"+a}
    function zd(a,b,c,d){var e=!0;if(a=sd(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.wa&&(f=Bd(f,d),e=e&&!1!==f);}return e}function Bd(a,b){var c=a.listener,d=a.Wa||a.src;a.Qa&&yd(a);return c.call(d,b)}
    function vd(a,b){if(a.wa)return !0;if(!Zc){if(!b)a:{b=["window","event"];for(var c=l,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c;}d=b;b=new bd(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(g){e=!0;}if(e||void 0==d.returnValue)d.returnValue=!0;}d=[];for(e=b.b;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.b=d[e];var f=zd(d[e],a,!0,b);c=c&&f;}for(e=0;e<d.length;e++)b.b=d[e],f=zd(d[e],a,!1,b),c=c&&f;}return c}return Bd(a,
    new bd(b,this))}function sd(a){a=a[kd];return a instanceof hd?a:null}var Cd="__closure_events_fn_"+(1E9*Math.random()>>>0);function pd(a){if(oa(a))return a;a[Cd]||(a[Cd]=function(b){return a.handleEvent(b)});return a[Cd]}function H(){Uc.call(this);this.v=new hd(this);this.bc=this;this.hb=null;}r(H,Uc);H.prototype[dd]=!0;H.prototype.addEventListener=function(a,b,c,d){nd(this,a,b,c,d);};H.prototype.removeEventListener=function(a,b,c,d){xd(this,a,b,c,d);};
    H.prototype.dispatchEvent=function(a){var b,c=this.hb;if(c)for(b=[];c;c=c.hb)b.push(c);c=this.bc;var d=a.type||a;if("string"===typeof a)a=new G(a,c);else if(a instanceof G)a.target=a.target||c;else {var e=a;a=new G(d,c);z(a,e);}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var g=a.b=b[f];e=Dd(g,d,!0,a)&&e;}g=a.b=c;e=Dd(g,d,!0,a)&&e;e=Dd(g,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)g=a.b=b[f],e=Dd(g,d,!1,a)&&e;return e};
    H.prototype.Da=function(){H.bb.Da.call(this);if(this.v){var a=this.v,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)gd(d[e]);delete a.a[c];a.b--;}}this.hb=null;};function qd(a,b,c,d,e){a.v.add(String(b),c,!1,d,e);}function wd(a,b,c,d,e){a.v.add(String(b),c,!0,d,e);}
    function Dd(a,b,c,d){b=a.v.a[String(b)];if(!b)return !0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var g=b[f];if(g&&!g.wa&&g.capture==c){var h=g.listener,m=g.Wa||g.src;g.Qa&&jd(a.v,g);e=!1!==h.call(m,d)&&e;}}return e&&!d.defaultPrevented}function Ed(a,b,c){if(oa(a))c&&(a=q(a,c));else if(a&&"function"==typeof a.handleEvent)a=q(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:l.setTimeout(a,b||0)}function Fd(a){var b=null;return (new D(function(c,d){b=Ed(function(){c(void 0);},a);-1==b&&d(Error("Failed to schedule timer."));})).o(function(c){l.clearTimeout(b);throw c;})}function Gd(a){if(a.X&&"function"==typeof a.X)return a.X();if("string"===typeof a)return a.split("");if(na(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}function Hd(a){if(a.Y&&"function"==typeof a.Y)return a.Y();if(!a.X||"function"!=typeof a.X){if(na(a)||"string"===typeof a){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}b=[];c=0;for(var d in a)b[c++]=d;return b}}
    function Id(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(na(a)||"string"===typeof a)w(a,b,void 0);else for(var c=Hd(a),d=Gd(a),e=d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a);}function Jd(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1]);}else if(a)if(a instanceof Jd)for(c=a.Y(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d]);}k=Jd.prototype;k.X=function(){Kd(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};k.Y=function(){Kd(this);return this.a.concat()};
    k.clear=function(){this.b={};this.c=this.a.length=0;};function Kd(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];Ld(a.b,d)&&(a.a[c++]=d);b++;}a.a.length=c;}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],Ld(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c;}}k.get=function(a,b){return Ld(this.b,a)?this.b[a]:b};k.set=function(a,b){Ld(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b;};
    k.forEach=function(a,b){for(var c=this.Y(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this);}};function Ld(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var Md=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Nd(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1);}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"");}}}function Od(a,b){this.a=this.l=this.c="";this.g=null;this.h=this.f="";this.i=!1;var c;a instanceof Od?(this.i=void 0!==b?b:a.i,Pd(this,a.c),this.l=a.l,this.a=a.a,Qd(this,a.g),this.f=a.f,Rd(this,Sd(a.b)),this.h=a.h):a&&(c=String(a).match(Md))?(this.i=!!b,Pd(this,c[1]||"",!0),this.l=Td(c[2]||""),this.a=Td(c[3]||"",!0),Qd(this,c[4]),this.f=Td(c[5]||"",!0),Rd(this,c[6]||"",!0),this.h=Td(c[7]||"")):(this.i=!!b,this.b=new Ud(null,this.i));}
    Od.prototype.toString=function(){var a=[],b=this.c;b&&a.push(Vd(b,Wd,!0),":");var c=this.a;if(c||"file"==b)a.push("//"),(b=this.l)&&a.push(Vd(b,Wd,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.g,null!=c&&a.push(":",String(c));if(c=this.f)this.a&&"/"!=c.charAt(0)&&a.push("/"),a.push(Vd(c,"/"==c.charAt(0)?Xd:Yd,!0));(c=this.b.toString())&&a.push("?",c);(c=this.h)&&a.push("#",Vd(c,Zd));return a.join("")};
    Od.prototype.resolve=function(a){var b=new Od(this),c=!!a.c;c?Pd(b,a.c):c=!!a.l;c?b.l=a.l:c=!!a.a;c?b.a=a.a:c=null!=a.g;var d=a.f;if(c)Qd(b,a.g);else if(c=!!a.f){if("/"!=d.charAt(0))if(this.a&&!this.f)d="/"+d;else {var e=b.f.lastIndexOf("/");-1!=e&&(d=b.f.substr(0,e+1)+d);}e=d;if(".."==e||"."==e)d="";else if(x(e,"./")||x(e,"/.")){d=0==e.lastIndexOf("/",0);e=e.split("/");for(var f=[],g=0;g<e.length;){var h=e[g++];"."==h?d&&g==e.length&&f.push(""):".."==h?((1<f.length||1==f.length&&""!=f[0])&&f.pop(),
    d&&g==e.length&&f.push("")):(f.push(h),d=!0);}d=f.join("/");}else d=e;}c?b.f=d:c=""!==a.b.toString();c?Rd(b,Sd(a.b)):c=!!a.h;c&&(b.h=a.h);return b};function Pd(a,b,c){a.c=c?Td(b,!0):b;a.c&&(a.c=a.c.replace(/:$/,""));}function Qd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.g=b;}else a.g=null;}function Rd(a,b,c){b instanceof Ud?(a.b=b,$d(a.b,a.i)):(c||(b=Vd(b,ae)),a.b=new Ud(b,a.i));}function I(a,b,c){a.b.set(b,c);}function be(a,b){return a.b.get(b)}
    function J(a){return a instanceof Od?new Od(a):new Od(a,void 0)}function ce(a,b,c,d){var e=new Od(null,void 0);a&&Pd(e,a);b&&(e.a=b);c&&Qd(e,c);d&&(e.f=d);return e}function Td(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Vd(a,b,c){return "string"===typeof a?(a=encodeURI(a).replace(b,de),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function de(a){a=a.charCodeAt(0);return "%"+(a>>4&15).toString(16)+(a&15).toString(16)}
    var Wd=/[#\/\?@]/g,Yd=/[#\?:]/g,Xd=/[#\?]/g,ae=/[#\?@]/g,Zd=/#/g;function Ud(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b;}function ee(a){a.a||(a.a=new Jd,a.b=0,a.c&&Nd(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c);}));}function fe(a){var b=Hd(a);if("undefined"==typeof b)throw Error("Keys are undefined");var c=new Ud(null,void 0);a=Gd(a);for(var d=0;d<b.length;d++){var e=b[d],f=a[d];Array.isArray(f)?ge(c,e,f):c.add(e,f);}return c}k=Ud.prototype;
    k.add=function(a,b){ee(this);this.c=null;a=he(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function ie(a,b){ee(a);b=he(a,b);Ld(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,a=a.a,Ld(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&Kd(a)));}k.clear=function(){this.a=this.c=null;this.b=0;};function je(a,b){ee(a);b=he(a,b);return Ld(a.a.b,b)}k.forEach=function(a,b){ee(this);this.a.forEach(function(c,d){w(c,function(e){a.call(b,e,d,this);},this);},this);};
    k.Y=function(){ee(this);for(var a=this.a.X(),b=this.a.Y(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};k.X=function(a){ee(this);var b=[];if("string"===typeof a)je(this,a)&&(b=Ya(b,this.a.get(he(this,a))));else {a=this.a.X();for(var c=0;c<a.length;c++)b=Ya(b,a[c]);}return b};k.set=function(a,b){ee(this);this.c=null;a=he(this,a);je(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};
    k.get=function(a,b){if(!a)return b;a=this.X(a);return 0<a.length?String(a[0]):b};function ge(a,b,c){ie(a,b);0<c.length&&(a.c=null,a.a.set(he(a,b),Za(c)),a.b+=c.length);}k.toString=function(){if(this.c)return this.c;if(!this.a)return "";for(var a=[],b=this.a.Y(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.X(d);for(var f=0;f<d.length;f++){var g=e;""!==d[f]&&(g+="="+encodeURIComponent(String(d[f])));a.push(g);}}return this.c=a.join("&")};
    function Sd(a){var b=new Ud;b.c=a.c;a.a&&(b.a=new Jd(a.a),b.b=a.b);return b}function he(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function $d(a,b){b&&!a.f&&(ee(a),a.c=null,a.a.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(ie(this,d),ge(this,e,c));},a));a.f=b;}function ke(a){var b=[];le(new me,a,b);return b.join("")}function me(){}
    function le(a,b,c){if(null==b)c.push("null");else {if("object"==typeof b){if(Array.isArray(b)){var d=b;b=d.length;c.push("[");for(var e="",f=0;f<b;f++)c.push(e),le(a,d[f],c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else {c.push("{");e="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],"function"!=typeof f&&(c.push(e),ne(d,c),c.push(":"),le(a,f,c),e=","));c.push("}");return}}switch(typeof b){case "string":ne(b,c);break;case "number":c.push(isFinite(b)&&
    !isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}}var oe={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},pe=/\uffff/.test("\uffff")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;
    function ne(a,b){b.push('"',a.replace(pe,function(c){var d=oe[c];d||(d="\\u"+(c.charCodeAt(0)|65536).toString(16).substr(1),oe[c]=d);return d}),'"');}function qe(){var a=K();return Wb&&!!ic&&11==ic||/Edge\/\d+/.test(a)}function re(){return l.window&&l.window.location.href||self&&self.location&&self.location.href||""}function se(a,b){b=b||l.window;var c="about:blank";a&&(c=Eb(Ib(a)||Kb));b.location.href=c;}function te(a,b){var c=[],d;for(d in a)d in b?typeof a[d]!=typeof b[d]?c.push(d):"object"==typeof a[d]&&null!=a[d]&&null!=b[d]?0<te(a[d],b[d]).length&&c.push(d):a[d]!==b[d]&&c.push(d):c.push(d);for(d in b)d in a||c.push(d);return c}
    function ue(){var a=K();a=ve(a)!=we?null:(a=a.match(/\sChrome\/(\d+)/i))&&2==a.length?parseInt(a[1],10):null;return a&&30>a?!1:!Wb||!ic||9<ic}function xe(a){a=(a||K()).toLowerCase();return a.match(/android/)||a.match(/webos/)||a.match(/iphone|ipad|ipod/)||a.match(/blackberry/)||a.match(/windows phone/)||a.match(/iemobile/)?!0:!1}function ye(a){a=a||l.window;try{a.close();}catch(b){}}
    function ze(a,b,c){var d=Math.floor(1E9*Math.random()).toString();b=b||500;c=c||600;var e=(window.screen.availHeight-c)/2,f=(window.screen.availWidth-b)/2;b={width:b,height:c,top:0<e?e:0,left:0<f?f:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1};c=K().toLowerCase();d&&(b.target=d,x(c,"crios/")&&(b.target="_blank"));ve(K())==Ae&&(a=a||"http://localhost",b.scrollbars=!0);c=a||"";(a=b)||(a={});d=window;b=c instanceof C?c:Ib("undefined"!=typeof c.href?c.href:String(c))||Kb;c=a.target||c.target;e=
    [];for(g in a)switch(g){case "width":case "height":case "top":case "left":e.push(g+"="+a[g]);break;case "target":case "noopener":case "noreferrer":break;default:e.push(g+"="+(a[g]?1:0));}var g=e.join(",");if((y("iPhone")&&!y("iPod")&&!y("iPad")||y("iPad")||y("iPod"))&&d.navigator&&d.navigator.standalone&&c&&"_self"!=c)g=oc(document,"A"),pb(g,"HTMLAnchorElement"),b=b instanceof C?b:Jb(b),g.href=Eb(b),g.setAttribute("target",c),a.noreferrer&&g.setAttribute("rel","noreferrer"),a=document.createEvent("MouseEvent"),
    a.initMouseEvent("click",!0,!0,d,1),g.dispatchEvent(a),g={};else if(a.noreferrer){if(g=Pb("",d,c,g),a=Eb(b),g&&(Yb&&x(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'"),g.opener=null,a='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Rb(a)+'">',a=(d=vb())?d.createHTML(a):a,a=new Lb(a,null,Mb),d=g.document))d.write(Nb(a)),d.close();}else (g=Pb(b,d,c,g))&&a.noopener&&(g.opener=null);if(g)try{g.focus();}catch(h){}return g}
    function Be(a){return new D(function(b){function c(){Fd(2E3).then(function(){if(!a||a.closed)b();else return c()});}return c()})}var Ce=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,De=/^[^@]+@[^@]+$/;function Ee(){var a=null;return (new D(function(b){"complete"==l.document.readyState?b():(a=function(){b();},od(window,"load",a));})).o(function(b){xd(window,"load",a);throw b;})}
    function Fe(){return Ge(void 0)?Ee().then(function(){return new D(function(a,b){var c=l.document,d=setTimeout(function(){b(Error("Cordova framework is not ready."));},1E3);c.addEventListener("deviceready",function(){clearTimeout(d);a();},!1);})}):F(Error("Cordova must run in an Android or iOS file scheme."))}function Ge(a){a=a||K();return !("file:"!==He()&&"ionic:"!==He()||!a.toLowerCase().match(/iphone|ipad|ipod|android/))}function Ie(){var a=l.window;try{return !(!a||a==a.top)}catch(b){return !1}}
    function Je(){return "undefined"!==typeof l.WorkerGlobalScope&&"function"===typeof l.importScripts}function Ke(){return firebase.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":firebase.INTERNAL.hasOwnProperty("node")?"Node":Je()?"Worker":"Browser"}function Le(){var a=Ke();return "ReactNative"===a||"Node"===a}function Me(){for(var a=50,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}
    var Ae="Firefox",we="Chrome";
    function ve(a){var b=a.toLowerCase();if(x(b,"opera/")||x(b,"opr/")||x(b,"opios/"))return "Opera";if(x(b,"iemobile"))return "IEMobile";if(x(b,"msie")||x(b,"trident/"))return "IE";if(x(b,"edge/"))return "Edge";if(x(b,"firefox/"))return Ae;if(x(b,"silk/"))return "Silk";if(x(b,"blackberry"))return "Blackberry";if(x(b,"webos"))return "Webos";if(!x(b,"safari/")||x(b,"chrome/")||x(b,"crios/")||x(b,"android"))if(!x(b,"chrome/")&&!x(b,"crios/")||x(b,"edge/")){if(x(b,"android"))return "Android";if((a=a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&
    2==a.length)return a[1]}else return we;else return "Safari";return "Other"}var Ne={md:"FirebaseCore-web",od:"FirebaseUI-web"};function Oe(a,b){b=b||[];var c=[],d={},e;for(e in Ne)d[Ne[e]]=!0;for(e=0;e<b.length;e++)"undefined"!==typeof d[b[e]]&&(delete d[b[e]],c.push(b[e]));c.sort();b=c;b.length||(b=["FirebaseCore-web"]);c=Ke();"Browser"===c?(d=K(),c=ve(d)):"Worker"===c&&(d=K(),c=ve(d)+"-"+c);return c+"/JsCore/"+a+"/"+b.join(",")}function K(){return l.navigator&&l.navigator.userAgent||""}
    function L(a,b){a=a.split(".");b=b||l;for(var c=0;c<a.length&&"object"==typeof b&&null!=b;c++)b=b[a[c]];c!=a.length&&(b=void 0);return b}function Pe(){try{var a=l.localStorage,b=Qe();if(a)return a.setItem(b,"1"),a.removeItem(b),qe()?!!l.indexedDB:!0}catch(c){return Je()&&!!l.indexedDB}return !1}function Re(){return (Se()||"chrome-extension:"===He()||Ge())&&!Le()&&Pe()&&!Je()}function Se(){return "http:"===He()||"https:"===He()}function He(){return l.location&&l.location.protocol||null}
    function Te(a){a=a||K();return xe(a)||ve(a)==Ae?!1:!0}function Ue(a){return "undefined"===typeof a?null:ke(a)}function Ve(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&null!==a[c]&&void 0!==a[c]&&(b[c]=a[c]);return b}function We(a){if(null!==a)return JSON.parse(a)}function Qe(a){return a?a:Math.floor(1E9*Math.random()).toString()}function Xe(a){a=a||K();return "Safari"==ve(a)||a.toLowerCase().match(/iphone|ipad|ipod/)?!1:!0}
    function Ye(){var a=l.___jsl;if(a&&a.H)for(var b in a.H)if(a.H[b].r=a.H[b].r||[],a.H[b].L=a.H[b].L||[],a.H[b].r=a.H[b].L.concat(),a.CP)for(var c=0;c<a.CP.length;c++)a.CP[c]=null;}function Ze(a,b){if(a>b)throw Error("Short delay should be less than long delay!");this.a=a;this.c=b;a=K();b=Ke();this.b=xe(a)||"ReactNative"===b;}
    Ze.prototype.get=function(){var a=l.navigator;return (a&&"boolean"===typeof a.onLine&&(Se()||"chrome-extension:"===He()||"undefined"!==typeof a.connection)?a.onLine:1)?this.b?this.c:this.a:Math.min(5E3,this.a)};function $e(){var a=l.document;return a&&"undefined"!==typeof a.visibilityState?"visible"==a.visibilityState:!0}
    function af(){var a=l.document,b=null;return $e()||!a?E():(new D(function(c){b=function(){$e()&&(a.removeEventListener("visibilitychange",b,!1),c());};a.addEventListener("visibilitychange",b,!1);})).o(function(c){a.removeEventListener("visibilitychange",b,!1);throw c;})}function bf(a){try{var b=new Date(parseInt(a,10));if(!isNaN(b.getTime())&&!/[^0-9]/.test(a))return b.toUTCString()}catch(c){}return null}function cf(){return !(!L("fireauth.oauthhelper",l)&&!L("fireauth.iframe",l))}
    function df(){var a=l.navigator;return a&&a.serviceWorker&&a.serviceWorker.controller||null}function ef(){var a=l.navigator;return a&&a.serviceWorker?E().then(function(){return a.serviceWorker.ready}).then(function(b){return b.active||null}).o(function(){return null}):E(null)}var ff={};function gf(a){ff[a]||(ff[a]=!0,"undefined"!==typeof console&&"function"===typeof console.warn&&console.warn(a));}var hf;try{var jf={};Object.defineProperty(jf,"abcd",{configurable:!0,enumerable:!0,value:1});Object.defineProperty(jf,"abcd",{configurable:!0,enumerable:!0,value:2});hf=2==jf.abcd;}catch(a){hf=!1;}function M(a,b,c){hf?Object.defineProperty(a,b,{configurable:!0,enumerable:!0,value:c}):a[b]=c;}function N(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&M(a,c,b[c]);}function kf(a){var b={};N(b,a);return b}function lf(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}
    function mf(a,b){if(!b||!b.length)return !0;if(!a)return !1;for(var c=0;c<b.length;c++){var d=a[b[c]];if(void 0===d||null===d||""===d)return !1}return !0}function nf(a){var b=a;if("object"==typeof a&&null!=a){b="length"in a?[]:{};for(var c in a)M(b,c,nf(a[c]));}return b}function of(a){var b=a&&(a[pf]?"phone":null);if(b&&a&&a[qf]){M(this,"uid",a[qf]);M(this,"displayName",a[rf]||null);var c=null;a[sf]&&(c=(new Date(a[sf])).toUTCString());M(this,"enrollmentTime",c);M(this,"factorId",b);}else throw new t("internal-error","Internal assert: invalid MultiFactorInfo object");}of.prototype.w=function(){return {uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};function tf(a){try{var b=new uf(a);}catch(c){b=null;}return b}
    var rf="displayName",sf="enrolledAt",qf="mfaEnrollmentId",pf="phoneInfo";function uf(a){of.call(this,a);M(this,"phoneNumber",a[pf]);}r(uf,of);uf.prototype.w=function(){var a=uf.bb.w.call(this);a.phoneNumber=this.phoneNumber;return a};function vf(a){var b={},c=a[wf],d=a[xf],e=a[yf];a=tf(a[zf]);if(!e||e!=Af&&e!=Bf&&!c||e==Bf&&!d||e==Cf&&!a)throw Error("Invalid checkActionCode response!");e==Bf?(b[Df]=c||null,b[Ef]=c||null,b[Ff]=d):(b[Df]=d||null,b[Ef]=d||null,b[Ff]=c||null);b[Gf]=a||null;M(this,Hf,e);M(this,If,nf(b));}
    var Cf="REVERT_SECOND_FACTOR_ADDITION",Af="EMAIL_SIGNIN",Bf="VERIFY_AND_CHANGE_EMAIL",wf="email",zf="mfaInfo",xf="newEmail",yf="requestType",Ff="email",Df="fromEmail",Gf="multiFactorInfo",Ef="previousEmail",If="data",Hf="operation";function Jf(a){a=J(a);var b=be(a,Kf)||null,c=be(a,Lf)||null,d=be(a,Mf)||null;d=d?Nf[d]||null:null;if(!b||!c||!d)throw new t("argument-error",Kf+", "+Lf+"and "+Mf+" are required in a valid action code URL.");N(this,{apiKey:b,operation:d,code:c,continueUrl:be(a,Of)||null,languageCode:be(a,Pf)||null,tenantId:be(a,Qf)||null});}
    var Kf="apiKey",Lf="oobCode",Of="continueUrl",Pf="languageCode",Mf="mode",Qf="tenantId",Nf={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:Cf,signIn:Af,verifyAndChangeEmail:Bf,verifyEmail:"VERIFY_EMAIL"};function Rf(a){try{return new Jf(a)}catch(b){return null}}function Sf(a){var b=a[Tf];if("undefined"===typeof b)throw new t("missing-continue-uri");if("string"!==typeof b||"string"===typeof b&&!b.length)throw new t("invalid-continue-uri");this.h=b;this.b=this.a=null;this.g=!1;var c=a[Uf];if(c&&"object"===typeof c){b=c[Vf];var d=c[Wf];c=c[Xf];if("string"===typeof b&&b.length){this.a=b;if("undefined"!==typeof d&&"boolean"!==typeof d)throw new t("argument-error",Wf+" property must be a boolean when specified.");this.g=!!d;if("undefined"!==typeof c&&("string"!==
    typeof c||"string"===typeof c&&!c.length))throw new t("argument-error",Xf+" property must be a non empty string when specified.");this.b=c||null;}else {if("undefined"!==typeof b)throw new t("argument-error",Vf+" property must be a non empty string when specified.");if("undefined"!==typeof d||"undefined"!==typeof c)throw new t("missing-android-pkg-name");}}else if("undefined"!==typeof c)throw new t("argument-error",Uf+" property must be a non null object when specified.");this.f=null;if((b=a[Yf])&&"object"===
    typeof b)if(b=b[Zf],"string"===typeof b&&b.length)this.f=b;else {if("undefined"!==typeof b)throw new t("argument-error",Zf+" property must be a non empty string when specified.");}else if("undefined"!==typeof b)throw new t("argument-error",Yf+" property must be a non null object when specified.");b=a[$f];if("undefined"!==typeof b&&"boolean"!==typeof b)throw new t("argument-error",$f+" property must be a boolean when specified.");this.c=!!b;a=a[ag];if("undefined"!==typeof a&&("string"!==typeof a||"string"===
    typeof a&&!a.length))throw new t("argument-error",ag+" property must be a non empty string when specified.");this.i=a||null;}var Uf="android",ag="dynamicLinkDomain",$f="handleCodeInApp",Yf="iOS",Tf="url",Wf="installApp",Xf="minimumVersion",Vf="packageName",Zf="bundleId";
    function bg(a){var b={};b.continueUrl=a.h;b.canHandleCodeInApp=a.c;if(b.androidPackageName=a.a)b.androidMinimumVersion=a.b,b.androidInstallApp=a.g;b.iOSBundleId=a.f;b.dynamicLinkDomain=a.i;for(var c in b)null===b[c]&&delete b[c];return b}function cg(a){return Ra(a,function(b){b=b.toString(16);return 1<b.length?b:"0"+b}).join("")}var dg=null;function eg(a){var b=[];fg(a,function(c){b.push(c);});return b}function fg(a,b){function c(m){for(;d<a.length;){var p=a.charAt(d++),v=dg[p];if(null!=v)return v;if(!/^[\s\xa0]*$/.test(p))throw Error("Unknown base64 encoding at char: "+p);}return m}gg();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h));}}
    function gg(){if(!dg){dg={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++)for(var d=a.concat(b[c].split("")),e=0;e<d.length;e++){var f=d[e];void 0===dg[f]&&(dg[f]=e);}}}function hg(a){var b=ig(a);if(!(b&&b.sub&&b.iss&&b.aud&&b.exp))throw Error("Invalid JWT");this.h=a;this.a=b.exp;this.i=b.sub;a=Date.now()/1E3;this.g=b.iat||(a>this.a?this.a:a);this.b=b.provider_id||b.firebase&&b.firebase.sign_in_provider||null;this.f=b.firebase&&b.firebase.tenant||null;this.c=!!b.is_anonymous||"anonymous"==this.b;}hg.prototype.T=function(){return this.f};hg.prototype.l=function(){return this.c};hg.prototype.toString=function(){return this.h};
    function jg(a){try{return new hg(a)}catch(b){return null}}
    function ig(a){if(!a)return null;a=a.split(".");if(3!=a.length)return null;a=a[1];for(var b=(4-a.length%4)%4,c=0;c<b;c++)a+=".";try{var d=eg(a);a=[];for(c=b=0;b<d.length;){var e=d[b++];if(128>e)a[c++]=String.fromCharCode(e);else if(191<e&&224>e){var f=d[b++];a[c++]=String.fromCharCode((e&31)<<6|f&63);}else if(239<e&&365>e){f=d[b++];var g=d[b++],h=d[b++],m=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;a[c++]=String.fromCharCode(55296+(m>>10));a[c++]=String.fromCharCode(56320+(m&1023));}else f=d[b++],g=
    d[b++],a[c++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63);}return JSON.parse(a.join(""))}catch(p){}return null}var kg="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),lg=["client_id","response_type","scope","redirect_uri","state"],mg={nd:{Ja:"locale",va:700,ua:600,fa:"facebook.com",Ya:lg},pd:{Ja:null,va:500,ua:750,fa:"github.com",Ya:lg},qd:{Ja:"hl",va:515,ua:680,fa:"google.com",Ya:lg},wd:{Ja:"lang",va:485,ua:705,fa:"twitter.com",Ya:kg},kd:{Ja:"locale",va:640,ua:600,fa:"apple.com",Ya:[]}};
    function ng(a){for(var b in mg)if(mg[b].fa==a)return mg[b];return null}function og(a){var b={};b["facebook.com"]=pg;b["google.com"]=qg;b["github.com"]=rg;b["twitter.com"]=sg;var c=a&&a[tg];try{if(c)return b[c]?new b[c](a):new ug(a);if("undefined"!==typeof a[vg])return new wg(a)}catch(d){}return null}var vg="idToken",tg="providerId";
    function wg(a){var b=a[tg];if(!b&&a[vg]){var c=jg(a[vg]);c&&c.b&&(b=c.b);}if(!b)throw Error("Invalid additional user info!");if("anonymous"==b||"custom"==b)b=null;c=!1;"undefined"!==typeof a.isNewUser?c=!!a.isNewUser:"identitytoolkit#SignupNewUserResponse"===a.kind&&(c=!0);M(this,"providerId",b);M(this,"isNewUser",c);}function ug(a){wg.call(this,a);a=We(a.rawUserInfo||"{}");M(this,"profile",nf(a||{}));}r(ug,wg);
    function pg(a){ug.call(this,a);if("facebook.com"!=this.providerId)throw Error("Invalid provider ID!");}r(pg,ug);function rg(a){ug.call(this,a);if("github.com"!=this.providerId)throw Error("Invalid provider ID!");M(this,"username",this.profile&&this.profile.login||null);}r(rg,ug);function qg(a){ug.call(this,a);if("google.com"!=this.providerId)throw Error("Invalid provider ID!");}r(qg,ug);
    function sg(a){ug.call(this,a);if("twitter.com"!=this.providerId)throw Error("Invalid provider ID!");M(this,"username",a.screenName||null);}r(sg,ug);function xg(a){var b=J(a),c=be(b,"link"),d=be(J(c),"link");b=be(b,"deep_link_id");return be(J(b),"link")||b||d||c||a}function yg(a,b){if(!a&&!b)throw new t("internal-error","Internal assert: no raw session string available");if(a&&b)throw new t("internal-error","Internal assert: unable to determine the session type");this.a=a||null;this.b=b||null;this.type=this.a?zg:Ag;}var zg="enroll",Ag="signin";yg.prototype.Ha=function(){return this.a?E(this.a):E(this.b)};yg.prototype.w=function(){return this.type==zg?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}};function Bg(){}Bg.prototype.ka=function(){};Bg.prototype.b=function(){};Bg.prototype.c=function(){};Bg.prototype.w=function(){};function Cg(a,b){return a.then(function(c){if(c[Dg]){var d=jg(c[Dg]);if(!d||b!=d.i)throw new t("user-mismatch");return c}throw new t("user-mismatch");}).o(function(c){throw c&&c.code&&c.code==xa+"user-not-found"?new t("user-mismatch"):c;})}
    function Eg(a,b){if(b)this.a=b;else throw new t("internal-error","failed to construct a credential");M(this,"providerId",a);M(this,"signInMethod",a);}Eg.prototype.ka=function(a){return Fg(a,Gg(this))};Eg.prototype.b=function(a,b){var c=Gg(this);c.idToken=b;return Hg(a,c)};Eg.prototype.c=function(a,b){return Cg(Ig(a,Gg(this)),b)};function Gg(a){return {pendingToken:a.a,requestUri:"http://localhost"}}Eg.prototype.w=function(){return {providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}};
    function Jg(a){if(a&&a.providerId&&a.signInMethod&&0==a.providerId.indexOf("saml.")&&a.pendingToken)try{return new Eg(a.providerId,a.pendingToken)}catch(b){}return null}
    function Kg(a,b,c){this.a=null;if(b.idToken||b.accessToken)b.idToken&&M(this,"idToken",b.idToken),b.accessToken&&M(this,"accessToken",b.accessToken),b.nonce&&!b.pendingToken&&M(this,"nonce",b.nonce),b.pendingToken&&(this.a=b.pendingToken);else if(b.oauthToken&&b.oauthTokenSecret)M(this,"accessToken",b.oauthToken),M(this,"secret",b.oauthTokenSecret);else throw new t("internal-error","failed to construct a credential");M(this,"providerId",a);M(this,"signInMethod",c);}
    Kg.prototype.ka=function(a){return Fg(a,Lg(this))};Kg.prototype.b=function(a,b){var c=Lg(this);c.idToken=b;return Hg(a,c)};Kg.prototype.c=function(a,b){var c=Lg(this);return Cg(Ig(a,c),b)};
    function Lg(a){var b={};a.idToken&&(b.id_token=a.idToken);a.accessToken&&(b.access_token=a.accessToken);a.secret&&(b.oauth_token_secret=a.secret);b.providerId=a.providerId;a.nonce&&!a.a&&(b.nonce=a.nonce);b={postBody:fe(b).toString(),requestUri:"http://localhost"};a.a&&(delete b.postBody,b.pendingToken=a.a);return b}
    Kg.prototype.w=function(){var a={providerId:this.providerId,signInMethod:this.signInMethod};this.idToken&&(a.oauthIdToken=this.idToken);this.accessToken&&(a.oauthAccessToken=this.accessToken);this.secret&&(a.oauthTokenSecret=this.secret);this.nonce&&(a.nonce=this.nonce);this.a&&(a.pendingToken=this.a);return a};
    function Mg(a){if(a&&a.providerId&&a.signInMethod){var b={idToken:a.oauthIdToken,accessToken:a.oauthTokenSecret?null:a.oauthAccessToken,oauthTokenSecret:a.oauthTokenSecret,oauthToken:a.oauthTokenSecret&&a.oauthAccessToken,nonce:a.nonce,pendingToken:a.pendingToken};try{return new Kg(a.providerId,b,a.signInMethod)}catch(c){}}return null}function Ng(a,b){this.Qc=b||[];N(this,{providerId:a,isOAuthProvider:!0});this.Jb={};this.qb=(ng(a)||{}).Ja||null;this.pb=null;}
    Ng.prototype.Ka=function(a){this.Jb=nb(a);return this};function Og(a){if("string"!==typeof a||0!=a.indexOf("saml."))throw new t("argument-error",'SAML provider IDs must be prefixed with "saml."');Ng.call(this,a,[]);}r(Og,Ng);function Pg(a){Ng.call(this,a,lg);this.a=[];}r(Pg,Ng);Pg.prototype.Ca=function(a){Va(this.a,a)||this.a.push(a);return this};Pg.prototype.Rb=function(){return Za(this.a)};
    Pg.prototype.credential=function(a,b){var c;n(a)?c={idToken:a.idToken||null,accessToken:a.accessToken||null,nonce:a.rawNonce||null}:c={idToken:a||null,accessToken:b||null};if(!c.idToken&&!c.accessToken)throw new t("argument-error","credential failed: must provide the ID token and/or the access token.");return new Kg(this.providerId,c,this.providerId)};function Qg(){Pg.call(this,"facebook.com");}r(Qg,Pg);M(Qg,"PROVIDER_ID","facebook.com");M(Qg,"FACEBOOK_SIGN_IN_METHOD","facebook.com");
    function Rg(a){if(!a)throw new t("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;n(a)&&(b=a.accessToken);return (new Qg).credential({accessToken:b})}function Sg(){Pg.call(this,"github.com");}r(Sg,Pg);M(Sg,"PROVIDER_ID","github.com");M(Sg,"GITHUB_SIGN_IN_METHOD","github.com");
    function Tg(a){if(!a)throw new t("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;n(a)&&(b=a.accessToken);return (new Sg).credential({accessToken:b})}function Ug(){Pg.call(this,"google.com");this.Ca("profile");}r(Ug,Pg);M(Ug,"PROVIDER_ID","google.com");M(Ug,"GOOGLE_SIGN_IN_METHOD","google.com");function Vg(a,b){var c=a;n(a)&&(c=a.idToken,b=a.accessToken);return (new Ug).credential({idToken:c,accessToken:b})}function Wg(){Ng.call(this,"twitter.com",kg);}
    r(Wg,Ng);M(Wg,"PROVIDER_ID","twitter.com");M(Wg,"TWITTER_SIGN_IN_METHOD","twitter.com");function Xg(a,b){var c=a;n(c)||(c={oauthToken:a,oauthTokenSecret:b});if(!c.oauthToken||!c.oauthTokenSecret)throw new t("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Kg("twitter.com",c,"twitter.com")}
    function Yg(a,b,c){this.a=a;this.f=b;M(this,"providerId","password");M(this,"signInMethod",c===Zg.EMAIL_LINK_SIGN_IN_METHOD?Zg.EMAIL_LINK_SIGN_IN_METHOD:Zg.EMAIL_PASSWORD_SIGN_IN_METHOD);}Yg.prototype.ka=function(a){return this.signInMethod==Zg.EMAIL_LINK_SIGN_IN_METHOD?O(a,$g,{email:this.a,oobCode:this.f}):O(a,ah,{email:this.a,password:this.f})};
    Yg.prototype.b=function(a,b){return this.signInMethod==Zg.EMAIL_LINK_SIGN_IN_METHOD?O(a,bh,{idToken:b,email:this.a,oobCode:this.f}):O(a,ch,{idToken:b,email:this.a,password:this.f})};Yg.prototype.c=function(a,b){return Cg(this.ka(a),b)};Yg.prototype.w=function(){return {email:this.a,password:this.f,signInMethod:this.signInMethod}};function dh(a){return a&&a.email&&a.password?new Yg(a.email,a.password,a.signInMethod):null}function Zg(){N(this,{providerId:"password",isOAuthProvider:!1});}
    function eh(a,b){b=fh(b);if(!b)throw new t("argument-error","Invalid email link!");return new Yg(a,b.code,Zg.EMAIL_LINK_SIGN_IN_METHOD)}function fh(a){a=xg(a);return (a=Rf(a))&&a.operation===Af?a:null}N(Zg,{PROVIDER_ID:"password"});N(Zg,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"});N(Zg,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"});function gh(a){if(!(a.fb&&a.eb||a.La&&a.ea))throw new t("internal-error");this.a=a;M(this,"providerId","phone");this.fa="phone";M(this,"signInMethod","phone");}
    gh.prototype.ka=function(a){return a.gb(hh(this))};gh.prototype.b=function(a,b){var c=hh(this);c.idToken=b;return O(a,ih,c)};gh.prototype.c=function(a,b){var c=hh(this);c.operation="REAUTH";a=O(a,jh,c);return Cg(a,b)};gh.prototype.w=function(){var a={providerId:"phone"};this.a.fb&&(a.verificationId=this.a.fb);this.a.eb&&(a.verificationCode=this.a.eb);this.a.La&&(a.temporaryProof=this.a.La);this.a.ea&&(a.phoneNumber=this.a.ea);return a};
    function kh(a){if(a&&"phone"===a.providerId&&(a.verificationId&&a.verificationCode||a.temporaryProof&&a.phoneNumber)){var b={};w(["verificationId","verificationCode","temporaryProof","phoneNumber"],function(c){a[c]&&(b[c]=a[c]);});return new gh(b)}return null}function hh(a){return a.a.La&&a.a.ea?{temporaryProof:a.a.La,phoneNumber:a.a.ea}:{sessionInfo:a.a.fb,code:a.a.eb}}
    function lh(a){try{this.a=a||firebase.auth();}catch(b){throw new t("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");}N(this,{providerId:"phone",isOAuthProvider:!1});}
    lh.prototype.gb=function(a,b){var c=this.a.a;return E(b.verify()).then(function(d){if("string"!==typeof d)throw new t("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(b.type){case "recaptcha":var e=n(a)?a.session:null,f=n(a)?a.phoneNumber:a,g;e&&e.type==zg?g=e.Ha().then(function(h){return mh(c,{idToken:h,phoneEnrollmentInfo:{phoneNumber:f,recaptchaToken:d}})}):e&&e.type==Ag?g=e.Ha().then(function(h){return nh(c,
    {mfaPendingCredential:h,mfaEnrollmentId:a.multiFactorHint&&a.multiFactorHint.uid||a.multiFactorUid,phoneSignInInfo:{recaptchaToken:d}})}):g=oh(c,{phoneNumber:f,recaptchaToken:d});return g.then(function(h){"function"===typeof b.reset&&b.reset();return h},function(h){"function"===typeof b.reset&&b.reset();throw h;});default:throw new t("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');}})};
    function ph(a,b){if(!a)throw new t("missing-verification-id");if(!b)throw new t("missing-verification-code");return new gh({fb:a,eb:b})}N(lh,{PROVIDER_ID:"phone"});N(lh,{PHONE_SIGN_IN_METHOD:"phone"});
    function qh(a){if(a.temporaryProof&&a.phoneNumber)return new gh({La:a.temporaryProof,ea:a.phoneNumber});var b=a&&a.providerId;if(!b||"password"===b)return null;var c=a&&a.oauthAccessToken,d=a&&a.oauthTokenSecret,e=a&&a.nonce,f=a&&a.oauthIdToken,g=a&&a.pendingToken;try{switch(b){case "google.com":return Vg(f,c);case "facebook.com":return Rg(c);case "github.com":return Tg(c);case "twitter.com":return Xg(c,d);default:return c||d||f||g?g?0==b.indexOf("saml.")?new Eg(b,g):new Kg(b,{pendingToken:g,idToken:a.oauthIdToken,
    accessToken:a.oauthAccessToken},b):(new Pg(b)).credential({idToken:f,accessToken:c,rawNonce:e}):null}}catch(h){return null}}function rh(a){if(!a.isOAuthProvider)throw new t("invalid-oauth-provider");}function sh(a,b,c,d,e,f,g){this.c=a;this.b=b||null;this.g=c||null;this.f=d||null;this.i=f||null;this.h=g||null;this.a=e||null;if(this.g||this.a){if(this.g&&this.a)throw new t("invalid-auth-event");if(this.g&&!this.f)throw new t("invalid-auth-event");}else throw new t("invalid-auth-event");}sh.prototype.getUid=function(){var a=[];a.push(this.c);this.b&&a.push(this.b);this.f&&a.push(this.f);this.h&&a.push(this.h);return a.join("-")};sh.prototype.T=function(){return this.h};
    sh.prototype.w=function(){return {type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};function th(a){a=a||{};return a.type?new sh(a.type,a.eventId,a.urlResponse,a.sessionId,a.error&&Aa(a.error),a.postBody,a.tenantId):null}function uh(){this.b=null;this.a=[];}var vh=null;function wh(a){var b=vh;b.a.push(a);b.b||(b.b=function(c){for(var d=0;d<b.a.length;d++)b.a[d](c);},a=L("universalLinks.subscribe",l),"function"===typeof a&&a(null,b.b));}function xh(a){var b="unauthorized-domain",c=void 0,d=J(a);a=d.a;d=d.c;"chrome-extension"==d?c=Qb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):"http"==d||"https"==d?c=Qb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):b="operation-not-supported-in-this-environment";
    t.call(this,b,c);}r(xh,t);function yh(a,b,c){t.call(this,a,c);a=b||{};a.Kb&&M(this,"email",a.Kb);a.ea&&M(this,"phoneNumber",a.ea);a.credential&&M(this,"credential",a.credential);a.$b&&M(this,"tenantId",a.$b);}r(yh,t);yh.prototype.w=function(){var a={code:this.code,message:this.message};this.email&&(a.email=this.email);this.phoneNumber&&(a.phoneNumber=this.phoneNumber);this.tenantId&&(a.tenantId=this.tenantId);var b=this.credential&&this.credential.w();b&&z(a,b);return a};yh.prototype.toJSON=function(){return this.w()};
    function zh(a){if(a.code){var b=a.code||"";0==b.indexOf(xa)&&(b=b.substring(xa.length));var c={credential:qh(a),$b:a.tenantId};if(a.email)c.Kb=a.email;else if(a.phoneNumber)c.ea=a.phoneNumber;else if(!c.credential)return new t(b,a.message||void 0);return new yh(b,c,a.message)}return null}function Ah(){}Ah.prototype.c=null;function Bh(a){return a.c||(a.c=a.b())}var Ch;function Dh(){}r(Dh,Ah);Dh.prototype.a=function(){var a=Eh(this);return a?new ActiveXObject(a):new XMLHttpRequest};Dh.prototype.b=function(){var a={};Eh(this)&&(a[0]=!0,a[1]=!0);return a};
    function Eh(a){if(!a.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.f=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.f}Ch=new Dh;function Fh(){}r(Fh,Ah);Fh.prototype.a=function(){var a=new XMLHttpRequest;if("withCredentials"in a)return a;if("undefined"!=typeof XDomainRequest)return new Gh;throw Error("Unsupported browser");};Fh.prototype.b=function(){return {}};
    function Gh(){this.a=new XDomainRequest;this.readyState=0;this.onreadystatechange=null;this.responseType=this.responseText=this.response="";this.status=-1;this.statusText="";this.a.onload=q(this.qc,this);this.a.onerror=q(this.Tb,this);this.a.onprogress=q(this.rc,this);this.a.ontimeout=q(this.vc,this);}k=Gh.prototype;k.open=function(a,b,c){if(null!=c&&!c)throw Error("Only async requests are supported.");this.a.open(a,b);};
    k.send=function(a){if(a)if("string"==typeof a)this.a.send(a);else throw Error("Only string data is supported");else this.a.send();};k.abort=function(){this.a.abort();};k.setRequestHeader=function(){};k.getResponseHeader=function(a){return "content-type"==a.toLowerCase()?this.a.contentType:""};k.qc=function(){this.status=200;this.response=this.responseText=this.a.responseText;Hh(this,4);};k.Tb=function(){this.status=500;this.response=this.responseText="";Hh(this,4);};k.vc=function(){this.Tb();};
    k.rc=function(){this.status=200;Hh(this,1);};function Hh(a,b){a.readyState=b;if(a.onreadystatechange)a.onreadystatechange();}k.getAllResponseHeaders=function(){return "content-type: "+this.a.contentType};function Ih(a,b,c){this.reset(a,b,c,void 0,void 0);}Ih.prototype.a=null;Ih.prototype.reset=function(a,b,c,d,e){delete this.a;};function Kh(a){this.f=a;this.b=this.c=this.a=null;}function Lh(a,b){this.name=a;this.value=b;}Lh.prototype.toString=function(){return this.name};var Mh=new Lh("SEVERE",1E3),Nh=new Lh("WARNING",900),Oh=new Lh("CONFIG",700),Ph=new Lh("FINE",500);function Qh(a){if(a.c)return a.c;if(a.a)return Qh(a.a);Ga("Root logger has no level set.");return null}Kh.prototype.log=function(a,b,c){if(a.value>=Qh(this).value)for(oa(b)&&(b=b()),a=new Ih(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a;};var Rh={},Sh=null;
    function Th(a){Sh||(Sh=new Kh(""),Rh[""]=Sh,Sh.c=Oh);var b;if(!(b=Rh[a])){b=new Kh(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=Th(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;Rh[a]=b;}return b}function Uh(a,b){a&&a.log(Ph,b,void 0);}function Vh(a){this.f=a;}r(Vh,Ah);Vh.prototype.a=function(){return new Wh(this.f)};Vh.prototype.b=function(a){return function(){return a}}({});function Wh(a){H.call(this);this.u=a;this.h=void 0;this.readyState=Xh;this.status=0;this.responseType=this.responseText=this.response=this.statusText="";this.onreadystatechange=null;this.l=new Headers;this.b=null;this.s="GET";this.f="";this.a=!1;this.i=Th("goog.net.FetchXmlHttp");this.m=this.c=this.g=null;}r(Wh,H);var Xh=0;k=Wh.prototype;
    k.open=function(a,b){if(this.readyState!=Xh)throw this.abort(),Error("Error reopening a connection");this.s=a;this.f=b;this.readyState=1;Yh(this);};k.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var b={headers:this.l,method:this.s,credentials:this.h,cache:void 0};a&&(b.body=a);this.u.fetch(new Request(this.f,b)).then(this.uc.bind(this),this.Va.bind(this));};
    k.abort=function(){this.response=this.responseText="";this.l=new Headers;this.status=0;this.c&&this.c.cancel("Request was aborted.");1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,Zh(this));this.readyState=Xh;};
    k.uc=function(a){this.a&&(this.g=a,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=a.headers,this.readyState=2,Yh(this)),this.a&&(this.readyState=3,Yh(this),this.a&&("arraybuffer"===this.responseType?a.arrayBuffer().then(this.sc.bind(this),this.Va.bind(this)):"undefined"!==typeof l.ReadableStream&&"body"in a?(this.response=this.responseText="",this.c=a.body.getReader(),this.m=new TextDecoder,$h(this)):a.text().then(this.tc.bind(this),this.Va.bind(this)))));};
    function $h(a){a.c.read().then(a.pc.bind(a)).catch(a.Va.bind(a));}k.pc=function(a){if(this.a){var b=this.m.decode(a.value?a.value:new Uint8Array(0),{stream:!a.done});b&&(this.response=this.responseText+=b);a.done?Zh(this):Yh(this);3==this.readyState&&$h(this);}};k.tc=function(a){this.a&&(this.response=this.responseText=a,Zh(this));};k.sc=function(a){this.a&&(this.response=a,Zh(this));};k.Va=function(a){var b=this.i;b&&b.log(Nh,"Failed to fetch url "+this.f,a instanceof Error?a:Error(a));this.a&&Zh(this);};
    function Zh(a){a.readyState=4;a.g=null;a.c=null;a.m=null;Yh(a);}k.setRequestHeader=function(a,b){this.l.append(a,b);};k.getResponseHeader=function(a){return this.b?this.b.get(a.toLowerCase())||"":((a=this.i)&&a.log(Nh,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")};
    k.getAllResponseHeaders=function(){if(!this.b){var a=this.i;a&&a.log(Nh,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0);return ""}a=[];for(var b=this.b.entries(),c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function Yh(a){a.onreadystatechange&&a.onreadystatechange.call(a);}Object.defineProperty(Wh.prototype,"withCredentials",{get:function(){return "include"===this.h},set:function(a){this.h=a?"include":"same-origin";}});function ai(a){H.call(this);this.headers=new Jd;this.D=a||null;this.c=!1;this.C=this.a=null;this.h=this.P=this.l="";this.f=this.N=this.i=this.J=!1;this.g=0;this.s=null;this.m=bi;this.u=this.S=!1;}r(ai,H);var bi="";ai.prototype.b=Th("goog.net.XhrIo");var ci=/^https?$/i,di=["POST","PUT"];
    function ei(a,b,c,d,e){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.l+"; newUri="+b);c=c?c.toUpperCase():"GET";a.l=b;a.h="";a.P=c;a.J=!1;a.c=!0;a.a=a.D?a.D.a():Ch.a();a.C=a.D?Bh(a.D):Bh(Ch);a.a.onreadystatechange=q(a.Wb,a);try{Uh(a.b,fi(a,"Opening Xhr")),a.N=!0,a.a.open(c,String(b),!0),a.N=!1;}catch(g){Uh(a.b,fi(a,"Error opening Xhr: "+g.message));gi(a,g);return}b=d||"";var f=new Jd(a.headers);e&&Id(e,function(g,h){f.set(h,g);});e=Ta(f.Y());d=l.FormData&&b instanceof
    l.FormData;!Va(di,c)||e||d||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(g,h){this.a.setRequestHeader(h,g);},a);a.m&&(a.a.responseType=a.m);"withCredentials"in a.a&&a.a.withCredentials!==a.S&&(a.a.withCredentials=a.S);try{hi(a),0<a.g&&(a.u=ii(a.a),Uh(a.b,fi(a,"Will abort after "+a.g+"ms if incomplete, xhr2 "+a.u)),a.u?(a.a.timeout=a.g,a.a.ontimeout=q(a.Ma,a)):a.s=Ed(a.Ma,a.g,a)),Uh(a.b,fi(a,"Sending request")),a.i=!0,a.a.send(b),a.i=!1;}catch(g){Uh(a.b,
    fi(a,"Send error: "+g.message)),gi(a,g);}}function ii(a){return Wb&&fc(9)&&"number"===typeof a.timeout&&void 0!==a.ontimeout}function Ua(a){return "content-type"==a.toLowerCase()}k=ai.prototype;k.Ma=function(){"undefined"!=typeof ha&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",Uh(this.b,fi(this,this.h)),this.dispatchEvent("timeout"),this.abort(8));};function gi(a,b){a.c=!1;a.a&&(a.f=!0,a.a.abort(),a.f=!1);a.h=b;ji(a);ki(a);}
    function ji(a){a.J||(a.J=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"));}k.abort=function(){this.a&&this.c&&(Uh(this.b,fi(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),ki(this));};k.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),ki(this,!0));ai.bb.Da.call(this);};k.Wb=function(){this.ya||(this.N||this.i||this.f?li(this):this.Jc());};k.Jc=function(){li(this);};
    function li(a){if(a.c&&"undefined"!=typeof ha)if(a.C[1]&&4==mi(a)&&2==ni(a))Uh(a.b,fi(a,"Local request error detected and ignored"));else if(a.i&&4==mi(a))Ed(a.Wb,0,a);else if(a.dispatchEvent("readystatechange"),4==mi(a)){Uh(a.b,fi(a,"Request complete"));a.c=!1;try{var b=ni(a);a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1;}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.l).match(Md)[1]||null;if(!f&&l.self&&l.self.location){var g=l.self.location.protocol;
    f=g.substr(0,g.length-1);}e=!ci.test(f?f.toLowerCase():"");}d=e;}if(d)a.dispatchEvent("complete"),a.dispatchEvent("success");else {try{var h=2<mi(a)?a.a.statusText:"";}catch(m){Uh(a.b,"Can not get status: "+m.message),h="";}a.h=h+" ["+ni(a)+"]";ji(a);}}finally{ki(a);}}}function ki(a,b){if(a.a){hi(a);var c=a.a,d=a.C[0]?la:null;a.a=null;a.C=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d;}catch(e){(a=a.b)&&a.log(Mh,"Problem encountered resetting onreadystatechange: "+e.message,void 0);}}}
    function hi(a){a.a&&a.u&&(a.a.ontimeout=null);a.s&&(l.clearTimeout(a.s),a.s=null);}function mi(a){return a.a?a.a.readyState:0}function ni(a){try{return 2<mi(a)?a.a.status:-1}catch(b){return -1}}function oi(a){try{return a.a?a.a.responseText:""}catch(b){return Uh(a.b,"Can not get responseText: "+b.message),""}}
    k.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case bi:case "text":return this.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var a=this.b;a&&a.log(Mh,"Response type "+this.m+" is not supported on this browser",void 0);return null}catch(b){return Uh(this.b,"Can not get response: "+b.message),null}};function fi(a,b){return b+" ["+a.P+" "+a.l+" "+ni(a)+"]"}function pi(a){var b=qi;this.g=[];this.u=b;this.s=a||null;this.f=this.a=!1;this.c=void 0;this.v=this.C=this.i=!1;this.h=0;this.b=null;this.l=0;}pi.prototype.cancel=function(a){if(this.a)this.c instanceof pi&&this.c.cancel();else {if(this.b){var b=this.b;delete this.b;a?b.cancel(a):(b.l--,0>=b.l&&b.cancel());}this.u?this.u.call(this.s,this):this.v=!0;this.a||(a=new ri(this),si(this),ti(this,!1,a));}};pi.prototype.m=function(a,b){this.i=!1;ti(this,a,b);};function ti(a,b,c){a.a=!0;a.c=c;a.f=!b;ui(a);}
    function si(a){if(a.a){if(!a.v)throw new vi(a);a.v=!1;}}function wi(a,b){xi(a,null,b,void 0);}function xi(a,b,c,d){a.g.push([b,c,d]);a.a&&ui(a);}pi.prototype.then=function(a,b,c){var d,e,f=new D(function(g,h){d=g;e=h;});xi(this,d,function(g){g instanceof ri?f.cancel():e(g);});return f.then(a,b,c)};pi.prototype.$goog_Thenable=!0;function yi(a){return Sa(a.g,function(b){return oa(b[1])})}
    function ui(a){if(a.h&&a.a&&yi(a)){var b=a.h,c=zi[b];c&&(l.clearTimeout(c.a),delete zi[b]);a.h=0;}a.b&&(a.b.l--,delete a.b);b=a.c;for(var d=c=!1;a.g.length&&!a.i;){var e=a.g.shift(),f=e[0],g=e[1];e=e[2];if(f=a.f?g:f)try{var h=f.call(e||a.s,b);void 0!==h&&(a.f=a.f&&(h==b||h instanceof Error),a.c=b=h);if(Ea(b)||"function"===typeof l.Promise&&b instanceof l.Promise)d=!0,a.i=!0;}catch(m){b=m,a.f=!0,yi(a)||(c=!0);}}a.c=b;d&&(h=q(a.m,a,!0),d=q(a.m,a,!1),b instanceof pi?(xi(b,h,d),b.C=!0):b.then(h,d));c&&(b=
    new Ai(b),zi[b.a]=b,a.h=b.a);}function vi(){u.call(this);}r(vi,u);vi.prototype.message="Deferred has already fired";vi.prototype.name="AlreadyCalledError";function ri(){u.call(this);}r(ri,u);ri.prototype.message="Deferred was canceled";ri.prototype.name="CanceledError";function Ai(a){this.a=l.setTimeout(q(this.c,this),0);this.b=a;}Ai.prototype.c=function(){delete zi[this.a];throw this.b;};var zi={};function Bi(a){var c=document,d=yb(a).toString(),e=oc(document,"SCRIPT"),f={Xb:e,Ma:void 0},g=new pi(f),h=null,m=5E3;(h=window.setTimeout(function(){Ci(e,!0);var p=new Di(Ei,"Timeout reached for loading script "+d);si(g);ti(g,!1,p);},m),f.Ma=h);e.onload=e.onreadystatechange=function(){e.readyState&&"loaded"!=e.readyState&&"complete"!=e.readyState||(Ci(e,!1,h),si(g),ti(g,!0,null));};e.onerror=function(){Ci(e,!0,h);var p=new Di(Fi,"Error while loading script "+
    d);si(g);ti(g,!1,p);};f={};z(f,{type:"text/javascript",charset:"UTF-8"});lc(e,f);Ob(e,a);Gi(c).appendChild(e);return g}function Gi(a){var b;return (b=(a||document).getElementsByTagName("HEAD"))&&0!=b.length?b[0]:a.documentElement}function qi(){if(this&&this.Xb){var a=this.Xb;a&&"SCRIPT"==a.tagName&&Ci(a,!0,this.Ma);}}
    function Ci(a,b,c){null!=c&&l.clearTimeout(c);a.onload=la;a.onerror=la;a.onreadystatechange=la;b&&window.setTimeout(function(){a&&a.parentNode&&a.parentNode.removeChild(a);},0);}var Fi=0,Ei=1;function Di(a,b){var c="Jsloader error (code #"+a+")";b&&(c+=": "+b);u.call(this,c);this.code=a;}r(Di,u);function Hi(a){this.f=a;}r(Hi,Ah);Hi.prototype.a=function(){return new this.f};Hi.prototype.b=function(){return {}};
    function Ii(a,b,c){this.c=a;a=b||{};this.l=a.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token";this.m=a.secureTokenTimeout||Ji;this.g=nb(a.secureTokenHeaders||Ki);this.h=a.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.i=a.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/";this.v=a.firebaseTimeout||Li;this.a=nb(a.firebaseHeaders||Mi);c&&(this.a["X-Client-Version"]=c,this.g["X-Client-Version"]=c);c="Node"==Ke();c=l.XMLHttpRequest||
    c&&firebase.INTERNAL.node&&firebase.INTERNAL.node.XMLHttpRequest;if(!c&&!Je())throw new t("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0;Je()?this.f=new Vh(self):Le()?this.f=new Hi(c):this.f=new Fh;this.b=null;}var Ni,Dg="idToken",Ji=new Ze(3E4,6E4),Ki={"Content-Type":"application/x-www-form-urlencoded"},Li=new Ze(3E4,6E4),Mi={"Content-Type":"application/json"};function Oi(a,b){b?a.a["X-Firebase-Locale"]=b:delete a.a["X-Firebase-Locale"];}
    function Pi(a,b){b&&(a.l=Qi("https://securetoken.googleapis.com/v1/token",b),a.h=Qi("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",b),a.i=Qi("https://identitytoolkit.googleapis.com/v2/",b));}function Qi(a,b){a=J(a);b=J(b.url);a.f=a.a+a.f;Pd(a,b.c);a.a=b.a;Qd(a,b.g);return a.toString()}function Ri(a,b){b?(a.a["X-Client-Version"]=b,a.g["X-Client-Version"]=b):(delete a.a["X-Client-Version"],delete a.g["X-Client-Version"]);}Ii.prototype.T=function(){return this.b};
    function Si(a,b,c,d,e,f,g){ue()||Je()?a=q(a.u,a):(Ni||(Ni=new D(function(h,m){Ti(h,m);})),a=q(a.s,a));a(b,c,d,e,f,g);}
    Ii.prototype.u=function(a,b,c,d,e,f){if(Je()&&("undefined"===typeof l.fetch||"undefined"===typeof l.Headers||"undefined"===typeof l.Request))throw new t("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var g=new ai(this.f);if(f){g.g=Math.max(0,f);var h=setTimeout(function(){g.dispatchEvent("timeout");},f);}qd(g,"complete",function(){h&&clearTimeout(h);var m=null;try{m=
    JSON.parse(oi(this))||null;}catch(p){m=null;}b&&b(m);});wd(g,"ready",function(){h&&clearTimeout(h);Xc(this);});wd(g,"timeout",function(){h&&clearTimeout(h);Xc(this);b&&b(null);});ei(g,a,c,d,e);};var Ui=new qb(rb,"https://apis.google.com/js/client.js?onload=%{onload}"),Vi="__fcb"+Math.floor(1E6*Math.random()).toString();
    function Ti(a,b){if(((window.gapi||{}).client||{}).request)a();else {l[Vi]=function(){((window.gapi||{}).client||{}).request?a():b(Error("CORS_UNSUPPORTED"));};var c=zb(Ui,{onload:Vi});wi(Bi(c),function(){b(Error("CORS_UNSUPPORTED"));});}}
    Ii.prototype.s=function(a,b,c,d,e){var f=this;Ni.then(function(){window.gapi.client.setApiKey(f.c);var g=window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({path:a,method:c,body:d,headers:e,authType:"none",callback:function(h){window.gapi.auth.setToken(g);b&&b(h);}});}).o(function(g){b&&b({error:{message:g&&g.message||"CORS_UNSUPPORTED"}});});};
    function Wi(a,b){return new D(function(c,d){"refresh_token"==b.grant_type&&b.refresh_token||"authorization_code"==b.grant_type&&b.code?Si(a,a.l+"?key="+encodeURIComponent(a.c),function(e){e?e.error?d(Xi(e)):e.access_token&&e.refresh_token?c(e):d(new t("internal-error")):d(new t("network-request-failed"));},"POST",fe(b).toString(),a.g,a.m.get()):d(new t("internal-error"));})}
    function Yi(a,b,c,d,e,f,g){var h=J(b+c);I(h,"key",a.c);g&&I(h,"cb",Date.now().toString());var m="GET"==d;if(m)for(var p in e)e.hasOwnProperty(p)&&I(h,p,e[p]);return new D(function(v,B){Si(a,h.toString(),function(A){A?A.error?B(Xi(A,f||{})):v(A):B(new t("network-request-failed"));},d,m?void 0:ke(Ve(e)),a.a,a.v.get());})}function Zi(a){a=a.email;if("string"!==typeof a||!De.test(a))throw new t("invalid-email");}function $i(a){"email"in a&&Zi(a);}
    function aj(a,b){return O(a,bj,{identifier:b,continueUri:Se()?re():"http://localhost"}).then(function(c){return c.signinMethods||[]})}function cj(a){return O(a,dj,{}).then(function(b){return b.authorizedDomains||[]})}function P(a){if(!a[Dg]){if(a.mfaPendingCredential)throw new t("multi-factor-auth-required",null,nb(a));throw new t("internal-error");}}
    function ej(a){if(a.phoneNumber||a.temporaryProof){if(!a.phoneNumber||!a.temporaryProof)throw new t("internal-error");}else {if(!a.sessionInfo)throw new t("missing-verification-id");if(!a.code)throw new t("missing-verification-code");}}Ii.prototype.Ab=function(){return O(this,fj,{})};Ii.prototype.Cb=function(a,b){return O(this,gj,{idToken:a,email:b})};Ii.prototype.Db=function(a,b){return O(this,ch,{idToken:a,password:b})};var hj={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};k=Ii.prototype;
    k.Eb=function(a,b){var c={idToken:a},d=[];lb(hj,function(e,f){var g=b[f];null===g?d.push(e):f in b&&(c[f]=g);});d.length&&(c.deleteAttribute=d);return O(this,gj,c)};k.wb=function(a,b){a={requestType:"PASSWORD_RESET",email:a};z(a,b);return O(this,ij,a)};k.xb=function(a,b){a={requestType:"EMAIL_SIGNIN",email:a};z(a,b);return O(this,jj,a)};k.vb=function(a,b){a={requestType:"VERIFY_EMAIL",idToken:a};z(a,b);return O(this,kj,a)};
    k.Fb=function(a,b,c){a={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:a,newEmail:b};z(a,c);return O(this,lj,a)};function oh(a,b){return O(a,mj,b)}k.gb=function(a){return O(this,nj,a)};function mh(a,b){return O(a,oj,b).then(function(c){return c.phoneSessionInfo.sessionInfo})}
    function pj(a){if(!a.phoneVerificationInfo)throw new t("internal-error");if(!a.phoneVerificationInfo.sessionInfo)throw new t("missing-verification-id");if(!a.phoneVerificationInfo.code)throw new t("missing-verification-code");}function nh(a,b){return O(a,qj,b).then(function(c){return c.phoneResponseInfo.sessionInfo})}function rj(a,b,c){return O(a,sj,{idToken:b,deleteProvider:c})}function tj(a){if(!a.requestUri||!a.sessionId&&!a.postBody&&!a.pendingToken)throw new t("internal-error");}
    function uj(a,b){b.oauthIdToken&&b.providerId&&0==b.providerId.indexOf("oidc.")&&!b.pendingToken&&(a.sessionId?b.nonce=a.sessionId:a.postBody&&(a=new Ud(a.postBody),je(a,"nonce")&&(b.nonce=a.get("nonce"))));return b}
    function vj(a){var b=null;a.needConfirmation?(a.code="account-exists-with-different-credential",b=zh(a)):"FEDERATED_USER_ID_ALREADY_LINKED"==a.errorMessage?(a.code="credential-already-in-use",b=zh(a)):"EMAIL_EXISTS"==a.errorMessage?(a.code="email-already-in-use",b=zh(a)):a.errorMessage&&(b=wj(a.errorMessage));if(b)throw b;P(a);}function Fg(a,b){b.returnIdpCredential=!0;return O(a,xj,b)}function Hg(a,b){b.returnIdpCredential=!0;return O(a,yj,b)}
    function Ig(a,b){b.returnIdpCredential=!0;b.autoCreate=!1;return O(a,zj,b)}function Aj(a){if(!a.oobCode)throw new t("invalid-action-code");}k.ob=function(a,b){return O(this,Bj,{oobCode:a,newPassword:b})};k.Sa=function(a){return O(this,Cj,{oobCode:a})};k.kb=function(a){return O(this,Dj,{oobCode:a})};
    var Dj={endpoint:"setAccountInfo",A:Aj,Z:"email",B:!0},Cj={endpoint:"resetPassword",A:Aj,G:function(a){var b=a.requestType;if(!b||!a.email&&"EMAIL_SIGNIN"!=b&&"VERIFY_AND_CHANGE_EMAIL"!=b)throw new t("internal-error");},B:!0},Ej={endpoint:"signupNewUser",A:function(a){Zi(a);if(!a.password)throw new t("weak-password");},G:P,V:!0,B:!0},bj={endpoint:"createAuthUri",B:!0},Fj={endpoint:"deleteAccount",O:["idToken"]},sj={endpoint:"setAccountInfo",O:["idToken","deleteProvider"],A:function(a){if(!Array.isArray(a.deleteProvider))throw new t("internal-error");
    }},$g={endpoint:"emailLinkSignin",O:["email","oobCode"],A:Zi,G:P,V:!0,B:!0},bh={endpoint:"emailLinkSignin",O:["idToken","email","oobCode"],A:Zi,G:P,V:!0},Gj={endpoint:"accounts/mfaEnrollment:finalize",O:["idToken","phoneVerificationInfo"],A:pj,G:P,B:!0,Na:!0},Hj={endpoint:"accounts/mfaSignIn:finalize",O:["mfaPendingCredential","phoneVerificationInfo"],A:pj,G:P,B:!0,Na:!0},Ij={endpoint:"getAccountInfo"},jj={endpoint:"getOobConfirmationCode",O:["requestType"],A:function(a){if("EMAIL_SIGNIN"!=a.requestType)throw new t("internal-error");
    Zi(a);},Z:"email",B:!0},kj={endpoint:"getOobConfirmationCode",O:["idToken","requestType"],A:function(a){if("VERIFY_EMAIL"!=a.requestType)throw new t("internal-error");},Z:"email",B:!0},lj={endpoint:"getOobConfirmationCode",O:["idToken","newEmail","requestType"],A:function(a){if("VERIFY_AND_CHANGE_EMAIL"!=a.requestType)throw new t("internal-error");},Z:"email",B:!0},ij={endpoint:"getOobConfirmationCode",O:["requestType"],A:function(a){if("PASSWORD_RESET"!=a.requestType)throw new t("internal-error");
    Zi(a);},Z:"email",B:!0},dj={mb:!0,endpoint:"getProjectConfig",Vb:"GET"},Jj={mb:!0,endpoint:"getRecaptchaParam",Vb:"GET",G:function(a){if(!a.recaptchaSiteKey)throw new t("internal-error");}},Bj={endpoint:"resetPassword",A:Aj,Z:"email",B:!0},mj={endpoint:"sendVerificationCode",O:["phoneNumber","recaptchaToken"],Z:"sessionInfo",B:!0},gj={endpoint:"setAccountInfo",O:["idToken"],A:$i,V:!0},ch={endpoint:"setAccountInfo",O:["idToken"],A:function(a){$i(a);if(!a.password)throw new t("weak-password");},G:P,
    V:!0},fj={endpoint:"signupNewUser",G:P,V:!0,B:!0},oj={endpoint:"accounts/mfaEnrollment:start",O:["idToken","phoneEnrollmentInfo"],A:function(a){if(!a.phoneEnrollmentInfo)throw new t("internal-error");if(!a.phoneEnrollmentInfo.phoneNumber)throw new t("missing-phone-number");if(!a.phoneEnrollmentInfo.recaptchaToken)throw new t("missing-app-credential");},G:function(a){if(!a.phoneSessionInfo||!a.phoneSessionInfo.sessionInfo)throw new t("internal-error");},B:!0,Na:!0},qj={endpoint:"accounts/mfaSignIn:start",
    O:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],A:function(a){if(!a.phoneSignInInfo||!a.phoneSignInInfo.recaptchaToken)throw new t("missing-app-credential");},G:function(a){if(!a.phoneResponseInfo||!a.phoneResponseInfo.sessionInfo)throw new t("internal-error");},B:!0,Na:!0},xj={endpoint:"verifyAssertion",A:tj,Za:uj,G:vj,V:!0,B:!0},zj={endpoint:"verifyAssertion",A:tj,Za:uj,G:function(a){if(a.errorMessage&&"USER_NOT_FOUND"==a.errorMessage)throw new t("user-not-found");if(a.errorMessage)throw wj(a.errorMessage);
    P(a);},V:!0,B:!0},yj={endpoint:"verifyAssertion",A:function(a){tj(a);if(!a.idToken)throw new t("internal-error");},Za:uj,G:vj,V:!0},Kj={endpoint:"verifyCustomToken",A:function(a){if(!a.token)throw new t("invalid-custom-token");},G:P,V:!0,B:!0},ah={endpoint:"verifyPassword",A:function(a){Zi(a);if(!a.password)throw new t("wrong-password");},G:P,V:!0,B:!0},nj={endpoint:"verifyPhoneNumber",A:ej,G:P,B:!0},ih={endpoint:"verifyPhoneNumber",A:function(a){if(!a.idToken)throw new t("internal-error");ej(a);},
    G:function(a){if(a.temporaryProof)throw a.code="credential-already-in-use",zh(a);P(a);}},jh={Ib:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",A:ej,G:P,B:!0},Lj={endpoint:"accounts/mfaEnrollment:withdraw",O:["idToken","mfaEnrollmentId"],G:function(a){if(!!a[Dg]^!!a.refreshToken)throw new t("internal-error");},B:!0,Na:!0};
    function O(a,b,c){if(!mf(c,b.O))return F(new t("internal-error"));var d=!!b.Na,e=b.Vb||"POST",f;return E(c).then(b.A).then(function(){b.V&&(c.returnSecureToken=!0);b.B&&a.b&&"undefined"===typeof c.tenantId&&(c.tenantId=a.b);return d?Yi(a,a.i,b.endpoint,e,c,b.Ib,b.mb||!1):Yi(a,a.h,b.endpoint,e,c,b.Ib,b.mb||!1)}).then(function(g){f=g;return b.Za?b.Za(c,f):f}).then(b.G).then(function(){if(!b.Z)return f;if(!(b.Z in f))throw new t("internal-error");return f[b.Z]})}
    function wj(a){return Xi({error:{errors:[{message:a}],code:400,message:a}})}
    function Xi(a,b){var c=(a.error&&a.error.errors&&a.error.errors[0]||{}).reason||"";var d={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(c=d[c]?new t(d[c]):null)return c;c=a.error&&a.error.message||"";d={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",
    MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",
    EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",
    OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",
    QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",
    INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",
    UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"};z(d,b||{});b=(b=c.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<b.length?b[1]:void 0;for(var e in d)if(0===c.indexOf(e))return new t(d[e],b);!b&&a&&(b=Ue(a));return new t("internal-error",b)}function Mj(a){this.b=a;this.a=null;this.sb=Nj(this);}
    function Nj(a){return Oj().then(function(){return new D(function(b,c){L("gapi.iframes.getContext")().open({where:document.body,url:a.b,messageHandlersFilter:L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(d){function e(){clearTimeout(f);b();}a.a=d;a.a.restyle({setHideOnLeave:!1});var f=setTimeout(function(){c(Error("Network Error"));},Pj.get());d.ping(e).then(e,function(){c(Error("Network Error"));});});})})}
    function Qj(a,b){return a.sb.then(function(){return new D(function(c){a.a.send(b.type,b,c,L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));})})}function Rj(a,b){a.sb.then(function(){a.a.register("authEvent",b,L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));});}var Sj=new qb(rb,"https://apis.google.com/js/api.js?onload=%{onload}"),Tj=new Ze(3E4,6E4),Pj=new Ze(5E3,15E3),Uj=null;
    function Oj(){return Uj?Uj:Uj=(new D(function(a,b){function c(){Ye();L("gapi.load")("gapi.iframes",{callback:a,ontimeout:function(){Ye();b(Error("Network Error"));},timeout:Tj.get()});}if(L("gapi.iframes.Iframe"))a();else if(L("gapi.load"))c();else {var d="__iframefcb"+Math.floor(1E6*Math.random()).toString();l[d]=function(){L("gapi.load")?c():b(Error("Network Error"));};d=zb(Sj,{onload:d});E(Bi(d)).o(function(){b(Error("Network Error"));});}})).o(function(a){Uj=null;throw a;})}function Vj(a,b,c,d){this.l=a;this.h=b;this.i=c;this.g=d;this.f=null;this.g?(a=J(this.g.url),a=ce(a.c,a.a,a.g,"/emulator/auth/iframe")):a=ce("https",this.l,null,"/__/auth/iframe");this.a=a;I(this.a,"apiKey",this.h);I(this.a,"appName",this.i);this.b=null;this.c=[];}Vj.prototype.toString=function(){this.f?I(this.a,"v",this.f):ie(this.a.b,"v");this.b?I(this.a,"eid",this.b):ie(this.a.b,"eid");this.c.length?I(this.a,"fw",this.c.join(",")):ie(this.a.b,"fw");return this.a.toString()};
    function Wj(a,b,c,d,e,f){this.u=a;this.s=b;this.c=c;this.m=d;this.v=f;this.i=this.g=this.l=null;this.a=e;this.h=this.f=null;}Wj.prototype.zb=function(a){this.h=a;return this};
    Wj.prototype.toString=function(){if(this.v){var a=J(this.v.url);a=ce(a.c,a.a,a.g,"/emulator/auth/handler");}else a=ce("https",this.u,null,"/__/auth/handler");I(a,"apiKey",this.s);I(a,"appName",this.c);I(a,"authType",this.m);if(this.a.isOAuthProvider){var b=this.a;try{var c=firebase.app(this.c).auth().la();}catch(h){c=null;}b.pb=c;I(a,"providerId",this.a.providerId);c=this.a;b=Ve(c.Jb);for(var d in b)b[d]=b[d].toString();d=c.Qc;b=nb(b);for(var e=0;e<d.length;e++){var f=d[e];f in b&&delete b[f];}c.qb&&
    c.pb&&!b[c.qb]&&(b[c.qb]=c.pb);mb(b)||I(a,"customParameters",Ue(b));}"function"===typeof this.a.Rb&&(c=this.a.Rb(),c.length&&I(a,"scopes",c.join(",")));this.l?I(a,"redirectUrl",this.l):ie(a.b,"redirectUrl");this.g?I(a,"eventId",this.g):ie(a.b,"eventId");this.i?I(a,"v",this.i):ie(a.b,"v");if(this.b)for(var g in this.b)this.b.hasOwnProperty(g)&&!be(a,g)&&I(a,g,this.b[g]);this.h?I(a,"tid",this.h):ie(a.b,"tid");this.f?I(a,"eid",this.f):ie(a.b,"eid");g=Xj(this.c);g.length&&I(a,"fw",g.join(","));return a.toString()};
    function Xj(a){try{return firebase.app(a).auth().Ga()}catch(b){return []}}function Yj(a,b,c,d,e,f){this.s=a;this.g=b;this.b=c;this.f=f;this.c=d||null;this.i=e||null;this.l=this.u=this.C=null;this.h=[];this.m=this.a=null;}
    function Zj(a){var b=re();return cj(a).then(function(c){a:{var d=J(b),e=d.c;d=d.a;for(var f=0;f<c.length;f++){var g=c[f];var h=d;var m=e;0==g.indexOf("chrome-extension://")?h=J(g).a==h&&"chrome-extension"==m:"http"!=m&&"https"!=m?h=!1:Ce.test(g)?h=h==g:(g=g.split(".").join("\\."),h=(new RegExp("^(.+\\."+g+"|"+g+")$","i")).test(h));if(h){c=!0;break a}}c=!1;}if(!c)throw new xh(re());})}
    function ak(a){if(a.m)return a.m;a.m=Ee().then(function(){if(!a.u){var b=a.c,c=a.i,d=Xj(a.b),e=new Vj(a.s,a.g,a.b,a.f);e.f=b;e.b=c;e.c=Za(d||[]);a.u=e.toString();}a.v=new Mj(a.u);bk(a);});return a.m}k=Yj.prototype;k.Pb=function(a,b,c){var d=new t("popup-closed-by-user"),e=new t("web-storage-unsupported"),f=this,g=!1;return this.ma().then(function(){ck(f).then(function(h){h||(a&&ye(a),b(e),g=!0);});}).o(function(){}).then(function(){if(!g)return Be(a)}).then(function(){if(!g)return Fd(c).then(function(){b(d);})})};
    k.Yb=function(){var a=K();return !Te(a)&&!Xe(a)};k.Ub=function(){return !1};
    k.Nb=function(a,b,c,d,e,f,g,h){if(!a)return F(new t("popup-blocked"));if(g&&!Te())return this.ma().o(function(p){ye(a);e(p);}),d(),E();this.a||(this.a=Zj(dk(this)));var m=this;return this.a.then(function(){var p=m.ma().o(function(v){ye(a);e(v);throw v;});d();return p}).then(function(){rh(c);if(!g){var p=ek(m.s,m.g,m.b,b,c,null,f,m.c,void 0,m.i,h,m.f);se(p,a);}}).o(function(p){"auth/network-request-failed"==p.code&&(m.a=null);throw p;})};
    function dk(a){a.l||(a.C=a.c?Oe(a.c,Xj(a.b)):null,a.l=new Ii(a.g,Ca(a.i),a.C),a.f&&Pi(a.l,a.f));return a.l}k.Ob=function(a,b,c,d){this.a||(this.a=Zj(dk(this)));var e=this;return this.a.then(function(){rh(b);var f=ek(e.s,e.g,e.b,a,b,re(),c,e.c,void 0,e.i,d,e.f);se(f);}).o(function(f){"auth/network-request-failed"==f.code&&(e.a=null);throw f;})};k.ma=function(){var a=this;return ak(this).then(function(){return a.v.sb}).o(function(){a.a=null;throw new t("network-request-failed");})};k.ac=function(){return !0};
    function ek(a,b,c,d,e,f,g,h,m,p,v,B){a=new Wj(a,b,c,d,e,B);a.l=f;a.g=g;a.i=h;a.b=nb(m||null);a.f=p;return a.zb(v).toString()}function bk(a){if(!a.v)throw Error("IfcHandler must be initialized!");Rj(a.v,function(b){var c={};if(b&&b.authEvent){var d=!1;b=th(b.authEvent);for(c=0;c<a.h.length;c++)d=a.h[c](b)||d;c={};c.status=d?"ACK":"ERROR";return E(c)}c.status="ERROR";return E(c)});}
    function ck(a){var b={type:"webStorageSupport"};return ak(a).then(function(){return Qj(a.v,b)}).then(function(c){if(c&&c.length&&"undefined"!==typeof c[0].webStorageSupport)return c[0].webStorageSupport;throw Error();})}k.Ea=function(a){this.h.push(a);};k.Ta=function(a){Xa(this.h,function(b){return b==a});};function fk(a){this.a=a||firebase.INTERNAL.reactNative&&firebase.INTERNAL.reactNative.AsyncStorage;if(!this.a)throw new t("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage";}k=fk.prototype;k.get=function(a){return E(this.a.getItem(a)).then(function(b){return b&&We(b)})};k.set=function(a,b){return E(this.a.setItem(a,Ue(b)))};k.U=function(a){return E(this.a.removeItem(a))};k.ca=function(){};k.ia=function(){};function gk(a){this.b=a;this.a={};this.f=q(this.c,this);}var hk=[];function ik(){var a=Je()?self:null;w(hk,function(c){c.b==a&&(b=c);});if(!b){var b=new gk(a);hk.push(b);}return b}
    gk.prototype.c=function(a){var b=a.data.eventType,c=a.data.eventId,d=this.a[b];if(d&&0<d.length){a.ports[0].postMessage({status:"ack",eventId:c,eventType:b,response:null});var e=[];w(d,function(f){e.push(E().then(function(){return f(a.origin,a.data.data)}));});Jc(e).then(function(f){var g=[];w(f,function(h){g.push({fulfilled:h.Qb,value:h.value,reason:h.reason?h.reason.message:void 0});});w(g,function(h){for(var m in h)"undefined"===typeof h[m]&&delete h[m];});a.ports[0].postMessage({status:"done",eventId:c,
    eventType:b,response:g});});}};function jk(a,b,c){mb(a.a)&&a.b.addEventListener("message",a.f);"undefined"===typeof a.a[b]&&(a.a[b]=[]);a.a[b].push(c);}function kk(a){this.a=a;}kk.prototype.postMessage=function(a,b){this.a.postMessage(a,b);};function lk(a){this.c=a;this.b=!1;this.a=[];}
    function mk(a,b,c,d){var e,f=c||{},g,h,m,p=null;if(a.b)return F(Error("connection_unavailable"));var v=d?800:50,B="undefined"!==typeof MessageChannel?new MessageChannel:null;return (new D(function(A,Q){B?(e=Math.floor(Math.random()*Math.pow(10,20)).toString(),B.port1.start(),h=setTimeout(function(){Q(Error("unsupported_event"));},v),g=function(ya){ya.data.eventId===e&&("ack"===ya.data.status?(clearTimeout(h),m=setTimeout(function(){Q(Error("timeout"));},3E3)):"done"===ya.data.status?(clearTimeout(m),
    "undefined"!==typeof ya.data.response?A(ya.data.response):Q(Error("unknown_error"))):(clearTimeout(h),clearTimeout(m),Q(Error("invalid_response"))));},p={messageChannel:B,onMessage:g},a.a.push(p),B.port1.addEventListener("message",g),a.c.postMessage({eventType:b,eventId:e,data:f},[B.port2])):Q(Error("connection_unavailable"));})).then(function(A){nk(a,p);return A}).o(function(A){nk(a,p);throw A;})}
    function nk(a,b){if(b){var c=b.messageChannel,d=b.onMessage;c&&(c.port1.removeEventListener("message",d),c.port1.close());Xa(a.a,function(e){return e==b});}}lk.prototype.close=function(){for(;0<this.a.length;)nk(this,this.a[0]);this.b=!0;};function ok(){if(!pk())throw new t("web-storage-unsupported");this.c={};this.a=[];this.b=0;this.m=l.indexedDB;this.type="indexedDB";this.g=this.v=this.f=this.l=null;this.s=!1;this.h=null;var a=this;Je()&&self?(this.v=ik(),jk(this.v,"keyChanged",function(b,c){return qk(a).then(function(d){0<d.length&&w(a.a,function(e){e(d);});return {keyProcessed:Va(d,c.key)}})}),jk(this.v,"ping",function(){return E(["keyChanged"])})):ef().then(function(b){if(a.h=b)a.g=new lk(new kk(b)),mk(a.g,"ping",null,!0).then(function(c){c[0].fulfilled&&
    Va(c[0].value,"keyChanged")&&(a.s=!0);}).o(function(){});});}var rk;function sk(a){return new D(function(b,c){var d=a.m.deleteDatabase("firebaseLocalStorageDb");d.onsuccess=function(){b();};d.onerror=function(e){c(Error(e.target.error));};})}
    function tk(a){return new D(function(b,c){var d=a.m.open("firebaseLocalStorageDb",1);d.onerror=function(e){try{e.preventDefault();}catch(f){}c(Error(e.target.error));};d.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"});}catch(f){c(f);}};d.onsuccess=function(e){e=e.target.result;e.objectStoreNames.contains("firebaseLocalStorage")?b(e):sk(a).then(function(){return tk(a)}).then(function(f){b(f);}).o(function(f){c(f);});};})}
    function uk(a){a.i||(a.i=tk(a));return a.i}function vk(a,b){function c(e,f){uk(a).then(b).then(e).o(function(g){if(3<++d)f(g);else return uk(a).then(function(h){h.close();a.i=void 0;return c(e,f)}).o(function(h){f(h);})});}var d=0;return new D(c)}function pk(){try{return !!l.indexedDB}catch(a){return !1}}function wk(a){return a.objectStore("firebaseLocalStorage")}function xk(a,b){return a.transaction(["firebaseLocalStorage"],b?"readwrite":"readonly")}
    function yk(a){return new D(function(b,c){a.onsuccess=function(d){d&&d.target?b(d.target.result):b();};a.onerror=function(d){c(d.target.error);};})}k=ok.prototype;k.set=function(a,b){var c=this,d=!1;return vk(this,function(e){e=wk(xk(e,!0));return yk(e.get(a))}).then(function(e){return vk(c,function(f){f=wk(xk(f,!0));if(e)return e.value=b,yk(f.put(e));c.b++;d=!0;var g={};g.fbase_key=a;g.value=b;return yk(f.add(g))})}).then(function(){c.c[a]=b;return zk(c,a)}).oa(function(){d&&c.b--;})};
    function zk(a,b){return a.g&&a.h&&df()===a.h?mk(a.g,"keyChanged",{key:b},a.s).then(function(){}).o(function(){}):E()}k.get=function(a){return vk(this,function(b){return yk(wk(xk(b,!1)).get(a))}).then(function(b){return b&&b.value})};k.U=function(a){var b=this,c=!1;return vk(this,function(d){c=!0;b.b++;return yk(wk(xk(d,!0))["delete"](a))}).then(function(){delete b.c[a];return zk(b,a)}).oa(function(){c&&b.b--;})};
    function qk(a){return uk(a).then(function(b){var c=wk(xk(b,!1));return c.getAll?yk(c.getAll()):new D(function(d,e){var f=[],g=c.openCursor();g.onsuccess=function(h){(h=h.target.result)?(f.push(h.value),h["continue"]()):d(f);};g.onerror=function(h){e(h.target.error);};})}).then(function(b){var c={},d=[];if(0==a.b){for(d=0;d<b.length;d++)c[b[d].fbase_key]=b[d].value;d=te(a.c,c);a.c=c;}return d})}k.ca=function(a){0==this.a.length&&Ak(this);this.a.push(a);};
    k.ia=function(a){Xa(this.a,function(b){return b==a});0==this.a.length&&Bk(this);};function Ak(a){function b(){a.f=setTimeout(function(){a.l=qk(a).then(function(c){0<c.length&&w(a.a,function(d){d(c);});}).then(function(){b();}).o(function(c){"STOP_EVENT"!=c.message&&b();});},800);}Bk(a);b();}function Bk(a){a.l&&a.l.cancel("STOP_EVENT");a.f&&(clearTimeout(a.f),a.f=null);}function Ck(a){var b=this,c=null;this.a=[];this.type="indexedDB";this.c=a;this.b=E().then(function(){if(pk()){var d=Qe(),e="__sak"+d;rk||(rk=new ok);c=rk;return c.set(e,d).then(function(){return c.get(e)}).then(function(f){if(f!==d)throw Error("indexedDB not supported!");return c.U(e)}).then(function(){return c}).o(function(){return b.c})}return b.c}).then(function(d){b.type=d.type;d.ca(function(e){w(b.a,function(f){f(e);});});return d});}k=Ck.prototype;k.get=function(a){return this.b.then(function(b){return b.get(a)})};
    k.set=function(a,b){return this.b.then(function(c){return c.set(a,b)})};k.U=function(a){return this.b.then(function(b){return b.U(a)})};k.ca=function(a){this.a.push(a);};k.ia=function(a){Xa(this.a,function(b){return b==a});};function Dk(){this.a={};this.type="inMemory";}k=Dk.prototype;k.get=function(a){return E(this.a[a])};k.set=function(a,b){this.a[a]=b;return E()};k.U=function(a){delete this.a[a];return E()};k.ca=function(){};k.ia=function(){};function Ek(){if(!Fk()){if("Node"==Ke())throw new t("internal-error","The LocalStorage compatibility library was not found.");throw new t("web-storage-unsupported");}this.a=Gk()||firebase.INTERNAL.node.localStorage;this.type="localStorage";}function Gk(){try{var a=l.localStorage,b=Qe();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
    function Fk(){var a="Node"==Ke();a=Gk()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.localStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=Ek.prototype;k.get=function(a){var b=this;return E().then(function(){var c=b.a.getItem(a);return We(c)})};k.set=function(a,b){var c=this;return E().then(function(){var d=Ue(b);null===d?c.U(a):c.a.setItem(a,d);})};k.U=function(a){var b=this;return E().then(function(){b.a.removeItem(a);})};
    k.ca=function(a){l.window&&nd(l.window,"storage",a);};k.ia=function(a){l.window&&xd(l.window,"storage",a);};function Hk(){this.type="nullStorage";}k=Hk.prototype;k.get=function(){return E(null)};k.set=function(){return E()};k.U=function(){return E()};k.ca=function(){};k.ia=function(){};function Ik(){if(!Jk()){if("Node"==Ke())throw new t("internal-error","The SessionStorage compatibility library was not found.");throw new t("web-storage-unsupported");}this.a=Kk()||firebase.INTERNAL.node.sessionStorage;this.type="sessionStorage";}function Kk(){try{var a=l.sessionStorage,b=Qe();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
    function Jk(){var a="Node"==Ke();a=Kk()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.sessionStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=Ik.prototype;k.get=function(a){var b=this;return E().then(function(){var c=b.a.getItem(a);return We(c)})};k.set=function(a,b){var c=this;return E().then(function(){var d=Ue(b);null===d?c.U(a):c.a.setItem(a,d);})};k.U=function(a){var b=this;return E().then(function(){b.a.removeItem(a);})};k.ca=function(){};
    k.ia=function(){};function Lk(){var a={};a.Browser=Mk;a.Node=Nk;a.ReactNative=Ok;a.Worker=Pk;this.a=a[Ke()];}var Qk,Mk={F:Ek,cb:Ik},Nk={F:Ek,cb:Ik},Ok={F:fk,cb:Hk},Pk={F:Ek,cb:Hk};var Rk={rd:"local",NONE:"none",td:"session"};function Sk(a){var b=new t("invalid-persistence-type"),c=new t("unsupported-persistence-type");a:{for(d in Rk)if(Rk[d]==a){var d=!0;break a}d=!1;}if(!d||"string"!==typeof a)throw b;switch(Ke()){case "ReactNative":if("session"===a)throw c;break;case "Node":if("none"!==a)throw c;break;case "Worker":if("session"===a||!pk()&&"none"!==a)throw c;break;default:if(!Pe()&&"none"!==a)throw c;}}
    function Tk(){var a=!Xe(K())&&Ie()?!0:!1,b=Te(),c=Pe();this.m=a;this.h=b;this.l=c;this.a={};Qk||(Qk=new Lk);a=Qk;try{this.g=!qe()&&cf()||!l.indexedDB?new a.a.F:new Ck(Je()?new Dk:new a.a.F);}catch(d){this.g=new Dk,this.h=!0;}try{this.i=new a.a.cb;}catch(d){this.i=new Dk;}this.v=new Dk;this.f=q(this.Zb,this);this.b={};}var Uk;function Vk(){Uk||(Uk=new Tk);return Uk}function Wk(a,b){switch(b){case "session":return a.i;case "none":return a.v;default:return a.g}}
    function Xk(a,b){return "firebase:"+a.name+(b?":"+b:"")}function Yk(a,b,c){var d=Xk(b,c),e=Wk(a,b.F);return a.get(b,c).then(function(f){var g=null;try{g=We(l.localStorage.getItem(d));}catch(h){}if(g&&!f)return l.localStorage.removeItem(d),a.set(b,g,c);g&&f&&"localStorage"!=e.type&&l.localStorage.removeItem(d);})}k=Tk.prototype;k.get=function(a,b){return Wk(this,a.F).get(Xk(a,b))};function Zk(a,b,c){c=Xk(b,c);"local"==b.F&&(a.b[c]=null);return Wk(a,b.F).U(c)}
    k.set=function(a,b,c){var d=Xk(a,c),e=this,f=Wk(this,a.F);return f.set(d,b).then(function(){return f.get(d)}).then(function(g){"local"==a.F&&(e.b[d]=g);})};k.addListener=function(a,b,c){a=Xk(a,b);this.l&&(this.b[a]=l.localStorage.getItem(a));mb(this.a)&&(Wk(this,"local").ca(this.f),this.h||(qe()||!cf())&&l.indexedDB||!this.l||$k(this));this.a[a]||(this.a[a]=[]);this.a[a].push(c);};
    k.removeListener=function(a,b,c){a=Xk(a,b);this.a[a]&&(Xa(this.a[a],function(d){return d==c}),0==this.a[a].length&&delete this.a[a]);mb(this.a)&&(Wk(this,"local").ia(this.f),al(this));};function $k(a){al(a);a.c=setInterval(function(){for(var b in a.a){var c=l.localStorage.getItem(b),d=a.b[b];c!=d&&(a.b[b]=c,c=new bd({type:"storage",key:b,target:window,oldValue:d,newValue:c,a:!0}),a.Zb(c));}},1E3);}function al(a){a.c&&(clearInterval(a.c),a.c=null);}
    k.Zb=function(a){if(a&&a.g){var b=a.a.key;if(null==b)for(var c in this.a){var d=this.b[c];"undefined"===typeof d&&(d=null);var e=l.localStorage.getItem(c);e!==d&&(this.b[c]=e,this.nb(c));}else if(0==b.indexOf("firebase:")&&this.a[b]){"undefined"!==typeof a.a.a?Wk(this,"local").ia(this.f):al(this);if(this.m)if(c=l.localStorage.getItem(b),d=a.a.newValue,d!==c)null!==d?l.localStorage.setItem(b,d):l.localStorage.removeItem(b);else if(this.b[b]===d&&"undefined"===typeof a.a.a)return;var f=this;c=function(){if("undefined"!==
    typeof a.a.a||f.b[b]!==l.localStorage.getItem(b))f.b[b]=l.localStorage.getItem(b),f.nb(b);};Wb&&ic&&10==ic&&l.localStorage.getItem(b)!==a.a.newValue&&a.a.newValue!==a.a.oldValue?setTimeout(c,10):c();}}else w(a,q(this.nb,this));};k.nb=function(a){this.a[a]&&w(this.a[a],function(b){b();});};function bl(a){this.a=a;this.b=Vk();}var cl={name:"authEvent",F:"local"};function dl(a){return a.b.get(cl,a.a).then(function(b){return th(b)})}function el(){this.a=Vk();}function fl(){this.b=-1;}function gl(a,b){this.b=hl;this.f=l.Uint8Array?new Uint8Array(this.b):Array(this.b);this.g=this.c=0;this.a=[];this.i=a;this.h=b;this.l=l.Int32Array?new Int32Array(64):Array(64);void 0===il&&(l.Int32Array?il=new Int32Array(jl):il=jl);this.reset();}var il;r(gl,fl);for(var hl=64,kl=hl-1,ll=[],ml=0;ml<kl;ml++)ll[ml]=0;var nl=Ya(128,ll);gl.prototype.reset=function(){this.g=this.c=0;this.a=l.Int32Array?new Int32Array(this.h):Za(this.h);};
    function ol(a){for(var b=a.f,c=a.l,d=0,e=0;e<b.length;)c[d++]=b[e]<<24|b[e+1]<<16|b[e+2]<<8|b[e+3],e=4*d;for(b=16;64>b;b++){e=c[b-15]|0;d=c[b-2]|0;var f=(c[b-16]|0)+((e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3)|0,g=(c[b-7]|0)+((d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10)|0;c[b]=f+g|0;}d=a.a[0]|0;e=a.a[1]|0;var h=a.a[2]|0,m=a.a[3]|0,p=a.a[4]|0,v=a.a[5]|0,B=a.a[6]|0;f=a.a[7]|0;for(b=0;64>b;b++){var A=((d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10))+(d&e^d&h^e&h)|0;g=p&v^~p&B;f=f+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<
    7))|0;g=g+(il[b]|0)|0;g=f+(g+(c[b]|0)|0)|0;f=B;B=v;v=p;p=m+g|0;m=h;h=e;e=d;d=g+A|0;}a.a[0]=a.a[0]+d|0;a.a[1]=a.a[1]+e|0;a.a[2]=a.a[2]+h|0;a.a[3]=a.a[3]+m|0;a.a[4]=a.a[4]+p|0;a.a[5]=a.a[5]+v|0;a.a[6]=a.a[6]+B|0;a.a[7]=a.a[7]+f|0;}
    function pl(a,b,c){void 0===c&&(c=b.length);var d=0,e=a.c;if("string"===typeof b)for(;d<c;)a.f[e++]=b.charCodeAt(d++),e==a.b&&(ol(a),e=0);else if(na(b))for(;d<c;){var f=b[d++];if(!("number"==typeof f&&0<=f&&255>=f&&f==(f|0)))throw Error("message must be a byte array");a.f[e++]=f;e==a.b&&(ol(a),e=0);}else throw Error("message must be string or array");a.c=e;a.g+=c;}
    var jl=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
    4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function ql(){gl.call(this,8,rl);}r(ql,gl);var rl=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function sl(a,b,c,d,e,f){this.v=a;this.i=b;this.l=c;this.m=d||null;this.u=e||null;this.s=f;this.h=b+":"+c;this.C=new el;this.g=new bl(this.h);this.f=null;this.b=[];this.a=this.c=null;}function tl(a){return new t("invalid-cordova-configuration",a)}k=sl.prototype;
    k.ma=function(){return this.Ia?this.Ia:this.Ia=Fe().then(function(){if("function"!==typeof L("universalLinks.subscribe",l))throw tl("cordova-universal-links-plugin-fix is not installed");if("undefined"===typeof L("BuildInfo.packageName",l))throw tl("cordova-plugin-buildinfo is not installed");if("function"!==typeof L("cordova.plugins.browsertab.openUrl",l))throw tl("cordova-plugin-browsertab is not installed");if("function"!==typeof L("cordova.InAppBrowser.open",l))throw tl("cordova-plugin-inappbrowser is not installed");
    },function(){throw new t("cordova-not-ready");})};function ul(){for(var a=20,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}function vl(a){var b=new ql;pl(b,a);a=[];var c=8*b.g;56>b.c?pl(b,nl,56-b.c):pl(b,nl,b.b-(b.c-56));for(var d=63;56<=d;d--)b.f[d]=c&255,c/=256;ol(b);for(d=c=0;d<b.i;d++)for(var e=24;0<=e;e-=8)a[c++]=b.a[d]>>e&255;return cg(a)}
    k.Pb=function(a,b){b(new t("operation-not-supported-in-this-environment"));return E()};k.Nb=function(){return F(new t("operation-not-supported-in-this-environment"))};k.ac=function(){return !1};k.Yb=function(){return !0};k.Ub=function(){return !0};
    k.Ob=function(a,b,c,d){if(this.c)return F(new t("redirect-operation-pending"));var e=this,f=l.document,g=null,h=null,m=null,p=null;return this.c=E().then(function(){rh(b);return wl(e)}).then(function(){return xl(e,a,b,c,d)}).then(function(){return (new D(function(v,B){h=function(){var A=L("cordova.plugins.browsertab.close",l);v();"function"===typeof A&&A();e.a&&"function"===typeof e.a.close&&(e.a.close(),e.a=null);return !1};e.Ea(h);m=function(){g||(g=Fd(2E3).then(function(){B(new t("redirect-cancelled-by-user"));}));};
    p=function(){$e()&&m();};f.addEventListener("resume",m,!1);K().toLowerCase().match(/android/)||f.addEventListener("visibilitychange",p,!1);})).o(function(v){return yl(e).then(function(){throw v;})})}).oa(function(){m&&f.removeEventListener("resume",m,!1);p&&f.removeEventListener("visibilitychange",p,!1);g&&g.cancel();h&&e.Ta(h);e.c=null;})};
    function xl(a,b,c,d,e){var f=ul(),g=new sh(b,d,null,f,new t("no-auth-event"),null,e),h=L("BuildInfo.packageName",l);if("string"!==typeof h)throw new t("invalid-cordova-configuration");var m=L("BuildInfo.displayName",l),p={};if(K().toLowerCase().match(/iphone|ipad|ipod/))p.ibi=h;else if(K().toLowerCase().match(/android/))p.apn=h;else return F(new t("operation-not-supported-in-this-environment"));m&&(p.appDisplayName=m);f=vl(f);p.sessionId=f;var v=ek(a.v,a.i,a.l,b,c,null,d,a.m,p,a.u,e,a.s);return a.ma().then(function(){var B=
    a.h;return a.C.a.set(cl,g.w(),B)}).then(function(){var B=L("cordova.plugins.browsertab.isAvailable",l);if("function"!==typeof B)throw new t("invalid-cordova-configuration");var A=null;B(function(Q){if(Q){A=L("cordova.plugins.browsertab.openUrl",l);if("function"!==typeof A)throw new t("invalid-cordova-configuration");A(v);}else {A=L("cordova.InAppBrowser.open",l);if("function"!==typeof A)throw new t("invalid-cordova-configuration");Q=K();a.a=A(v,Q.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||Q.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?
    "_blank":"_system","location=yes");}});})}function zl(a,b){for(var c=0;c<a.b.length;c++)try{a.b[c](b);}catch(d){}}function wl(a){a.f||(a.f=a.ma().then(function(){return new D(function(b){function c(d){b(d);a.Ta(c);return !1}a.Ea(c);Al(a);})}));return a.f}function yl(a){var b=null;return dl(a.g).then(function(c){b=c;c=a.g;return Zk(c.b,cl,c.a)}).then(function(){return b})}
    function Al(a){function b(g){d=!0;e&&e.cancel();yl(a).then(function(h){var m=c;if(h&&g&&g.url){var p=null;m=xg(g.url);-1!=m.indexOf("/__/auth/callback")&&(p=J(m),p=We(be(p,"firebaseError")||null),p=(p="object"===typeof p?Aa(p):null)?new sh(h.c,h.b,null,null,p,null,h.T()):new sh(h.c,h.b,m,h.f,null,null,h.T()));m=p||c;}zl(a,m);});}var c=new sh("unknown",null,null,null,new t("no-auth-event")),d=!1,e=Fd(500).then(function(){return yl(a).then(function(){d||zl(a,c);})}),f=l.handleOpenURL;l.handleOpenURL=function(g){0==
    g.toLowerCase().indexOf(L("BuildInfo.packageName",l).toLowerCase()+"://")&&b({url:g});if("function"===typeof f)try{f(g);}catch(h){console.error(h);}};vh||(vh=new uh);wh(b);}k.Ea=function(a){this.b.push(a);wl(this).o(function(b){"auth/invalid-cordova-configuration"===b.code&&(b=new sh("unknown",null,null,null,new t("no-auth-event")),a(b));});};k.Ta=function(a){Xa(this.b,function(b){return b==a});};function Bl(a){this.a=a;this.b=Vk();}var Cl={name:"pendingRedirect",F:"session"};function Dl(a){return a.b.set(Cl,"pending",a.a)}function El(a){return Zk(a.b,Cl,a.a)}function Fl(a){return a.b.get(Cl,a.a).then(function(b){return "pending"==b})}function Gl(a,b,c,d){this.i={};this.u=0;this.D=a;this.v=b;this.m=c;this.J=d;this.h=[];this.f=!1;this.l=q(this.s,this);this.b=new Hl;this.C=new Il;this.g=new Bl(Jl(this.v,this.m));this.c={};this.c.unknown=this.b;this.c.signInViaRedirect=this.b;this.c.linkViaRedirect=this.b;this.c.reauthViaRedirect=this.b;this.c.signInViaPopup=this.C;this.c.linkViaPopup=this.C;this.c.reauthViaPopup=this.C;this.a=Kl(this.D,this.v,this.m,Da,this.J);}
    function Kl(a,b,c,d,e){var f=firebase.SDK_VERSION||null;return Ge()?new sl(a,b,c,f,d,e):new Yj(a,b,c,f,d,e)}Gl.prototype.reset=function(){this.f=!1;this.a.Ta(this.l);this.a=Kl(this.D,this.v,this.m,null,this.J);this.i={};};function Ll(a){a.f||(a.f=!0,a.a.Ea(a.l));var b=a.a;return a.a.ma().o(function(c){a.a==b&&a.reset();throw c;})}
    function Ml(a){a.a.Yb()&&Ll(a).o(function(b){var c=new sh("unknown",null,null,null,new t("operation-not-supported-in-this-environment"));Nl(b)&&a.s(c);});a.a.Ub()||Ol(a.b);}function Pl(a,b){Va(a.h,b)||a.h.push(b);a.f||Fl(a.g).then(function(c){c?El(a.g).then(function(){Ll(a).o(function(d){var e=new sh("unknown",null,null,null,new t("operation-not-supported-in-this-environment"));Nl(d)&&a.s(e);});}):Ml(a);}).o(function(){Ml(a);});}function Ql(a,b){Xa(a.h,function(c){return c==b});}
    Gl.prototype.s=function(a){if(!a)throw new t("invalid-auth-event");6E5<=Date.now()-this.u&&(this.i={},this.u=0);if(a&&a.getUid()&&this.i.hasOwnProperty(a.getUid()))return !1;for(var b=!1,c=0;c<this.h.length;c++){var d=this.h[c];if(d.Gb(a.c,a.b)){if(b=this.c[a.c])b.h(a,d),a&&(a.f||a.b)&&(this.i[a.getUid()]=!0,this.u=Date.now());b=!0;break}}Ol(this.b);return b};var Rl=new Ze(2E3,1E4),Sl=new Ze(3E4,6E4);Gl.prototype.ra=function(){return this.b.ra()};
    function Tl(a,b,c,d,e,f,g){return a.a.Nb(b,c,d,function(){a.f||(a.f=!0,a.a.Ea(a.l));},function(){a.reset();},e,f,g)}function Nl(a){return a&&"auth/cordova-not-ready"==a.code?!0:!1}
    function Ul(a,b,c,d,e){var f;return Dl(a.g).then(function(){return a.a.Ob(b,c,d,e).o(function(g){if(Nl(g))throw new t("operation-not-supported-in-this-environment");f=g;return El(a.g).then(function(){throw f;})}).then(function(){return a.a.ac()?new D(function(){}):El(a.g).then(function(){return a.ra()}).then(function(){}).o(function(){})})})}function Vl(a,b,c,d,e){return a.a.Pb(d,function(f){b.na(c,null,f,e);},Rl.get())}var Wl={};function Jl(a,b,c){a=a+":"+b;c&&(a=a+":"+c.url);return a}
    function Xl(a,b,c,d){var e=Jl(b,c,d);Wl[e]||(Wl[e]=new Gl(a,b,c,d));return Wl[e]}function Hl(){this.b=null;this.f=[];this.c=[];this.a=null;this.i=this.g=!1;}Hl.prototype.reset=function(){this.b=null;this.a&&(this.a.cancel(),this.a=null);};
    Hl.prototype.h=function(a,b){if(a){this.reset();this.g=!0;var c=a.c,d=a.b,e=a.a&&"auth/web-storage-unsupported"==a.a.code,f=a.a&&"auth/operation-not-supported-in-this-environment"==a.a.code;this.i=!(!e&&!f);"unknown"!=c||e||f?a.a?(Yl(this,!0,null,a.a),E()):b.Fa(c,d)?Zl(this,a,b):F(new t("invalid-auth-event")):(Yl(this,!1,null,null),E());}else F(new t("invalid-auth-event"));};function Ol(a){a.g||(a.g=!0,Yl(a,!1,null,null));}function $l(a){a.g&&!a.i&&Yl(a,!1,null,null);}
    function Zl(a,b,c){c=c.Fa(b.c,b.b);var d=b.g,e=b.f,f=b.i,g=b.T(),h=!!b.c.match(/Redirect$/);c(d,e,g,f).then(function(m){Yl(a,h,m,null);}).o(function(m){Yl(a,h,null,m);});}function am(a,b){a.b=function(){return F(b)};if(a.c.length)for(var c=0;c<a.c.length;c++)a.c[c](b);}function bm(a,b){a.b=function(){return E(b)};if(a.f.length)for(var c=0;c<a.f.length;c++)a.f[c](b);}function Yl(a,b,c,d){b?d?am(a,d):bm(a,c):bm(a,{user:null});a.f=[];a.c=[];}
    Hl.prototype.ra=function(){var a=this;return new D(function(b,c){a.b?a.b().then(b,c):(a.f.push(b),a.c.push(c),cm(a));})};function cm(a){var b=new t("timeout");a.a&&a.a.cancel();a.a=Fd(Sl.get()).then(function(){a.b||(a.g=!0,Yl(a,!0,null,b));});}function Il(){}Il.prototype.h=function(a,b){if(a){var c=a.c,d=a.b;a.a?(b.na(a.c,null,a.a,a.b),E()):b.Fa(c,d)?dm(a,b):F(new t("invalid-auth-event"));}else F(new t("invalid-auth-event"));};
    function dm(a,b){var c=a.b,d=a.c;b.Fa(d,c)(a.g,a.f,a.T(),a.i).then(function(e){b.na(d,e,null,c);}).o(function(e){b.na(d,null,e,c);});}function em(){this.jb=!1;Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.jb},set:function(a){this.jb=a;},enumerable:!1});}function fm(a,b){this.a=b;M(this,"verificationId",a);}fm.prototype.confirm=function(a){a=ph(this.verificationId,a);return this.a(a)};function gm(a,b,c,d){return (new lh(a)).gb(b,c).then(function(e){return new fm(e,d)})}function hm(a){var b=ig(a);if(!(b&&b.exp&&b.auth_time&&b.iat))throw new t("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");N(this,{token:a,expirationTime:bf(1E3*b.exp),authTime:bf(1E3*b.auth_time),issuedAtTime:bf(1E3*b.iat),signInProvider:b.firebase&&b.firebase.sign_in_provider?b.firebase.sign_in_provider:null,signInSecondFactor:b.firebase&&b.firebase.sign_in_second_factor?b.firebase.sign_in_second_factor:null,claims:b});}
    function im(a,b,c){var d=b&&b[jm];if(!d)throw new t("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=a;this.f=nb(b);this.g=c;this.c=new yg(null,d);this.b=[];var e=this;w(b[km]||[],function(f){(f=tf(f))&&e.b.push(f);});M(this,"auth",this.a);M(this,"session",this.c);M(this,"hints",this.b);}var km="mfaInfo",jm="mfaPendingCredential";im.prototype.Rc=function(a){var b=this;return a.tb(this.a.a,this.c).then(function(c){var d=nb(b.f);delete d[km];delete d[jm];z(d,c);return b.g(d)})};function lm(a,b,c,d){t.call(this,"multi-factor-auth-required",d,b);this.b=new im(a,b,c);M(this,"resolver",this.b);}r(lm,t);function mm(a,b,c){if(a&&n(a.serverResponse)&&"auth/multi-factor-auth-required"===a.code)try{return new lm(b,a.serverResponse,c,a.message)}catch(d){}return null}function nm(){}nm.prototype.tb=function(a,b,c){return b.type==zg?om(this,a,b,c):pm(this,a,b)};function om(a,b,c,d){return c.Ha().then(function(e){e={idToken:e};"undefined"!==typeof d&&(e.displayName=d);z(e,{phoneVerificationInfo:hh(a.a)});return O(b,Gj,e)})}function pm(a,b,c){return c.Ha().then(function(d){d={mfaPendingCredential:d};z(d,{phoneVerificationInfo:hh(a.a)});return O(b,Hj,d)})}function qm(a){M(this,"factorId",a.fa);this.a=a;}r(qm,nm);
    function rm(a){qm.call(this,a);if(this.a.fa!=lh.PROVIDER_ID)throw new t("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential");}r(rm,qm);function sm(a,b){G.call(this,a);for(var c in b)this[c]=b[c];}r(sm,G);function tm(a,b){this.a=a;this.b=[];this.c=q(this.yc,this);nd(this.a,"userReloaded",this.c);var c=[];b&&b.multiFactor&&b.multiFactor.enrolledFactors&&w(b.multiFactor.enrolledFactors,function(d){var e=null,f={};if(d){d.uid&&(f[qf]=d.uid);d.displayName&&(f[rf]=d.displayName);d.enrollmentTime&&(f[sf]=(new Date(d.enrollmentTime)).toISOString());d.phoneNumber&&(f[pf]=d.phoneNumber);try{e=new uf(f);}catch(g){}d=e;}else d=null;d&&c.push(d);});um(this,c);}
    function vm(a){var b=[];w(a.mfaInfo||[],function(c){(c=tf(c))&&b.push(c);});return b}k=tm.prototype;k.yc=function(a){um(this,vm(a.hd));};function um(a,b){a.b=b;M(a,"enrolledFactors",b);}k.Sb=function(){return this.a.I().then(function(a){return new yg(a,null)})};k.fc=function(a,b){var c=this,d=this.a.a;return this.Sb().then(function(e){return a.tb(d,e,b)}).then(function(e){wm(c.a,e);return c.a.reload()})};
    k.bd=function(a){var b=this,c="string"===typeof a?a:a.uid,d=this.a.a;return this.a.I().then(function(e){return O(d,Lj,{idToken:e,mfaEnrollmentId:c})}).then(function(e){var f=Qa(b.b,function(g){return g.uid!=c});um(b,f);wm(b.a,e);return b.a.reload().o(function(g){if("auth/user-token-expired"!=g.code)throw g;})})};k.w=function(){return {multiFactor:{enrolledFactors:Ra(this.b,function(a){return a.w()})}}};function xm(a,b,c){this.h=a;this.i=b;this.g=c;this.c=3E4;this.f=96E4;this.b=null;this.a=this.c;if(this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!");}xm.prototype.start=function(){this.a=this.c;ym(this,!0);};function zm(a,b){if(b)return a.a=a.c,a.g();b=a.a;a.a*=2;a.a>a.f&&(a.a=a.f);return b}function ym(a,b){a.stop();a.b=Fd(zm(a,b)).then(function(){return af()}).then(function(){return a.h()}).then(function(){ym(a,!0);}).o(function(c){a.i(c)&&ym(a,!1);});}
    xm.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null);};function Am(a){this.f=a;this.b=this.a=null;this.c=Date.now();}Am.prototype.w=function(){return {apiKey:this.f.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:this.c}};function Bm(a,b){"undefined"===typeof b&&(a.b?(b=a.b,b=b.a-b.g):b=0);a.c=Date.now()+1E3*b;}function Cm(a,b){a.b=jg(b[Dg]||"");a.a=b.refreshToken;b=b.expiresIn;Bm(a,"undefined"!==typeof b?Number(b):void 0);}function Dm(a,b){a.b=b.b;a.a=b.a;a.c=b.c;}
    function Em(a,b){return Wi(a.f,b).then(function(c){a.b=jg(c.access_token);a.a=c.refresh_token;Bm(a,c.expires_in);return {accessToken:a.b.toString(),refreshToken:a.a}}).o(function(c){"auth/user-token-expired"==c.code&&(a.a=null);throw c;})}Am.prototype.getToken=function(a){a=!!a;return this.b&&!this.a?F(new t("user-token-expired")):a||!this.b||Date.now()>this.c-3E4?this.a?Em(this,{grant_type:"refresh_token",refresh_token:this.a}):E(null):E({accessToken:this.b.toString(),refreshToken:this.a})};function Fm(a,b){this.a=a||null;this.b=b||null;N(this,{lastSignInTime:bf(b||null),creationTime:bf(a||null)});}function Gm(a){return new Fm(a.a,a.b)}Fm.prototype.w=function(){return {lastLoginAt:this.b,createdAt:this.a}};function Hm(a,b,c,d,e,f){N(this,{uid:a,displayName:d||null,photoURL:e||null,email:c||null,phoneNumber:f||null,providerId:b});}
    function Im(a,b,c){this.N=[];this.l=a.apiKey;this.m=a.appName;this.s=a.authDomain||null;var d=firebase.SDK_VERSION?Oe(firebase.SDK_VERSION):null;this.a=new Ii(this.l,Ca(Da),d);(this.u=a.emulatorConfig||null)&&Pi(this.a,this.u);this.h=new Am(this.a);Jm(this,b[Dg]);Cm(this.h,b);M(this,"refreshToken",this.h.a);Km(this,c||{});H.call(this);this.P=!1;this.s&&Re()&&(this.b=Xl(this.s,this.l,this.m,this.u));this.W=[];this.i=null;this.D=Lm(this);this.ba=q(this.ib,this);var e=this;this.za=null;this.Pa=function(f){e.xa(f.h);};
    this.qa=null;this.Ba=function(f){Mm(e,f.c);};this.$=null;this.aa=[];this.Oa=function(f){Nm(e,f.f);};this.ja=null;this.S=new tm(this,c);M(this,"multiFactor",this.S);}r(Im,H);Im.prototype.xa=function(a){this.za=a;Oi(this.a,a);};function Mm(a,b){a.u=b;Pi(a.a,b);a.b&&(b=a.b,a.b=Xl(a.s,a.l,a.m,a.u),a.P&&(Ql(b,a),Pl(a.b,a)));}Im.prototype.la=function(){return this.za};function Om(a,b){a.qa&&xd(a.qa,"languageCodeChanged",a.Pa);(a.qa=b)&&nd(b,"languageCodeChanged",a.Pa);}
    function Pm(a,b){a.$&&xd(a.$,"emulatorConfigChanged",a.Ba);(a.$=b)&&nd(b,"emulatorConfigChanged",a.Ba);}function Nm(a,b){a.aa=b;Ri(a.a,firebase.SDK_VERSION?Oe(firebase.SDK_VERSION,a.aa):null);}Im.prototype.Ga=function(){return Za(this.aa)};function Qm(a,b){a.ja&&xd(a.ja,"frameworkChanged",a.Oa);(a.ja=b)&&nd(b,"frameworkChanged",a.Oa);}Im.prototype.ib=function(){this.D.b&&(this.D.stop(),this.D.start());};
    function Rm(a){try{return firebase.app(a.m).auth()}catch(b){throw new t("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+a.m+"'!");}}function Lm(a){return new xm(function(){return a.I(!0)},function(b){return b&&"auth/network-request-failed"==b.code?!0:!1},function(){var b=a.h.c-Date.now()-3E5;return 0<b?b:0})}function Sm(a){a.J||a.D.b||(a.D.start(),xd(a,"tokenChanged",a.ba),nd(a,"tokenChanged",a.ba));}function Tm(a){xd(a,"tokenChanged",a.ba);a.D.stop();}
    function Jm(a,b){a.Aa=b;M(a,"_lat",b);}function Um(a,b){Xa(a.W,function(c){return c==b});}function Vm(a){for(var b=[],c=0;c<a.W.length;c++)b.push(a.W[c](a));return Jc(b).then(function(){return a})}function Wm(a){a.b&&!a.P&&(a.P=!0,Pl(a.b,a));}
    function Km(a,b){N(a,{uid:b.uid,displayName:b.displayName||null,photoURL:b.photoURL||null,email:b.email||null,emailVerified:b.emailVerified||!1,phoneNumber:b.phoneNumber||null,isAnonymous:b.isAnonymous||!1,tenantId:b.tenantId||null,metadata:new Fm(b.createdAt,b.lastLoginAt),providerData:[]});a.a.b=a.tenantId;}M(Im.prototype,"providerId","firebase");function Xm(){}function Ym(a){return E().then(function(){if(a.J)throw new t("app-deleted");})}
    function Zm(a){return Ra(a.providerData,function(b){return b.providerId})}function $m(a,b){b&&(an(a,b.providerId),a.providerData.push(b));}function an(a,b){Xa(a.providerData,function(c){return c.providerId==b});}function bn(a,b,c){("uid"!=b||c)&&a.hasOwnProperty(b)&&M(a,b,c);}
    function cn(a,b){a!=b&&(N(a,{uid:b.uid,displayName:b.displayName,photoURL:b.photoURL,email:b.email,emailVerified:b.emailVerified,phoneNumber:b.phoneNumber,isAnonymous:b.isAnonymous,tenantId:b.tenantId,providerData:[]}),b.metadata?M(a,"metadata",Gm(b.metadata)):M(a,"metadata",new Fm),w(b.providerData,function(c){$m(a,c);}),Dm(a.h,b.h),M(a,"refreshToken",a.h.a),um(a.S,b.S.b));}k=Im.prototype;k.reload=function(){var a=this;return R(this,Ym(this).then(function(){return dn(a).then(function(){return Vm(a)}).then(Xm)}))};
    function dn(a){return a.I().then(function(b){var c=a.isAnonymous;return en(a,b).then(function(){c||bn(a,"isAnonymous",!1);return b})})}k.oc=function(a){return this.I(a).then(function(b){return new hm(b)})};k.I=function(a){var b=this;return R(this,Ym(this).then(function(){return b.h.getToken(a)}).then(function(c){if(!c)throw new t("internal-error");c.accessToken!=b.Aa&&(Jm(b,c.accessToken),b.dispatchEvent(new sm("tokenChanged")));bn(b,"refreshToken",c.refreshToken);return c.accessToken}))};
    function wm(a,b){b[Dg]&&a.Aa!=b[Dg]&&(Cm(a.h,b),a.dispatchEvent(new sm("tokenChanged")),Jm(a,b[Dg]),bn(a,"refreshToken",a.h.a));}function en(a,b){return O(a.a,Ij,{idToken:b}).then(q(a.Kc,a))}
    k.Kc=function(a){a=a.users;if(!a||!a.length)throw new t("internal-error");a=a[0];Km(this,{uid:a.localId,displayName:a.displayName,photoURL:a.photoUrl,email:a.email,emailVerified:!!a.emailVerified,phoneNumber:a.phoneNumber,lastLoginAt:a.lastLoginAt,createdAt:a.createdAt,tenantId:a.tenantId});for(var b=fn(a),c=0;c<b.length;c++)$m(this,b[c]);bn(this,"isAnonymous",!(this.email&&a.passwordHash)&&!(this.providerData&&this.providerData.length));this.dispatchEvent(new sm("userReloaded",{hd:a}));};
    function fn(a){return (a=a.providerUserInfo)&&a.length?Ra(a,function(b){return new Hm(b.rawId,b.providerId,b.email,b.displayName,b.photoUrl,b.phoneNumber)}):[]}k.Lc=function(a){gf("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");return this.ub(a)};
    k.ub=function(a){var b=this,c=null;return R(this,a.c(this.a,this.uid).then(function(d){wm(b,d);c=gn(b,d,"reauthenticate");b.i=null;return b.reload()}).then(function(){return c}),!0)};function hn(a,b){return dn(a).then(function(){if(Va(Zm(a),b))return Vm(a).then(function(){throw new t("provider-already-linked");})})}k.Cc=function(a){gf("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");return this.rb(a)};
    k.rb=function(a){var b=this,c=null;return R(this,hn(this,a.providerId).then(function(){return b.I()}).then(function(d){return a.b(b.a,d)}).then(function(d){c=gn(b,d,"link");return jn(b,d)}).then(function(){return c}))};k.Dc=function(a,b){var c=this;return R(this,hn(this,"phone").then(function(){return gm(Rm(c),a,b,q(c.rb,c))}))};k.Mc=function(a,b){var c=this;return R(this,E().then(function(){return gm(Rm(c),a,b,q(c.ub,c))}),!0)};
    function gn(a,b,c){var d=qh(b);b=og(b);return kf({user:a,credential:d,additionalUserInfo:b,operationType:c})}function jn(a,b){wm(a,b);return a.reload().then(function(){return a})}k.Cb=function(a){var b=this;return R(this,this.I().then(function(c){return b.a.Cb(c,a)}).then(function(c){wm(b,c);return b.reload()}))};k.ed=function(a){var b=this;return R(this,this.I().then(function(c){return a.b(b.a,c)}).then(function(c){wm(b,c);return b.reload()}))};
    k.Db=function(a){var b=this;return R(this,this.I().then(function(c){return b.a.Db(c,a)}).then(function(c){wm(b,c);return b.reload()}))};
    k.Eb=function(a){if(void 0===a.displayName&&void 0===a.photoURL)return Ym(this);var b=this;return R(this,this.I().then(function(c){return b.a.Eb(c,{displayName:a.displayName,photoUrl:a.photoURL})}).then(function(c){wm(b,c);bn(b,"displayName",c.displayName||null);bn(b,"photoURL",c.photoUrl||null);w(b.providerData,function(d){"password"===d.providerId&&(M(d,"displayName",b.displayName),M(d,"photoURL",b.photoURL));});return Vm(b)}).then(Xm))};
    k.cd=function(a){var b=this;return R(this,dn(this).then(function(c){return Va(Zm(b),a)?rj(b.a,c,[a]).then(function(d){var e={};w(d.providerUserInfo||[],function(f){e[f.providerId]=!0;});w(Zm(b),function(f){e[f]||an(b,f);});e[lh.PROVIDER_ID]||M(b,"phoneNumber",null);return Vm(b)}):Vm(b).then(function(){throw new t("no-such-provider");})}))};
    k.delete=function(){var a=this;return R(this,this.I().then(function(b){return O(a.a,Fj,{idToken:b})}).then(function(){a.dispatchEvent(new sm("userDeleted"));})).then(function(){for(var b=0;b<a.N.length;b++)a.N[b].cancel("app-deleted");Om(a,null);Pm(a,null);Qm(a,null);a.N=[];a.J=!0;Tm(a);M(a,"refreshToken",null);a.b&&Ql(a.b,a);})};
    k.Gb=function(a,b){return "linkViaPopup"==a&&(this.g||null)==b&&this.f||"reauthViaPopup"==a&&(this.g||null)==b&&this.f||"linkViaRedirect"==a&&(this.ga||null)==b||"reauthViaRedirect"==a&&(this.ga||null)==b?!0:!1};k.na=function(a,b,c,d){"linkViaPopup"!=a&&"reauthViaPopup"!=a||d!=(this.g||null)||(c&&this.C?this.C(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.C);};
    k.Fa=function(a,b){return "linkViaPopup"==a&&b==(this.g||null)?q(this.Lb,this):"reauthViaPopup"==a&&b==(this.g||null)?q(this.Mb,this):"linkViaRedirect"==a&&(this.ga||null)==b?q(this.Lb,this):"reauthViaRedirect"==a&&(this.ga||null)==b?q(this.Mb,this):null};k.Ec=function(a){var b=this;return kn(this,"linkViaPopup",a,function(){return hn(b,a.providerId).then(function(){return Vm(b)})},!1)};k.Nc=function(a){return kn(this,"reauthViaPopup",a,function(){return E()},!0)};
    function kn(a,b,c,d,e){if(!Re())return F(new t("operation-not-supported-in-this-environment"));if(a.i&&!e)return F(a.i);var f=ng(c.providerId),g=Qe(a.uid+":::"),h=null;(!Te()||Ie())&&a.s&&c.isOAuthProvider&&(h=ek(a.s,a.l,a.m,b,c,null,g,firebase.SDK_VERSION||null,null,null,a.tenantId,a.u));var m=ze(h,f&&f.va,f&&f.ua);d=d().then(function(){ln(a);if(!e)return a.I().then(function(){})}).then(function(){return Tl(a.b,m,b,c,g,!!h,a.tenantId)}).then(function(){return new D(function(p,v){a.na(b,null,new t("cancelled-popup-request"),
    a.g||null);a.f=p;a.C=v;a.g=g;a.c=Vl(a.b,a,b,m,g);})}).then(function(p){m&&ye(m);return p?kf(p):null}).o(function(p){m&&ye(m);throw p;});return R(a,d,e)}k.Fc=function(a){var b=this;return mn(this,"linkViaRedirect",a,function(){return hn(b,a.providerId)},!1)};k.Oc=function(a){return mn(this,"reauthViaRedirect",a,function(){return E()},!0)};
    function mn(a,b,c,d,e){if(!Re())return F(new t("operation-not-supported-in-this-environment"));if(a.i&&!e)return F(a.i);var f=null,g=Qe(a.uid+":::");d=d().then(function(){ln(a);if(!e)return a.I().then(function(){})}).then(function(){a.ga=g;return Vm(a)}).then(function(h){a.ha&&(h=a.ha,h=h.b.set(nn,a.w(),h.a));return h}).then(function(){return Ul(a.b,b,c,g,a.tenantId)}).o(function(h){f=h;if(a.ha)return on(a.ha);throw f;}).then(function(){if(f)throw f;});return R(a,d,e)}
    function ln(a){if(!a.b||!a.P){if(a.b&&!a.P)throw new t("internal-error");throw new t("auth-domain-config-required");}}k.Lb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null;c=this.I().then(function(g){return Hg(e.a,{requestUri:a,postBody:d,sessionId:b,idToken:g})}).then(function(g){f=gn(e,g,"link");return jn(e,g)}).then(function(){return f});return R(this,c)};
    k.Mb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null,g=E().then(function(){return Cg(Ig(e.a,{requestUri:a,sessionId:b,postBody:d,tenantId:c}),e.uid)}).then(function(h){f=gn(e,h,"reauthenticate");wm(e,h);e.i=null;return e.reload()}).then(function(){return f});return R(this,g,!0)};
    k.vb=function(a){var b=this,c=null;return R(this,this.I().then(function(d){c=d;return "undefined"===typeof a||mb(a)?{}:bg(new Sf(a))}).then(function(d){return b.a.vb(c,d)}).then(function(d){if(b.email!=d)return b.reload()}).then(function(){}))};k.Fb=function(a,b){var c=this,d=null;return R(this,this.I().then(function(e){d=e;return "undefined"===typeof b||mb(b)?{}:bg(new Sf(b))}).then(function(e){return c.a.Fb(d,a,e)}).then(function(e){if(c.email!=e)return c.reload()}).then(function(){}))};
    function R(a,b,c){var d=pn(a,b,c);a.N.push(d);d.oa(function(){Wa(a.N,d);});return d.o(function(e){var f=null;e&&"auth/multi-factor-auth-required"===e.code&&(f=mm(e.w(),Rm(a),q(a.jc,a)));throw f||e;})}k.jc=function(a){var b=null,c=this;a=Cg(E(a),c.uid).then(function(d){b=gn(c,d,"reauthenticate");wm(c,d);c.i=null;return c.reload()}).then(function(){return b});return R(this,a,!0)};
    function pn(a,b,c){return a.i&&!c?(b.cancel(),F(a.i)):b.o(function(d){!d||"auth/user-disabled"!=d.code&&"auth/user-token-expired"!=d.code||(a.i||a.dispatchEvent(new sm("userInvalidated")),a.i=d);throw d;})}k.toJSON=function(){return this.w()};
    k.w=function(){var a={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.s,stsTokenManager:this.h.w(),redirectEventId:this.ga||null};this.metadata&&z(a,this.metadata.w());w(this.providerData,function(b){a.providerData.push(lf(b));});z(a,this.S.w());return a};
    function qn(a){if(!a.apiKey)return null;var b={apiKey:a.apiKey,authDomain:a.authDomain,appName:a.appName,emulatorConfig:a.emulatorConfig},c={};if(a.stsTokenManager&&a.stsTokenManager.accessToken){c[Dg]=a.stsTokenManager.accessToken;c.refreshToken=a.stsTokenManager.refreshToken||null;var d=a.stsTokenManager.expirationTime;d&&(c.expiresIn=(d-Date.now())/1E3);}else return null;var e=new Im(b,c,a);a.providerData&&w(a.providerData,function(f){f&&$m(e,kf(f));});a.redirectEventId&&(e.ga=a.redirectEventId);
    return e}function rn(a,b,c,d){var e=new Im(a,b);c&&(e.ha=c);d&&Nm(e,d);return e.reload().then(function(){return e})}function sn(a,b,c,d){var e=a.h,f={};f[Dg]=e.b&&e.b.toString();f.refreshToken=e.a;b=new Im(b||{apiKey:a.l,authDomain:a.s,appName:a.m},f);c&&(b.ha=c);d&&Nm(b,d);cn(b,a);return b}function tn(a){this.a=a;this.b=Vk();}var nn={name:"redirectUser",F:"session"};function on(a){return Zk(a.b,nn,a.a)}function un(a,b){return a.b.get(nn,a.a).then(function(c){c&&b&&(c.authDomain=b);return qn(c||{})})}function vn(a){this.a=a;this.b=Vk();this.c=null;this.f=wn(this);this.b.addListener(xn("local"),this.a,q(this.g,this));}vn.prototype.g=function(){var a=this,b=xn("local");yn(this,function(){return E().then(function(){return a.c&&"local"!=a.c.F?a.b.get(b,a.a):null}).then(function(c){if(c)return zn(a,"local").then(function(){a.c=b;})})});};function zn(a,b){var c=[],d;for(d in Rk)Rk[d]!==b&&c.push(Zk(a.b,xn(Rk[d]),a.a));c.push(Zk(a.b,An,a.a));return Ic(c)}
    function wn(a){var b=xn("local"),c=xn("session"),d=xn("none");return Yk(a.b,b,a.a).then(function(){return a.b.get(c,a.a)}).then(function(e){return e?c:a.b.get(d,a.a).then(function(f){return f?d:a.b.get(b,a.a).then(function(g){return g?b:a.b.get(An,a.a).then(function(h){return h?xn(h):b})})})}).then(function(e){a.c=e;return zn(a,e.F)}).o(function(){a.c||(a.c=b);})}var An={name:"persistence",F:"session"};function xn(a){return {name:"authUser",F:a}}
    vn.prototype.yb=function(a){var b=null,c=this;Sk(a);return yn(this,function(){return a!=c.c.F?c.b.get(c.c,c.a).then(function(d){b=d;return zn(c,a)}).then(function(){c.c=xn(a);if(b)return c.b.set(c.c,b,c.a)}):E()})};function Bn(a){return yn(a,function(){return a.b.set(An,a.c.F,a.a)})}function Cn(a,b){return yn(a,function(){return a.b.set(a.c,b.w(),a.a)})}function Dn(a){return yn(a,function(){return Zk(a.b,a.c,a.a)})}
    function En(a,b,c){return yn(a,function(){return a.b.get(a.c,a.a).then(function(d){d&&b&&(d.authDomain=b);d&&c&&(d.emulatorConfig=c);return qn(d||{})})})}function yn(a,b){a.f=a.f.then(b,b);return a.f}function Fn(a){this.l=!1;M(this,"settings",new em);M(this,"app",a);if(S(this).options&&S(this).options.apiKey)a=firebase.SDK_VERSION?Oe(firebase.SDK_VERSION):null,this.a=new Ii(S(this).options&&S(this).options.apiKey,Ca(Da),a);else throw new t("invalid-api-key");this.P=[];this.s=[];this.N=[];this.Pa=firebase.INTERNAL.createSubscribe(q(this.zc,this));this.W=void 0;this.ib=firebase.INTERNAL.createSubscribe(q(this.Ac,this));Gn(this,null);this.i=new vn(S(this).options.apiKey+":"+S(this).name);this.D=
    new tn(S(this).options.apiKey+":"+S(this).name);this.$=T(this,Hn(this));this.h=T(this,In(this));this.ba=!1;this.ja=q(this.Zc,this);this.Ba=q(this.da,this);this.qa=q(this.mc,this);this.za=q(this.wc,this);this.Aa=q(this.xc,this);this.b=null;Jn(this);this.INTERNAL={};this.INTERNAL["delete"]=q(this.delete,this);this.INTERNAL.logFramework=q(this.Gc,this);this.u=0;H.call(this);Kn(this);this.J=[];this.R=null;}r(Fn,H);function Ln(a){G.call(this,"languageCodeChanged");this.h=a;}r(Ln,G);
    function Mn(a){G.call(this,"emulatorConfigChanged");this.c=a;}r(Mn,G);function Nn(a){G.call(this,"frameworkChanged");this.f=a;}r(Nn,G);k=Fn.prototype;k.yb=function(a){a=this.i.yb(a);return T(this,a)};k.xa=function(a){this.aa===a||this.l||(this.aa=a,Oi(this.a,this.aa),this.dispatchEvent(new Ln(this.la())));};k.la=function(){return this.aa};k.fd=function(){var a=l.navigator;this.xa(a?a.languages&&a.languages[0]||a.language||a.userLanguage||null:null);};
    k.gd=function(a,b){if(!this.R){if(!/^https?:\/\//.test(a))throw new t("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");b=b?!!b.disableWarnings:!1;On(b);this.R={url:a,ec:b};this.settings.jb=!0;Pi(this.a,this.R);this.dispatchEvent(new Mn(this.R));}};
    function On(a){"undefined"!==typeof console&&"function"===typeof console.info&&console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");l.document&&!a&&Ee().then(function(){var b=l.document.createElement("div");b.innerText="Running in emulator mode. Do not use with production credentials.";b.style.position="fixed";b.style.width="100%";b.style.backgroundColor="#ffffff";b.style.border=".1em solid #000000";b.style.color=
    "#b50000";b.style.bottom="0px";b.style.left="0px";b.style.margin="0px";b.style.zIndex=1E4;b.style.textAlign="center";b.classList.add("firebase-emulator-warning");l.document.body.appendChild(b);});}k.Gc=function(a){this.J.push(a);Ri(this.a,firebase.SDK_VERSION?Oe(firebase.SDK_VERSION,this.J):null);this.dispatchEvent(new Nn(this.J));};k.Ga=function(){return Za(this.J)};k.zb=function(a){this.S===a||this.l||(this.S=a,this.a.b=this.S);};k.T=function(){return this.S};
    function Kn(a){Object.defineProperty(a,"lc",{get:function(){return this.la()},set:function(b){this.xa(b);},enumerable:!1});a.aa=null;Object.defineProperty(a,"ti",{get:function(){return this.T()},set:function(b){this.zb(b);},enumerable:!1});a.S=null;Object.defineProperty(a,"emulatorConfig",{get:function(){if(this.R){var b=J(this.R.url);b=kf({protocol:b.c,host:b.a,port:b.g,options:kf({disableWarnings:this.R.ec})});}else b=null;return b},enumerable:!1});}
    k.toJSON=function(){return {apiKey:S(this).options.apiKey,authDomain:S(this).options.authDomain,appName:S(this).name,currentUser:U(this)&&U(this).w()}};function Pn(a){return a.Oa||F(new t("auth-domain-config-required"))}function Jn(a){var b=S(a).options.authDomain,c=S(a).options.apiKey;b&&Re()&&(a.Oa=a.$.then(function(){if(!a.l){a.b=Xl(b,c,S(a).name,a.R);Pl(a.b,a);U(a)&&Wm(U(a));if(a.m){Wm(a.m);var d=a.m;d.xa(a.la());Om(d,a);d=a.m;Nm(d,a.J);Qm(d,a);d=a.m;Mm(d,a.R);Pm(d,a);a.m=null;}return a.b}}));}
    k.Gb=function(a,b){switch(a){case "unknown":case "signInViaRedirect":return !0;case "signInViaPopup":return this.g==b&&!!this.f;default:return !1}};k.na=function(a,b,c,d){"signInViaPopup"==a&&this.g==d&&(c&&this.C?this.C(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.C);};k.Fa=function(a,b){return "signInViaRedirect"==a||"signInViaPopup"==a&&this.g==b&&this.f?q(this.ic,this):null};
    k.ic=function(a,b,c,d){var e=this,f={requestUri:a,postBody:d,sessionId:b,tenantId:c};this.c&&(this.c.cancel(),this.c=null);return e.$.then(function(){return Qn(e,Fg(e.a,f))})};
    k.Xc=function(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=this,c=ng(a.providerId),d=Qe(),e=null;(!Te()||Ie())&&S(this).options.authDomain&&a.isOAuthProvider&&(e=ek(S(this).options.authDomain,S(this).options.apiKey,S(this).name,"signInViaPopup",a,null,d,firebase.SDK_VERSION||null,null,null,this.T(),this.R));var f=ze(e,c&&c.va,c&&c.ua);c=Pn(this).then(function(g){return Tl(g,f,"signInViaPopup",a,d,!!e,b.T())}).then(function(){return new D(function(g,h){b.na("signInViaPopup",
    null,new t("cancelled-popup-request"),b.g);b.f=g;b.C=h;b.g=d;b.c=Vl(b.b,b,"signInViaPopup",f,d);})}).then(function(g){f&&ye(f);return g?kf(g):null}).o(function(g){f&&ye(f);throw g;});return T(this,c)};k.Yc=function(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=this,c=Pn(this).then(function(){return Bn(b.i)}).then(function(){return Ul(b.b,"signInViaRedirect",a,void 0,b.T())});return T(this,c)};
    function Rn(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=Pn(a).then(function(){return a.b.ra()}).then(function(c){return c?kf(c):null});return T(a,b)}k.ra=function(){var a=this;return Rn(this).then(function(b){a.b&&$l(a.b.b);return b}).o(function(b){a.b&&$l(a.b.b);throw b;})};
    k.dd=function(a){if(!a)return F(new t("null-user"));if(this.S!=a.tenantId)return F(new t("tenant-id-mismatch"));var b=this,c={};c.apiKey=S(this).options.apiKey;c.authDomain=S(this).options.authDomain;c.appName=S(this).name;var d=sn(a,c,b.D,b.Ga());return T(this,this.h.then(function(){if(S(b).options.apiKey!=a.l)return d.reload()}).then(function(){if(U(b)&&a.uid==U(b).uid)return cn(U(b),a),b.da(a);Gn(b,d);Wm(d);return b.da(d)}).then(function(){Sn(b);}))};
    function Tn(a,b){var c={};c.apiKey=S(a).options.apiKey;c.authDomain=S(a).options.authDomain;c.appName=S(a).name;a.R&&(c.emulatorConfig=a.R);return a.$.then(function(){return rn(c,b,a.D,a.Ga())}).then(function(d){if(U(a)&&d.uid==U(a).uid)return cn(U(a),d),a.da(d);Gn(a,d);Wm(d);return a.da(d)}).then(function(){Sn(a);})}
    function Gn(a,b){U(a)&&(Um(U(a),a.Ba),xd(U(a),"tokenChanged",a.qa),xd(U(a),"userDeleted",a.za),xd(U(a),"userInvalidated",a.Aa),Tm(U(a)));b&&(b.W.push(a.Ba),nd(b,"tokenChanged",a.qa),nd(b,"userDeleted",a.za),nd(b,"userInvalidated",a.Aa),0<a.u&&Sm(b));M(a,"currentUser",b);b&&(b.xa(a.la()),Om(b,a),Nm(b,a.J),Qm(b,a),Mm(b,a.R),Pm(b,a));}k.Bb=function(){var a=this,b=this.h.then(function(){a.b&&$l(a.b.b);if(!U(a))return E();Gn(a,null);return Dn(a.i).then(function(){Sn(a);})});return T(this,b)};
    function Un(a){var b=un(a.D,S(a).options.authDomain).then(function(c){if(a.m=c)c.ha=a.D;return on(a.D)});return T(a,b)}function Hn(a){var b=S(a).options.authDomain,c=Un(a).then(function(){return En(a.i,b,a.R)}).then(function(d){return d?(d.ha=a.D,a.m&&(a.m.ga||null)==(d.ga||null)?d:d.reload().then(function(){return Cn(a.i,d).then(function(){return d})}).o(function(e){return "auth/network-request-failed"==e.code?d:Dn(a.i)})):null}).then(function(d){Gn(a,d||null);});return T(a,c)}
    function In(a){return a.$.then(function(){return Rn(a)}).o(function(){}).then(function(){if(!a.l)return a.ja()}).o(function(){}).then(function(){if(!a.l){a.ba=!0;var b=a.i;b.b.addListener(xn("local"),b.a,a.ja);}})}
    k.Zc=function(){var a=this;return En(this.i,S(this).options.authDomain).then(function(b){if(!a.l){var c;if(c=U(a)&&b){c=U(a).uid;var d=b.uid;c=void 0===c||null===c||""===c||void 0===d||null===d||""===d?!1:c==d;}if(c)return cn(U(a),b),U(a).I();if(U(a)||b)Gn(a,b),b&&(Wm(b),b.ha=a.D),a.b&&Pl(a.b,a),Sn(a);}})};k.da=function(a){return Cn(this.i,a)};k.mc=function(){Sn(this);this.da(U(this));};k.wc=function(){this.Bb();};k.xc=function(){this.Bb();};
    function Qn(a,b){var c=null,d=null;return T(a,b.then(function(e){c=qh(e);d=og(e);return Tn(a,e)},function(e){var f=null;e&&"auth/multi-factor-auth-required"===e.code&&(f=mm(e.w(),a,q(a.kc,a)));throw f||e;}).then(function(){return kf({user:U(a),credential:c,additionalUserInfo:d,operationType:"signIn"})}))}k.kc=function(a){var b=this;return this.h.then(function(){return Qn(b,E(a))})};k.zc=function(a){var b=this;this.addAuthTokenListener(function(){a.next(U(b));});};
    k.Ac=function(a){var b=this;Vn(this,function(){a.next(U(b));});};k.Ic=function(a,b,c){var d=this;this.ba&&Promise.resolve().then(function(){"function"===typeof a?a(U(d)):"function"===typeof a.next&&a.next(U(d));});return this.Pa(a,b,c)};k.Hc=function(a,b,c){var d=this;this.ba&&Promise.resolve().then(function(){d.W=d.getUid();"function"===typeof a?a(U(d)):"function"===typeof a.next&&a.next(U(d));});return this.ib(a,b,c)};
    k.nc=function(a){var b=this,c=this.h.then(function(){return U(b)?U(b).I(a).then(function(d){return {accessToken:d}}):null});return T(this,c)};k.Tc=function(a){var b=this;return this.h.then(function(){return Qn(b,O(b.a,Kj,{token:a}))}).then(function(c){var d=c.user;bn(d,"isAnonymous",!1);b.da(d);return c})};k.Uc=function(a,b){var c=this;return this.h.then(function(){return Qn(c,O(c.a,ah,{email:a,password:b}))})};
    k.dc=function(a,b){var c=this;return this.h.then(function(){return Qn(c,O(c.a,Ej,{email:a,password:b}))})};k.ab=function(a){var b=this;return this.h.then(function(){return Qn(b,a.ka(b.a))})};k.Sc=function(a){gf("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");return this.ab(a)};
    k.Ab=function(){var a=this;return this.h.then(function(){var b=U(a);if(b&&b.isAnonymous){var c=kf({providerId:null,isNewUser:!1});return kf({user:b,credential:null,additionalUserInfo:c,operationType:"signIn"})}return Qn(a,a.a.Ab()).then(function(d){var e=d.user;bn(e,"isAnonymous",!0);a.da(e);return d})})};function S(a){return a.app}function U(a){return a.currentUser}k.getUid=function(){return U(this)&&U(this).uid||null};function Wn(a){return U(a)&&U(a)._lat||null}
    function Sn(a){if(a.ba){for(var b=0;b<a.s.length;b++)if(a.s[b])a.s[b](Wn(a));if(a.W!==a.getUid()&&a.N.length)for(a.W=a.getUid(),b=0;b<a.N.length;b++)if(a.N[b])a.N[b](Wn(a));}}k.cc=function(a){this.addAuthTokenListener(a);this.u++;0<this.u&&U(this)&&Sm(U(this));};k.Pc=function(a){var b=this;w(this.s,function(c){c==a&&b.u--;});0>this.u&&(this.u=0);0==this.u&&U(this)&&Tm(U(this));this.removeAuthTokenListener(a);};
    k.addAuthTokenListener=function(a){var b=this;this.s.push(a);T(this,this.h.then(function(){b.l||Va(b.s,a)&&a(Wn(b));}));};k.removeAuthTokenListener=function(a){Xa(this.s,function(b){return b==a});};function Vn(a,b){a.N.push(b);T(a,a.h.then(function(){!a.l&&Va(a.N,b)&&a.W!==a.getUid()&&(a.W=a.getUid(),b(Wn(a)));}));}
    k.delete=function(){this.l=!0;for(var a=0;a<this.P.length;a++)this.P[a].cancel("app-deleted");this.P=[];this.i&&(a=this.i,a.b.removeListener(xn("local"),a.a,this.ja));this.b&&(Ql(this.b,this),$l(this.b.b));return Promise.resolve()};function T(a,b){a.P.push(b);b.oa(function(){Wa(a.P,b);});return b}k.hc=function(a){return T(this,aj(this.a,a))};k.Bc=function(a){return !!fh(a)};
    k.xb=function(a,b){var c=this;return T(this,E().then(function(){var d=new Sf(b);if(!d.c)throw new t("argument-error",$f+" must be true when sending sign in link to email");return bg(d)}).then(function(d){return c.a.xb(a,d)}).then(function(){}))};k.jd=function(a){return this.Sa(a).then(function(b){return b.data.email})};k.ob=function(a,b){return T(this,this.a.ob(a,b).then(function(){}))};k.Sa=function(a){return T(this,this.a.Sa(a).then(function(b){return new vf(b)}))};
    k.kb=function(a){return T(this,this.a.kb(a).then(function(){}))};k.wb=function(a,b){var c=this;return T(this,E().then(function(){return "undefined"===typeof b||mb(b)?{}:bg(new Sf(b))}).then(function(d){return c.a.wb(a,d)}).then(function(){}))};k.Wc=function(a,b){return T(this,gm(this,a,b,q(this.ab,this)))};
    k.Vc=function(a,b){var c=this;return T(this,E().then(function(){var d=b||re(),e=eh(a,d);d=fh(d);if(!d)throw new t("argument-error","Invalid email link!");if(d.tenantId!==c.T())throw new t("tenant-id-mismatch");return c.ab(e)}))};function Xn(){}Xn.prototype.render=function(){};Xn.prototype.reset=function(){};Xn.prototype.getResponse=function(){};Xn.prototype.execute=function(){};function Yn(){this.a={};this.b=1E12;}var Zn=null;Yn.prototype.render=function(a,b){this.a[this.b.toString()]=new $n(a,b);return this.b++};Yn.prototype.reset=function(a){var b=ao(this,a);a=bo(a);b&&a&&(b.delete(),delete this.a[a]);};Yn.prototype.getResponse=function(a){return (a=ao(this,a))?a.getResponse():null};Yn.prototype.execute=function(a){(a=ao(this,a))&&a.execute();};function ao(a,b){return (b=bo(b))?a.a[b]||null:null}function bo(a){return (a="undefined"===typeof a?1E12:a)?a.toString():null}
    function $n(a,b){this.g=!1;this.c=b;this.a=this.b=null;this.h="invisible"!==this.c.size;this.f=kc(a);var c=this;this.i=function(){c.execute();};this.h?this.execute():nd(this.f,"click",this.i);}$n.prototype.getResponse=function(){co(this);return this.b};
    $n.prototype.execute=function(){co(this);var a=this;this.a||(this.a=setTimeout(function(){a.b=Me();var b=a.c.callback,c=a.c["expired-callback"];if(b)try{b(a.b);}catch(d){}a.a=setTimeout(function(){a.a=null;a.b=null;if(c)try{c();}catch(d){}a.h&&a.execute();},6E4);},500));};$n.prototype.delete=function(){co(this);this.g=!0;clearTimeout(this.a);this.a=null;xd(this.f,"click",this.i);};function co(a){if(a.g)throw Error("reCAPTCHA mock was already deleted!");}function eo(){}M(eo,"FACTOR_ID","phone");function fo(){}fo.prototype.g=function(){Zn||(Zn=new Yn);return E(Zn)};fo.prototype.c=function(){};var go=null;function ho(){this.b=l.grecaptcha?Infinity:0;this.f=null;this.a="__rcb"+Math.floor(1E6*Math.random()).toString();}var io=new qb(rb,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),jo=new Ze(3E4,6E4);
    ho.prototype.g=function(a){var b=this;return new D(function(c,d){var e=setTimeout(function(){d(new t("network-request-failed"));},jo.get());if(!l.grecaptcha||a!==b.f&&!b.b){l[b.a]=function(){if(l.grecaptcha){b.f=a;var g=l.grecaptcha.render;l.grecaptcha.render=function(h,m){h=g(h,m);b.b++;return h};clearTimeout(e);c(l.grecaptcha);}else clearTimeout(e),d(new t("internal-error"));delete l[b.a];};var f=zb(io,{onload:b.a,hl:a||""});E(Bi(f)).o(function(){clearTimeout(e);d(new t("internal-error","Unable to load external reCAPTCHA dependencies!"));});}else clearTimeout(e),
    c(l.grecaptcha);})};ho.prototype.c=function(){this.b--;};var ko=null;function lo(a,b,c,d,e,f,g){M(this,"type","recaptcha");this.c=this.f=null;this.J=!1;this.v=b;this.g=null;g?(go||(go=new fo),g=go):(ko||(ko=new ho),g=ko);this.m=g;this.a=c||{theme:"light",type:"image"};this.h=[];if(this.a[mo])throw new t("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");this.i="invisible"===this.a[no];if(!l.document)throw new t("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
    if(!kc(b)||!this.i&&kc(b).hasChildNodes())throw new t("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.s=new Ii(a,f||null,e||null);this.u=d||function(){return null};var h=this;this.l=[];var m=this.a[oo];this.a[oo]=function(v){po(h,v);if("function"===typeof m)m(v);else if("string"===typeof m){var B=L(m,l);"function"===typeof B&&B(v);}};var p=this.a[qo];this.a[qo]=function(){po(h,null);if("function"===typeof p)p();else if("string"===typeof p){var v=
    L(p,l);"function"===typeof v&&v();}};}var oo="callback",qo="expired-callback",mo="sitekey",no="size";function po(a,b){for(var c=0;c<a.l.length;c++)try{a.l[c](b);}catch(d){}}function ro(a,b){Xa(a.l,function(c){return c==b});}function so(a,b){a.h.push(b);b.oa(function(){Wa(a.h,b);});return b}k=lo.prototype;
    k.Ia=function(){var a=this;return this.f?this.f:this.f=so(this,E().then(function(){if(Se()&&!Je())return Ee();throw new t("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");}).then(function(){return a.m.g(a.u())}).then(function(b){a.g=b;return O(a.s,Jj,{})}).then(function(b){a.a[mo]=b.recaptchaSiteKey;}).o(function(b){a.f=null;throw b;}))};
    k.render=function(){to(this);var a=this;return so(this,this.Ia().then(function(){if(null===a.c){var b=a.v;if(!a.i){var c=kc(b);b=nc("DIV");c.appendChild(b);}a.c=a.g.render(b,a.a);}return a.c}))};k.verify=function(){to(this);var a=this;return so(this,this.render().then(function(b){return new D(function(c){var d=a.g.getResponse(b);if(d)c(d);else {var e=function(f){f&&(ro(a,e),c(f));};a.l.push(e);a.i&&a.g.execute(a.c);}})}))};k.reset=function(){to(this);null!==this.c&&this.g.reset(this.c);};
    function to(a){if(a.J)throw new t("internal-error","RecaptchaVerifier instance has been destroyed.");}k.clear=function(){to(this);this.J=!0;this.m.c();for(var a=0;a<this.h.length;a++)this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){a=kc(this.v);for(var b;b=a.firstChild;)a.removeChild(b);}};
    function uo(a,b,c){var d=!1;try{this.b=c||firebase.app();}catch(g){throw new t("argument-error","No firebase.app.App instance is currently initialized.");}if(this.b.options&&this.b.options.apiKey)c=this.b.options.apiKey;else throw new t("invalid-api-key");var e=this,f=null;try{f=this.b.auth().Ga();}catch(g){}try{d=this.b.auth().settings.appVerificationDisabledForTesting;}catch(g){}f=firebase.SDK_VERSION?Oe(firebase.SDK_VERSION,f):null;lo.call(this,c,a,b,function(){try{var g=e.b.auth().la();}catch(h){g=
    null;}return g},f,Ca(Da),d);}r(uo,lo);function vo(a,b,c,d){a:{c=Array.prototype.slice.call(c);var e=0;for(var f=!1,g=0;g<b.length;g++)if(b[g].optional)f=!0;else {if(f)throw new t("internal-error","Argument validator encountered a required argument after an optional argument.");e++;}f=b.length;if(c.length<e||f<c.length)d="Expected "+(e==f?1==e?"1 argument":e+" arguments":e+"-"+f+" arguments")+" but got "+c.length+".";else {for(e=0;e<c.length;e++)if(f=b[e].optional&&void 0===c[e],!b[e].M(c[e])&&!f){b=b[e];if(0>e||e>=wo.length)throw new t("internal-error",
    "Argument validator received an unsupported number of arguments.");c=wo[e];d=(d?"":c+" argument ")+(b.name?'"'+b.name+'" ':"")+"must be "+b.K+".";break a}d=null;}}if(d)throw new t("argument-error",a+" failed: "+d);}var wo="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function V(a,b){return {name:a||"",K:"a valid string",optional:!!b,M:function(c){return "string"===typeof c}}}
    function xo(a,b){return {name:a||"",K:"a boolean",optional:!!b,M:function(c){return "boolean"===typeof c}}}function W(a,b){return {name:a||"",K:"a valid object",optional:!!b,M:n}}function yo(a,b){return {name:a||"",K:"a function",optional:!!b,M:function(c){return "function"===typeof c}}}function zo(a,b){return {name:a||"",K:"null",optional:!!b,M:function(c){return null===c}}}function Ao(){return {name:"",K:"an HTML element",optional:!1,M:function(a){return !!(a&&a instanceof Element)}}}
    function Bo(){return {name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(a){return !!(a&&a instanceof Fn)}}}function Co(){return {name:"app",K:"an instance of Firebase App",optional:!0,M:function(a){return !!(a&&a instanceof firebase.app.App)}}}function Do(a){return {name:a?a+"Credential":"credential",K:a?"a valid "+a+" credential":"a valid credential",optional:!1,M:function(b){if(!b)return !1;var c=!a||b.providerId===a;return !(!b.ka||!c)}}}
    function Eo(){return {name:"multiFactorAssertion",K:"a valid multiFactorAssertion",optional:!1,M:function(a){return a?!!a.tb:!1}}}function Fo(){return {name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(a){return !!(a&&a.providerId&&a.hasOwnProperty&&a.hasOwnProperty("isOAuthProvider"))}}}function Go(a,b){return n(a)&&"string"===typeof a.type&&a.type===b&&"function"===typeof a.Ha}function Ho(a){return n(a)&&"string"===typeof a.uid}
    function Io(){return {name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(a){return !(!a||"string"!==typeof a.type||"function"!==typeof a.verify)}}}function X(a,b,c,d){return {name:c||"",K:a.K+" or "+b.K,optional:!!d,M:function(e){return a.M(e)||b.M(e)}}}function Y(a,b){for(var c in b){var d=b[c].name;a[d]=Jo(d,a[c],b[c].j);}}function Ko(a,b){for(var c in b){var d=b[c].name;d!==c&&Object.defineProperty(a,d,{get:ua(function(e){return this[e]},c),set:ua(function(e,f,g,h){vo(e,[g],[h],!0);this[f]=h;},d,c,b[c].lb),enumerable:!0});}}function Z(a,b,c,d){a[b]=Jo(b,c,d);}
    function Jo(a,b,c){function d(){var g=Array.prototype.slice.call(arguments);vo(e,c,g);return b.apply(this,g)}if(!c)return b;var e=Lo(a),f;for(f in b)d[f]=b[f];for(f in b.prototype)d.prototype[f]=b.prototype[f];return d}function Lo(a){a=a.split(".");return a[a.length-1]}Y(Fn.prototype,{kb:{name:"applyActionCode",j:[V("code")]},Sa:{name:"checkActionCode",j:[V("code")]},ob:{name:"confirmPasswordReset",j:[V("code"),V("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[V("email"),V("password")]},hc:{name:"fetchSignInMethodsForEmail",j:[V("email")]},ra:{name:"getRedirectResult",j:[]},Bc:{name:"isSignInWithEmailLink",j:[V("emailLink")]},Hc:{name:"onAuthStateChanged",j:[X(W(),yo(),"nextOrObserver"),yo("opt_error",!0),yo("opt_completed",!0)]},Ic:{name:"onIdTokenChanged",
    j:[X(W(),yo(),"nextOrObserver"),yo("opt_error",!0),yo("opt_completed",!0)]},wb:{name:"sendPasswordResetEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),zo(null,!0),"opt_actionCodeSettings",!0)]},xb:{name:"sendSignInLinkToEmail",j:[V("email"),W("actionCodeSettings")]},yb:{name:"setPersistence",j:[V("persistence")]},Sc:{name:"signInAndRetrieveDataWithCredential",j:[Do()]},Ab:{name:"signInAnonymously",j:[]},ab:{name:"signInWithCredential",j:[Do()]},Tc:{name:"signInWithCustomToken",j:[V("token")]},
    Uc:{name:"signInWithEmailAndPassword",j:[V("email"),V("password")]},Vc:{name:"signInWithEmailLink",j:[V("email"),V("emailLink",!0)]},Wc:{name:"signInWithPhoneNumber",j:[V("phoneNumber"),Io()]},Xc:{name:"signInWithPopup",j:[Fo()]},Yc:{name:"signInWithRedirect",j:[Fo()]},dd:{name:"updateCurrentUser",j:[X(function(a){return {name:"user",K:"an instance of Firebase User",optional:!!a,M:function(b){return !!(b&&b instanceof Im)}}}(),zo(),"user")]},Bb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[V(null,
    !0)]},fd:{name:"useDeviceLanguage",j:[]},gd:{name:"useEmulator",j:[V("url"),W("options",!0)]},jd:{name:"verifyPasswordResetCode",j:[V("code")]}});Ko(Fn.prototype,{lc:{name:"languageCode",lb:X(V(),zo(),"languageCode")},ti:{name:"tenantId",lb:X(V(),zo(),"tenantId")}});Fn.Persistence=Rk;Fn.Persistence.LOCAL="local";Fn.Persistence.SESSION="session";Fn.Persistence.NONE="none";
    Y(Im.prototype,{"delete":{name:"delete",j:[]},oc:{name:"getIdTokenResult",j:[xo("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[xo("opt_forceRefresh",!0)]},Cc:{name:"linkAndRetrieveDataWithCredential",j:[Do()]},rb:{name:"linkWithCredential",j:[Do()]},Dc:{name:"linkWithPhoneNumber",j:[V("phoneNumber"),Io()]},Ec:{name:"linkWithPopup",j:[Fo()]},Fc:{name:"linkWithRedirect",j:[Fo()]},Lc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Do()]},ub:{name:"reauthenticateWithCredential",j:[Do()]},Mc:{name:"reauthenticateWithPhoneNumber",
    j:[V("phoneNumber"),Io()]},Nc:{name:"reauthenticateWithPopup",j:[Fo()]},Oc:{name:"reauthenticateWithRedirect",j:[Fo()]},reload:{name:"reload",j:[]},vb:{name:"sendEmailVerification",j:[X(W("opt_actionCodeSettings",!0),zo(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[V(null,!0)]},cd:{name:"unlink",j:[V("provider")]},Cb:{name:"updateEmail",j:[V("email")]},Db:{name:"updatePassword",j:[V("password")]},ed:{name:"updatePhoneNumber",j:[Do("phone")]},Eb:{name:"updateProfile",j:[W("profile")]},
    Fb:{name:"verifyBeforeUpdateEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),zo(null,!0),"opt_actionCodeSettings",!0)]}});Y(Yn.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(Xn.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(D.prototype,{oa:{name:"finally"},o:{name:"catch"},then:{name:"then"}});
    Ko(em.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",lb:xo("appVerificationDisabledForTesting")}});Y(fm.prototype,{confirm:{name:"confirm",j:[V("verificationCode")]}});Z(Bg,"fromJSON",function(a){a="string"===typeof a?JSON.parse(a):a;for(var b,c=[Mg,dh,kh,Jg],d=0;d<c.length;d++)if(b=c[d](a))return b;return null},[X(V(),W(),"json")]);Z(Zg,"credential",function(a,b){return new Yg(a,b)},[V("email"),V("password")]);Y(Yg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});
    Y(Qg.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Qg,"credential",Rg,[X(V(),W(),"token")]);Z(Zg,"credentialWithLink",eh,[V("email"),V("emailLink")]);Y(Sg.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Sg,"credential",Tg,[X(V(),W(),"token")]);Y(Ug.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});
    Z(Ug,"credential",Vg,[X(V(),X(W(),zo()),"idToken"),X(V(),zo(),"accessToken",!0)]);Y(Wg.prototype,{Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Wg,"credential",Xg,[X(V(),W(),"token"),V("secret",!0)]);Y(Pg.prototype,{Ca:{name:"addScope",j:[V("scope")]},credential:{name:"credential",j:[X(V(),X(W(),zo()),"optionsOrIdToken"),X(V(),zo(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Y(Kg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});
    Y(Eg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});Z(lh,"credential",ph,[V("verificationId"),V("verificationCode")]);
    Y(lh.prototype,{gb:{name:"verifyPhoneNumber",j:[X(V(),function(a,b){return {name:a||"phoneInfoOptions",K:"valid phone info options",optional:!!b,M:function(c){return c?c.session&&c.phoneNumber?Go(c.session,zg)&&"string"===typeof c.phoneNumber:c.session&&c.multiFactorHint?Go(c.session,Ag)&&Ho(c.multiFactorHint):c.session&&c.multiFactorUid?Go(c.session,Ag)&&"string"===typeof c.multiFactorUid:c.phoneNumber?"string"===typeof c.phoneNumber:!1:!1}}}(),"phoneInfoOptions"),Io()]}});
    Y(gh.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});Y(t.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(yh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(xh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(lm.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(im.prototype,{Rc:{name:"resolveSignIn",j:[Eo()]}});
    Y(tm.prototype,{Sb:{name:"getSession",j:[]},fc:{name:"enroll",j:[Eo(),V("displayName",!0)]},bd:{name:"unenroll",j:[X({name:"multiFactorInfo",K:"a valid multiFactorInfo",optional:!1,M:Ho},V(),"multiFactorInfoIdentifier")]}});Y(uo.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}});Z(Jf,"parseLink",Rf,[V("link")]);Z(eo,"assertion",function(a){return new rm(a)},[Do("phone")]);
    (function(){if("undefined"!==typeof firebase&&firebase.INTERNAL&&firebase.INTERNAL.registerComponent){var a={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:Af,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:Cf,VERIFY_AND_CHANGE_EMAIL:Bf,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:Fn,AuthCredential:Bg,Error:t};Z(a,"EmailAuthProvider",Zg,[]);Z(a,"FacebookAuthProvider",Qg,[]);Z(a,"GithubAuthProvider",Sg,[]);Z(a,"GoogleAuthProvider",Ug,[]);Z(a,"TwitterAuthProvider",Wg,[]);
    Z(a,"OAuthProvider",Pg,[V("providerId")]);Z(a,"SAMLAuthProvider",Og,[V("providerId")]);Z(a,"PhoneAuthProvider",lh,[Bo()]);Z(a,"RecaptchaVerifier",uo,[X(V(),Ao(),"recaptchaContainer"),W("recaptchaParameters",!0),Co()]);Z(a,"ActionCodeURL",Jf,[]);Z(a,"PhoneMultiFactorGenerator",eo,[]);firebase.INTERNAL.registerComponent({name:"auth",instanceFactory:function(b){b=b.getProvider("app").getImmediate();return new Fn(b)},multipleInstances:!1,serviceProps:a,instantiationMode:"LAZY",type:"PUBLIC",onInstanceCreated:function(b){b.getProvider("auth-internal").initialize();}});
    firebase.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(b){b=b.getProvider("auth").getImmediate();return {getUid:q(b.getUid,b),getToken:q(b.nc,b),addAuthTokenListener:q(b.cc,b),removeAuthTokenListener:q(b.Pc,b)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"});firebase.registerVersion("@firebase/auth","0.16.8");firebase.INTERNAL.extendNamespace({User:Im});}else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
    })();}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Constants used in the Firebase Storage library.
     */
    /**
     * Domain name for firebase storage.
     */
    var DEFAULT_HOST = 'firebasestorage.googleapis.com';
    /**
     * The key in Firebase config json for the storage bucket.
     */
    var CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
    /**
     * 2 minutes
     *
     * The timeout for all operations except upload.
     */
    var DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;
    /**
     * 10 minutes
     *
     * The timeout for upload.
     */
    var DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;

    /**
     * An error returned by the Firebase Storage SDK.
     * @public
     */
    var FirebaseStorageError = /** @class */ (function (_super) {
        __extends$1(FirebaseStorageError, _super);
        /**
         * @param code - A StorageErrorCode string to be prefixed with 'storage/' and
         *  added to the end of the message.
         * @param message  - Error message.
         */
        function FirebaseStorageError(code, message) {
            var _this = _super.call(this, prependCode(code), "Firebase Storage: " + message + " (" + prependCode(code) + ")") || this;
            /**
             * Stores custom error data unque to FirebaseStorageError.
             */
            _this.customData = { serverResponse: null };
            _this._baseMessage = _this.message;
            // Without this, `instanceof FirebaseStorageError`, in tests for example,
            // returns false.
            Object.setPrototypeOf(_this, FirebaseStorageError.prototype);
            return _this;
        }
        /**
         * Compares a StorageErrorCode against this error's code, filtering out the prefix.
         */
        FirebaseStorageError.prototype._codeEquals = function (code) {
            return prependCode(code) === this.code;
        };
        Object.defineProperty(FirebaseStorageError.prototype, "serverResponse", {
            /**
             * Optional response message that was added by the server.
             */
            get: function () {
                return this.customData.serverResponse;
            },
            set: function (serverResponse) {
                this.customData.serverResponse = serverResponse;
                if (this.customData.serverResponse) {
                    this.message = this._baseMessage + "\n" + this.customData.serverResponse;
                }
                else {
                    this.message = this._baseMessage;
                }
            },
            enumerable: false,
            configurable: true
        });
        return FirebaseStorageError;
    }(FirebaseError));
    function prependCode(code) {
        return 'storage/' + code;
    }
    function unknown() {
        var message = 'An unknown error occurred, please check the error payload for ' +
            'server response.';
        return new FirebaseStorageError("unknown" /* UNKNOWN */, message);
    }
    function objectNotFound(path) {
        return new FirebaseStorageError("object-not-found" /* OBJECT_NOT_FOUND */, "Object '" + path + "' does not exist.");
    }
    function quotaExceeded(bucket) {
        return new FirebaseStorageError("quota-exceeded" /* QUOTA_EXCEEDED */, "Quota for bucket '" +
            bucket +
            "' exceeded, please view quota on " +
            'https://firebase.google.com/pricing/.');
    }
    function unauthenticated() {
        var message = 'User is not authenticated, please authenticate using Firebase ' +
            'Authentication and try again.';
        return new FirebaseStorageError("unauthenticated" /* UNAUTHENTICATED */, message);
    }
    function unauthorizedApp() {
        return new FirebaseStorageError("unauthorized-app" /* UNAUTHORIZED_APP */, 'This app does not have permission to access Firebase Storage on this project.');
    }
    function unauthorized(path) {
        return new FirebaseStorageError("unauthorized" /* UNAUTHORIZED */, "User does not have permission to access '" + path + "'.");
    }
    function retryLimitExceeded() {
        return new FirebaseStorageError("retry-limit-exceeded" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');
    }
    function canceled() {
        return new FirebaseStorageError("canceled" /* CANCELED */, 'User canceled the upload/download.');
    }
    function invalidUrl(url) {
        return new FirebaseStorageError("invalid-url" /* INVALID_URL */, "Invalid URL '" + url + "'.");
    }
    function invalidDefaultBucket(bucket) {
        return new FirebaseStorageError("invalid-default-bucket" /* INVALID_DEFAULT_BUCKET */, "Invalid default bucket '" + bucket + "'.");
    }
    function noDefaultBucket() {
        return new FirebaseStorageError("no-default-bucket" /* NO_DEFAULT_BUCKET */, 'No default bucket ' +
            "found. Did you set the '" +
            CONFIG_STORAGE_BUCKET_KEY +
            "' property when initializing the app?");
    }
    function cannotSliceBlob() {
        return new FirebaseStorageError("cannot-slice-blob" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');
    }
    function serverFileWrongSize() {
        return new FirebaseStorageError("server-file-wrong-size" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');
    }
    function noDownloadURL() {
        return new FirebaseStorageError("no-download-url" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');
    }
    function invalidArgument(message) {
        return new FirebaseStorageError("invalid-argument" /* INVALID_ARGUMENT */, message);
    }
    function appDeleted() {
        return new FirebaseStorageError("app-deleted" /* APP_DELETED */, 'The Firebase app was deleted.');
    }
    /**
     * @param name - The name of the operation that was invalid.
     */
    function invalidRootOperation(name) {
        return new FirebaseStorageError("invalid-root-operation" /* INVALID_ROOT_OPERATION */, "The operation '" +
            name +
            "' cannot be performed on a root reference, create a non-root " +
            "reference using child, such as .child('file.png').");
    }
    /**
     * @param format - The format that was not valid.
     * @param message - A message describing the format violation.
     */
    function invalidFormat(format, message) {
        return new FirebaseStorageError("invalid-format" /* INVALID_FORMAT */, "String does not match format '" + format + "': " + message);
    }
    /**
     * @param message - A message describing the internal error.
     */
    function internalError(message) {
        throw new FirebaseStorageError("internal-error" /* INTERNAL_ERROR */, 'Internal error: ' + message);
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Converts a Base64 encoded string to a binary string. */
    function decodeBase64(encoded) {
        return atob(encoded);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An enumeration of the possible string formats for upload.
     * @public
     */
    var StringFormat = {
        /**
         * Indicates the string should be interpreted "raw", that is, as normal text.
         * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte
         * sequence.
         * Example: The string 'Hello! \\ud83d\\ude0a' becomes the byte sequence
         * 48 65 6c 6c 6f 21 20 f0 9f 98 8a
         */
        RAW: 'raw',
        /**
         * Indicates the string should be interpreted as base64-encoded data.
         * Padding characters (trailing '='s) are optional.
         * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence
         * ad 69 8e fb e1 3a b7 bf eb 97
         */
        BASE64: 'base64',
        /**
         * Indicates the string should be interpreted as base64url-encoded data.
         * Padding characters (trailing '='s) are optional.
         * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence
         * ad 69 8e fb e1 3a b7 bf eb 97
         */
        BASE64URL: 'base64url',
        /**
         * Indicates the string is a data URL, such as one obtained from
         * canvas.toDataURL().
         * Example: the string 'data:application/octet-stream;base64,aaaa'
         * becomes the byte sequence
         * 69 a6 9a
         * (the content-type "application/octet-stream" is also applied, but can
         * be overridden in the metadata object).
         */
        DATA_URL: 'data_url'
    };
    var StringData = /** @class */ (function () {
        function StringData(data, contentType) {
            this.data = data;
            this.contentType = contentType || null;
        }
        return StringData;
    }());
    function dataFromString(format, stringData) {
        switch (format) {
            case StringFormat.RAW:
                return new StringData(utf8Bytes_(stringData));
            case StringFormat.BASE64:
            case StringFormat.BASE64URL:
                return new StringData(base64Bytes_(format, stringData));
            case StringFormat.DATA_URL:
                return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
            // do nothing
        }
        // assert(false);
        throw unknown();
    }
    function utf8Bytes_(value) {
        var b = [];
        for (var i = 0; i < value.length; i++) {
            var c = value.charCodeAt(i);
            if (c <= 127) {
                b.push(c);
            }
            else {
                if (c <= 2047) {
                    b.push(192 | (c >> 6), 128 | (c & 63));
                }
                else {
                    if ((c & 64512) === 55296) {
                        // The start of a surrogate pair.
                        var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;
                        if (!valid) {
                            // The second surrogate wasn't there.
                            b.push(239, 191, 189);
                        }
                        else {
                            var hi = c;
                            var lo = value.charCodeAt(++i);
                            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);
                            b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));
                        }
                    }
                    else {
                        if ((c & 64512) === 56320) {
                            // Invalid low surrogate.
                            b.push(239, 191, 189);
                        }
                        else {
                            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));
                        }
                    }
                }
            }
        }
        return new Uint8Array(b);
    }
    function percentEncodedBytes_(value) {
        var decoded;
        try {
            decoded = decodeURIComponent(value);
        }
        catch (e) {
            throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
        }
        return utf8Bytes_(decoded);
    }
    function base64Bytes_(format, value) {
        switch (format) {
            case StringFormat.BASE64: {
                var hasMinus = value.indexOf('-') !== -1;
                var hasUnder = value.indexOf('_') !== -1;
                if (hasMinus || hasUnder) {
                    var invalidChar = hasMinus ? '-' : '_';
                    throw invalidFormat(format, "Invalid character '" +
                        invalidChar +
                        "' found: is it base64url encoded?");
                }
                break;
            }
            case StringFormat.BASE64URL: {
                var hasPlus = value.indexOf('+') !== -1;
                var hasSlash = value.indexOf('/') !== -1;
                if (hasPlus || hasSlash) {
                    var invalidChar = hasPlus ? '+' : '/';
                    throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
                }
                value = value.replace(/-/g, '+').replace(/_/g, '/');
                break;
            }
            // do nothing
        }
        var bytes;
        try {
            bytes = decodeBase64(value);
        }
        catch (e) {
            throw invalidFormat(format, 'Invalid character found');
        }
        var array = new Uint8Array(bytes.length);
        for (var i = 0; i < bytes.length; i++) {
            array[i] = bytes.charCodeAt(i);
        }
        return array;
    }
    var DataURLParts = /** @class */ (function () {
        function DataURLParts(dataURL) {
            this.base64 = false;
            this.contentType = null;
            var matches = dataURL.match(/^data:([^,]+)?,/);
            if (matches === null) {
                throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
            }
            var middle = matches[1] || null;
            if (middle != null) {
                this.base64 = endsWith(middle, ';base64');
                this.contentType = this.base64
                    ? middle.substring(0, middle.length - ';base64'.length)
                    : middle;
            }
            this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
        }
        return DataURLParts;
    }());
    function dataURLBytes_(dataUrl) {
        var parts = new DataURLParts(dataUrl);
        if (parts.base64) {
            return base64Bytes_(StringFormat.BASE64, parts.rest);
        }
        else {
            return percentEncodedBytes_(parts.rest);
        }
    }
    function dataURLContentType_(dataUrl) {
        var parts = new DataURLParts(dataUrl);
        return parts.contentType;
    }
    function endsWith(s, end) {
        var longEnough = s.length >= end.length;
        if (!longEnough) {
            return false;
        }
        return s.substring(s.length - end.length) === end;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An event that is triggered on a task.
     */
    var TaskEvent = {
        /**
         * For this event,
         * <ul>
         *   <li>The `next` function is triggered on progress updates and when the
         *       task is paused/resumed with an `UploadTaskSnapshot` as the first
         *       argument.</li>
         *   <li>The `error` function is triggered if the upload is canceled or fails
         *       for another reason.</li>
         *   <li>The `complete` function is triggered if the upload completes
         *       successfully.</li>
         * </ul>
         */
        STATE_CHANGED: 'state_changed'
    };
    /**
     * Represents the current state of a running upload.
     */
    var TaskState = {
        /** The task is currently transferring data. */
        RUNNING: 'running',
        /** The task was paused by the user. */
        PAUSED: 'paused',
        /** The task completed successfully. */
        SUCCESS: 'success',
        /** The task was canceled. */
        CANCELED: 'canceled',
        /** The task failed with an error. */
        ERROR: 'error'
    };
    function taskStateFromInternalTaskState(state) {
        switch (state) {
            case "running" /* RUNNING */:
            case "pausing" /* PAUSING */:
            case "canceling" /* CANCELING */:
                return TaskState.RUNNING;
            case "paused" /* PAUSED */:
                return TaskState.PAUSED;
            case "success" /* SUCCESS */:
                return TaskState.SUCCESS;
            case "canceled" /* CANCELED */:
                return TaskState.CANCELED;
            case "error" /* ERROR */:
                return TaskState.ERROR;
            default:
                // TODO(andysoto): assert(false);
                return TaskState.ERROR;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Error codes for requests made by the the XhrIo wrapper.
     */
    var ErrorCode;
    (function (ErrorCode) {
        ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
        ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
        ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
    })(ErrorCode || (ErrorCode = {}));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Network layer for browsers. We use this instead of goog.net.XhrIo because
     * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.
     */
    var XhrConnection = /** @class */ (function () {
        function XhrConnection() {
            var _this = this;
            this.sent_ = false;
            this.xhr_ = new XMLHttpRequest();
            this.errorCode_ = ErrorCode.NO_ERROR;
            this.sendPromise_ = new Promise(function (resolve) {
                _this.xhr_.addEventListener('abort', function () {
                    _this.errorCode_ = ErrorCode.ABORT;
                    resolve();
                });
                _this.xhr_.addEventListener('error', function () {
                    _this.errorCode_ = ErrorCode.NETWORK_ERROR;
                    resolve();
                });
                _this.xhr_.addEventListener('load', function () {
                    resolve();
                });
            });
        }
        /**
         * @override
         */
        XhrConnection.prototype.send = function (url, method, body, headers) {
            if (this.sent_) {
                throw internalError('cannot .send() more than once');
            }
            this.sent_ = true;
            this.xhr_.open(method, url, true);
            if (headers !== undefined) {
                for (var key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        this.xhr_.setRequestHeader(key, headers[key].toString());
                    }
                }
            }
            if (body !== undefined) {
                this.xhr_.send(body);
            }
            else {
                this.xhr_.send();
            }
            return this.sendPromise_;
        };
        /**
         * @override
         */
        XhrConnection.prototype.getErrorCode = function () {
            if (!this.sent_) {
                throw internalError('cannot .getErrorCode() before sending');
            }
            return this.errorCode_;
        };
        /**
         * @override
         */
        XhrConnection.prototype.getStatus = function () {
            if (!this.sent_) {
                throw internalError('cannot .getStatus() before sending');
            }
            try {
                return this.xhr_.status;
            }
            catch (e) {
                return -1;
            }
        };
        /**
         * @override
         */
        XhrConnection.prototype.getResponseText = function () {
            if (!this.sent_) {
                throw internalError('cannot .getResponseText() before sending');
            }
            return this.xhr_.responseText;
        };
        /**
         * Aborts the request.
         * @override
         */
        XhrConnection.prototype.abort = function () {
            this.xhr_.abort();
        };
        /**
         * @override
         */
        XhrConnection.prototype.getResponseHeader = function (header) {
            return this.xhr_.getResponseHeader(header);
        };
        /**
         * @override
         */
        XhrConnection.prototype.addUploadProgressListener = function (listener) {
            if (this.xhr_.upload != null) {
                this.xhr_.upload.addEventListener('progress', listener);
            }
        };
        /**
         * @override
         */
        XhrConnection.prototype.removeUploadProgressListener = function (listener) {
            if (this.xhr_.upload != null) {
                this.xhr_.upload.removeEventListener('progress', listener);
            }
        };
        return XhrConnection;
    }());
    function newConnection() {
        return new XhrConnection();
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Factory-like class for creating XhrIo instances.
     */
    var ConnectionPool = /** @class */ (function () {
        function ConnectionPool() {
        }
        ConnectionPool.prototype.createConnection = function () {
            return newConnection();
        };
        return ConnectionPool;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Firebase Storage location data.
     *
     * @internal
     */
    var Location = /** @class */ (function () {
        function Location(bucket, path) {
            this.bucket = bucket;
            this.path_ = path;
        }
        Object.defineProperty(Location.prototype, "path", {
            get: function () {
                return this.path_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Location.prototype, "isRoot", {
            get: function () {
                return this.path.length === 0;
            },
            enumerable: false,
            configurable: true
        });
        Location.prototype.fullServerUrl = function () {
            var encode = encodeURIComponent;
            return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
        };
        Location.prototype.bucketOnlyServerUrl = function () {
            var encode = encodeURIComponent;
            return '/b/' + encode(this.bucket) + '/o';
        };
        Location.makeFromBucketSpec = function (bucketString, host) {
            var bucketLocation;
            try {
                bucketLocation = Location.makeFromUrl(bucketString, host);
            }
            catch (e) {
                // Not valid URL, use as-is. This lets you put bare bucket names in
                // config.
                return new Location(bucketString, '');
            }
            if (bucketLocation.path === '') {
                return bucketLocation;
            }
            else {
                throw invalidDefaultBucket(bucketString);
            }
        };
        Location.makeFromUrl = function (url, host) {
            var location = null;
            var bucketDomain = '([A-Za-z0-9.\\-_]+)';
            function gsModify(loc) {
                if (loc.path.charAt(loc.path.length - 1) === '/') {
                    loc.path_ = loc.path_.slice(0, -1);
                }
            }
            var gsPath = '(/(.*))?$';
            var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
            var gsIndices = { bucket: 1, path: 3 };
            function httpModify(loc) {
                loc.path_ = decodeURIComponent(loc.path);
            }
            var version = 'v[A-Za-z0-9_]+';
            var firebaseStorageHost = host.replace(/[.]/g, '\\.');
            var firebaseStoragePath = '(/([^?#]*).*)?$';
            var firebaseStorageRegExp = new RegExp("^https?://" + firebaseStorageHost + "/" + version + "/b/" + bucketDomain + "/o" + firebaseStoragePath, 'i');
            var firebaseStorageIndices = { bucket: 1, path: 3 };
            var cloudStorageHost = host === DEFAULT_HOST
                ? '(?:storage.googleapis.com|storage.cloud.google.com)'
                : host;
            var cloudStoragePath = '([^?#]*)';
            var cloudStorageRegExp = new RegExp("^https?://" + cloudStorageHost + "/" + bucketDomain + "/" + cloudStoragePath, 'i');
            var cloudStorageIndices = { bucket: 1, path: 2 };
            var groups = [
                { regex: gsRegex, indices: gsIndices, postModify: gsModify },
                {
                    regex: firebaseStorageRegExp,
                    indices: firebaseStorageIndices,
                    postModify: httpModify
                },
                {
                    regex: cloudStorageRegExp,
                    indices: cloudStorageIndices,
                    postModify: httpModify
                }
            ];
            for (var i = 0; i < groups.length; i++) {
                var group = groups[i];
                var captures = group.regex.exec(url);
                if (captures) {
                    var bucketValue = captures[group.indices.bucket];
                    var pathValue = captures[group.indices.path];
                    if (!pathValue) {
                        pathValue = '';
                    }
                    location = new Location(bucketValue, pathValue);
                    group.postModify(location);
                    break;
                }
            }
            if (location == null) {
                throw invalidUrl(url);
            }
            return location;
        };
        return Location;
    }());

    /**
     * A request whose promise always fails.
     */
    var FailRequest = /** @class */ (function () {
        function FailRequest(error) {
            this.promise_ = Promise.reject(error);
        }
        /** @inheritDoc */
        FailRequest.prototype.getPromise = function () {
            return this.promise_;
        };
        /** @inheritDoc */
        FailRequest.prototype.cancel = function (_appDelete) {
        };
        return FailRequest;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param f May be invoked
     *     before the function returns.
     * @param callback Get all the arguments passed to the function
     *     passed to f, including the initial boolean.
     */
    function start(f, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback, timeout) {
        // TODO(andysoto): make this code cleaner (probably refactor into an actual
        // type instead of a bunch of functions with state shared in the closure)
        var waitSeconds = 1;
        // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
        // TODO: find a way to exclude Node type definition for storage because storage only works in browser
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var timeoutId = null;
        var hitTimeout = false;
        var cancelState = 0;
        function canceled() {
            return cancelState === 2;
        }
        var triggeredCallback = false;
        function triggerCallback() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!triggeredCallback) {
                triggeredCallback = true;
                callback.apply(null, args);
            }
        }
        function callWithDelay(millis) {
            timeoutId = setTimeout(function () {
                timeoutId = null;
                f(handler, canceled());
            }, millis);
        }
        function handler(success) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (triggeredCallback) {
                return;
            }
            if (success) {
                triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));
                return;
            }
            var mustStop = canceled() || hitTimeout;
            if (mustStop) {
                triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));
                return;
            }
            if (waitSeconds < 64) {
                /* TODO(andysoto): don't back off so quickly if we know we're offline. */
                waitSeconds *= 2;
            }
            var waitMillis;
            if (cancelState === 1) {
                cancelState = 2;
                waitMillis = 0;
            }
            else {
                waitMillis = (waitSeconds + Math.random()) * 1000;
            }
            callWithDelay(waitMillis);
        }
        var stopped = false;
        function stop(wasTimeout) {
            if (stopped) {
                return;
            }
            stopped = true;
            if (triggeredCallback) {
                return;
            }
            if (timeoutId !== null) {
                if (!wasTimeout) {
                    cancelState = 2;
                }
                clearTimeout(timeoutId);
                callWithDelay(0);
            }
            else {
                if (!wasTimeout) {
                    cancelState = 1;
                }
            }
        }
        callWithDelay(0);
        setTimeout(function () {
            hitTimeout = true;
            stop(true);
        }, timeout);
        return stop;
    }
    /**
     * Stops the retry loop from repeating.
     * If the function is currently "in between" retries, it is invoked immediately
     * with the second parameter as "true". Otherwise, it will be invoked once more
     * after the current invocation finishes iff the current invocation would have
     * triggered another retry.
     */
    function stop(id) {
        id(false);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function isJustDef(p) {
        return p !== void 0;
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    function isFunction(p) {
        return typeof p === 'function';
    }
    function isNonArrayObject(p) {
        return typeof p === 'object' && !Array.isArray(p);
    }
    function isString(p) {
        return typeof p === 'string' || p instanceof String;
    }
    function isNativeBlob(p) {
        return isNativeBlobDefined() && p instanceof Blob;
    }
    function isNativeBlobDefined() {
        return typeof Blob !== 'undefined';
    }
    function validateNumber(argument, minValue, maxValue, value) {
        if (value < minValue) {
            throw invalidArgument("Invalid value for '" + argument + "'. Expected " + minValue + " or greater.");
        }
        if (value > maxValue) {
            throw invalidArgument("Invalid value for '" + argument + "'. Expected " + maxValue + " or less.");
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function makeUrl(urlPart, host) {
        var protocolMatch = host.match(/^(\w+):\/\/.+/);
        var protocol = protocolMatch === null || protocolMatch === void 0 ? void 0 : protocolMatch[1];
        var origin = host;
        if (protocol == null) {
            origin = "https://" + host;
        }
        return origin + "/v0" + urlPart;
    }
    function makeQueryString(params) {
        var encode = encodeURIComponent;
        var queryPart = '?';
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var nextPart = encode(key) + '=' + encode(params[key]);
                queryPart = queryPart + nextPart + '&';
            }
        }
        // Chop off the extra '&' or '?' on the end
        queryPart = queryPart.slice(0, -1);
        return queryPart;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NetworkRequest = /** @class */ (function () {
        function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
            var _this = this;
            this.pendingConnection_ = null;
            this.backoffId_ = null;
            this.canceled_ = false;
            this.appDelete_ = false;
            this.url_ = url;
            this.method_ = method;
            this.headers_ = headers;
            this.body_ = body;
            this.successCodes_ = successCodes.slice();
            this.additionalRetryCodes_ = additionalRetryCodes.slice();
            this.callback_ = callback;
            this.errorCallback_ = errorCallback;
            this.progressCallback_ = progressCallback;
            this.timeout_ = timeout;
            this.pool_ = pool;
            this.promise_ = new Promise(function (resolve, reject) {
                _this.resolve_ = resolve;
                _this.reject_ = reject;
                _this.start_();
            });
        }
        /**
         * Actually starts the retry loop.
         */
        NetworkRequest.prototype.start_ = function () {
            var self = this;
            function doTheRequest(backoffCallback, canceled) {
                if (canceled) {
                    backoffCallback(false, new RequestEndStatus(false, null, true));
                    return;
                }
                var connection = self.pool_.createConnection();
                self.pendingConnection_ = connection;
                function progressListener(progressEvent) {
                    var loaded = progressEvent.loaded;
                    var total = progressEvent.lengthComputable ? progressEvent.total : -1;
                    if (self.progressCallback_ !== null) {
                        self.progressCallback_(loaded, total);
                    }
                }
                if (self.progressCallback_ !== null) {
                    connection.addUploadProgressListener(progressListener);
                }
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                connection
                    .send(self.url_, self.method_, self.body_, self.headers_)
                    .then(function () {
                    if (self.progressCallback_ !== null) {
                        connection.removeUploadProgressListener(progressListener);
                    }
                    self.pendingConnection_ = null;
                    var hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;
                    var status = connection.getStatus();
                    if (!hitServer || self.isRetryStatusCode_(status)) {
                        var wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;
                        backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                        return;
                    }
                    var successCode = self.successCodes_.indexOf(status) !== -1;
                    backoffCallback(true, new RequestEndStatus(successCode, connection));
                });
            }
            /**
             * @param requestWentThrough - True if the request eventually went
             *     through, false if it hit the retry limit or was canceled.
             */
            function backoffDone(requestWentThrough, status) {
                var resolve = self.resolve_;
                var reject = self.reject_;
                var connection = status.connection;
                if (status.wasSuccessCode) {
                    try {
                        var result = self.callback_(connection, connection.getResponseText());
                        if (isJustDef(result)) {
                            resolve(result);
                        }
                        else {
                            resolve();
                        }
                    }
                    catch (e) {
                        reject(e);
                    }
                }
                else {
                    if (connection !== null) {
                        var err = unknown();
                        err.serverResponse = connection.getResponseText();
                        if (self.errorCallback_) {
                            reject(self.errorCallback_(connection, err));
                        }
                        else {
                            reject(err);
                        }
                    }
                    else {
                        if (status.canceled) {
                            var err = self.appDelete_ ? appDeleted() : canceled();
                            reject(err);
                        }
                        else {
                            var err = retryLimitExceeded();
                            reject(err);
                        }
                    }
                }
            }
            if (this.canceled_) {
                backoffDone(false, new RequestEndStatus(false, null, true));
            }
            else {
                this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
            }
        };
        /** @inheritDoc */
        NetworkRequest.prototype.getPromise = function () {
            return this.promise_;
        };
        /** @inheritDoc */
        NetworkRequest.prototype.cancel = function (appDelete) {
            this.canceled_ = true;
            this.appDelete_ = appDelete || false;
            if (this.backoffId_ !== null) {
                stop(this.backoffId_);
            }
            if (this.pendingConnection_ !== null) {
                this.pendingConnection_.abort();
            }
        };
        NetworkRequest.prototype.isRetryStatusCode_ = function (status) {
            // The codes for which to retry came from this page:
            // https://cloud.google.com/storage/docs/exponential-backoff
            var isFiveHundredCode = status >= 500 && status < 600;
            var extraRetryCodes = [
                // Request Timeout: web server didn't receive full request in time.
                408,
                // Too Many Requests: you're getting rate-limited, basically.
                429
            ];
            var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
            var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
            return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
        };
        return NetworkRequest;
    }());
    /**
     * A collection of information about the result of a network request.
     * @param opt_canceled - Defaults to false.
     */
    var RequestEndStatus = /** @class */ (function () {
        function RequestEndStatus(wasSuccessCode, connection, canceled) {
            this.wasSuccessCode = wasSuccessCode;
            this.connection = connection;
            this.canceled = !!canceled;
        }
        return RequestEndStatus;
    }());
    function addAuthHeader_(headers, authToken) {
        if (authToken !== null && authToken.length > 0) {
            headers['Authorization'] = 'Firebase ' + authToken;
        }
    }
    function addVersionHeader_(headers, firebaseVersion) {
        headers['X-Firebase-Storage-Version'] =
            'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');
    }
    function addGmpidHeader_(headers, appId) {
        if (appId) {
            headers['X-Firebase-GMPID'] = appId;
        }
    }
    function addAppCheckHeader_(headers, appCheckToken) {
        if (appCheckToken !== null) {
            headers['X-Firebase-AppCheck'] = appCheckToken;
        }
    }
    function makeRequest(requestInfo, appId, authToken, appCheckToken, pool, firebaseVersion) {
        var queryPart = makeQueryString(requestInfo.urlParams);
        var url = requestInfo.url + queryPart;
        var headers = Object.assign({}, requestInfo.headers);
        addGmpidHeader_(headers, appId);
        addAuthHeader_(headers, authToken);
        addVersionHeader_(headers, firebaseVersion);
        addAppCheckHeader_(headers, appCheckToken);
        return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getBlobBuilder() {
        if (typeof BlobBuilder !== 'undefined') {
            return BlobBuilder;
        }
        else if (typeof WebKitBlobBuilder !== 'undefined') {
            return WebKitBlobBuilder;
        }
        else {
            return undefined;
        }
    }
    /**
     * Concatenates one or more values together and converts them to a Blob.
     *
     * @param args The values that will make up the resulting blob.
     * @return The blob.
     */
    function getBlob() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var BlobBuilder = getBlobBuilder();
        if (BlobBuilder !== undefined) {
            var bb = new BlobBuilder();
            for (var i = 0; i < args.length; i++) {
                bb.append(args[i]);
            }
            return bb.getBlob();
        }
        else {
            if (isNativeBlobDefined()) {
                return new Blob(args);
            }
            else {
                throw new FirebaseStorageError("unsupported-environment" /* UNSUPPORTED_ENVIRONMENT */, "This browser doesn't seem to support creating Blobs");
            }
        }
    }
    /**
     * Slices the blob. The returned blob contains data from the start byte
     * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
     *
     * @param blob The blob to be sliced.
     * @param start Index of the starting byte.
     * @param end Index of the ending byte.
     * @return The blob slice or null if not supported.
     */
    function sliceBlob(blob, start, end) {
        if (blob.webkitSlice) {
            return blob.webkitSlice(start, end);
        }
        else if (blob.mozSlice) {
            return blob.mozSlice(start, end);
        }
        else if (blob.slice) {
            return blob.slice(start, end);
        }
        return null;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param opt_elideCopy - If true, doesn't copy mutable input data
     *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
     *     modified after this blob's construction.
     *
     * @internal
     */
    var FbsBlob = /** @class */ (function () {
        function FbsBlob(data, elideCopy) {
            var size = 0;
            var blobType = '';
            if (isNativeBlob(data)) {
                this.data_ = data;
                size = data.size;
                blobType = data.type;
            }
            else if (data instanceof ArrayBuffer) {
                if (elideCopy) {
                    this.data_ = new Uint8Array(data);
                }
                else {
                    this.data_ = new Uint8Array(data.byteLength);
                    this.data_.set(new Uint8Array(data));
                }
                size = this.data_.length;
            }
            else if (data instanceof Uint8Array) {
                if (elideCopy) {
                    this.data_ = data;
                }
                else {
                    this.data_ = new Uint8Array(data.length);
                    this.data_.set(data);
                }
                size = data.length;
            }
            this.size_ = size;
            this.type_ = blobType;
        }
        FbsBlob.prototype.size = function () {
            return this.size_;
        };
        FbsBlob.prototype.type = function () {
            return this.type_;
        };
        FbsBlob.prototype.slice = function (startByte, endByte) {
            if (isNativeBlob(this.data_)) {
                var realBlob = this.data_;
                var sliced = sliceBlob(realBlob, startByte, endByte);
                if (sliced === null) {
                    return null;
                }
                return new FbsBlob(sliced);
            }
            else {
                var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
                return new FbsBlob(slice, true);
            }
        };
        FbsBlob.getBlob = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (isNativeBlobDefined()) {
                var blobby = args.map(function (val) {
                    if (val instanceof FbsBlob) {
                        return val.data_;
                    }
                    else {
                        return val;
                    }
                });
                return new FbsBlob(getBlob.apply(null, blobby));
            }
            else {
                var uint8Arrays = args.map(function (val) {
                    if (isString(val)) {
                        return dataFromString(StringFormat.RAW, val).data;
                    }
                    else {
                        // Blobs don't exist, so this has to be a Uint8Array.
                        return val.data_;
                    }
                });
                var finalLength_1 = 0;
                uint8Arrays.forEach(function (array) {
                    finalLength_1 += array.byteLength;
                });
                var merged_1 = new Uint8Array(finalLength_1);
                var index_1 = 0;
                uint8Arrays.forEach(function (array) {
                    for (var i = 0; i < array.length; i++) {
                        merged_1[index_1++] = array[i];
                    }
                });
                return new FbsBlob(merged_1, true);
            }
        };
        FbsBlob.prototype.uploadData = function () {
            return this.data_;
        };
        return FbsBlob;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns the Object resulting from parsing the given JSON, or null if the
     * given string does not represent a JSON object.
     */
    function jsonObjectOrNull(s) {
        var obj;
        try {
            obj = JSON.parse(s);
        }
        catch (e) {
            return null;
        }
        if (isNonArrayObject(obj)) {
            return obj;
        }
        else {
            return null;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Contains helper methods for manipulating paths.
     */
    /**
     * @return Null if the path is already at the root.
     */
    function parent(path) {
        if (path.length === 0) {
            return null;
        }
        var index = path.lastIndexOf('/');
        if (index === -1) {
            return '';
        }
        var newPath = path.slice(0, index);
        return newPath;
    }
    function child(path, childPath) {
        var canonicalChildPath = childPath
            .split('/')
            .filter(function (component) { return component.length > 0; })
            .join('/');
        if (path.length === 0) {
            return canonicalChildPath;
        }
        else {
            return path + '/' + canonicalChildPath;
        }
    }
    /**
     * Returns the last component of a path.
     * '/foo/bar' -> 'bar'
     * '/foo/bar/baz/' -> 'baz/'
     * '/a' -> 'a'
     */
    function lastComponent(path) {
        var index = path.lastIndexOf('/', path.length - 2);
        if (index === -1) {
            return path;
        }
        else {
            return path.slice(index + 1);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function noXform_(metadata, value) {
        return value;
    }
    var Mapping = /** @class */ (function () {
        function Mapping(server, local, writable, xform) {
            this.server = server;
            this.local = local || server;
            this.writable = !!writable;
            this.xform = xform || noXform_;
        }
        return Mapping;
    }());
    var mappings_ = null;
    function xformPath(fullPath) {
        if (!isString(fullPath) || fullPath.length < 2) {
            return fullPath;
        }
        else {
            return lastComponent(fullPath);
        }
    }
    function getMappings() {
        if (mappings_) {
            return mappings_;
        }
        var mappings = [];
        mappings.push(new Mapping('bucket'));
        mappings.push(new Mapping('generation'));
        mappings.push(new Mapping('metageneration'));
        mappings.push(new Mapping('name', 'fullPath', true));
        function mappingsXformPath(_metadata, fullPath) {
            return xformPath(fullPath);
        }
        var nameMapping = new Mapping('name');
        nameMapping.xform = mappingsXformPath;
        mappings.push(nameMapping);
        /**
         * Coerces the second param to a number, if it is defined.
         */
        function xformSize(_metadata, size) {
            if (size !== undefined) {
                return Number(size);
            }
            else {
                return size;
            }
        }
        var sizeMapping = new Mapping('size');
        sizeMapping.xform = xformSize;
        mappings.push(sizeMapping);
        mappings.push(new Mapping('timeCreated'));
        mappings.push(new Mapping('updated'));
        mappings.push(new Mapping('md5Hash', null, true));
        mappings.push(new Mapping('cacheControl', null, true));
        mappings.push(new Mapping('contentDisposition', null, true));
        mappings.push(new Mapping('contentEncoding', null, true));
        mappings.push(new Mapping('contentLanguage', null, true));
        mappings.push(new Mapping('contentType', null, true));
        mappings.push(new Mapping('metadata', 'customMetadata', true));
        mappings_ = mappings;
        return mappings_;
    }
    function addRef(metadata, service) {
        function generateRef() {
            var bucket = metadata['bucket'];
            var path = metadata['fullPath'];
            var loc = new Location(bucket, path);
            return service._makeStorageReference(loc);
        }
        Object.defineProperty(metadata, 'ref', { get: generateRef });
    }
    function fromResource(service, resource, mappings) {
        var metadata = {};
        metadata['type'] = 'file';
        var len = mappings.length;
        for (var i = 0; i < len; i++) {
            var mapping = mappings[i];
            metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
        }
        addRef(metadata, service);
        return metadata;
    }
    function fromResourceString(service, resourceString, mappings) {
        var obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        var resource = obj;
        return fromResource(service, resource, mappings);
    }
    function downloadUrlFromResourceString(metadata, resourceString, host) {
        var obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        if (!isString(obj['downloadTokens'])) {
            // This can happen if objects are uploaded through GCS and retrieved
            // through list, so we don't want to throw an Error.
            return null;
        }
        var tokens = obj['downloadTokens'];
        if (tokens.length === 0) {
            return null;
        }
        var encode = encodeURIComponent;
        var tokensList = tokens.split(',');
        var urls = tokensList.map(function (token) {
            var bucket = metadata['bucket'];
            var path = metadata['fullPath'];
            var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
            var base = makeUrl(urlPart, host);
            var queryString = makeQueryString({
                alt: 'media',
                token: token
            });
            return base + queryString;
        });
        return urls[0];
    }
    function toResourceString(metadata, mappings) {
        var resource = {};
        var len = mappings.length;
        for (var i = 0; i < len; i++) {
            var mapping = mappings[i];
            if (mapping.writable) {
                resource[mapping.server] = metadata[mapping.local];
            }
        }
        return JSON.stringify(resource);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PREFIXES_KEY = 'prefixes';
    var ITEMS_KEY = 'items';
    function fromBackendResponse(service, bucket, resource) {
        var listResult = {
            prefixes: [],
            items: [],
            nextPageToken: resource['nextPageToken']
        };
        if (resource[PREFIXES_KEY]) {
            for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {
                var path = _a[_i];
                var pathWithoutTrailingSlash = path.replace(/\/$/, '');
                var reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
                listResult.prefixes.push(reference);
            }
        }
        if (resource[ITEMS_KEY]) {
            for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {
                var item = _c[_b];
                var reference = service._makeStorageReference(new Location(bucket, item['name']));
                listResult.items.push(reference);
            }
        }
        return listResult;
    }
    function fromResponseString(service, bucket, resourceString) {
        var obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        var resource = obj;
        return fromBackendResponse(service, bucket, resource);
    }

    var RequestInfo = /** @class */ (function () {
        function RequestInfo(url, method, 
        /**
         * Returns the value with which to resolve the request's promise. Only called
         * if the request is successful. Throw from this function to reject the
         * returned Request's promise with the thrown error.
         * Note: The XhrIo passed to this function may be reused after this callback
         * returns. Do not keep a reference to it in any way.
         */
        handler, timeout) {
            this.url = url;
            this.method = method;
            this.handler = handler;
            this.timeout = timeout;
            this.urlParams = {};
            this.headers = {};
            this.body = null;
            this.errorHandler = null;
            /**
             * Called with the current number of bytes uploaded and total size (-1 if not
             * computable) of the request body (i.e. used to report upload progress).
             */
            this.progressCallback = null;
            this.successCodes = [200];
            this.additionalRetryCodes = [];
        }
        return RequestInfo;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Throws the UNKNOWN FirebaseStorageError if cndn is false.
     */
    function handlerCheck(cndn) {
        if (!cndn) {
            throw unknown();
        }
    }
    function metadataHandler(service, mappings) {
        function handler(xhr, text) {
            var metadata = fromResourceString(service, text, mappings);
            handlerCheck(metadata !== null);
            return metadata;
        }
        return handler;
    }
    function listHandler(service, bucket) {
        function handler(xhr, text) {
            var listResult = fromResponseString(service, bucket, text);
            handlerCheck(listResult !== null);
            return listResult;
        }
        return handler;
    }
    function downloadUrlHandler(service, mappings) {
        function handler(xhr, text) {
            var metadata = fromResourceString(service, text, mappings);
            handlerCheck(metadata !== null);
            return downloadUrlFromResourceString(metadata, text, service.host);
        }
        return handler;
    }
    function sharedErrorHandler(location) {
        function errorHandler(xhr, err) {
            var newErr;
            if (xhr.getStatus() === 401) {
                if (
                // This exact message string is the only consistent part of the
                // server's error response that identifies it as an App Check error.
                xhr.getResponseText().includes('Firebase App Check token is invalid')) {
                    newErr = unauthorizedApp();
                }
                else {
                    newErr = unauthenticated();
                }
            }
            else {
                if (xhr.getStatus() === 402) {
                    newErr = quotaExceeded(location.bucket);
                }
                else {
                    if (xhr.getStatus() === 403) {
                        newErr = unauthorized(location.path);
                    }
                    else {
                        newErr = err;
                    }
                }
            }
            newErr.serverResponse = err.serverResponse;
            return newErr;
        }
        return errorHandler;
    }
    function objectErrorHandler(location) {
        var shared = sharedErrorHandler(location);
        function errorHandler(xhr, err) {
            var newErr = shared(xhr, err);
            if (xhr.getStatus() === 404) {
                newErr = objectNotFound(location.path);
            }
            newErr.serverResponse = err.serverResponse;
            return newErr;
        }
        return errorHandler;
    }
    function getMetadata$2(service, location, mappings) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart, service.host);
        var method = 'GET';
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function list$2(service, location, delimiter, pageToken, maxResults) {
        var urlParams = {};
        if (location.isRoot) {
            urlParams['prefix'] = '';
        }
        else {
            urlParams['prefix'] = location.path + '/';
        }
        if (delimiter && delimiter.length > 0) {
            urlParams['delimiter'] = delimiter;
        }
        if (pageToken) {
            urlParams['pageToken'] = pageToken;
        }
        if (maxResults) {
            urlParams['maxResults'] = maxResults;
        }
        var urlPart = location.bucketOnlyServerUrl();
        var url = makeUrl(urlPart, service.host);
        var method = 'GET';
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    function getDownloadUrl(service, location, mappings) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart, service.host);
        var method = 'GET';
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function updateMetadata$2(service, location, metadata, mappings) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart, service.host);
        var method = 'PATCH';
        var body = toResourceString(metadata, mappings);
        var headers = { 'Content-Type': 'application/json; charset=utf-8' };
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.headers = headers;
        requestInfo.body = body;
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function deleteObject$2(service, location) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart, service.host);
        var method = 'DELETE';
        var timeout = service.maxOperationRetryTime;
        function handler(_xhr, _text) { }
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.successCodes = [200, 204];
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function determineContentType_(metadata, blob) {
        return ((metadata && metadata['contentType']) ||
            (blob && blob.type()) ||
            'application/octet-stream');
    }
    function metadataForUpload_(location, blob, metadata) {
        var metadataClone = Object.assign({}, metadata);
        metadataClone['fullPath'] = location.path;
        metadataClone['size'] = blob.size();
        if (!metadataClone['contentType']) {
            metadataClone['contentType'] = determineContentType_(null, blob);
        }
        return metadataClone;
    }
    /**
     * Prepare RequestInfo for uploads as Content-Type: multipart.
     */
    function multipartUpload(service, location, mappings, blob, metadata) {
        var urlPart = location.bucketOnlyServerUrl();
        var headers = {
            'X-Goog-Upload-Protocol': 'multipart'
        };
        function genBoundary() {
            var str = '';
            for (var i = 0; i < 2; i++) {
                str = str + Math.random().toString().slice(2);
            }
            return str;
        }
        var boundary = genBoundary();
        headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
        var metadata_ = metadataForUpload_(location, blob, metadata);
        var metadataString = toResourceString(metadata_, mappings);
        var preBlobPart = '--' +
            boundary +
            '\r\n' +
            'Content-Type: application/json; charset=utf-8\r\n\r\n' +
            metadataString +
            '\r\n--' +
            boundary +
            '\r\n' +
            'Content-Type: ' +
            metadata_['contentType'] +
            '\r\n\r\n';
        var postBlobPart = '\r\n--' + boundary + '--';
        var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
        if (body === null) {
            throw cannotSliceBlob();
        }
        var urlParams = { name: metadata_['fullPath'] };
        var url = makeUrl(urlPart, service.host);
        var method = 'POST';
        var timeout = service.maxUploadRetryTime;
        var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.headers = headers;
        requestInfo.body = body.uploadData();
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * @param current The number of bytes that have been uploaded so far.
     * @param total The total number of bytes in the upload.
     * @param opt_finalized True if the server has finished the upload.
     * @param opt_metadata The upload metadata, should
     *     only be passed if opt_finalized is true.
     */
    var ResumableUploadStatus = /** @class */ (function () {
        function ResumableUploadStatus(current, total, finalized, metadata) {
            this.current = current;
            this.total = total;
            this.finalized = !!finalized;
            this.metadata = metadata || null;
        }
        return ResumableUploadStatus;
    }());
    function checkResumeHeader_(xhr, allowed) {
        var status = null;
        try {
            status = xhr.getResponseHeader('X-Goog-Upload-Status');
        }
        catch (e) {
            handlerCheck(false);
        }
        var allowedStatus = allowed || ['active'];
        handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
        return status;
    }
    function createResumableUpload(service, location, mappings, blob, metadata) {
        var urlPart = location.bucketOnlyServerUrl();
        var metadataForUpload = metadataForUpload_(location, blob, metadata);
        var urlParams = { name: metadataForUpload['fullPath'] };
        var url = makeUrl(urlPart, service.host);
        var method = 'POST';
        var headers = {
            'X-Goog-Upload-Protocol': 'resumable',
            'X-Goog-Upload-Command': 'start',
            'X-Goog-Upload-Header-Content-Length': "" + blob.size(),
            'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],
            'Content-Type': 'application/json; charset=utf-8'
        };
        var body = toResourceString(metadataForUpload, mappings);
        var timeout = service.maxUploadRetryTime;
        function handler(xhr) {
            checkResumeHeader_(xhr);
            var url;
            try {
                url = xhr.getResponseHeader('X-Goog-Upload-URL');
            }
            catch (e) {
                handlerCheck(false);
            }
            handlerCheck(isString(url));
            return url;
        }
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.headers = headers;
        requestInfo.body = body;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * @param url From a call to fbs.requests.createResumableUpload.
     */
    function getResumableUploadStatus(service, location, url, blob) {
        var headers = { 'X-Goog-Upload-Command': 'query' };
        function handler(xhr) {
            var status = checkResumeHeader_(xhr, ['active', 'final']);
            var sizeString = null;
            try {
                sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
            }
            catch (e) {
                handlerCheck(false);
            }
            if (!sizeString) {
                // null or empty string
                handlerCheck(false);
            }
            var size = Number(sizeString);
            handlerCheck(!isNaN(size));
            return new ResumableUploadStatus(size, blob.size(), status === 'final');
        }
        var method = 'POST';
        var timeout = service.maxUploadRetryTime;
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.headers = headers;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * Any uploads via the resumable upload API must transfer a number of bytes
     * that is a multiple of this number.
     */
    var RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;
    /**
     * @param url From a call to fbs.requests.createResumableUpload.
     * @param chunkSize Number of bytes to upload.
     * @param status The previous status.
     *     If not passed or null, we start from the beginning.
     * @throws fbs.Error If the upload is already complete, the passed in status
     *     has a final size inconsistent with the blob, or the blob cannot be sliced
     *     for upload.
     */
    function continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {
        // TODO(andysoto): standardize on internal asserts
        // assert(!(opt_status && opt_status.finalized));
        var status_ = new ResumableUploadStatus(0, 0);
        if (status) {
            status_.current = status.current;
            status_.total = status.total;
        }
        else {
            status_.current = 0;
            status_.total = blob.size();
        }
        if (blob.size() !== status_.total) {
            throw serverFileWrongSize();
        }
        var bytesLeft = status_.total - status_.current;
        var bytesToUpload = bytesLeft;
        if (chunkSize > 0) {
            bytesToUpload = Math.min(bytesToUpload, chunkSize);
        }
        var startByte = status_.current;
        var endByte = startByte + bytesToUpload;
        var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
        var headers = {
            'X-Goog-Upload-Command': uploadCommand,
            'X-Goog-Upload-Offset': "" + status_.current
        };
        var body = blob.slice(startByte, endByte);
        if (body === null) {
            throw cannotSliceBlob();
        }
        function handler(xhr, text) {
            // TODO(andysoto): Verify the MD5 of each uploaded range:
            // the 'x-range-md5' header comes back with status code 308 responses.
            // We'll only be able to bail out though, because you can't re-upload a
            // range that you previously uploaded.
            var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
            var newCurrent = status_.current + bytesToUpload;
            var size = blob.size();
            var metadata;
            if (uploadStatus === 'final') {
                metadata = metadataHandler(service, mappings)(xhr, text);
            }
            else {
                metadata = null;
            }
            return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
        }
        var method = 'POST';
        var timeout = service.maxUploadRetryTime;
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.headers = headers;
        requestInfo.body = body.uploadData();
        requestInfo.progressCallback = progressCallback || null;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Observer = /** @class */ (function () {
        function Observer(nextOrObserver, error, complete) {
            var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;
            if (asFunctions) {
                this.next = nextOrObserver;
                this.error = error;
                this.complete = complete;
            }
            else {
                var observer = nextOrObserver;
                this.next = observer.next;
                this.error = observer.error;
                this.complete = observer.complete;
            }
        }
        return Observer;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a function that invokes f with its arguments asynchronously as a
     * microtask, i.e. as soon as possible after the current script returns back
     * into browser code.
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    function async(f) {
        return function () {
            var argsToForward = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                argsToForward[_i] = arguments[_i];
            }
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.resolve().then(function () { return f.apply(void 0, argsToForward); });
        };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a blob being uploaded. Can be used to pause/resume/cancel the
     * upload and manage callbacks for various events.
     * @internal
     */
    var UploadTask = /** @class */ (function () {
        /**
         * @param ref - The firebaseStorage.Reference object this task came
         *     from, untyped to avoid cyclic dependencies.
         * @param blob - The blob to upload.
         */
        function UploadTask(ref, blob, metadata) {
            var _this = this;
            if (metadata === void 0) { metadata = null; }
            /**
             * Number of bytes transferred so far.
             */
            this._transferred = 0;
            this._needToFetchStatus = false;
            this._needToFetchMetadata = false;
            this._observers = [];
            this._error = undefined;
            this._uploadUrl = undefined;
            this._request = undefined;
            this._chunkMultiplier = 1;
            this._resolve = undefined;
            this._reject = undefined;
            this._ref = ref;
            this._blob = blob;
            this._metadata = metadata;
            this._mappings = getMappings();
            this._resumable = this._shouldDoResumable(this._blob);
            this._state = "running" /* RUNNING */;
            this._errorHandler = function (error) {
                _this._request = undefined;
                _this._chunkMultiplier = 1;
                if (error._codeEquals("canceled" /* CANCELED */)) {
                    _this._needToFetchStatus = true;
                    _this.completeTransitions_();
                }
                else {
                    _this._error = error;
                    _this._transition("error" /* ERROR */);
                }
            };
            this._metadataErrorHandler = function (error) {
                _this._request = undefined;
                if (error._codeEquals("canceled" /* CANCELED */)) {
                    _this.completeTransitions_();
                }
                else {
                    _this._error = error;
                    _this._transition("error" /* ERROR */);
                }
            };
            this._promise = new Promise(function (resolve, reject) {
                _this._resolve = resolve;
                _this._reject = reject;
                _this._start();
            });
            // Prevent uncaught rejections on the internal promise from bubbling out
            // to the top level with a dummy handler.
            this._promise.then(null, function () { });
        }
        UploadTask.prototype._makeProgressCallback = function () {
            var _this = this;
            var sizeBefore = this._transferred;
            return function (loaded) { return _this._updateProgress(sizeBefore + loaded); };
        };
        UploadTask.prototype._shouldDoResumable = function (blob) {
            return blob.size() > 256 * 1024;
        };
        UploadTask.prototype._start = function () {
            if (this._state !== "running" /* RUNNING */) {
                // This can happen if someone pauses us in a resume callback, for example.
                return;
            }
            if (this._request !== undefined) {
                return;
            }
            if (this._resumable) {
                if (this._uploadUrl === undefined) {
                    this._createResumable();
                }
                else {
                    if (this._needToFetchStatus) {
                        this._fetchStatus();
                    }
                    else {
                        if (this._needToFetchMetadata) {
                            // Happens if we miss the metadata on upload completion.
                            this._fetchMetadata();
                        }
                        else {
                            this._continueUpload();
                        }
                    }
                }
            }
            else {
                this._oneShotUpload();
            }
        };
        UploadTask.prototype._resolveToken = function (callback) {
            var _this = this;
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.all([
                this._ref.storage._getAuthToken(),
                this._ref.storage._getAppCheckToken()
            ]).then(function (_a) {
                var authToken = _a[0], appCheckToken = _a[1];
                switch (_this._state) {
                    case "running" /* RUNNING */:
                        callback(authToken, appCheckToken);
                        break;
                    case "canceling" /* CANCELING */:
                        _this._transition("canceled" /* CANCELED */);
                        break;
                    case "pausing" /* PAUSING */:
                        _this._transition("paused" /* PAUSED */);
                        break;
                }
            });
        };
        // TODO(andysoto): assert false
        UploadTask.prototype._createResumable = function () {
            var _this = this;
            this._resolveToken(function (authToken, appCheckToken) {
                var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);
                var createRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
                _this._request = createRequest;
                createRequest.getPromise().then(function (url) {
                    _this._request = undefined;
                    _this._uploadUrl = url;
                    _this._needToFetchStatus = false;
                    _this.completeTransitions_();
                }, _this._errorHandler);
            });
        };
        UploadTask.prototype._fetchStatus = function () {
            var _this = this;
            // TODO(andysoto): assert(this.uploadUrl_ !== null);
            var url = this._uploadUrl;
            this._resolveToken(function (authToken, appCheckToken) {
                var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);
                var statusRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
                _this._request = statusRequest;
                statusRequest.getPromise().then(function (status) {
                    status = status;
                    _this._request = undefined;
                    _this._updateProgress(status.current);
                    _this._needToFetchStatus = false;
                    if (status.finalized) {
                        _this._needToFetchMetadata = true;
                    }
                    _this.completeTransitions_();
                }, _this._errorHandler);
            });
        };
        UploadTask.prototype._continueUpload = function () {
            var _this = this;
            var chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
            var status = new ResumableUploadStatus(this._transferred, this._blob.size());
            // TODO(andysoto): assert(this.uploadUrl_ !== null);
            var url = this._uploadUrl;
            this._resolveToken(function (authToken, appCheckToken) {
                var requestInfo;
                try {
                    requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());
                }
                catch (e) {
                    _this._error = e;
                    _this._transition("error" /* ERROR */);
                    return;
                }
                var uploadRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
                _this._request = uploadRequest;
                uploadRequest.getPromise().then(function (newStatus) {
                    _this._increaseMultiplier();
                    _this._request = undefined;
                    _this._updateProgress(newStatus.current);
                    if (newStatus.finalized) {
                        _this._metadata = newStatus.metadata;
                        _this._transition("success" /* SUCCESS */);
                    }
                    else {
                        _this.completeTransitions_();
                    }
                }, _this._errorHandler);
            });
        };
        UploadTask.prototype._increaseMultiplier = function () {
            var currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
            // Max chunk size is 32M.
            if (currentSize < 32 * 1024 * 1024) {
                this._chunkMultiplier *= 2;
            }
        };
        UploadTask.prototype._fetchMetadata = function () {
            var _this = this;
            this._resolveToken(function (authToken, appCheckToken) {
                var requestInfo = getMetadata$2(_this._ref.storage, _this._ref._location, _this._mappings);
                var metadataRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
                _this._request = metadataRequest;
                metadataRequest.getPromise().then(function (metadata) {
                    _this._request = undefined;
                    _this._metadata = metadata;
                    _this._transition("success" /* SUCCESS */);
                }, _this._metadataErrorHandler);
            });
        };
        UploadTask.prototype._oneShotUpload = function () {
            var _this = this;
            this._resolveToken(function (authToken, appCheckToken) {
                var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);
                var multipartRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
                _this._request = multipartRequest;
                multipartRequest.getPromise().then(function (metadata) {
                    _this._request = undefined;
                    _this._metadata = metadata;
                    _this._updateProgress(_this._blob.size());
                    _this._transition("success" /* SUCCESS */);
                }, _this._errorHandler);
            });
        };
        UploadTask.prototype._updateProgress = function (transferred) {
            var old = this._transferred;
            this._transferred = transferred;
            // A progress update can make the "transferred" value smaller (e.g. a
            // partial upload not completed by server, after which the "transferred"
            // value may reset to the value at the beginning of the request).
            if (this._transferred !== old) {
                this._notifyObservers();
            }
        };
        UploadTask.prototype._transition = function (state) {
            if (this._state === state) {
                return;
            }
            switch (state) {
                case "canceling" /* CANCELING */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING);
                    this._state = state;
                    if (this._request !== undefined) {
                        this._request.cancel();
                    }
                    break;
                case "pausing" /* PAUSING */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING);
                    this._state = state;
                    if (this._request !== undefined) {
                        this._request.cancel();
                    }
                    break;
                case "running" /* RUNNING */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSED ||
                    //        this.state_ === InternalTaskState.PAUSING);
                    var wasPaused = this._state === "paused" /* PAUSED */;
                    this._state = state;
                    if (wasPaused) {
                        this._notifyObservers();
                        this._start();
                    }
                    break;
                case "paused" /* PAUSED */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSING);
                    this._state = state;
                    this._notifyObservers();
                    break;
                case "canceled" /* CANCELED */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSED ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this._error = canceled();
                    this._state = state;
                    this._notifyObservers();
                    break;
                case "error" /* ERROR */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this._state = state;
                    this._notifyObservers();
                    break;
                case "success" /* SUCCESS */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this._state = state;
                    this._notifyObservers();
                    break;
            }
        };
        UploadTask.prototype.completeTransitions_ = function () {
            switch (this._state) {
                case "pausing" /* PAUSING */:
                    this._transition("paused" /* PAUSED */);
                    break;
                case "canceling" /* CANCELING */:
                    this._transition("canceled" /* CANCELED */);
                    break;
                case "running" /* RUNNING */:
                    this._start();
                    break;
            }
        };
        Object.defineProperty(UploadTask.prototype, "snapshot", {
            /**
             * A snapshot of the current task state.
             */
            get: function () {
                var externalState = taskStateFromInternalTaskState(this._state);
                return {
                    bytesTransferred: this._transferred,
                    totalBytes: this._blob.size(),
                    state: externalState,
                    metadata: this._metadata,
                    task: this,
                    ref: this._ref
                };
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds a callback for an event.
         * @param type - The type of event to listen for.
         * @param nextOrObserver -
         *     The `next` function, which gets called for each item in
         *     the event stream, or an observer object with some or all of these three
         *     properties (`next`, `error`, `complete`).
         * @param error - A function that gets called with a `FirebaseStorageError`
         *     if the event stream ends due to an error.
         * @param completed - A function that gets called if the
         *     event stream ends normally.
         * @returns
         *     If only the event argument is passed, returns a function you can use to
         *     add callbacks (see the examples above). If more than just the event
         *     argument is passed, returns a function you can call to unregister the
         *     callbacks.
         */
        UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
            var _this = this;
            var observer = new Observer(nextOrObserver, error, completed);
            this._addObserver(observer);
            return function () {
                _this._removeObserver(observer);
            };
        };
        /**
         * This object behaves like a Promise, and resolves with its snapshot data
         * when the upload completes.
         * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.
         * @param onRejected - The rejection callback.
         */
        UploadTask.prototype.then = function (onFulfilled, onRejected) {
            // These casts are needed so that TypeScript can infer the types of the
            // resulting Promise.
            return this._promise.then(onFulfilled, onRejected);
        };
        /**
         * Equivalent to calling `then(null, onRejected)`.
         */
        UploadTask.prototype.catch = function (onRejected) {
            return this.then(null, onRejected);
        };
        /**
         * Adds the given observer.
         */
        UploadTask.prototype._addObserver = function (observer) {
            this._observers.push(observer);
            this._notifyObserver(observer);
        };
        /**
         * Removes the given observer.
         */
        UploadTask.prototype._removeObserver = function (observer) {
            var i = this._observers.indexOf(observer);
            if (i !== -1) {
                this._observers.splice(i, 1);
            }
        };
        UploadTask.prototype._notifyObservers = function () {
            var _this = this;
            this._finishPromise();
            var observers = this._observers.slice();
            observers.forEach(function (observer) {
                _this._notifyObserver(observer);
            });
        };
        UploadTask.prototype._finishPromise = function () {
            if (this._resolve !== undefined) {
                var triggered = true;
                switch (taskStateFromInternalTaskState(this._state)) {
                    case TaskState.SUCCESS:
                        async(this._resolve.bind(null, this.snapshot))();
                        break;
                    case TaskState.CANCELED:
                    case TaskState.ERROR:
                        var toCall = this._reject;
                        async(toCall.bind(null, this._error))();
                        break;
                    default:
                        triggered = false;
                        break;
                }
                if (triggered) {
                    this._resolve = undefined;
                    this._reject = undefined;
                }
            }
        };
        UploadTask.prototype._notifyObserver = function (observer) {
            var externalState = taskStateFromInternalTaskState(this._state);
            switch (externalState) {
                case TaskState.RUNNING:
                case TaskState.PAUSED:
                    if (observer.next) {
                        async(observer.next.bind(observer, this.snapshot))();
                    }
                    break;
                case TaskState.SUCCESS:
                    if (observer.complete) {
                        async(observer.complete.bind(observer))();
                    }
                    break;
                case TaskState.CANCELED:
                case TaskState.ERROR:
                    if (observer.error) {
                        async(observer.error.bind(observer, this._error))();
                    }
                    break;
                default:
                    // TODO(andysoto): assert(false);
                    if (observer.error) {
                        async(observer.error.bind(observer, this._error))();
                    }
            }
        };
        /**
         * Resumes a paused task. Has no effect on a currently running or failed task.
         * @returns True if the operation took effect, false if ignored.
         */
        UploadTask.prototype.resume = function () {
            var valid = this._state === "paused" /* PAUSED */ ||
                this._state === "pausing" /* PAUSING */;
            if (valid) {
                this._transition("running" /* RUNNING */);
            }
            return valid;
        };
        /**
         * Pauses a currently running task. Has no effect on a paused or failed task.
         * @returns True if the operation took effect, false if ignored.
         */
        UploadTask.prototype.pause = function () {
            var valid = this._state === "running" /* RUNNING */;
            if (valid) {
                this._transition("pausing" /* PAUSING */);
            }
            return valid;
        };
        /**
         * Cancels a currently running or paused task. Has no effect on a complete or
         * failed task.
         * @returns True if the operation took effect, false if ignored.
         */
        UploadTask.prototype.cancel = function () {
            var valid = this._state === "running" /* RUNNING */ ||
                this._state === "pausing" /* PAUSING */;
            if (valid) {
                this._transition("canceling" /* CANCELING */);
            }
            return valid;
        };
        return UploadTask;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides methods to interact with a bucket in the Firebase Storage service.
     * @internal
     * @param _location - An fbs.location, or the URL at
     *     which to base this object, in one of the following forms:
     *         gs://<bucket>/<object-path>
     *         http[s]://firebasestorage.googleapis.com/
     *                     <api-version>/b/<bucket>/o/<object-path>
     *     Any query or fragment strings will be ignored in the http[s]
     *     format. If no value is passed, the storage object will use a URL based on
     *     the project ID of the base firebase.App instance.
     */
    var Reference = /** @class */ (function () {
        function Reference(_service, location) {
            this._service = _service;
            if (location instanceof Location) {
                this._location = location;
            }
            else {
                this._location = Location.makeFromUrl(location, _service.host);
            }
        }
        /**
         * Returns the URL for the bucket and path this object references,
         *     in the form gs://<bucket>/<object-path>
         * @override
         */
        Reference.prototype.toString = function () {
            return 'gs://' + this._location.bucket + '/' + this._location.path;
        };
        Reference.prototype._newRef = function (service, location) {
            return new Reference(service, location);
        };
        Object.defineProperty(Reference.prototype, "root", {
            /**
             * A reference to the root of this object's bucket.
             */
            get: function () {
                var location = new Location(this._location.bucket, '');
                return this._newRef(this._service, location);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "bucket", {
            /**
             * The name of the bucket containing this reference's object.
             */
            get: function () {
                return this._location.bucket;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "fullPath", {
            /**
             * The full path of this object.
             */
            get: function () {
                return this._location.path;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "name", {
            /**
             * The short name of this object, which is the last component of the full path.
             * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
             */
            get: function () {
                return lastComponent(this._location.path);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "storage", {
            /**
             * The `StorageService` instance this `StorageReference` is associated with.
             */
            get: function () {
                return this._service;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "parent", {
            /**
             * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if
             * this reference is the root.
             */
            get: function () {
                var newPath = parent(this._location.path);
                if (newPath === null) {
                    return null;
                }
                var location = new Location(this._location.bucket, newPath);
                return new Reference(this._service, location);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Utility function to throw an error in methods that do not accept a root reference.
         */
        Reference.prototype._throwIfRoot = function (name) {
            if (this._location.path === '') {
                throw invalidRootOperation(name);
            }
        };
        return Reference;
    }());
    /**
     * Uploads data to this object's location.
     * The upload can be paused and resumed, and exposes progress updates.
     * @public
     * @param ref - StorageReference where data should be uploaded.
     * @param data - The data to upload.
     * @param metadata - Metadata for the newly uploaded data.
     * @returns An UploadTask
     */
    function uploadBytesResumable$1(ref, data, metadata) {
        ref._throwIfRoot('uploadBytesResumable');
        return new UploadTask(ref, new FbsBlob(data), metadata);
    }
    /**
     * List all items (files) and prefixes (folders) under this storage reference.
     *
     * This is a helper method for calling list() repeatedly until there are
     * no more results. The default pagination size is 1000.
     *
     * Note: The results may not be consistent if objects are changed while this
     * operation is running.
     *
     * Warning: listAll may potentially consume too many resources if there are
     * too many results.
     * @public
     * @param ref - StorageReference to get list from.
     *
     * @returns A Promise that resolves with all the items and prefixes under
     *      the current storage reference. `prefixes` contains references to
     *      sub-directories and `items` contains references to objects in this
     *      folder. `nextPageToken` is never returned.
     */
    function listAll$1(ref) {
        var accumulator = {
            prefixes: [],
            items: []
        };
        return listAllHelper(ref, accumulator).then(function () { return accumulator; });
    }
    /**
     * Separated from listAll because async functions can't use "arguments".
     * @param ref
     * @param accumulator
     * @param pageToken
     */
    function listAllHelper(ref, accumulator, pageToken) {
        return __awaiter(this, void 0, void 0, function () {
            var opt, nextPage;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        opt = {
                            // maxResults is 1000 by default.
                            pageToken: pageToken
                        };
                        return [4 /*yield*/, list$1(ref, opt)];
                    case 1:
                        nextPage = _c.sent();
                        (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);
                        (_b = accumulator.items).push.apply(_b, nextPage.items);
                        if (!(nextPage.nextPageToken != null)) return [3 /*break*/, 3];
                        return [4 /*yield*/, listAllHelper(ref, accumulator, nextPage.nextPageToken)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * List items (files) and prefixes (folders) under this storage reference.
     *
     * List API is only available for Firebase Rules Version 2.
     *
     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
     * delimited folder structure.
     * Refer to GCS's List API if you want to learn more.
     *
     * To adhere to Firebase Rules's Semantics, Firebase Storage does not
     * support objects whose paths end with "/" or contain two consecutive
     * "/"s. Firebase Storage List API will filter these unsupported objects.
     * list() may fail if there are too many unsupported objects in the bucket.
     * @public
     *
     * @param ref - StorageReference to get list from.
     * @param options - See ListOptions for details.
     * @returns A Promise that resolves with the items and prefixes.
     *      `prefixes` contains references to sub-folders and `items`
     *      contains references to objects in this folder. `nextPageToken`
     *      can be used to get the rest of the results.
     */
    function list$1(ref, options) {
        return __awaiter(this, void 0, void 0, function () {
            var op, requestInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (options != null) {
                            if (typeof options.maxResults === 'number') {
                                validateNumber('options.maxResults', 
                                /* minValue= */ 1, 
                                /* maxValue= */ 1000, options.maxResults);
                            }
                        }
                        op = options || {};
                        requestInfo = list$2(ref.storage, ref._location, 
                        /*delimiter= */ '/', op.pageToken, op.maxResults);
                        return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];
                    case 1: return [2 /*return*/, (_a.sent()).getPromise()];
                }
            });
        });
    }
    /**
     * A promise that resolves with the metadata for this object. If this
     * object doesn't exist or metadata cannot be retreived, the promise is
     * rejected.
     * @public
     * @param ref - StorageReference to get metadata from.
     */
    function getMetadata$1(ref) {
        return __awaiter(this, void 0, void 0, function () {
            var requestInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ref._throwIfRoot('getMetadata');
                        requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());
                        return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];
                    case 1: return [2 /*return*/, (_a.sent()).getPromise()];
                }
            });
        });
    }
    /**
     * Updates the metadata for this object.
     * @public
     * @param ref - StorageReference to update metadata for.
     * @param metadata - The new metadata for the object.
     *     Only values that have been explicitly set will be changed. Explicitly
     *     setting a value to null will remove the metadata.
     * @returns A promise that resolves
     *     with the new metadata for this object.
     *     See `firebaseStorage.Reference.prototype.getMetadata`
     */
    function updateMetadata$1(ref, metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var requestInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ref._throwIfRoot('updateMetadata');
                        requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());
                        return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];
                    case 1: return [2 /*return*/, (_a.sent()).getPromise()];
                }
            });
        });
    }
    /**
     * Returns the download URL for the given Reference.
     * @public
     * @returns A promise that resolves with the download
     *     URL for this object.
     */
    function getDownloadURL$1(ref) {
        return __awaiter(this, void 0, void 0, function () {
            var requestInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ref._throwIfRoot('getDownloadURL');
                        requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());
                        return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];
                    case 1: return [2 /*return*/, (_a.sent())
                            .getPromise()
                            .then(function (url) {
                            if (url === null) {
                                throw noDownloadURL();
                            }
                            return url;
                        })];
                }
            });
        });
    }
    /**
     * Deletes the object at this location.
     * @public
     * @param ref - StorageReference for object to delete.
     * @returns A promise that resolves if the deletion succeeds.
     */
    function deleteObject$1(ref) {
        return __awaiter(this, void 0, void 0, function () {
            var requestInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ref._throwIfRoot('deleteObject');
                        requestInfo = deleteObject$2(ref.storage, ref._location);
                        return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];
                    case 1: return [2 /*return*/, (_a.sent()).getPromise()];
                }
            });
        });
    }
    /**
     * Returns reference for object obtained by appending `childPath` to `ref`.
     *
     * @param ref - StorageReference to get child of.
     * @param childPath - Child path from provided ref.
     * @returns A reference to the object obtained by
     * appending childPath, removing any duplicate, beginning, or trailing
     * slashes.
     *
     */
    function _getChild$1(ref, childPath) {
        var newPath = child(ref._location.path, childPath);
        var location = new Location(ref._location.bucket, newPath);
        return new Reference(ref.storage, location);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function isUrl(path) {
        return /^[A-Za-z]+:\/\//.test(path);
    }
    /**
     * Returns a firebaseStorage.Reference for the given url.
     */
    function refFromURL(service, url) {
        return new Reference(service, url);
    }
    /**
     * Returns a firebaseStorage.Reference for the given path in the default
     * bucket.
     */
    function refFromPath(ref, path) {
        if (ref instanceof StorageService) {
            var service = ref;
            if (service._bucket == null) {
                throw noDefaultBucket();
            }
            var reference = new Reference(service, service._bucket);
            if (path != null) {
                return refFromPath(reference, path);
            }
            else {
                return reference;
            }
        }
        else {
            // ref is a Reference
            if (path !== undefined) {
                if (path.includes('..')) {
                    throw invalidArgument('`path` param cannot contain ".."');
                }
                return _getChild$1(ref, path);
            }
            else {
                return ref;
            }
        }
    }
    function ref$1(serviceOrRef, pathOrUrl) {
        if (pathOrUrl && isUrl(pathOrUrl)) {
            if (serviceOrRef instanceof StorageService) {
                return refFromURL(serviceOrRef, pathOrUrl);
            }
            else {
                throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');
            }
        }
        else {
            return refFromPath(serviceOrRef, pathOrUrl);
        }
    }
    function extractBucket(host, config) {
        var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];
        if (bucketString == null) {
            return null;
        }
        return Location.makeFromBucketSpec(bucketString, host);
    }
    function useStorageEmulator(storage, host, port) {
        storage.host = "http://" + host + ":" + port;
    }
    /**
     * A service that provides Firebase Storage Reference instances.
     * @public
     * @param opt_url - gs:// url to a custom Storage Bucket
     */
    var StorageService = /** @class */ (function () {
        function StorageService(
        /**
         * FirebaseApp associated with this StorageService instance.
         */
        app, _authProvider, 
        /**
         * @internal
         */
        _appCheckProvider, 
        /**
         * @internal
         */
        _pool, _url, _firebaseVersion) {
            this.app = app;
            this._authProvider = _authProvider;
            this._appCheckProvider = _appCheckProvider;
            this._pool = _pool;
            this._url = _url;
            this._firebaseVersion = _firebaseVersion;
            this._bucket = null;
            /**
             * This string can be in the formats:
             * - host
             * - host:port
             * - protocol://host:port
             */
            this._host = DEFAULT_HOST;
            this._appId = null;
            this._deleted = false;
            this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
            this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
            this._requests = new Set();
            if (_url != null) {
                this._bucket = Location.makeFromBucketSpec(_url, this._host);
            }
            else {
                this._bucket = extractBucket(this._host, this.app.options);
            }
        }
        Object.defineProperty(StorageService.prototype, "host", {
            get: function () {
                return this._host;
            },
            /**
             * Set host string for this service.
             * @param host - host string in the form of host, host:port,
             * or protocol://host:port
             */
            set: function (host) {
                this._host = host;
                if (this._url != null) {
                    this._bucket = Location.makeFromBucketSpec(this._url, host);
                }
                else {
                    this._bucket = extractBucket(host, this.app.options);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StorageService.prototype, "maxUploadRetryTime", {
            /**
             * The maximum time to retry uploads in milliseconds.
             */
            get: function () {
                return this._maxUploadRetryTime;
            },
            set: function (time) {
                validateNumber('time', 
                /* minValue=*/ 0, 
                /* maxValue= */ Number.POSITIVE_INFINITY, time);
                this._maxUploadRetryTime = time;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StorageService.prototype, "maxOperationRetryTime", {
            /**
             * The maximum time to retry operations other than uploads or downloads in
             * milliseconds.
             */
            get: function () {
                return this._maxOperationRetryTime;
            },
            set: function (time) {
                validateNumber('time', 
                /* minValue=*/ 0, 
                /* maxValue= */ Number.POSITIVE_INFINITY, time);
                this._maxOperationRetryTime = time;
            },
            enumerable: false,
            configurable: true
        });
        StorageService.prototype._getAuthToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                var auth, tokenData;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            auth = this._authProvider.getImmediate({ optional: true });
                            if (!auth) return [3 /*break*/, 2];
                            return [4 /*yield*/, auth.getToken()];
                        case 1:
                            tokenData = _a.sent();
                            if (tokenData !== null) {
                                return [2 /*return*/, tokenData.accessToken];
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/, null];
                    }
                });
            });
        };
        StorageService.prototype._getAppCheckToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                var appCheck, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            appCheck = this._appCheckProvider.getImmediate({ optional: true });
                            if (!appCheck) return [3 /*break*/, 2];
                            return [4 /*yield*/, appCheck.getToken()];
                        case 1:
                            result = _a.sent();
                            // TODO: What do we want to do if there is an error getting the token?
                            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be
                            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use
                            // the token (actual or dummy) to send requests.
                            return [2 /*return*/, result.token];
                        case 2: return [2 /*return*/, null];
                    }
                });
            });
        };
        /**
         * Stop running requests and prevent more from being created.
         */
        StorageService.prototype._delete = function () {
            this._deleted = true;
            this._requests.forEach(function (request) { return request.cancel(); });
            this._requests.clear();
            return Promise.resolve();
        };
        /**
         * Returns a new firebaseStorage.Reference object referencing this StorageService
         * at the given Location.
         */
        StorageService.prototype._makeStorageReference = function (loc) {
            return new Reference(this, loc);
        };
        /**
         * @param requestInfo - HTTP RequestInfo object
         * @param authToken - Firebase auth token
         */
        StorageService.prototype._makeRequest = function (requestInfo, authToken, appCheckToken) {
            var _this = this;
            if (!this._deleted) {
                var request_1 = makeRequest(requestInfo, this._appId, authToken, appCheckToken, this._pool, this._firebaseVersion);
                this._requests.add(request_1);
                // Request removes itself from set when complete.
                request_1.getPromise().then(function () { return _this._requests.delete(request_1); }, function () { return _this._requests.delete(request_1); });
                return request_1;
            }
            else {
                return new FailRequest(appDeleted());
            }
        };
        StorageService.prototype.makeRequestWithTokens = function (requestInfo) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, authToken, appCheckToken;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, Promise.all([
                                this._getAuthToken(),
                                this._getAppCheckToken()
                            ])];
                        case 1:
                            _a = _b.sent(), authToken = _a[0], appCheckToken = _a[1];
                            return [2 /*return*/, this._makeRequest(requestInfo, authToken, appCheckToken)];
                    }
                });
            });
        };
        return StorageService;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Uploads data to this object's location.
     * The upload can be paused and resumed, and exposes progress updates.
     * @public
     * @param ref - StorageReference where data should be uploaded.
     * @param data - The data to upload.
     * @param metadata - Metadata for the data to upload.
     * @returns An UploadTask
     */
    function uploadBytesResumable(ref, data, metadata) {
        ref = getModularInstance(ref);
        return uploadBytesResumable$1(ref, data, metadata);
    }
    /**
     * A promise that resolves with the metadata for this object. If this
     * object doesn't exist or metadata cannot be retreived, the promise is
     * rejected.
     * @public
     * @param ref - StorageReference to get metadata from.
     */
    function getMetadata(ref) {
        ref = getModularInstance(ref);
        return getMetadata$1(ref);
    }
    /**
     * Updates the metadata for this object.
     * @public
     * @param ref - StorageReference to update metadata for.
     * @param metadata - The new metadata for the object.
     *     Only values that have been explicitly set will be changed. Explicitly
     *     setting a value to null will remove the metadata.
     * @returns A promise that resolves with the new metadata for this object.
     */
    function updateMetadata(ref, metadata) {
        ref = getModularInstance(ref);
        return updateMetadata$1(ref, metadata);
    }
    /**
     * List items (files) and prefixes (folders) under this storage reference.
     *
     * List API is only available for Firebase Rules Version 2.
     *
     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
     * delimited folder structure.
     * Refer to GCS's List API if you want to learn more.
     *
     * To adhere to Firebase Rules's Semantics, Firebase Storage does not
     * support objects whose paths end with "/" or contain two consecutive
     * "/"s. Firebase Storage List API will filter these unsupported objects.
     * list() may fail if there are too many unsupported objects in the bucket.
     * @public
     *
     * @param ref - StorageReference to get list from.
     * @param options - See ListOptions for details.
     * @returns A Promise that resolves with the items and prefixes.
     *      `prefixes` contains references to sub-folders and `items`
     *      contains references to objects in this folder. `nextPageToken`
     *      can be used to get the rest of the results.
     */
    function list(ref, options) {
        ref = getModularInstance(ref);
        return list$1(ref, options);
    }
    /**
     * List all items (files) and prefixes (folders) under this storage reference.
     *
     * This is a helper method for calling list() repeatedly until there are
     * no more results. The default pagination size is 1000.
     *
     * Note: The results may not be consistent if objects are changed while this
     * operation is running.
     *
     * Warning: listAll may potentially consume too many resources if there are
     * too many results.
     * @public
     * @param ref - StorageReference to get list from.
     *
     * @returns A Promise that resolves with all the items and prefixes under
     *      the current storage reference. `prefixes` contains references to
     *      sub-directories and `items` contains references to objects in this
     *      folder. `nextPageToken` is never returned.
     */
    function listAll(ref) {
        ref = getModularInstance(ref);
        return listAll$1(ref);
    }
    /**
     * Returns the download URL for the given Reference.
     * @public
     * @returns A promise that resolves with the download
     *     URL for this object.
     */
    function getDownloadURL(ref) {
        ref = getModularInstance(ref);
        return getDownloadURL$1(ref);
    }
    /**
     * Deletes the object at this location.
     * @public
     * @param ref - StorageReference for object to delete.
     * @returns A promise that resolves if the deletion succeeds.
     */
    function deleteObject(ref) {
        ref = getModularInstance(ref);
        return deleteObject$1(ref);
    }
    function ref(serviceOrRef, pathOrUrl) {
        serviceOrRef = getModularInstance(serviceOrRef);
        return ref$1(serviceOrRef, pathOrUrl);
    }
    /**
     * @internal
     */
    function _getChild(ref, childPath) {
        return _getChild$1(ref, childPath);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UploadTaskSnapshotCompat = /** @class */ (function () {
        function UploadTaskSnapshotCompat(_delegate, task, ref) {
            this._delegate = _delegate;
            this.task = task;
            this.ref = ref;
        }
        Object.defineProperty(UploadTaskSnapshotCompat.prototype, "bytesTransferred", {
            get: function () {
                return this._delegate.bytesTransferred;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UploadTaskSnapshotCompat.prototype, "metadata", {
            get: function () {
                return this._delegate.metadata;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UploadTaskSnapshotCompat.prototype, "state", {
            get: function () {
                return this._delegate.state;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UploadTaskSnapshotCompat.prototype, "totalBytes", {
            get: function () {
                return this._delegate.totalBytes;
            },
            enumerable: false,
            configurable: true
        });
        return UploadTaskSnapshotCompat;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UploadTaskCompat = /** @class */ (function () {
        function UploadTaskCompat(_delegate, _ref) {
            this._delegate = _delegate;
            this._ref = _ref;
            this.cancel = this._delegate.cancel.bind(this._delegate);
            this.catch = this._delegate.catch.bind(this._delegate);
            this.pause = this._delegate.pause.bind(this._delegate);
            this.resume = this._delegate.resume.bind(this._delegate);
        }
        Object.defineProperty(UploadTaskCompat.prototype, "snapshot", {
            get: function () {
                return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);
            },
            enumerable: false,
            configurable: true
        });
        UploadTaskCompat.prototype.then = function (onFulfilled, onRejected) {
            var _this = this;
            return this._delegate.then(function (snapshot) {
                if (onFulfilled) {
                    return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));
                }
            }, onRejected);
        };
        UploadTaskCompat.prototype.on = function (type, nextOrObserver, error, completed) {
            var _this = this;
            var wrappedNextOrObserver = undefined;
            if (!!nextOrObserver) {
                if (typeof nextOrObserver === 'function') {
                    wrappedNextOrObserver = function (taskSnapshot) {
                        return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
                    };
                }
                else {
                    wrappedNextOrObserver = {
                        next: !!nextOrObserver.next
                            ? function (taskSnapshot) {
                                return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
                            }
                            : undefined,
                        complete: nextOrObserver.complete || undefined,
                        error: nextOrObserver.error || undefined
                    };
                }
            }
            return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);
        };
        return UploadTaskCompat;
    }());

    var ListResultCompat = /** @class */ (function () {
        function ListResultCompat(_delegate, _service) {
            this._delegate = _delegate;
            this._service = _service;
        }
        Object.defineProperty(ListResultCompat.prototype, "prefixes", {
            get: function () {
                var _this = this;
                return this._delegate.prefixes.map(function (ref) { return new ReferenceCompat(ref, _this._service); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListResultCompat.prototype, "items", {
            get: function () {
                var _this = this;
                return this._delegate.items.map(function (ref) { return new ReferenceCompat(ref, _this._service); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListResultCompat.prototype, "nextPageToken", {
            get: function () {
                return this._delegate.nextPageToken || null;
            },
            enumerable: false,
            configurable: true
        });
        return ListResultCompat;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *  http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ReferenceCompat = /** @class */ (function () {
        function ReferenceCompat(_delegate, storage) {
            this._delegate = _delegate;
            this.storage = storage;
        }
        Object.defineProperty(ReferenceCompat.prototype, "name", {
            get: function () {
                return this._delegate.name;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReferenceCompat.prototype, "bucket", {
            get: function () {
                return this._delegate.bucket;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReferenceCompat.prototype, "fullPath", {
            get: function () {
                return this._delegate.fullPath;
            },
            enumerable: false,
            configurable: true
        });
        ReferenceCompat.prototype.toString = function () {
            return this._delegate.toString();
        };
        /**
         * @returns A reference to the object obtained by
         * appending childPath, removing any duplicate, beginning, or trailing
         * slashes.
         */
        ReferenceCompat.prototype.child = function (childPath) {
            var reference = _getChild(this._delegate, childPath);
            return new ReferenceCompat(reference, this.storage);
        };
        Object.defineProperty(ReferenceCompat.prototype, "root", {
            get: function () {
                return new ReferenceCompat(this._delegate.root, this.storage);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReferenceCompat.prototype, "parent", {
            /**
             * @returns A reference to the parent of the
             * current object, or null if the current object is the root.
             */
            get: function () {
                var reference = this._delegate.parent;
                if (reference == null) {
                    return null;
                }
                return new ReferenceCompat(reference, this.storage);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Uploads a blob to this object's location.
         * @param data - The blob to upload.
         * @returns An UploadTask that lets you control and
         * observe the upload.
         */
        ReferenceCompat.prototype.put = function (data, metadata) {
            this._throwIfRoot('put');
            return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);
        };
        /**
         * Uploads a string to this object's location.
         * @param value - The string to upload.
         * @param format - The format of the string to upload.
         * @returns An UploadTask that lets you control and
         * observe the upload.
         */
        ReferenceCompat.prototype.putString = function (value, format, metadata) {
            if (format === void 0) { format = StringFormat.RAW; }
            this._throwIfRoot('putString');
            var data = dataFromString(format, value);
            var metadataClone = __assign({}, metadata);
            if (metadataClone['contentType'] == null && data.contentType != null) {
                metadataClone['contentType'] = data.contentType;
            }
            return new UploadTaskCompat(new UploadTask(this._delegate, new FbsBlob(data.data, true), metadataClone), this);
        };
        /**
         * List all items (files) and prefixes (folders) under this storage reference.
         *
         * This is a helper method for calling list() repeatedly until there are
         * no more results. The default pagination size is 1000.
         *
         * Note: The results may not be consistent if objects are changed while this
         * operation is running.
         *
         * Warning: listAll may potentially consume too many resources if there are
         * too many results.
         *
         * @returns A Promise that resolves with all the items and prefixes under
         *  the current storage reference. `prefixes` contains references to
         *  sub-directories and `items` contains references to objects in this
         *  folder. `nextPageToken` is never returned.
         */
        ReferenceCompat.prototype.listAll = function () {
            var _this = this;
            return listAll(this._delegate).then(function (r) { return new ListResultCompat(r, _this.storage); });
        };
        /**
         * List items (files) and prefixes (folders) under this storage reference.
         *
         * List API is only available for Firebase Rules Version 2.
         *
         * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
         * delimited folder structure. Refer to GCS's List API if you want to learn more.
         *
         * To adhere to Firebase Rules's Semantics, Firebase Storage does not
         * support objects whose paths end with "/" or contain two consecutive
         * "/"s. Firebase Storage List API will filter these unsupported objects.
         * list() may fail if there are too many unsupported objects in the bucket.
         *
         * @param options - See ListOptions for details.
         * @returns A Promise that resolves with the items and prefixes.
         * `prefixes` contains references to sub-folders and `items`
         * contains references to objects in this folder. `nextPageToken`
         * can be used to get the rest of the results.
         */
        ReferenceCompat.prototype.list = function (options) {
            var _this = this;
            return list(this._delegate, options || undefined).then(function (r) { return new ListResultCompat(r, _this.storage); });
        };
        /**
         * A promise that resolves with the metadata for this object. If this
         * object doesn't exist or metadata cannot be retreived, the promise is
         * rejected.
         */
        ReferenceCompat.prototype.getMetadata = function () {
            return getMetadata(this._delegate);
        };
        /**
         * Updates the metadata for this object.
         * @param metadata - The new metadata for the object.
         * Only values that have been explicitly set will be changed. Explicitly
         * setting a value to null will remove the metadata.
         * @returns A promise that resolves
         * with the new metadata for this object.
         * @see firebaseStorage.Reference.prototype.getMetadata
         */
        ReferenceCompat.prototype.updateMetadata = function (metadata) {
            return updateMetadata(this._delegate, metadata);
        };
        /**
         * @returns A promise that resolves with the download
         * URL for this object.
         */
        ReferenceCompat.prototype.getDownloadURL = function () {
            return getDownloadURL(this._delegate);
        };
        /**
         * Deletes the object at this location.
         * @returns A promise that resolves if the deletion succeeds.
         */
        ReferenceCompat.prototype.delete = function () {
            this._throwIfRoot('delete');
            return deleteObject(this._delegate);
        };
        ReferenceCompat.prototype._throwIfRoot = function (name) {
            if (this._delegate._location.path === '') {
                throw invalidRootOperation(name);
            }
        };
        return ReferenceCompat;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A service that provides firebaseStorage.Reference instances.
     * @param opt_url gs:// url to a custom Storage Bucket
     */
    var StorageServiceCompat = /** @class */ (function () {
        function StorageServiceCompat(app, _delegate) {
            var _this = this;
            this.app = app;
            this._delegate = _delegate;
            this.INTERNAL = {
                /**
                 * Called when the associated app is deleted.
                 */
                delete: function () {
                    return _this._delegate._delete();
                }
            };
        }
        Object.defineProperty(StorageServiceCompat.prototype, "maxOperationRetryTime", {
            get: function () {
                return this._delegate.maxOperationRetryTime;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StorageServiceCompat.prototype, "maxUploadRetryTime", {
            get: function () {
                return this._delegate.maxUploadRetryTime;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns a firebaseStorage.Reference for the given path in the default
         * bucket.
         */
        StorageServiceCompat.prototype.ref = function (path) {
            if (isUrl(path)) {
                throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');
            }
            return new ReferenceCompat(ref(this._delegate, path), this);
        };
        /**
         * Returns a firebaseStorage.Reference object for the given absolute URL,
         * which must be a gs:// or http[s]:// URL.
         */
        StorageServiceCompat.prototype.refFromURL = function (url) {
            if (!isUrl(url)) {
                throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');
            }
            try {
                Location.makeFromUrl(url, this._delegate.host);
            }
            catch (e) {
                throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');
            }
            return new ReferenceCompat(ref(this._delegate, url), this);
        };
        StorageServiceCompat.prototype.setMaxUploadRetryTime = function (time) {
            this._delegate.maxUploadRetryTime = time;
        };
        StorageServiceCompat.prototype.setMaxOperationRetryTime = function (time) {
            this._delegate.maxOperationRetryTime = time;
        };
        StorageServiceCompat.prototype.useEmulator = function (host, port) {
            useStorageEmulator(this._delegate, host, port);
        };
        return StorageServiceCompat;
    }());

    var name$3 = "@firebase/storage";
    var version$3 = "0.5.6";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Type constant for Firebase Storage.
     */
    var STORAGE_TYPE = 'storage';
    function factory$1(container, _a) {
        var url = _a.instanceIdentifier;
        // Dependencies
        // TODO: This should eventually be 'app-compat'
        var app = container.getProvider('app').getImmediate();
        var authProvider = container.getProvider('auth-internal');
        var appCheckProvider = container.getProvider('app-check-internal');
        // TODO: get StorageService instance from component framework instead
        // of creating a new one.
        var storageServiceCompat = new StorageServiceCompat(app, new StorageService(app, authProvider, appCheckProvider, new ConnectionPool(), url, firebase.SDK_VERSION));
        return storageServiceCompat;
    }
    function registerStorage(instance) {
        var namespaceExports = {
            // no-inline
            TaskState: TaskState,
            TaskEvent: TaskEvent,
            StringFormat: StringFormat,
            Storage: StorageService,
            Reference: ReferenceCompat
        };
        instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory$1, "PUBLIC" /* PUBLIC */)
            .setServiceProps(namespaceExports)
            .setMultipleInstances(true));
        instance.registerVersion(name$3, version$3);
    }
    registerStorage(firebase);

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    var idb = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
      factory(exports) ;
    }(commonjsGlobal, function (exports) {
      function toArray(arr) {
        return Array.prototype.slice.call(arr);
      }

      function promisifyRequest(request) {
        return new Promise(function(resolve, reject) {
          request.onsuccess = function() {
            resolve(request.result);
          };

          request.onerror = function() {
            reject(request.error);
          };
        });
      }

      function promisifyRequestCall(obj, method, args) {
        var request;
        var p = new Promise(function(resolve, reject) {
          request = obj[method].apply(obj, args);
          promisifyRequest(request).then(resolve, reject);
        });

        p.request = request;
        return p;
      }

      function promisifyCursorRequestCall(obj, method, args) {
        var p = promisifyRequestCall(obj, method, args);
        return p.then(function(value) {
          if (!value) return;
          return new Cursor(value, p.request);
        });
      }

      function proxyProperties(ProxyClass, targetProp, properties) {
        properties.forEach(function(prop) {
          Object.defineProperty(ProxyClass.prototype, prop, {
            get: function() {
              return this[targetProp][prop];
            },
            set: function(val) {
              this[targetProp][prop] = val;
            }
          });
        });
      }

      function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype)) return;
          ProxyClass.prototype[prop] = function() {
            return promisifyRequestCall(this[targetProp], prop, arguments);
          };
        });
      }

      function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype)) return;
          ProxyClass.prototype[prop] = function() {
            return this[targetProp][prop].apply(this[targetProp], arguments);
          };
        });
      }

      function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype)) return;
          ProxyClass.prototype[prop] = function() {
            return promisifyCursorRequestCall(this[targetProp], prop, arguments);
          };
        });
      }

      function Index(index) {
        this._index = index;
      }

      proxyProperties(Index, '_index', [
        'name',
        'keyPath',
        'multiEntry',
        'unique'
      ]);

      proxyRequestMethods(Index, '_index', IDBIndex, [
        'get',
        'getKey',
        'getAll',
        'getAllKeys',
        'count'
      ]);

      proxyCursorRequestMethods(Index, '_index', IDBIndex, [
        'openCursor',
        'openKeyCursor'
      ]);

      function Cursor(cursor, request) {
        this._cursor = cursor;
        this._request = request;
      }

      proxyProperties(Cursor, '_cursor', [
        'direction',
        'key',
        'primaryKey',
        'value'
      ]);

      proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
        'update',
        'delete'
      ]);

      // proxy 'next' methods
      ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {
        if (!(methodName in IDBCursor.prototype)) return;
        Cursor.prototype[methodName] = function() {
          var cursor = this;
          var args = arguments;
          return Promise.resolve().then(function() {
            cursor._cursor[methodName].apply(cursor._cursor, args);
            return promisifyRequest(cursor._request).then(function(value) {
              if (!value) return;
              return new Cursor(value, cursor._request);
            });
          });
        };
      });

      function ObjectStore(store) {
        this._store = store;
      }

      ObjectStore.prototype.createIndex = function() {
        return new Index(this._store.createIndex.apply(this._store, arguments));
      };

      ObjectStore.prototype.index = function() {
        return new Index(this._store.index.apply(this._store, arguments));
      };

      proxyProperties(ObjectStore, '_store', [
        'name',
        'keyPath',
        'indexNames',
        'autoIncrement'
      ]);

      proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
        'put',
        'add',
        'delete',
        'clear',
        'get',
        'getAll',
        'getKey',
        'getAllKeys',
        'count'
      ]);

      proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
        'openCursor',
        'openKeyCursor'
      ]);

      proxyMethods(ObjectStore, '_store', IDBObjectStore, [
        'deleteIndex'
      ]);

      function Transaction(idbTransaction) {
        this._tx = idbTransaction;
        this.complete = new Promise(function(resolve, reject) {
          idbTransaction.oncomplete = function() {
            resolve();
          };
          idbTransaction.onerror = function() {
            reject(idbTransaction.error);
          };
          idbTransaction.onabort = function() {
            reject(idbTransaction.error);
          };
        });
      }

      Transaction.prototype.objectStore = function() {
        return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
      };

      proxyProperties(Transaction, '_tx', [
        'objectStoreNames',
        'mode'
      ]);

      proxyMethods(Transaction, '_tx', IDBTransaction, [
        'abort'
      ]);

      function UpgradeDB(db, oldVersion, transaction) {
        this._db = db;
        this.oldVersion = oldVersion;
        this.transaction = new Transaction(transaction);
      }

      UpgradeDB.prototype.createObjectStore = function() {
        return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
      };

      proxyProperties(UpgradeDB, '_db', [
        'name',
        'version',
        'objectStoreNames'
      ]);

      proxyMethods(UpgradeDB, '_db', IDBDatabase, [
        'deleteObjectStore',
        'close'
      ]);

      function DB(db) {
        this._db = db;
      }

      DB.prototype.transaction = function() {
        return new Transaction(this._db.transaction.apply(this._db, arguments));
      };

      proxyProperties(DB, '_db', [
        'name',
        'version',
        'objectStoreNames'
      ]);

      proxyMethods(DB, '_db', IDBDatabase, [
        'close'
      ]);

      // Add cursor iterators
      // TODO: remove this once browsers do the right thing with promises
      ['openCursor', 'openKeyCursor'].forEach(function(funcName) {
        [ObjectStore, Index].forEach(function(Constructor) {
          // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
          if (!(funcName in Constructor.prototype)) return;

          Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
            var args = toArray(arguments);
            var callback = args[args.length - 1];
            var nativeObject = this._store || this._index;
            var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
            request.onsuccess = function() {
              callback(request.result);
            };
          };
        });
      });

      // polyfill getAll
      [Index, ObjectStore].forEach(function(Constructor) {
        if (Constructor.prototype.getAll) return;
        Constructor.prototype.getAll = function(query, count) {
          var instance = this;
          var items = [];

          return new Promise(function(resolve) {
            instance.iterateCursor(query, function(cursor) {
              if (!cursor) {
                resolve(items);
                return;
              }
              items.push(cursor.value);

              if (count !== undefined && items.length == count) {
                resolve(items);
                return;
              }
              cursor.continue();
            });
          });
        };
      });

      function openDb(name, version, upgradeCallback) {
        var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
        var request = p.request;

        if (request) {
          request.onupgradeneeded = function(event) {
            if (upgradeCallback) {
              upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
            }
          };
        }

        return p.then(function(db) {
          return new DB(db);
        });
      }

      function deleteDb(name) {
        return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);
      }

      exports.openDb = openDb;
      exports.deleteDb = deleteDb;

      Object.defineProperty(exports, '__esModule', { value: true });

    }));
    });

    var name$2 = "@firebase/installations";
    var version$2 = "0.4.30";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PENDING_TIMEOUT_MS = 10000;
    var PACKAGE_VERSION = "w:" + version$2;
    var INTERNAL_AUTH_VERSION = 'FIS_v2';
    var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
    var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
    var SERVICE$1 = 'installations';
    var SERVICE_NAME$1 = 'Installations';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$2;
    var ERROR_DESCRIPTION_MAP$1 = (_a$2 = {},
        _a$2["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: "{$valueName}"',
        _a$2["not-registered" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.',
        _a$2["installation-not-found" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.',
        _a$2["request-failed" /* REQUEST_FAILED */] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
        _a$2["app-offline" /* APP_OFFLINE */] = 'Could not process request. Application offline.',
        _a$2["delete-pending-registration" /* DELETE_PENDING_REGISTRATION */] = "Can't delete installation while there is a pending registration request.",
        _a$2);
    var ERROR_FACTORY$2 = new ErrorFactory(SERVICE$1, SERVICE_NAME$1, ERROR_DESCRIPTION_MAP$1);
    /** Returns true if error is a FirebaseError that is based on an error from the server. */
    function isServerError(error) {
        return (error instanceof FirebaseError &&
            error.code.includes("request-failed" /* REQUEST_FAILED */));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getInstallationsEndpoint(_a) {
        var projectId = _a.projectId;
        return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
    }
    function extractAuthTokenInfoFromResponse(response) {
        return {
            token: response.token,
            requestStatus: 2 /* COMPLETED */,
            expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
            creationTime: Date.now()
        };
    }
    function getErrorFromResponse(requestName, response) {
        return __awaiter(this, void 0, void 0, function () {
            var responseJson, errorData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, response.json()];
                    case 1:
                        responseJson = _a.sent();
                        errorData = responseJson.error;
                        return [2 /*return*/, ERROR_FACTORY$2.create("request-failed" /* REQUEST_FAILED */, {
                                requestName: requestName,
                                serverCode: errorData.code,
                                serverMessage: errorData.message,
                                serverStatus: errorData.status
                            })];
                }
            });
        });
    }
    function getHeaders$1(_a) {
        var apiKey = _a.apiKey;
        return new Headers({
            'Content-Type': 'application/json',
            Accept: 'application/json',
            'x-goog-api-key': apiKey
        });
    }
    function getHeadersWithAuth(appConfig, _a) {
        var refreshToken = _a.refreshToken;
        var headers = getHeaders$1(appConfig);
        headers.append('Authorization', getAuthorizationHeader(refreshToken));
        return headers;
    }
    /**
     * Calls the passed in fetch wrapper and returns the response.
     * If the returned response has a status of 5xx, re-runs the function once and
     * returns the response.
     */
    function retryIfServerError(fn) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fn()];
                    case 1:
                        result = _a.sent();
                        if (result.status >= 500 && result.status < 600) {
                            // Internal Server Error. Retry request.
                            return [2 /*return*/, fn()];
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    }
    function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
        // This works because the server will never respond with fractions of a second.
        return Number(responseExpiresIn.replace('s', '000'));
    }
    function getAuthorizationHeader(refreshToken) {
        return INTERNAL_AUTH_VERSION + " " + refreshToken;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createInstallationRequest(appConfig, _a) {
        var fid = _a.fid;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getInstallationsEndpoint(appConfig);
                        headers = getHeaders$1(appConfig);
                        body = {
                            fid: fid,
                            authVersion: INTERNAL_AUTH_VERSION,
                            appId: appConfig.appId,
                            sdkVersion: PACKAGE_VERSION
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        registeredInstallationEntry = {
                            fid: responseValue.fid || fid,
                            registrationStatus: 2 /* COMPLETED */,
                            refreshToken: responseValue.refreshToken,
                            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
                        };
                        return [2 /*return*/, registeredInstallationEntry];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Create Installation', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a promise that resolves after given time passes. */
    function sleep(ms) {
        return new Promise(function (resolve) {
            setTimeout(resolve, ms);
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function bufferToBase64UrlSafe(array) {
        var b64 = btoa(String.fromCharCode.apply(String, __spreadArray([], __read(array))));
        return b64.replace(/\+/g, '-').replace(/\//g, '_');
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
    var INVALID_FID = '';
    /**
     * Generates a new FID using random values from Web Crypto API.
     * Returns an empty string if FID generation fails for any reason.
     */
    function generateFid() {
        try {
            // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
            // bytes. our implementation generates a 17 byte array instead.
            var fidByteArray = new Uint8Array(17);
            var crypto_1 = self.crypto || self.msCrypto;
            crypto_1.getRandomValues(fidByteArray);
            // Replace the first 4 random bits with the constant FID header of 0b0111.
            fidByteArray[0] = 112 + (fidByteArray[0] % 16);
            var fid = encode(fidByteArray);
            return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
        }
        catch (_a) {
            // FID generation errored
            return INVALID_FID;
        }
    }
    /** Converts a FID Uint8Array to a base64 string representation. */
    function encode(fidByteArray) {
        var b64String = bufferToBase64UrlSafe(fidByteArray);
        // Remove the 23rd character that was added because of the extra 4 bits at the
        // end of our 17 byte array, and the '=' padding.
        return b64String.substr(0, 22);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a string key that can be used to identify the app. */
    function getKey(appConfig) {
        return appConfig.appName + "!" + appConfig.appId;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var fidChangeCallbacks = new Map();
    /**
     * Calls the onIdChange callbacks with the new FID value, and broadcasts the
     * change to other tabs.
     */
    function fidChanged(appConfig, fid) {
        var key = getKey(appConfig);
        callFidChangeCallbacks(key, fid);
        broadcastFidChange(key, fid);
    }
    function addCallback(appConfig, callback) {
        // Open the broadcast channel if it's not already open,
        // to be able to listen to change events from other tabs.
        getBroadcastChannel();
        var key = getKey(appConfig);
        var callbackSet = fidChangeCallbacks.get(key);
        if (!callbackSet) {
            callbackSet = new Set();
            fidChangeCallbacks.set(key, callbackSet);
        }
        callbackSet.add(callback);
    }
    function removeCallback(appConfig, callback) {
        var key = getKey(appConfig);
        var callbackSet = fidChangeCallbacks.get(key);
        if (!callbackSet) {
            return;
        }
        callbackSet.delete(callback);
        if (callbackSet.size === 0) {
            fidChangeCallbacks.delete(key);
        }
        // Close broadcast channel if there are no more callbacks.
        closeBroadcastChannel();
    }
    function callFidChangeCallbacks(key, fid) {
        var e_1, _a;
        var callbacks = fidChangeCallbacks.get(key);
        if (!callbacks) {
            return;
        }
        try {
            for (var callbacks_1 = __values$1(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
                var callback = callbacks_1_1.value;
                callback(fid);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    function broadcastFidChange(key, fid) {
        var channel = getBroadcastChannel();
        if (channel) {
            channel.postMessage({ key: key, fid: fid });
        }
        closeBroadcastChannel();
    }
    var broadcastChannel = null;
    /** Opens and returns a BroadcastChannel if it is supported by the browser. */
    function getBroadcastChannel() {
        if (!broadcastChannel && 'BroadcastChannel' in self) {
            broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
            broadcastChannel.onmessage = function (e) {
                callFidChangeCallbacks(e.data.key, e.data.fid);
            };
        }
        return broadcastChannel;
    }
    function closeBroadcastChannel() {
        if (fidChangeCallbacks.size === 0 && broadcastChannel) {
            broadcastChannel.close();
            broadcastChannel = null;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DATABASE_NAME = 'firebase-installations-database';
    var DATABASE_VERSION = 1;
    var OBJECT_STORE_NAME = 'firebase-installations-store';
    var dbPromise = null;
    function getDbPromise() {
        if (!dbPromise) {
            dbPromise = idb.openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (upgradeDB.oldVersion) {
                    case 0:
                        upgradeDB.createObjectStore(OBJECT_STORE_NAME);
                }
            });
        }
        return dbPromise;
    }
    /** Assigns or overwrites the record for the given key with the given value. */
    function set(appConfig, value) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, objectStore, oldValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        objectStore = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, objectStore.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        return [4 /*yield*/, objectStore.put(value, key)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 4:
                        _a.sent();
                        if (!oldValue || oldValue.fid !== value.fid) {
                            fidChanged(appConfig, value.fid);
                        }
                        return [2 /*return*/, value];
                }
            });
        });
    }
    /** Removes record(s) from the objectStore that match the given key. */
    function remove(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Atomically updates a record with the result of updateFn, which gets
     * called with the current value. If newValue is undefined, the record is
     * deleted instead.
     * @return Updated value
     */
    function update(appConfig, updateFn) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, store, oldValue, newValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        store = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, store.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        newValue = updateFn(oldValue);
                        if (!(newValue === undefined)) return [3 /*break*/, 4];
                        return [4 /*yield*/, store.delete(key)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, store.put(newValue, key)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [4 /*yield*/, tx.complete];
                    case 7:
                        _a.sent();
                        if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
                            fidChanged(appConfig, newValue.fid);
                        }
                        return [2 /*return*/, newValue];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Updates and returns the InstallationEntry from the database.
     * Also triggers a registration request if it is necessary and possible.
     */
    function getInstallationEntry(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise, installationEntry;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {
                            var installationEntry = updateOrCreateInstallationEntry(oldEntry);
                            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);
                            registrationPromise = entryWithPromise.registrationPromise;
                            return entryWithPromise.installationEntry;
                        })];
                    case 1:
                        installationEntry = _b.sent();
                        if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];
                        _a = {};
                        return [4 /*yield*/, registrationPromise];
                    case 2: 
                    // FID generation failed. Waiting for the FID from the server.
                    return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];
                    case 3: return [2 /*return*/, {
                            installationEntry: installationEntry,
                            registrationPromise: registrationPromise
                        }];
                }
            });
        });
    }
    /**
     * Creates a new Installation Entry if one does not exist.
     * Also clears timed out pending requests.
     */
    function updateOrCreateInstallationEntry(oldEntry) {
        var entry = oldEntry || {
            fid: generateFid(),
            registrationStatus: 0 /* NOT_STARTED */
        };
        return clearTimedOutRequest(entry);
    }
    /**
     * If the Firebase Installation is not registered yet, this will trigger the
     * registration and return an InProgressInstallationEntry.
     *
     * If registrationPromise does not exist, the installationEntry is guaranteed
     * to be registered.
     */
    function triggerRegistrationIfNecessary(appConfig, installationEntry) {
        if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {
            if (!navigator.onLine) {
                // Registration required but app is offline.
                var registrationPromiseWithError = Promise.reject(ERROR_FACTORY$2.create("app-offline" /* APP_OFFLINE */));
                return {
                    installationEntry: installationEntry,
                    registrationPromise: registrationPromiseWithError
                };
            }
            // Try registering. Change status to IN_PROGRESS.
            var inProgressEntry = {
                fid: installationEntry.fid,
                registrationStatus: 1 /* IN_PROGRESS */,
                registrationTime: Date.now()
            };
            var registrationPromise = registerInstallation(appConfig, inProgressEntry);
            return { installationEntry: inProgressEntry, registrationPromise: registrationPromise };
        }
        else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {
            return {
                installationEntry: installationEntry,
                registrationPromise: waitUntilFidRegistration(appConfig)
            };
        }
        else {
            return { installationEntry: installationEntry };
        }
    }
    /** This will be executed only once for each new Firebase Installation. */
    function registerInstallation(appConfig, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var registeredInstallationEntry, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 7]);
                        return [4 /*yield*/, createInstallationRequest(appConfig, installationEntry)];
                    case 1:
                        registeredInstallationEntry = _a.sent();
                        return [2 /*return*/, set(appConfig, registeredInstallationEntry)];
                    case 2:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) && e_1.customData.serverCode === 409)) return [3 /*break*/, 4];
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(appConfig)];
                    case 3:
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: 
                    // Registration failed. Set FID as not registered.
                    return [4 /*yield*/, set(appConfig, {
                            fid: installationEntry.fid,
                            registrationStatus: 0 /* NOT_STARTED */
                        })];
                    case 5:
                        // Registration failed. Set FID as not registered.
                        _a.sent();
                        _a.label = 6;
                    case 6: throw e_1;
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    /** Call if FID registration is pending in another request. */
    function waitUntilFidRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 1:
                        entry = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // createInstallation request still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // createInstallation request still in progress.
                        _b.sent();
                        return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 4:
                        entry = _b.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        if (!(entry.registrationStatus === 0 /* NOT_STARTED */)) return [3 /*break*/, 7];
                        return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 6:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            return [2 /*return*/, registrationPromise];
                        }
                        else {
                            // if there is no registrationPromise, entry is registered.
                            return [2 /*return*/, installationEntry];
                        }
                    case 7: return [2 /*return*/, entry];
                }
            });
        });
    }
    /**
     * Called only if there is a CreateInstallation request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * CreateInstallation request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateInstallationRequest(appConfig) {
        return update(appConfig, function (oldEntry) {
            if (!oldEntry) {
                throw ERROR_FACTORY$2.create("installation-not-found" /* INSTALLATION_NOT_FOUND */);
            }
            return clearTimedOutRequest(oldEntry);
        });
    }
    function clearTimedOutRequest(entry) {
        if (hasInstallationRequestTimedOut(entry)) {
            return {
                fid: entry.fid,
                registrationStatus: 0 /* NOT_STARTED */
            };
        }
        return entry;
    }
    function hasInstallationRequestTimedOut(installationEntry) {
        return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&
            installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function generateAuthTokenRequest(_a, installationEntry) {
        var appConfig = _a.appConfig, platformLoggerProvider = _a.platformLoggerProvider;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
                        headers = getHeadersWithAuth(appConfig, installationEntry);
                        platformLogger = platformLoggerProvider.getImmediate({
                            optional: true
                        });
                        if (platformLogger) {
                            headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
                        }
                        body = {
                            installation: {
                                sdkVersion: PACKAGE_VERSION
                            }
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
                        return [2 /*return*/, completedAuthToken];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Generate Auth Token', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }
    function getGenerateAuthTokenEndpoint(appConfig, _a) {
        var fid = _a.fid;
        return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a valid authentication token for the installation. Generates a new
     * token if one doesn't exist, is expired or about to expire.
     *
     * Should only be called if the Firebase Installation is registered.
     */
    function refreshAuthToken(dependencies, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var tokenPromise, entry, authToken, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update(dependencies.appConfig, function (oldEntry) {
                            if (!isEntryRegistered(oldEntry)) {
                                throw ERROR_FACTORY$2.create("not-registered" /* NOT_REGISTERED */);
                            }
                            var oldAuthToken = oldEntry.authToken;
                            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
                                // There is a valid token in the DB.
                                return oldEntry;
                            }
                            else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {
                                // There already is a token request in progress.
                                tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);
                                return oldEntry;
                            }
                            else {
                                // No token or token expired.
                                if (!navigator.onLine) {
                                    throw ERROR_FACTORY$2.create("app-offline" /* APP_OFFLINE */);
                                }
                                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
                                tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);
                                return inProgressEntry;
                            }
                        })];
                    case 1:
                        entry = _b.sent();
                        if (!tokenPromise) return [3 /*break*/, 3];
                        return [4 /*yield*/, tokenPromise];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = entry.authToken;
                        _b.label = 4;
                    case 4:
                        authToken = _a;
                        return [2 /*return*/, authToken];
                }
            });
        });
    }
    /**
     * Call only if FID is registered and Auth Token request is in progress.
     *
     * Waits until the current pending request finishes. If the request times out,
     * tries once in this thread as well.
     */
    function waitUntilAuthTokenRequest(dependencies, forceRefresh) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, updateAuthTokenRequest(dependencies.appConfig)];
                    case 1:
                        entry = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // generateAuthToken still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // generateAuthToken still in progress.
                        _a.sent();
                        return [4 /*yield*/, updateAuthTokenRequest(dependencies.appConfig)];
                    case 4:
                        entry = _a.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        authToken = entry.authToken;
                        if (authToken.requestStatus === 0 /* NOT_STARTED */) {
                            // The request timed out or failed in a different call. Try again.
                            return [2 /*return*/, refreshAuthToken(dependencies, forceRefresh)];
                        }
                        else {
                            return [2 /*return*/, authToken];
                        }
                }
            });
        });
    }
    /**
     * Called only if there is a GenerateAuthToken request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * GenerateAuthToken request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateAuthTokenRequest(appConfig) {
        return update(appConfig, function (oldEntry) {
            if (!isEntryRegistered(oldEntry)) {
                throw ERROR_FACTORY$2.create("not-registered" /* NOT_REGISTERED */);
            }
            var oldAuthToken = oldEntry.authToken;
            if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
                return __assign(__assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
            }
            return oldEntry;
        });
    }
    function fetchAuthTokenFromServer(dependencies, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 8]);
                        return [4 /*yield*/, generateAuthTokenRequest(dependencies, installationEntry)];
                    case 1:
                        authToken = _a.sent();
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: authToken });
                        return [4 /*yield*/, set(dependencies.appConfig, updatedInstallationEntry)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, authToken];
                    case 3:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) &&
                            (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404))) return [3 /*break*/, 5];
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(dependencies.appConfig)];
                    case 4:
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
                        return [4 /*yield*/, set(dependencies.appConfig, updatedInstallationEntry)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: throw e_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    }
    function isEntryRegistered(installationEntry) {
        return (installationEntry !== undefined &&
            installationEntry.registrationStatus === 2 /* COMPLETED */);
    }
    function isAuthTokenValid(authToken) {
        return (authToken.requestStatus === 2 /* COMPLETED */ &&
            !isAuthTokenExpired(authToken));
    }
    function isAuthTokenExpired(authToken) {
        var now = Date.now();
        return (now < authToken.creationTime ||
            authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);
    }
    /** Returns an updated InstallationEntry with an InProgressAuthToken. */
    function makeAuthTokenRequestInProgressEntry(oldEntry) {
        var inProgressAuthToken = {
            requestStatus: 1 /* IN_PROGRESS */,
            requestTime: Date.now()
        };
        return __assign(__assign({}, oldEntry), { authToken: inProgressAuthToken });
    }
    function hasAuthTokenRequestTimedOut(authToken) {
        return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&
            authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getId(dependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getInstallationEntry(dependencies.appConfig)];
                    case 1:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            registrationPromise.catch(console.error);
                        }
                        else {
                            // If the installation is already registered, update the authentication
                            // token if needed.
                            refreshAuthToken(dependencies).catch(console.error);
                        }
                        return [2 /*return*/, installationEntry.fid];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getToken(dependencies, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, completeInstallationRegistration(dependencies.appConfig)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, refreshAuthToken(dependencies, forceRefresh)];
                    case 2:
                        authToken = _a.sent();
                        return [2 /*return*/, authToken.token];
                }
            });
        });
    }
    function completeInstallationRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 1:
                        registrationPromise = (_a.sent()).registrationPromise;
                        if (!registrationPromise) return [3 /*break*/, 3];
                        // A createInstallation request is in progress. Wait until it finishes.
                        return [4 /*yield*/, registrationPromise];
                    case 2:
                        // A createInstallation request is in progress. Wait until it finishes.
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deleteInstallationRequest(appConfig, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, request, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = getDeleteEndpoint(appConfig, installationEntry);
                        headers = getHeadersWithAuth(appConfig, installationEntry);
                        request = {
                            method: 'DELETE',
                            headers: headers
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _a.sent();
                        if (!!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, getErrorFromResponse('Delete Installation', response)];
                    case 2: throw _a.sent();
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    function getDeleteEndpoint(appConfig, _a) {
        var fid = _a.fid;
        return getInstallationsEndpoint(appConfig) + "/" + fid;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deleteInstallation(dependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var appConfig, entry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        appConfig = dependencies.appConfig;
                        return [4 /*yield*/, update(appConfig, function (oldEntry) {
                                if (oldEntry && oldEntry.registrationStatus === 0 /* NOT_STARTED */) {
                                    // Delete the unregistered entry without sending a deleteInstallation request.
                                    return undefined;
                                }
                                return oldEntry;
                            })];
                    case 1:
                        entry = _a.sent();
                        if (!entry) return [3 /*break*/, 6];
                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 2];
                        // Can't delete while trying to register.
                        throw ERROR_FACTORY$2.create("delete-pending-registration" /* DELETE_PENDING_REGISTRATION */);
                    case 2:
                        if (!(entry.registrationStatus === 2 /* COMPLETED */)) return [3 /*break*/, 6];
                        if (!!navigator.onLine) return [3 /*break*/, 3];
                        throw ERROR_FACTORY$2.create("app-offline" /* APP_OFFLINE */);
                    case 3: return [4 /*yield*/, deleteInstallationRequest(appConfig, entry)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, remove(appConfig)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sets a new callback that will get called when Installation ID changes.
     * Returns an unsubscribe function that will remove the callback when called.
     */
    function onIdChange(_a, callback) {
        var appConfig = _a.appConfig;
        addCallback(appConfig, callback);
        return function () {
            removeCallback(appConfig, callback);
        };
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function extractAppConfig(app) {
        var e_1, _a;
        if (!app || !app.options) {
            throw getMissingValueError('App Configuration');
        }
        if (!app.name) {
            throw getMissingValueError('App Name');
        }
        // Required app config keys
        var configKeys = [
            'projectId',
            'apiKey',
            'appId'
        ];
        try {
            for (var configKeys_1 = __values$1(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
                var keyName = configKeys_1_1.value;
                if (!app.options[keyName]) {
                    throw getMissingValueError(keyName);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            appName: app.name,
            projectId: app.options.projectId,
            apiKey: app.options.apiKey,
            appId: app.options.appId
        };
    }
    function getMissingValueError(valueName) {
        return ERROR_FACTORY$2.create("missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */, {
            valueName: valueName
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerInstallations(instance) {
        var installationsName = 'installations';
        instance.INTERNAL.registerComponent(new Component(installationsName, function (container) {
            var app = container.getProvider('app').getImmediate();
            // Throws if app isn't configured properly.
            var appConfig = extractAppConfig(app);
            var platformLoggerProvider = container.getProvider('platform-logger');
            var dependencies = {
                appConfig: appConfig,
                platformLoggerProvider: platformLoggerProvider
            };
            var installations = {
                app: app,
                getId: function () { return getId(dependencies); },
                getToken: function (forceRefresh) {
                    return getToken(dependencies, forceRefresh);
                },
                delete: function () { return deleteInstallation(dependencies); },
                onIdChange: function (callback) {
                    return onIdChange(dependencies, callback);
                }
            };
            return installations;
        }, "PUBLIC" /* PUBLIC */));
        instance.registerVersion(name$2, version$2);
    }
    registerInstallations(firebase);

    var name$1 = "@firebase/performance";
    var version$1 = "0.4.16";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SDK_VERSION = version$1;
    /** The prefix for start User Timing marks used for creating Traces. */
    var TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';
    /** The prefix for stop User Timing marks used for creating Traces. */
    var TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';
    /** The prefix for User Timing measure used for creating Traces. */
    var TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';
    /** The prefix for out of the box page load Trace name. */
    var OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';
    var FIRST_PAINT_COUNTER_NAME = '_fp';
    var FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';
    var FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';
    var CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';
    var CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';
    var SERVICE = 'performance';
    var SERVICE_NAME = 'Performance';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    var ERROR_DESCRIPTION_MAP = (_a$1 = {},
        _a$1["trace started" /* TRACE_STARTED_BEFORE */] = 'Trace {$traceName} was started before.',
        _a$1["trace stopped" /* TRACE_STOPPED_BEFORE */] = 'Trace {$traceName} is not running.',
        _a$1["nonpositive trace startTime" /* NONPOSITIVE_TRACE_START_TIME */] = 'Trace {$traceName} startTime should be positive.',
        _a$1["nonpositive trace duration" /* NONPOSITIVE_TRACE_DURATION */] = 'Trace {$traceName} duration should be positive.',
        _a$1["no window" /* NO_WINDOW */] = 'Window is not available.',
        _a$1["no app id" /* NO_APP_ID */] = 'App id is not available.',
        _a$1["no project id" /* NO_PROJECT_ID */] = 'Project id is not available.',
        _a$1["no api key" /* NO_API_KEY */] = 'Api key is not available.',
        _a$1["invalid cc log" /* INVALID_CC_LOG */] = 'Attempted to queue invalid cc event',
        _a$1["FB not default" /* FB_NOT_DEFAULT */] = 'Performance can only start when Firebase app instance is the default one.',
        _a$1["RC response not ok" /* RC_NOT_OK */] = 'RC response is not ok',
        _a$1["invalid attribute name" /* INVALID_ATTRIBUTE_NAME */] = 'Attribute name {$attributeName} is invalid.',
        _a$1["invalid attribute value" /* INVALID_ATTRIBUTE_VALUE */] = 'Attribute value {$attributeValue} is invalid.',
        _a$1["invalid custom metric name" /* INVALID_CUSTOM_METRIC_NAME */] = 'Custom metric name {$customMetricName} is invalid',
        _a$1["invalid String merger input" /* INVALID_STRING_MERGER_PARAMETER */] = 'Input for String merger is invalid, contact support team to resolve.',
        _a$1);
    var ERROR_FACTORY$1 = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var consoleLogger = new Logger(SERVICE_NAME);
    consoleLogger.logLevel = LogLevel.INFO;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var apiInstance;
    var windowInstance;
    /**
     * This class holds a reference to various browser related objects injected by
     * set methods.
     */
    var Api = /** @class */ (function () {
        function Api(window) {
            this.window = window;
            if (!window) {
                throw ERROR_FACTORY$1.create("no window" /* NO_WINDOW */);
            }
            this.performance = window.performance;
            this.PerformanceObserver = window.PerformanceObserver;
            this.windowLocation = window.location;
            this.navigator = window.navigator;
            this.document = window.document;
            if (this.navigator && this.navigator.cookieEnabled) {
                // If user blocks cookies on the browser, accessing localStorage will
                // throw an exception.
                this.localStorage = window.localStorage;
            }
            if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {
                this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;
            }
        }
        Api.prototype.getUrl = function () {
            // Do not capture the string query part of url.
            return this.windowLocation.href.split('?')[0];
        };
        Api.prototype.mark = function (name) {
            if (!this.performance || !this.performance.mark) {
                return;
            }
            this.performance.mark(name);
        };
        Api.prototype.measure = function (measureName, mark1, mark2) {
            if (!this.performance || !this.performance.measure) {
                return;
            }
            this.performance.measure(measureName, mark1, mark2);
        };
        Api.prototype.getEntriesByType = function (type) {
            if (!this.performance || !this.performance.getEntriesByType) {
                return [];
            }
            return this.performance.getEntriesByType(type);
        };
        Api.prototype.getEntriesByName = function (name) {
            if (!this.performance || !this.performance.getEntriesByName) {
                return [];
            }
            return this.performance.getEntriesByName(name);
        };
        Api.prototype.getTimeOrigin = function () {
            // Polyfill the time origin with performance.timing.navigationStart.
            return (this.performance &&
                (this.performance.timeOrigin || this.performance.timing.navigationStart));
        };
        Api.prototype.requiredApisAvailable = function () {
            if (!fetch ||
                !Promise ||
                !this.navigator ||
                !this.navigator.cookieEnabled) {
                consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');
                return false;
            }
            if (!isIndexedDBAvailable()) {
                consoleLogger.info('IndexedDB is not supported by current browswer');
                return false;
            }
            return true;
        };
        Api.prototype.setupObserver = function (entryType, callback) {
            if (!this.PerformanceObserver) {
                return;
            }
            var observer = new this.PerformanceObserver(function (list) {
                for (var _i = 0, _a = list.getEntries(); _i < _a.length; _i++) {
                    var entry = _a[_i];
                    // `entry` is a PerformanceEntry instance.
                    callback(entry);
                }
            });
            // Start observing the entry types you care about.
            observer.observe({ entryTypes: [entryType] });
        };
        Api.getInstance = function () {
            if (apiInstance === undefined) {
                apiInstance = new Api(windowInstance);
            }
            return apiInstance;
        };
        return Api;
    }());
    function setupApi(window) {
        windowInstance = window;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function mergeStrings(part1, part2) {
        var sizeDiff = part1.length - part2.length;
        if (sizeDiff < 0 || sizeDiff > 1) {
            throw ERROR_FACTORY$1.create("invalid String merger input" /* INVALID_STRING_MERGER_PARAMETER */);
        }
        var resultArray = [];
        for (var i = 0; i < part1.length; i++) {
            resultArray.push(part1.charAt(i));
            if (part2.length > i) {
                resultArray.push(part2.charAt(i));
            }
        }
        return resultArray.join('');
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var settingsServiceInstance;
    var SettingsService = /** @class */ (function () {
        function SettingsService() {
            // The variable which controls logging of automatic traces and HTTP/S network monitoring.
            this.instrumentationEnabled = true;
            // The variable which controls logging of custom traces.
            this.dataCollectionEnabled = true;
            // Configuration flags set through remote config.
            this.loggingEnabled = false;
            // Sampling rate between 0 and 1.
            this.tracesSamplingRate = 1;
            this.networkRequestsSamplingRate = 1;
            // Address of logging service.
            this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';
            // Performance event transport endpoint URL which should be compatible with proto3.
            // New Address for transport service, not configurable via Remote Config.
            this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');
            this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');
            // Source type for performance event logs.
            this.logSource = 462;
            // Flags which control per session logging of traces and network requests.
            this.logTraceAfterSampling = false;
            this.logNetworkAfterSampling = false;
            // TTL of config retrieved from remote config in hours.
            this.configTimeToLive = 12;
        }
        SettingsService.prototype.getAppId = function () {
            var appId = this.firebaseAppInstance &&
                this.firebaseAppInstance.options &&
                this.firebaseAppInstance.options.appId;
            if (!appId) {
                throw ERROR_FACTORY$1.create("no app id" /* NO_APP_ID */);
            }
            return appId;
        };
        SettingsService.prototype.getProjectId = function () {
            var projectId = this.firebaseAppInstance &&
                this.firebaseAppInstance.options &&
                this.firebaseAppInstance.options.projectId;
            if (!projectId) {
                throw ERROR_FACTORY$1.create("no project id" /* NO_PROJECT_ID */);
            }
            return projectId;
        };
        SettingsService.prototype.getApiKey = function () {
            var apiKey = this.firebaseAppInstance &&
                this.firebaseAppInstance.options &&
                this.firebaseAppInstance.options.apiKey;
            if (!apiKey) {
                throw ERROR_FACTORY$1.create("no api key" /* NO_API_KEY */);
            }
            return apiKey;
        };
        SettingsService.prototype.getFlTransportFullUrl = function () {
            return this.flTransportEndpointUrl.concat('?key=', this.transportKey);
        };
        SettingsService.getInstance = function () {
            if (settingsServiceInstance === undefined) {
                settingsServiceInstance = new SettingsService();
            }
            return settingsServiceInstance;
        };
        return SettingsService;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var iid;
    function getIidPromise() {
        var iidPromise = SettingsService.getInstance().installationsService.getId();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        iidPromise.then(function (iidVal) {
            iid = iidVal;
        });
        return iidPromise;
    }
    // This method should be used after the iid is retrieved by getIidPromise method.
    function getIid() {
        return iid;
    }
    function getAuthTokenPromise() {
        var authTokenPromise = SettingsService.getInstance().installationsService.getToken();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        authTokenPromise.then(function (authTokenVal) {
        });
        return authTokenPromise;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VisibilityState;
    (function (VisibilityState) {
        VisibilityState[VisibilityState["UNKNOWN"] = 0] = "UNKNOWN";
        VisibilityState[VisibilityState["VISIBLE"] = 1] = "VISIBLE";
        VisibilityState[VisibilityState["HIDDEN"] = 2] = "HIDDEN";
    })(VisibilityState || (VisibilityState = {}));
    var RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];
    var ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\w*$');
    var MAX_ATTRIBUTE_NAME_LENGTH = 40;
    var MAX_ATTRIBUTE_VALUE_LENGTH = 100;
    function getServiceWorkerStatus() {
        var navigator = Api.getInstance().navigator;
        if ('serviceWorker' in navigator) {
            if (navigator.serviceWorker.controller) {
                return 2 /* CONTROLLED */;
            }
            else {
                return 3 /* UNCONTROLLED */;
            }
        }
        else {
            return 1 /* UNSUPPORTED */;
        }
    }
    function getVisibilityState() {
        var document = Api.getInstance().document;
        var visibilityState = document.visibilityState;
        switch (visibilityState) {
            case 'visible':
                return VisibilityState.VISIBLE;
            case 'hidden':
                return VisibilityState.HIDDEN;
            default:
                return VisibilityState.UNKNOWN;
        }
    }
    function getEffectiveConnectionType() {
        var navigator = Api.getInstance().navigator;
        var navigatorConnection = navigator.connection;
        var effectiveType = navigatorConnection && navigatorConnection.effectiveType;
        switch (effectiveType) {
            case 'slow-2g':
                return 1 /* CONNECTION_SLOW_2G */;
            case '2g':
                return 2 /* CONNECTION_2G */;
            case '3g':
                return 3 /* CONNECTION_3G */;
            case '4g':
                return 4 /* CONNECTION_4G */;
            default:
                return 0 /* UNKNOWN */;
        }
    }
    function isValidCustomAttributeName(name) {
        if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {
            return false;
        }
        var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {
            return name.startsWith(prefix);
        });
        return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);
    }
    function isValidCustomAttributeValue(value) {
        return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var REMOTE_CONFIG_SDK_VERSION = '0.0.1';
    // These values will be used if the remote config object is successfully
    // retrieved, but the template does not have these fields.
    var DEFAULT_CONFIGS = {
        loggingEnabled: true
    };
    var FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';
    function getConfig(iid) {
        var config = getStoredConfig();
        if (config) {
            processConfig(config);
            return Promise.resolve();
        }
        return getRemoteConfig(iid)
            .then(processConfig)
            .then(function (config) { return storeConfig(config); }, 
        /** Do nothing for error, use defaults set in settings service. */
        function () { });
    }
    function getStoredConfig() {
        var localStorage = Api.getInstance().localStorage;
        if (!localStorage) {
            return;
        }
        var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);
        if (!expiryString || !configValid(expiryString)) {
            return;
        }
        var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);
        if (!configStringified) {
            return;
        }
        try {
            var configResponse = JSON.parse(configStringified);
            return configResponse;
        }
        catch (_a) {
            return;
        }
    }
    function storeConfig(config) {
        var localStorage = Api.getInstance().localStorage;
        if (!config || !localStorage) {
            return;
        }
        localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));
        localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() +
            SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));
    }
    var COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';
    function getRemoteConfig(iid) {
        // Perf needs auth token only to retrieve remote config.
        return getAuthTokenPromise()
            .then(function (authToken) {
            var projectId = SettingsService.getInstance().getProjectId();
            var configEndPoint = "https://firebaseremoteconfig.googleapis.com/v1/projects/" + projectId + "/namespaces/fireperf:fetch?key=" + SettingsService.getInstance().getApiKey();
            var request = new Request(configEndPoint, {
                method: 'POST',
                headers: { Authorization: FIS_AUTH_PREFIX + " " + authToken },
                /* eslint-disable camelcase */
                body: JSON.stringify({
                    app_instance_id: iid,
                    app_instance_id_token: authToken,
                    app_id: SettingsService.getInstance().getAppId(),
                    app_version: SDK_VERSION,
                    sdk_version: REMOTE_CONFIG_SDK_VERSION
                })
                /* eslint-enable camelcase */
            });
            return fetch(request).then(function (response) {
                if (response.ok) {
                    return response.json();
                }
                // In case response is not ok. This will be caught by catch.
                throw ERROR_FACTORY$1.create("RC response not ok" /* RC_NOT_OK */);
            });
        })
            .catch(function () {
            consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);
            return undefined;
        });
    }
    /**
     * Processes config coming either from calling RC or from local storage.
     * This method only runs if call is successful or config in storage
     * is valid.
     */
    function processConfig(config) {
        if (!config) {
            return config;
        }
        var settingsServiceInstance = SettingsService.getInstance();
        var entries = config.entries || {};
        if (entries.fpr_enabled !== undefined) {
            // TODO: Change the assignment of loggingEnabled once the received type is
            // known.
            settingsServiceInstance.loggingEnabled =
                String(entries.fpr_enabled) === 'true';
        }
        else {
            // Config retrieved successfully, but there is no fpr_enabled in template.
            // Use secondary configs value.
            settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;
        }
        if (entries.fpr_log_source) {
            settingsServiceInstance.logSource = Number(entries.fpr_log_source);
        }
        if (entries.fpr_log_endpoint_url) {
            settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;
        }
        // Key from Remote Config has to be non-empty string, otherwsie use local value.
        if (entries.fpr_log_transport_key) {
            settingsServiceInstance.transportKey = entries.fpr_log_transport_key;
        }
        if (entries.fpr_vc_network_request_sampling_rate !== undefined) {
            settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);
        }
        if (entries.fpr_vc_trace_sampling_rate !== undefined) {
            settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);
        }
        // Set the per session trace and network logging flags.
        settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);
        settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);
        return config;
    }
    function configValid(expiry) {
        return Number(expiry) > Date.now();
    }
    function shouldLogAfterSampling(samplingRate) {
        return Math.random() <= samplingRate;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var initializationStatus = 1 /* notInitialized */;
    var initializationPromise;
    function getInitializationPromise() {
        initializationStatus = 2 /* initializationPending */;
        initializationPromise = initializationPromise || initializePerf();
        return initializationPromise;
    }
    function isPerfInitialized() {
        return initializationStatus === 3 /* initialized */;
    }
    function initializePerf() {
        return getDocumentReadyComplete()
            .then(function () { return getIidPromise(); })
            .then(function (iid) { return getConfig(iid); })
            .then(function () { return changeInitializationStatus(); }, function () { return changeInitializationStatus(); });
    }
    /**
     * Returns a promise which resolves whenever the document readystate is complete or
     * immediately if it is called after page load complete.
     */
    function getDocumentReadyComplete() {
        var document = Api.getInstance().document;
        return new Promise(function (resolve) {
            if (document && document.readyState !== 'complete') {
                var handler_1 = function () {
                    if (document.readyState === 'complete') {
                        document.removeEventListener('readystatechange', handler_1);
                        resolve();
                    }
                };
                document.addEventListener('readystatechange', handler_1);
            }
            else {
                resolve();
            }
        });
    }
    function changeInitializationStatus() {
        initializationStatus = 3 /* initialized */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_SEND_INTERVAL_MS = 10 * 1000;
    var INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;
    // If end point does not work, the call will be tried for these many times.
    var DEFAULT_REMAINING_TRIES = 3;
    var MAX_EVENT_COUNT_PER_REQUEST = 1000;
    var remainingTries = DEFAULT_REMAINING_TRIES;
    /* eslint-enable camelcase */
    var queue = [];
    var isTransportSetup = false;
    function setupTransportService() {
        if (!isTransportSetup) {
            processQueue(INITIAL_SEND_TIME_DELAY_MS);
            isTransportSetup = true;
        }
    }
    function processQueue(timeOffset) {
        setTimeout(function () {
            // If there is no remainingTries left, stop retrying.
            if (remainingTries === 0) {
                return;
            }
            // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.
            if (!queue.length) {
                return processQueue(DEFAULT_SEND_INTERVAL_MS);
            }
            dispatchQueueEvents();
        }, timeOffset);
    }
    function dispatchQueueEvents() {
        // Extract events up to the maximum cap of single logRequest from top of "official queue".
        // The staged events will be used for current logRequest attempt, remaining events will be kept
        // for next attempt.
        var staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);
        /* eslint-disable camelcase */
        // We will pass the JSON serialized event to the backend.
        var log_event = staged.map(function (evt) { return ({
            source_extension_json_proto3: evt.message,
            event_time_ms: String(evt.eventTime)
        }); });
        var data = {
            request_time_ms: String(Date.now()),
            client_info: {
                client_type: 1,
                js_client_info: {}
            },
            log_source: SettingsService.getInstance().logSource,
            log_event: log_event
        };
        /* eslint-enable camelcase */
        sendEventsToFl(data, staged).catch(function () {
            // If the request fails for some reason, add the events that were attempted
            // back to the primary queue to retry later.
            queue = __spreadArray(__spreadArray([], staged), queue);
            remainingTries--;
            consoleLogger.info("Tries left: " + remainingTries + ".");
            processQueue(DEFAULT_SEND_INTERVAL_MS);
        });
    }
    function sendEventsToFl(data, staged) {
        return postToFlEndpoint(data)
            .then(function (res) {
            if (!res.ok) {
                consoleLogger.info('Call to Firebase backend failed.');
            }
            return res.json();
        })
            .then(function (res) {
            // Find the next call wait time from the response.
            var transportWait = Number(res.nextRequestWaitMillis);
            var requestOffset = DEFAULT_SEND_INTERVAL_MS;
            if (!isNaN(transportWait)) {
                requestOffset = Math.max(transportWait, requestOffset);
            }
            // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.
            // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.
            var logResponseDetails = res.logResponseDetails;
            if (Array.isArray(logResponseDetails) &&
                logResponseDetails.length > 0 &&
                logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {
                queue = __spreadArray(__spreadArray([], staged), queue);
                consoleLogger.info("Retry transport request later.");
            }
            remainingTries = DEFAULT_REMAINING_TRIES;
            // Schedule the next process.
            processQueue(requestOffset);
        });
    }
    function postToFlEndpoint(data) {
        var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();
        return fetch(flTransportFullUrl, {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }
    function addToQueue(evt) {
        if (!evt.eventTime || !evt.message) {
            throw ERROR_FACTORY$1.create("invalid cc log" /* INVALID_CC_LOG */);
        }
        // Add the new event to the queue.
        queue = __spreadArray(__spreadArray([], queue), [evt]);
    }
    /** Log handler for cc service to send the performance logs to the server. */
    function transportHandler(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    serializer) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var message = serializer.apply(void 0, args);
            addToQueue({
                message: message,
                eventTime: Date.now()
            });
        };
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /* eslint-enble camelcase */
    var logger$1;
    // This method is not called before initialization.
    function sendLog(resource, resourceType) {
        if (!logger$1) {
            logger$1 = transportHandler(serializer);
        }
        logger$1(resource, resourceType);
    }
    function logTrace(trace) {
        var settingsService = SettingsService.getInstance();
        // Do not log if trace is auto generated and instrumentation is disabled.
        if (!settingsService.instrumentationEnabled && trace.isAuto) {
            return;
        }
        // Do not log if trace is custom and data collection is disabled.
        if (!settingsService.dataCollectionEnabled && !trace.isAuto) {
            return;
        }
        // Do not log if required apis are not available.
        if (!Api.getInstance().requiredApisAvailable()) {
            return;
        }
        // Only log the page load auto traces if page is visible.
        if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {
            return;
        }
        if (isPerfInitialized()) {
            sendTraceLog(trace);
        }
        else {
            // Custom traces can be used before the initialization but logging
            // should wait until after.
            getInitializationPromise().then(function () { return sendTraceLog(trace); }, function () { return sendTraceLog(trace); });
        }
    }
    function sendTraceLog(trace) {
        if (!getIid()) {
            return;
        }
        var settingsService = SettingsService.getInstance();
        if (!settingsService.loggingEnabled ||
            !settingsService.logTraceAfterSampling) {
            return;
        }
        setTimeout(function () { return sendLog(trace, 1 /* Trace */); }, 0);
    }
    function logNetworkRequest(networkRequest) {
        var settingsService = SettingsService.getInstance();
        // Do not log network requests if instrumentation is disabled.
        if (!settingsService.instrumentationEnabled) {
            return;
        }
        // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.
        // Need to blacklist both old and new endpoints to avoid migration gap.
        var networkRequestUrl = networkRequest.url;
        // Blacklist old log endpoint and new transport endpoint.
        // Because Performance SDK doesn't instrument requests sent from SDK itself.
        var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];
        var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];
        if (networkRequestUrl === logEndpointUrl ||
            networkRequestUrl === flEndpointUrl) {
            return;
        }
        if (!settingsService.loggingEnabled ||
            !settingsService.logNetworkAfterSampling) {
            return;
        }
        setTimeout(function () { return sendLog(networkRequest, 0 /* NetworkRequest */); }, 0);
    }
    function serializer(resource, resourceType) {
        if (resourceType === 0 /* NetworkRequest */) {
            return serializeNetworkRequest(resource);
        }
        return serializeTrace(resource);
    }
    function serializeNetworkRequest(networkRequest) {
        var networkRequestMetric = {
            url: networkRequest.url,
            http_method: networkRequest.httpMethod || 0,
            http_response_code: 200,
            response_payload_bytes: networkRequest.responsePayloadBytes,
            client_start_time_us: networkRequest.startTimeUs,
            time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,
            time_to_response_completed_us: networkRequest.timeToResponseCompletedUs
        };
        var perfMetric = {
            application_info: getApplicationInfo(),
            network_request_metric: networkRequestMetric
        };
        return JSON.stringify(perfMetric);
    }
    function serializeTrace(trace) {
        var traceMetric = {
            name: trace.name,
            is_auto: trace.isAuto,
            client_start_time_us: trace.startTimeUs,
            duration_us: trace.durationUs
        };
        if (Object.keys(trace.counters).length !== 0) {
            traceMetric.counters = trace.counters;
        }
        var customAttributes = trace.getAttributes();
        if (Object.keys(customAttributes).length !== 0) {
            traceMetric.custom_attributes = customAttributes;
        }
        var perfMetric = {
            application_info: getApplicationInfo(),
            trace_metric: traceMetric
        };
        return JSON.stringify(perfMetric);
    }
    function getApplicationInfo() {
        return {
            google_app_id: SettingsService.getInstance().getAppId(),
            app_instance_id: getIid(),
            web_app_info: {
                sdk_version: SDK_VERSION,
                page_url: Api.getInstance().getUrl(),
                service_worker_status: getServiceWorkerStatus(),
                visibility_state: getVisibilityState(),
                effective_connection_type: getEffectiveConnectionType()
            },
            application_process_state: 0
        };
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MAX_METRIC_NAME_LENGTH = 100;
    var RESERVED_AUTO_PREFIX = '_';
    var oobMetrics = [
        FIRST_PAINT_COUNTER_NAME,
        FIRST_CONTENTFUL_PAINT_COUNTER_NAME,
        FIRST_INPUT_DELAY_COUNTER_NAME
    ];
    /**
     * Returns true if the metric is custom and does not start with reserved prefix, or if
     * the metric is one of out of the box page load trace metrics.
     */
    function isValidMetricName(name, traceName) {
        if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {
            return false;
        }
        return ((traceName &&
            traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&
            oobMetrics.indexOf(name) > -1) ||
            !name.startsWith(RESERVED_AUTO_PREFIX));
    }
    /**
     * Converts the provided value to an integer value to be used in case of a metric.
     * @param providedValue Provided number value of the metric that needs to be converted to an integer.
     *
     * @returns Converted integer number to be set for the metric.
     */
    function convertMetricValueToInteger(providedValue) {
        var valueAsInteger = Math.floor(providedValue);
        if (valueAsInteger < providedValue) {
            consoleLogger.info("Metric value should be an Integer, setting the value as : " + valueAsInteger + ".");
        }
        return valueAsInteger;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Trace = /** @class */ (function () {
        /**
         * @param name The name of the trace.
         * @param isAuto If the trace is auto-instrumented.
         * @param traceMeasureName The name of the measure marker in user timing specification. This field
         * is only set when the trace is built for logging when the user directly uses the user timing
         * api (performance.mark and performance.measure).
         */
        function Trace(name, isAuto, traceMeasureName) {
            if (isAuto === void 0) { isAuto = false; }
            this.name = name;
            this.isAuto = isAuto;
            this.state = 1 /* UNINITIALIZED */;
            this.customAttributes = {};
            this.counters = {};
            this.api = Api.getInstance();
            this.randomId = Math.floor(Math.random() * 1000000);
            if (!this.isAuto) {
                this.traceStartMark = TRACE_START_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
                this.traceStopMark = TRACE_STOP_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
                this.traceMeasure =
                    traceMeasureName ||
                        TRACE_MEASURE_PREFIX + "-" + this.randomId + "-" + this.name;
                if (traceMeasureName) {
                    // For the case of direct user timing traces, no start stop will happen. The measure object
                    // is already available.
                    this.calculateTraceMetrics();
                }
            }
        }
        /**
         * Starts a trace. The measurement of the duration starts at this point.
         */
        Trace.prototype.start = function () {
            if (this.state !== 1 /* UNINITIALIZED */) {
                throw ERROR_FACTORY$1.create("trace started" /* TRACE_STARTED_BEFORE */, {
                    traceName: this.name
                });
            }
            this.api.mark(this.traceStartMark);
            this.state = 2 /* RUNNING */;
        };
        /**
         * Stops the trace. The measurement of the duration of the trace stops at this point and trace
         * is logged.
         */
        Trace.prototype.stop = function () {
            if (this.state !== 2 /* RUNNING */) {
                throw ERROR_FACTORY$1.create("trace stopped" /* TRACE_STOPPED_BEFORE */, {
                    traceName: this.name
                });
            }
            this.state = 3 /* TERMINATED */;
            this.api.mark(this.traceStopMark);
            this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);
            this.calculateTraceMetrics();
            logTrace(this);
        };
        /**
         * Records a trace with predetermined values. If this method is used a trace is created and logged
         * directly. No need to use start and stop methods.
         * @param startTime Trace start time since epoch in millisec
         * @param duration The duraction of the trace in millisec
         * @param options An object which can optionally hold maps of custom metrics and custom attributes
         */
        Trace.prototype.record = function (startTime, duration, options) {
            if (startTime <= 0) {
                throw ERROR_FACTORY$1.create("nonpositive trace startTime" /* NONPOSITIVE_TRACE_START_TIME */, {
                    traceName: this.name
                });
            }
            if (duration <= 0) {
                throw ERROR_FACTORY$1.create("nonpositive trace duration" /* NONPOSITIVE_TRACE_DURATION */, {
                    traceName: this.name
                });
            }
            this.durationUs = Math.floor(duration * 1000);
            this.startTimeUs = Math.floor(startTime * 1000);
            if (options && options.attributes) {
                this.customAttributes = __assign({}, options.attributes);
            }
            if (options && options.metrics) {
                for (var _i = 0, _a = Object.keys(options.metrics); _i < _a.length; _i++) {
                    var metric = _a[_i];
                    if (!isNaN(Number(options.metrics[metric]))) {
                        this.counters[metric] = Number(Math.floor(options.metrics[metric]));
                    }
                }
            }
            logTrace(this);
        };
        /**
         * Increments a custom metric by a certain number or 1 if number not specified. Will create a new
         * custom metric if one with the given name does not exist. The value will be floored down to an
         * integer.
         * @param counter Name of the custom metric
         * @param numAsInteger Increment by value
         */
        Trace.prototype.incrementMetric = function (counter, numAsInteger) {
            if (numAsInteger === void 0) { numAsInteger = 1; }
            if (this.counters[counter] === undefined) {
                this.putMetric(counter, numAsInteger);
            }
            else {
                this.putMetric(counter, this.counters[counter] + numAsInteger);
            }
        };
        /**
         * Sets a custom metric to a specified value. Will create a new custom metric if one with the
         * given name does not exist. The value will be floored down to an integer.
         * @param counter Name of the custom metric
         * @param numAsInteger Set custom metric to this value
         */
        Trace.prototype.putMetric = function (counter, numAsInteger) {
            if (isValidMetricName(counter, this.name)) {
                this.counters[counter] = convertMetricValueToInteger(numAsInteger);
            }
            else {
                throw ERROR_FACTORY$1.create("invalid custom metric name" /* INVALID_CUSTOM_METRIC_NAME */, {
                    customMetricName: counter
                });
            }
        };
        /**
         * Returns the value of the custom metric by that name. If a custom metric with that name does
         * not exist will return zero.
         * @param counter
         */
        Trace.prototype.getMetric = function (counter) {
            return this.counters[counter] || 0;
        };
        /**
         * Sets a custom attribute of a trace to a certain value.
         * @param attr
         * @param value
         */
        Trace.prototype.putAttribute = function (attr, value) {
            var isValidName = isValidCustomAttributeName(attr);
            var isValidValue = isValidCustomAttributeValue(value);
            if (isValidName && isValidValue) {
                this.customAttributes[attr] = value;
                return;
            }
            // Throw appropriate error when the attribute name or value is invalid.
            if (!isValidName) {
                throw ERROR_FACTORY$1.create("invalid attribute name" /* INVALID_ATTRIBUTE_NAME */, {
                    attributeName: attr
                });
            }
            if (!isValidValue) {
                throw ERROR_FACTORY$1.create("invalid attribute value" /* INVALID_ATTRIBUTE_VALUE */, {
                    attributeValue: value
                });
            }
        };
        /**
         * Retrieves the value a custom attribute of a trace is set to.
         * @param attr
         */
        Trace.prototype.getAttribute = function (attr) {
            return this.customAttributes[attr];
        };
        Trace.prototype.removeAttribute = function (attr) {
            if (this.customAttributes[attr] === undefined) {
                return;
            }
            delete this.customAttributes[attr];
        };
        Trace.prototype.getAttributes = function () {
            return __assign({}, this.customAttributes);
        };
        Trace.prototype.setStartTime = function (startTime) {
            this.startTimeUs = startTime;
        };
        Trace.prototype.setDuration = function (duration) {
            this.durationUs = duration;
        };
        /**
         * Calculates and assigns the duration and start time of the trace using the measure performance
         * entry.
         */
        Trace.prototype.calculateTraceMetrics = function () {
            var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);
            var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];
            if (perfMeasureEntry) {
                this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);
                this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);
            }
        };
        /**
         * @param navigationTimings A single element array which contains the navigationTIming object of
         * the page load
         * @param paintTimings A array which contains paintTiming object of the page load
         * @param firstInputDelay First input delay in millisec
         */
        Trace.createOobTrace = function (navigationTimings, paintTimings, firstInputDelay) {
            var route = Api.getInstance().getUrl();
            if (!route) {
                return;
            }
            var trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);
            var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);
            trace.setStartTime(timeOriginUs);
            // navigationTimings includes only one element.
            if (navigationTimings && navigationTimings[0]) {
                trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));
                trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));
                trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));
                trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));
            }
            var FIRST_PAINT = 'first-paint';
            var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';
            if (paintTimings) {
                var firstPaint = paintTimings.find(function (paintObject) { return paintObject.name === FIRST_PAINT; });
                if (firstPaint && firstPaint.startTime) {
                    trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));
                }
                var firstContentfulPaint = paintTimings.find(function (paintObject) { return paintObject.name === FIRST_CONTENTFUL_PAINT; });
                if (firstContentfulPaint && firstContentfulPaint.startTime) {
                    trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));
                }
                if (firstInputDelay) {
                    trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));
                }
            }
            logTrace(trace);
        };
        Trace.createUserTimingTrace = function (measureName) {
            var trace = new Trace(measureName, false, measureName);
            logTrace(trace);
        };
        return Trace;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createNetworkRequestEntry(entry) {
        var performanceEntry = entry;
        if (!performanceEntry || performanceEntry.responseStart === undefined) {
            return;
        }
        var timeOrigin = Api.getInstance().getTimeOrigin();
        var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);
        var timeToResponseInitiatedUs = performanceEntry.responseStart
            ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000)
            : undefined;
        var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);
        // Remove the query params from logged network request url.
        var url = performanceEntry.name && performanceEntry.name.split('?')[0];
        var networkRequest = {
            url: url,
            responsePayloadBytes: performanceEntry.transferSize,
            startTimeUs: startTimeUs,
            timeToResponseInitiatedUs: timeToResponseInitiatedUs,
            timeToResponseCompletedUs: timeToResponseCompletedUs
        };
        logNetworkRequest(networkRequest);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FID_WAIT_TIME_MS = 5000;
    function setupOobResources() {
        // Do not initialize unless iid is available.
        if (!getIid()) {
            return;
        }
        // The load event might not have fired yet, and that means performance navigation timing
        // object has a duration of 0. The setup should run after all current tasks in js queue.
        setTimeout(function () { return setupOobTraces(); }, 0);
        setTimeout(function () { return setupNetworkRequests(); }, 0);
        setTimeout(function () { return setupUserTimingTraces(); }, 0);
    }
    function setupNetworkRequests() {
        var api = Api.getInstance();
        var resources = api.getEntriesByType('resource');
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
            var resource = resources_1[_i];
            createNetworkRequestEntry(resource);
        }
        api.setupObserver('resource', createNetworkRequestEntry);
    }
    function setupOobTraces() {
        var api = Api.getInstance();
        var navigationTimings = api.getEntriesByType('navigation');
        var paintTimings = api.getEntriesByType('paint');
        // If First Input Desly polyfill is added to the page, report the fid value.
        // https://github.com/GoogleChromeLabs/first-input-delay
        if (api.onFirstInputDelay) {
            // If the fid call back is not called for certain time, continue without it.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var timeoutId_1 = setTimeout(function () {
                Trace.createOobTrace(navigationTimings, paintTimings);
                timeoutId_1 = undefined;
            }, FID_WAIT_TIME_MS);
            api.onFirstInputDelay(function (fid) {
                if (timeoutId_1) {
                    clearTimeout(timeoutId_1);
                    Trace.createOobTrace(navigationTimings, paintTimings, fid);
                }
            });
        }
        else {
            Trace.createOobTrace(navigationTimings, paintTimings);
        }
    }
    function setupUserTimingTraces() {
        var api = Api.getInstance();
        // Run through the measure performance entries collected up to this point.
        var measures = api.getEntriesByType('measure');
        for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {
            var measure = measures_1[_i];
            createUserTimingTrace(measure);
        }
        // Setup an observer to capture the measures from this point on.
        api.setupObserver('measure', createUserTimingTrace);
    }
    function createUserTimingTrace(measure) {
        var measureName = measure.name;
        // Do not create a trace, if the user timing marks and measures are created by the sdk itself.
        if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===
            TRACE_MEASURE_PREFIX) {
            return;
        }
        Trace.createUserTimingTrace(measureName);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PerformanceController = /** @class */ (function () {
        function PerformanceController(app) {
            this.app = app;
            if (Api.getInstance().requiredApisAvailable()) {
                validateIndexedDBOpenable()
                    .then(function (isAvailable) {
                    if (isAvailable) {
                        setupTransportService();
                        getInitializationPromise().then(setupOobResources, setupOobResources);
                    }
                })
                    .catch(function (error) {
                    consoleLogger.info("Environment doesn't support IndexedDB: " + error);
                });
            }
        }
        PerformanceController.prototype.trace = function (name) {
            return new Trace(name);
        };
        Object.defineProperty(PerformanceController.prototype, "instrumentationEnabled", {
            get: function () {
                return SettingsService.getInstance().instrumentationEnabled;
            },
            set: function (val) {
                SettingsService.getInstance().instrumentationEnabled = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PerformanceController.prototype, "dataCollectionEnabled", {
            get: function () {
                return SettingsService.getInstance().dataCollectionEnabled;
            },
            set: function (val) {
                SettingsService.getInstance().dataCollectionEnabled = val;
            },
            enumerable: false,
            configurable: true
        });
        return PerformanceController;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_ENTRY_NAME = '[DEFAULT]';
    function registerPerformance(instance) {
        var factoryMethod = function (app, installations) {
            if (app.name !== DEFAULT_ENTRY_NAME) {
                throw ERROR_FACTORY$1.create("FB not default" /* FB_NOT_DEFAULT */);
            }
            if (typeof window === 'undefined') {
                throw ERROR_FACTORY$1.create("no window" /* NO_WINDOW */);
            }
            setupApi(window);
            SettingsService.getInstance().firebaseAppInstance = app;
            SettingsService.getInstance().installationsService = installations;
            return new PerformanceController(app);
        };
        // Register performance with firebase-app.
        instance.INTERNAL.registerComponent(new Component('performance', function (container) {
            /* Dependencies */
            // getImmediate for FirebaseApp will always succeed
            var app = container.getProvider('app').getImmediate();
            // The following call will always succeed because perf has `import '@firebase/installations'`
            var installations = container
                .getProvider('installations')
                .getImmediate();
            return factoryMethod(app, installations);
        }, "PUBLIC" /* PUBLIC */));
        instance.registerVersion(name$1, version$1);
    }
    registerPerformance(firebase);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Key to attach FID to in gtag params.
    var GA_FID_KEY = 'firebase_id';
    var ORIGIN_KEY = 'origin';
    var FETCH_TIMEOUT_MILLIS = 60 * 1000;
    var DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';
    var GTAG_URL = 'https://www.googletagmanager.com/gtag/js';
    var GtagCommand;
    (function (GtagCommand) {
        GtagCommand["EVENT"] = "event";
        GtagCommand["SET"] = "set";
        GtagCommand["CONFIG"] = "config";
    })(GtagCommand || (GtagCommand = {}));
    /**
     * Officially recommended event names for gtag.js
     * Any other string is also allowed.
     *
     * @public
     */
    var EventName;
    (function (EventName) {
        EventName["ADD_SHIPPING_INFO"] = "add_shipping_info";
        EventName["ADD_PAYMENT_INFO"] = "add_payment_info";
        EventName["ADD_TO_CART"] = "add_to_cart";
        EventName["ADD_TO_WISHLIST"] = "add_to_wishlist";
        EventName["BEGIN_CHECKOUT"] = "begin_checkout";
        /**
         * @deprecated
         * This event name is deprecated and is unsupported in updated
         * Enhanced Ecommerce reports.
         */
        EventName["CHECKOUT_PROGRESS"] = "checkout_progress";
        EventName["EXCEPTION"] = "exception";
        EventName["GENERATE_LEAD"] = "generate_lead";
        EventName["LOGIN"] = "login";
        EventName["PAGE_VIEW"] = "page_view";
        EventName["PURCHASE"] = "purchase";
        EventName["REFUND"] = "refund";
        EventName["REMOVE_FROM_CART"] = "remove_from_cart";
        EventName["SCREEN_VIEW"] = "screen_view";
        EventName["SEARCH"] = "search";
        EventName["SELECT_CONTENT"] = "select_content";
        EventName["SELECT_ITEM"] = "select_item";
        EventName["SELECT_PROMOTION"] = "select_promotion";
        /** @deprecated */
        EventName["SET_CHECKOUT_OPTION"] = "set_checkout_option";
        EventName["SHARE"] = "share";
        EventName["SIGN_UP"] = "sign_up";
        EventName["TIMING_COMPLETE"] = "timing_complete";
        EventName["VIEW_CART"] = "view_cart";
        EventName["VIEW_ITEM"] = "view_item";
        EventName["VIEW_ITEM_LIST"] = "view_item_list";
        EventName["VIEW_PROMOTION"] = "view_promotion";
        EventName["VIEW_SEARCH_RESULTS"] = "view_search_results";
    })(EventName || (EventName = {}));

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Logs an analytics event through the Firebase SDK.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param eventName Google Analytics event name, choose from standard list or use a custom string.
     * @param eventParams Analytics event parameters.
     */
    function logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        gtagFunction(GtagCommand.EVENT, eventName, eventParams);
                        return [2 /*return*/];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _a.sent();
                        params = __assign(__assign({}, eventParams), { 'send_to': measurementId });
                        gtagFunction(GtagCommand.EVENT, eventName, params);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set screen_name parameter for this Google Analytics ID.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param screenName Screen name string to set.
     */
    function setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        gtagFunction(GtagCommand.SET, { 'screen_name': screenName });
                        return [2 /*return*/, Promise.resolve()];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _a.sent();
                        gtagFunction(GtagCommand.CONFIG, measurementId, {
                            update: true,
                            'screen_name': screenName
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set user_id parameter for this Google Analytics ID.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param id User ID string to set
     */
    function setUserId(gtagFunction, initializationPromise, id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        gtagFunction(GtagCommand.SET, { 'user_id': id });
                        return [2 /*return*/, Promise.resolve()];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _a.sent();
                        gtagFunction(GtagCommand.CONFIG, measurementId, {
                            update: true,
                            'user_id': id
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set all other user properties other than user_id and screen_name.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param properties Map of user properties to set
     */
    function setUserProperties(gtagFunction, initializationPromise, properties, options) {
        return __awaiter(this, void 0, void 0, function () {
            var flatProperties, _i, _a, key, measurementId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        flatProperties = {};
                        for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {
                            key = _a[_i];
                            // use dot notation for merge behavior in gtag.js
                            flatProperties["user_properties." + key] = properties[key];
                        }
                        gtagFunction(GtagCommand.SET, flatProperties);
                        return [2 /*return*/, Promise.resolve()];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _b.sent();
                        gtagFunction(GtagCommand.CONFIG, measurementId, {
                            update: true,
                            'user_properties': properties
                        });
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set whether collection is enabled for this ID.
     *
     * @param enabled If true, collection is enabled for this ID.
     */
    function setAnalyticsCollectionEnabled(initializationPromise, enabled) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initializationPromise];
                    case 1:
                        measurementId = _a.sent();
                        window["ga-disable-" + measurementId] = !enabled;
                        return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger = new Logger('@firebase/analytics');

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Inserts gtag script tag into the page to asynchronously download gtag.
     * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
     */
    function insertScriptTag(dataLayerName, measurementId) {
        var script = document.createElement('script');
        script.src = GTAG_URL + "?l=" + dataLayerName + "&id=" + measurementId;
        script.async = true;
        document.head.appendChild(script);
    }
    /**
     * Get reference to, or create, global datalayer.
     * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
     */
    function getOrCreateDataLayer(dataLayerName) {
        // Check for existing dataLayer and create if needed.
        var dataLayer = [];
        if (Array.isArray(window[dataLayerName])) {
            dataLayer = window[dataLayerName];
        }
        else {
            window[dataLayerName] = dataLayer;
        }
        return dataLayer;
    }
    /**
     * Wrapped gtag logic when gtag is called with 'config' command.
     *
     * @param gtagCore Basic gtag function that just appends to dataLayer.
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
     * @param measurementId GA Measurement ID to set config for.
     * @param gtagParams Gtag config params to set.
     */
    function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {
        return __awaiter(this, void 0, void 0, function () {
            var correspondingAppId, dynamicConfigResults, foundConfig, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        correspondingAppId = measurementIdToAppId[measurementId];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        if (!correspondingAppId) return [3 /*break*/, 3];
                        return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 3: return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];
                    case 4:
                        dynamicConfigResults = _a.sent();
                        foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === measurementId; });
                        if (!foundConfig) return [3 /*break*/, 6];
                        return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        e_1 = _a.sent();
                        logger.error(e_1);
                        return [3 /*break*/, 8];
                    case 8:
                        gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Wrapped gtag logic when gtag is called with 'event' command.
     *
     * @param gtagCore Basic gtag function that just appends to dataLayer.
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementId GA Measurement ID to log event to.
     * @param gtagParams Params to log with this event.
     */
    function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {
        return __awaiter(this, void 0, void 0, function () {
            var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        initializationPromisesToWaitFor = [];
                        if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];
                        gaSendToList = gtagParams['send_to'];
                        // Make it an array if is isn't, so it can be dealt with the same way.
                        if (!Array.isArray(gaSendToList)) {
                            gaSendToList = [gaSendToList];
                        }
                        return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];
                    case 1:
                        dynamicConfigResults = _a.sent();
                        _loop_1 = function (sendToId) {
                            // Any fetched dynamic measurement ID that matches this 'send_to' ID
                            var foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === sendToId; });
                            var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];
                            if (initializationPromise) {
                                initializationPromisesToWaitFor.push(initializationPromise);
                            }
                            else {
                                // Found an item in 'send_to' that is not associated
                                // directly with an FID, possibly a group.  Empty this array,
                                // exit the loop early, and let it get populated below.
                                initializationPromisesToWaitFor = [];
                                return "break";
                            }
                        };
                        for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {
                            sendToId = gaSendToList_1[_i];
                            state_1 = _loop_1(sendToId);
                            if (state_1 === "break")
                                break;
                        }
                        _a.label = 2;
                    case 2:
                        // This will be unpopulated if there was no 'send_to' field , or
                        // if not all entries in the 'send_to' field could be mapped to
                        // a FID. In these cases, wait on all pending initialization promises.
                        if (initializationPromisesToWaitFor.length === 0) {
                            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);
                        }
                        // Run core gtag function with args after all relevant initialization
                        // promises have been resolved.
                        return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];
                    case 3:
                        // Run core gtag function with args after all relevant initialization
                        // promises have been resolved.
                        _a.sent();
                        // Workaround for http://b/141370449 - third argument cannot be undefined.
                        gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        logger.error(e_2);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Wraps a standard gtag function with extra code to wait for completion of
     * relevant initialization promises before sending requests.
     *
     * @param gtagCore Basic gtag function that just appends to dataLayer.
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
     */
    function wrapGtag(gtagCore, 
    /**
     * Allows wrapped gtag calls to wait on whichever intialization promises are required,
     * depending on the contents of the gtag params' `send_to` field, if any.
     */
    initializationPromisesMap, 
    /**
     * Wrapped gtag calls sometimes require all dynamic config fetches to have returned
     * before determining what initialization promises (which include FIDs) to wait for.
     */
    dynamicConfigPromisesList, 
    /**
     * Wrapped gtag config calls can narrow down which initialization promise (with FID)
     * to wait for if the measurementId is already fetched, by getting the corresponding appId,
     * which is the key for the initialization promises map.
     */
    measurementIdToAppId) {
        /**
         * Wrapper around gtag that ensures FID is sent with gtag calls.
         * @param command Gtag command type.
         * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.
         * @param gtagParams Params if event is EVENT/CONFIG.
         */
        function gtagWrapper(command, idOrNameOrParams, gtagParams) {
            return __awaiter(this, void 0, void 0, function () {
                var e_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 6, , 7]);
                            if (!(command === GtagCommand.EVENT)) return [3 /*break*/, 2];
                            // If EVENT, second arg must be measurementId.
                            return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];
                        case 1:
                            // If EVENT, second arg must be measurementId.
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 2:
                            if (!(command === GtagCommand.CONFIG)) return [3 /*break*/, 4];
                            // If CONFIG, second arg must be measurementId.
                            return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];
                        case 3:
                            // If CONFIG, second arg must be measurementId.
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            // If SET, second arg must be params.
                            gtagCore(GtagCommand.SET, idOrNameOrParams);
                            _a.label = 5;
                        case 5: return [3 /*break*/, 7];
                        case 6:
                            e_3 = _a.sent();
                            logger.error(e_3);
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        }
        return gtagWrapper;
    }
    /**
     * Creates global gtag function or wraps existing one if found.
     * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and
     * 'event' calls that belong to the GAID associated with this Firebase instance.
     *
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
     * @param dataLayerName Name of global GA datalayer array.
     * @param gtagFunctionName Name of global gtag function ("gtag" if not user-specified).
     */
    function wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {
        // Create a basic core gtag function
        var gtagCore = function () {
            var _args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _args[_i] = arguments[_i];
            }
            // Must push IArguments object, not an array.
            window[dataLayerName].push(arguments);
        };
        // Replace it with existing one if found
        if (window[gtagFunctionName] &&
            typeof window[gtagFunctionName] === 'function') {
            // @ts-ignore
            gtagCore = window[gtagFunctionName];
        }
        window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);
        return {
            gtagCore: gtagCore,
            wrappedGtag: window[gtagFunctionName]
        };
    }
    /**
     * Returns first script tag in DOM matching our gtag url pattern.
     */
    function findGtagScriptOnPage() {
        var scriptTags = window.document.getElementsByTagName('script');
        for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {
            var tag = _a[_i];
            if (tag.src && tag.src.includes(GTAG_URL)) {
                return tag;
            }
        }
        return null;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    var ERRORS = (_a = {},
        _a["already-exists" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' +
            ' already exists. ' +
            'Only one Firebase Analytics instance can be created for each appId.',
        _a["already-initialized" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' +
            'settings() must be called before initializing any Analytics instance' +
            'or it will have no effect.',
        _a["interop-component-reg-failed" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}',
        _a["invalid-analytics-context" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' +
            'Wrap initialization of analytics in analytics.isSupported() ' +
            'to prevent initialization in unsupported environments. Details: {$errorInfo}',
        _a["indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' +
            'Wrap initialization of analytics in analytics.isSupported() ' +
            'to prevent initialization in unsupported environments. Details: {$errorInfo}',
        _a["fetch-throttle" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +
            ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
        _a["config-fetch-failed" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',
        _a["no-api-key" /* NO_API_KEY */] = 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field to' +
            'contain a valid API key.',
        _a["no-app-id" /* NO_APP_ID */] = 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field to' +
            'contain a valid app ID.',
        _a);
    var ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Backoff factor for 503 errors, which we want to be conservative about
     * to avoid overloading servers. Each retry interval will be
     * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one
     * will be ~30 seconds (with fuzzing).
     */
    var LONG_RETRY_FACTOR = 30;
    /**
     * Base wait interval to multiplied by backoffFactor^backoffCount.
     */
    var BASE_INTERVAL_MILLIS = 1000;
    /**
     * Stubbable retry data storage class.
     */
    var RetryData = /** @class */ (function () {
        function RetryData(throttleMetadata, intervalMillis) {
            if (throttleMetadata === void 0) { throttleMetadata = {}; }
            if (intervalMillis === void 0) { intervalMillis = BASE_INTERVAL_MILLIS; }
            this.throttleMetadata = throttleMetadata;
            this.intervalMillis = intervalMillis;
        }
        RetryData.prototype.getThrottleMetadata = function (appId) {
            return this.throttleMetadata[appId];
        };
        RetryData.prototype.setThrottleMetadata = function (appId, metadata) {
            this.throttleMetadata[appId] = metadata;
        };
        RetryData.prototype.deleteThrottleMetadata = function (appId) {
            delete this.throttleMetadata[appId];
        };
        return RetryData;
    }());
    var defaultRetryData = new RetryData();
    /**
     * Set GET request headers.
     * @param apiKey App API key.
     */
    function getHeaders(apiKey) {
        return new Headers({
            Accept: 'application/json',
            'x-goog-api-key': apiKey
        });
    }
    /**
     * Fetches dynamic config from backend.
     * @param app Firebase app to fetch config for.
     */
    function fetchDynamicConfig(appFields) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        appId = appFields.appId, apiKey = appFields.apiKey;
                        request = {
                            method: 'GET',
                            headers: getHeaders(apiKey)
                        };
                        appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);
                        return [4 /*yield*/, fetch(appUrl, request)];
                    case 1:
                        response = _b.sent();
                        if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];
                        errorMessage = '';
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, response.json()];
                    case 3:
                        jsonResponse = (_b.sent());
                        if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {
                            errorMessage = jsonResponse.error.message;
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 5: throw ERROR_FACTORY.create("config-fetch-failed" /* CONFIG_FETCH_FAILED */, {
                        httpStatus: response.status,
                        responseMessage: errorMessage
                    });
                    case 6: return [2 /*return*/, response.json()];
                }
            });
        });
    }
    /**
     * Fetches dynamic config from backend, retrying if failed.
     * @param app Firebase app to fetch config for.
     */
    function fetchDynamicConfigWithRetry(app, 
    // retryData and timeoutMillis are parameterized to allow passing a different value for testing.
    retryData, timeoutMillis) {
        if (retryData === void 0) { retryData = defaultRetryData; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, appId, apiKey, measurementId, throttleMetadata, signal;
            var _this = this;
            return __generator(this, function (_b) {
                _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;
                if (!appId) {
                    throw ERROR_FACTORY.create("no-app-id" /* NO_APP_ID */);
                }
                if (!apiKey) {
                    if (measurementId) {
                        return [2 /*return*/, {
                                measurementId: measurementId,
                                appId: appId
                            }];
                    }
                    throw ERROR_FACTORY.create("no-api-key" /* NO_API_KEY */);
                }
                throttleMetadata = retryData.getThrottleMetadata(appId) || {
                    backoffCount: 0,
                    throttleEndTimeMillis: Date.now()
                };
                signal = new AnalyticsAbortSignal();
                setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
                        signal.abort();
                        return [2 /*return*/];
                    });
                }); }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
                return [2 /*return*/, attemptFetchDynamicConfigWithRetry({ appId: appId, apiKey: apiKey, measurementId: measurementId }, throttleMetadata, signal, retryData)];
            });
        });
    }
    /**
     * Runs one retry attempt.
     * @param appFields Necessary app config fields.
     * @param throttleMetadata Ongoing metadata to determine throttling times.
     * @param signal Abort signal.
     */
    function attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing
    ) {
        var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;
        if (retryData === void 0) { retryData = defaultRetryData; }
        return __awaiter(this, void 0, void 0, function () {
            var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        appId = appFields.appId, measurementId = appFields.measurementId;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _b.sent();
                        if (measurementId) {
                            logger.warn("Timed out fetching this Firebase app's measurement ID from the server." +
                                (" Falling back to the measurement ID " + measurementId) +
                                (" provided in the \"measurementId\" field in the local Firebase config. [" + e_1.message + "]"));
                            return [2 /*return*/, { appId: appId, measurementId: measurementId }];
                        }
                        throw e_1;
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, fetchDynamicConfig(appFields)];
                    case 5:
                        response = _b.sent();
                        // Note the SDK only clears throttle state if response is success or non-retriable.
                        retryData.deleteThrottleMetadata(appId);
                        return [2 /*return*/, response];
                    case 6:
                        e_2 = _b.sent();
                        if (!isRetriableError(e_2)) {
                            retryData.deleteThrottleMetadata(appId);
                            if (measurementId) {
                                logger.warn("Failed to fetch this Firebase app's measurement ID from the server." +
                                    (" Falling back to the measurement ID " + measurementId) +
                                    (" provided in the \"measurementId\" field in the local Firebase config. [" + e_2.message + "]"));
                                return [2 /*return*/, { appId: appId, measurementId: measurementId }];
                            }
                            else {
                                throw e_2;
                            }
                        }
                        backoffMillis = Number(e_2.customData.httpStatus) === 503
                            ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)
                            : calculateBackoffMillis(backoffCount, retryData.intervalMillis);
                        throttleMetadata = {
                            throttleEndTimeMillis: Date.now() + backoffMillis,
                            backoffCount: backoffCount + 1
                        };
                        // Persists state.
                        retryData.setThrottleMetadata(appId, throttleMetadata);
                        logger.debug("Calling attemptFetch again in " + backoffMillis + " millis");
                        return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Supports waiting on a backoff by:
     *
     * <ul>
     *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
     *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
     *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
     *       request appear the same.</li>
     * </ul>
     *
     * <p>Visible for testing.
     */
    function setAbortableTimeout(signal, throttleEndTimeMillis) {
        return new Promise(function (resolve, reject) {
            // Derives backoff from given end time, normalizing negative numbers to zero.
            var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
            var timeout = setTimeout(resolve, backoffMillis);
            // Adds listener, rather than sets onabort, because signal is a shared object.
            signal.addEventListener(function () {
                clearTimeout(timeout);
                // If the request completes before this timeout, the rejection has no effect.
                reject(ERROR_FACTORY.create("fetch-throttle" /* FETCH_THROTTLE */, {
                    throttleEndTimeMillis: throttleEndTimeMillis
                }));
            });
        });
    }
    /**
     * Returns true if the {@link Error} indicates a fetch request may succeed later.
     */
    function isRetriableError(e) {
        if (!(e instanceof FirebaseError) || !e.customData) {
            return false;
        }
        // Uses string index defined by ErrorData, which FirebaseError implements.
        var httpStatus = Number(e.customData['httpStatus']);
        return (httpStatus === 429 ||
            httpStatus === 500 ||
            httpStatus === 503 ||
            httpStatus === 504);
    }
    /**
     * Shims a minimal AbortSignal (copied from Remote Config).
     *
     * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
     * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
     * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
     * swapped out if/when we do.
     */
    var AnalyticsAbortSignal = /** @class */ (function () {
        function AnalyticsAbortSignal() {
            this.listeners = [];
        }
        AnalyticsAbortSignal.prototype.addEventListener = function (listener) {
            this.listeners.push(listener);
        };
        AnalyticsAbortSignal.prototype.abort = function () {
            this.listeners.forEach(function (listener) { return listener(); });
        };
        return AnalyticsAbortSignal;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function validateIndexedDB() {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!isIndexedDBAvailable()) return [3 /*break*/, 1];
                        logger.warn(ERROR_FACTORY.create("indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */, {
                            errorInfo: 'IndexedDB is not available in this environment.'
                        }).message);
                        return [2 /*return*/, false];
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, validateIndexedDBOpenable()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        logger.warn(ERROR_FACTORY.create("indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */, {
                            errorInfo: e_1
                        }).message);
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/, true];
                }
            });
        });
    }
    /**
     * Initialize the analytics instance in gtag.js by calling config command with fid.
     *
     * NOTE: We combine analytics initialization and setting fid together because we want fid to be
     * part of the `page_view` event that's sent during the initialization
     * @param app Firebase app
     * @param gtagCore The gtag function that's not wrapped.
     * @param dynamicConfigPromisesList Array of all dynamic config promises.
     * @param measurementIdToAppId Maps measurementID to appID.
     * @param installations FirebaseInstallations instance.
     *
     * @returns Measurement ID.
     */
    function initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName) {
        return __awaiter(this, void 0, void 0, function () {
            var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        dynamicConfigPromise = fetchDynamicConfigWithRetry(app);
                        // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.
                        dynamicConfigPromise
                            .then(function (config) {
                            measurementIdToAppId[config.measurementId] = config.appId;
                            if (app.options.measurementId &&
                                config.measurementId !== app.options.measurementId) {
                                logger.warn("The measurement ID in the local Firebase config (" + app.options.measurementId + ")" +
                                    (" does not match the measurement ID fetched from the server (" + config.measurementId + ").") +
                                    " To ensure analytics events are always sent to the correct Analytics property," +
                                    " update the" +
                                    " measurement ID field in the local config or remove it from the local config.");
                            }
                        })
                            .catch(function (e) { return logger.error(e); });
                        // Add to list to track state of all dynamic config promises.
                        dynamicConfigPromisesList.push(dynamicConfigPromise);
                        fidPromise = validateIndexedDB().then(function (envIsValid) {
                            if (envIsValid) {
                                return installations.getId();
                            }
                            else {
                                return undefined;
                            }
                        });
                        return [4 /*yield*/, Promise.all([
                                dynamicConfigPromise,
                                fidPromise
                            ])];
                    case 1:
                        _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];
                        // Detect if user has already put the gtag <script> tag on this page.
                        if (!findGtagScriptOnPage()) {
                            insertScriptTag(dataLayerName, dynamicConfig.measurementId);
                        }
                        // This command initializes gtag.js and only needs to be called once for the entire web app,
                        // but since it is idempotent, we can call it multiple times.
                        // We keep it together with other initialization logic for better code structure.
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        gtagCore('js', new Date());
                        configProperties = (_b = {},
                            // guard against developers accidentally setting properties with prefix `firebase_`
                            _b[ORIGIN_KEY] = 'firebase',
                            _b.update = true,
                            _b);
                        if (fid != null) {
                            configProperties[GA_FID_KEY] = fid;
                        }
                        // It should be the first config command called on this GA-ID
                        // Initialize this GA-ID and set FID on it using the gtag config API.
                        // Note: This will trigger a page_view event unless 'send_page_view' is set to false in
                        // `configProperties`.
                        gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);
                        return [2 /*return*/, dynamicConfig.measurementId];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Maps appId to full initialization promise. Wrapped gtag calls must wait on
     * all or some of these, depending on the call's `send_to` param and the status
     * of the dynamic config fetches (see below).
     */
    var initializationPromisesMap = {};
    /**
     * List of dynamic config fetch promises. In certain cases, wrapped gtag calls
     * wait on all these to be complete in order to determine if it can selectively
     * wait for only certain initialization (FID) promises or if it must wait for all.
     */
    var dynamicConfigPromisesList = [];
    /**
     * Maps fetched measurementIds to appId. Populated when the app's dynamic config
     * fetch completes. If already populated, gtag config calls can use this to
     * selectively wait for only this app's initialization promise (FID) instead of all
     * initialization promises.
     */
    var measurementIdToAppId = {};
    /**
     * Name for window global data layer array used by GA: defaults to 'dataLayer'.
     */
    var dataLayerName = 'dataLayer';
    /**
     * Name for window global gtag function used by GA: defaults to 'gtag'.
     */
    var gtagName = 'gtag';
    /**
     * Reproduction of standard gtag function or reference to existing
     * gtag function on window object.
     */
    var gtagCoreFunction;
    /**
     * Wrapper around gtag function that ensures FID is sent with all
     * relevant event and config calls.
     */
    var wrappedGtagFunction;
    /**
     * Flag to ensure page initialization steps (creation or wrapping of
     * dataLayer and gtag script) are only run once per page load.
     */
    var globalInitDone = false;
    /**
     * This must be run before calling firebase.analytics() or it won't
     * have any effect.
     * @param options Custom gtag and dataLayer names.
     */
    function settings(options) {
        if (globalInitDone) {
            throw ERROR_FACTORY.create("already-initialized" /* ALREADY_INITIALIZED */);
        }
        if (options.dataLayerName) {
            dataLayerName = options.dataLayerName;
        }
        if (options.gtagName) {
            gtagName = options.gtagName;
        }
    }
    /**
     * Returns true if no environment mismatch is found.
     * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT
     * error that also lists details for each mismatch found.
     */
    function warnOnBrowserContextMismatch() {
        var mismatchedEnvMessages = [];
        if (isBrowserExtension()) {
            mismatchedEnvMessages.push('This is a browser extension environment.');
        }
        if (!areCookiesEnabled()) {
            mismatchedEnvMessages.push('Cookies are not available.');
        }
        if (mismatchedEnvMessages.length > 0) {
            var details = mismatchedEnvMessages
                .map(function (message, index) { return "(" + (index + 1) + ") " + message; })
                .join(' ');
            var err = ERROR_FACTORY.create("invalid-analytics-context" /* INVALID_ANALYTICS_CONTEXT */, {
                errorInfo: details
            });
            logger.warn(err.message);
        }
    }
    function factory(app, installations) {
        warnOnBrowserContextMismatch();
        var appId = app.options.appId;
        if (!appId) {
            throw ERROR_FACTORY.create("no-app-id" /* NO_APP_ID */);
        }
        if (!app.options.apiKey) {
            if (app.options.measurementId) {
                logger.warn("The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest" +
                    (" measurement ID for this Firebase app. Falling back to the measurement ID " + app.options.measurementId) +
                    " provided in the \"measurementId\" field in the local Firebase config.");
            }
            else {
                throw ERROR_FACTORY.create("no-api-key" /* NO_API_KEY */);
            }
        }
        if (initializationPromisesMap[appId] != null) {
            throw ERROR_FACTORY.create("already-exists" /* ALREADY_EXISTS */, {
                id: appId
            });
        }
        if (!globalInitDone) {
            // Steps here should only be done once per page: creation or wrapping
            // of dataLayer and global gtag function.
            getOrCreateDataLayer(dataLayerName);
            var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a.wrappedGtag, gtagCore = _a.gtagCore;
            wrappedGtagFunction = wrappedGtag;
            gtagCoreFunction = gtagCore;
            globalInitDone = true;
        }
        // Async but non-blocking.
        // This map reflects the completion state of all promises for each appId.
        initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName);
        var analyticsInstance = {
            app: app,
            // Public methods return void for API simplicity and to better match gtag,
            // while internal implementations return promises.
            logEvent: function (eventName, eventParams, options) {
                logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) { return logger.error(e); });
            },
            setCurrentScreen: function (screenName, options) {
                setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function (e) { return logger.error(e); });
            },
            setUserId: function (id, options) {
                setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function (e) { return logger.error(e); });
            },
            setUserProperties: function (properties, options) {
                setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function (e) { return logger.error(e); });
            },
            setAnalyticsCollectionEnabled: function (enabled) {
                setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function (e) { return logger.error(e); });
            },
            INTERNAL: {
                delete: function () {
                    delete initializationPromisesMap[appId];
                    return Promise.resolve();
                }
            }
        };
        return analyticsInstance;
    }

    var name = "@firebase/analytics";
    var version = "0.6.14";

    /**
     * Type constant for Firebase Analytics.
     */
    var ANALYTICS_TYPE = 'analytics';
    function registerAnalytics(instance) {
        instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {
            // getImmediate for FirebaseApp will always succeed
            var app = container.getProvider('app').getImmediate();
            var installations = container
                .getProvider('installations')
                .getImmediate();
            return factory(app, installations);
        }, "PUBLIC" /* PUBLIC */).setServiceProps({
            settings: settings,
            EventName: EventName,
            isSupported: isSupported
        }));
        instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, "PRIVATE" /* PRIVATE */));
        instance.registerVersion(name, version);
        function internalFactory(container) {
            try {
                var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();
                return {
                    logEvent: analytics.logEvent
                };
            }
            catch (e) {
                throw ERROR_FACTORY.create("interop-component-reg-failed" /* INTEROP_COMPONENT_REG_FAILED */, {
                    reason: e
                });
            }
        }
    }
    registerAnalytics(firebase);
    /**
     * this is a public static method provided to users that wraps four different checks:
     *
     * 1. check if it's not a browser extension environment.
     * 1. check if cookie is enabled in current browser.
     * 3. check if IndexedDB is supported by the browser environment.
     * 4. check if the current browser context is valid for using IndexedDB.
     *
     */
    function isSupported() {
        return __awaiter(this, void 0, void 0, function () {
            var isDBOpenable;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (isBrowserExtension()) {
                            return [2 /*return*/, false];
                        }
                        if (!areCookiesEnabled()) {
                            return [2 /*return*/, false];
                        }
                        if (!isIndexedDBAvailable()) {
                            return [2 /*return*/, false];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, validateIndexedDBOpenable()];
                    case 2:
                        isDBOpenable = _a.sent();
                        return [2 /*return*/, isDBOpenable];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    }

    /* src\Login.svelte generated by Svelte v3.40.0 */
    const file = "src\\Login.svelte";

    // (317:2) <User let:user let:auth>
    function create_default_slot_1(ctx) {
    	let app;
    	let current;

    	app = new App({
    			props: {
    				user: /*user*/ ctx[16],
    				db: /*db*/ ctx[6],
    				auth: /*auth*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(app.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(app, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const app_changes = {};
    			if (dirty & /*user*/ 65536) app_changes.user = /*user*/ ctx[16];
    			if (dirty & /*auth*/ 128) app_changes.auth = /*auth*/ ctx[7];
    			app.$set(app_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(app.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(app.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(app, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(317:2) <User let:user let:auth>",
    		ctx
    	});

    	return block;
    }

    // (320:4) 
    function create_signed_out_slot(ctx) {
    	let div8;
    	let div7;
    	let form;
    	let p;
    	let t1;
    	let input0;
    	let t2;
    	let br0;
    	let t3;
    	let input1;
    	let t4;
    	let br1;
    	let t5;
    	let input2;
    	let t6;
    	let br2;
    	let t7;
    	let div0;
    	let ul;
    	let li0;
    	let a0;
    	let span0;
    	let t8;
    	let span1;
    	let t9;
    	let span2;
    	let t10;
    	let span3;
    	let t11;
    	let span4;
    	let t12;
    	let li1;
    	let a1;
    	let span5;
    	let t13;
    	let span6;
    	let t14;
    	let span7;
    	let t15;
    	let span8;
    	let t16;
    	let span9;
    	let t17;
    	let li2;
    	let a2;
    	let span10;
    	let t18;
    	let span11;
    	let t19;
    	let span12;
    	let t20;
    	let span13;
    	let t21;
    	let span14;
    	let t22;
    	let li3;
    	let a3;
    	let span15;
    	let t23;
    	let span16;
    	let t24;
    	let span17;
    	let t25;
    	let span18;
    	let t26;
    	let span19;
    	let t27;
    	let br3;
    	let t28;
    	let a4;
    	let t30;
    	let div6;
    	let div1;
    	let t31;
    	let div2;
    	let t32;
    	let div3;
    	let t33;
    	let div4;
    	let t34;
    	let div5;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[10](/*auth*/ ctx[7]);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[11](/*auth*/ ctx[7]);
    	}

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[12](/*auth*/ ctx[7]);
    	}

    	function click_handler_3() {
    		return /*click_handler_3*/ ctx[13](/*auth*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			div8 = element("div");
    			div7 = element("div");
    			form = element("form");
    			p = element("p");
    			p.textContent = "Welcome";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			br0 = element("br");
    			t3 = space();
    			input1 = element("input");
    			t4 = space();
    			br1 = element("br");
    			t5 = space();
    			input2 = element("input");
    			t6 = space();
    			br2 = element("br");
    			t7 = space();
    			div0 = element("div");
    			ul = element("ul");
    			li0 = element("li");
    			a0 = element("a");
    			span0 = element("span");
    			t8 = space();
    			span1 = element("span");
    			t9 = space();
    			span2 = element("span");
    			t10 = space();
    			span3 = element("span");
    			t11 = space();
    			span4 = element("span");
    			t12 = space();
    			li1 = element("li");
    			a1 = element("a");
    			span5 = element("span");
    			t13 = space();
    			span6 = element("span");
    			t14 = space();
    			span7 = element("span");
    			t15 = space();
    			span8 = element("span");
    			t16 = space();
    			span9 = element("span");
    			t17 = space();
    			li2 = element("li");
    			a2 = element("a");
    			span10 = element("span");
    			t18 = space();
    			span11 = element("span");
    			t19 = space();
    			span12 = element("span");
    			t20 = space();
    			span13 = element("span");
    			t21 = space();
    			span14 = element("span");
    			t22 = space();
    			li3 = element("li");
    			a3 = element("a");
    			span15 = element("span");
    			t23 = space();
    			span16 = element("span");
    			t24 = space();
    			span17 = element("span");
    			t25 = space();
    			span18 = element("span");
    			t26 = space();
    			span19 = element("span");
    			t27 = space();
    			br3 = element("br");
    			t28 = space();
    			a4 = element("a");
    			a4.textContent = "Sign in as Guest";
    			t30 = space();
    			div6 = element("div");
    			div1 = element("div");
    			t31 = space();
    			div2 = element("div");
    			t32 = space();
    			div3 = element("div");
    			t33 = space();
    			div4 = element("div");
    			t34 = space();
    			div5 = element("div");
    			attr_dev(p, "class", "svelte-jyi7yg");
    			add_location(p, file, 322, 10, 7535);
    			attr_dev(input0, "type", "email");
    			attr_dev(input0, "placeholder", "Email");
    			attr_dev(input0, "class", "svelte-jyi7yg");
    			add_location(input0, file, 323, 10, 7561);
    			attr_dev(br0, "class", "svelte-jyi7yg");
    			add_location(br0, file, 324, 10, 7634);
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "placeholder", "Password");
    			attr_dev(input1, "class", "svelte-jyi7yg");
    			add_location(input1, file, 325, 10, 7652);
    			attr_dev(br1, "class", "svelte-jyi7yg");
    			add_location(br1, file, 326, 10, 7734);
    			attr_dev(input2, "type", "button");
    			input2.value = "Sign in";
    			attr_dev(input2, "class", "svelte-jyi7yg");
    			add_location(input2, file, 327, 10, 7752);
    			attr_dev(br2, "class", "svelte-jyi7yg");
    			add_location(br2, file, 333, 10, 7949);
    			attr_dev(span0, "class", "svelte-jyi7yg");
    			add_location(span0, file, 338, 18, 8107);
    			attr_dev(span1, "class", "svelte-jyi7yg");
    			add_location(span1, file, 339, 18, 8135);
    			attr_dev(span2, "class", "svelte-jyi7yg");
    			add_location(span2, file, 340, 18, 8163);
    			attr_dev(span3, "class", "svelte-jyi7yg");
    			add_location(span3, file, 341, 18, 8191);
    			attr_dev(span4, "class", "fa fa-facebook svelte-jyi7yg");
    			add_location(span4, file, 342, 18, 8219);
    			attr_dev(a0, "class", "svelte-jyi7yg");
    			add_location(a0, file, 337, 16, 8028);
    			attr_dev(li0, "class", "svelte-jyi7yg");
    			add_location(li0, file, 336, 14, 8006);
    			attr_dev(span5, "class", "svelte-jyi7yg");
    			add_location(span5, file, 347, 18, 8408);
    			attr_dev(span6, "class", "svelte-jyi7yg");
    			add_location(span6, file, 348, 18, 8436);
    			attr_dev(span7, "class", "svelte-jyi7yg");
    			add_location(span7, file, 349, 18, 8464);
    			attr_dev(span8, "class", "svelte-jyi7yg");
    			add_location(span8, file, 350, 18, 8492);
    			attr_dev(span9, "class", "fa fa-google svelte-jyi7yg");
    			add_location(span9, file, 351, 18, 8520);
    			attr_dev(a1, "class", "svelte-jyi7yg");
    			add_location(a1, file, 346, 16, 8331);
    			attr_dev(li1, "class", "svelte-jyi7yg");
    			add_location(li1, file, 345, 14, 8309);
    			attr_dev(span10, "class", "svelte-jyi7yg");
    			add_location(span10, file, 356, 18, 8707);
    			attr_dev(span11, "class", "svelte-jyi7yg");
    			add_location(span11, file, 357, 18, 8735);
    			attr_dev(span12, "class", "svelte-jyi7yg");
    			add_location(span12, file, 358, 18, 8763);
    			attr_dev(span13, "class", "svelte-jyi7yg");
    			add_location(span13, file, 359, 18, 8791);
    			attr_dev(span14, "class", "fa fa-github svelte-jyi7yg");
    			add_location(span14, file, 360, 18, 8819);
    			attr_dev(a2, "class", "svelte-jyi7yg");
    			add_location(a2, file, 355, 16, 8630);
    			attr_dev(li2, "class", "svelte-jyi7yg");
    			add_location(li2, file, 354, 14, 8608);
    			attr_dev(span15, "class", "svelte-jyi7yg");
    			add_location(span15, file, 365, 18, 9009);
    			attr_dev(span16, "class", "svelte-jyi7yg");
    			add_location(span16, file, 366, 18, 9037);
    			attr_dev(span17, "class", "svelte-jyi7yg");
    			add_location(span17, file, 367, 18, 9065);
    			attr_dev(span18, "class", "svelte-jyi7yg");
    			add_location(span18, file, 368, 18, 9093);
    			attr_dev(span19, "class", "fa fa-windows svelte-jyi7yg");
    			add_location(span19, file, 369, 18, 9121);
    			attr_dev(a3, "class", "svelte-jyi7yg");
    			add_location(a3, file, 364, 16, 8929);
    			attr_dev(li3, "class", "svelte-jyi7yg");
    			add_location(li3, file, 363, 14, 8907);
    			attr_dev(ul, "class", "svelte-jyi7yg");
    			add_location(ul, file, 335, 12, 7986);
    			attr_dev(div0, "class", "svelte-jyi7yg");
    			add_location(div0, file, 334, 10, 7967);
    			attr_dev(br3, "class", "svelte-jyi7yg");
    			add_location(br3, file, 374, 10, 9243);
    			attr_dev(a4, "class", "svelte-jyi7yg");
    			add_location(a4, file, 376, 10, 9263);
    			attr_dev(form, "class", "svelte-jyi7yg");
    			add_location(form, file, 321, 8, 7517);
    			attr_dev(div1, "class", "drop drop-1 svelte-jyi7yg");
    			add_location(div1, file, 382, 10, 9425);
    			attr_dev(div2, "class", "drop drop-2 svelte-jyi7yg");
    			add_location(div2, file, 383, 10, 9464);
    			attr_dev(div3, "class", "drop drop-3 svelte-jyi7yg");
    			add_location(div3, file, 384, 10, 9503);
    			attr_dev(div4, "class", "drop drop-4 svelte-jyi7yg");
    			add_location(div4, file, 385, 10, 9542);
    			attr_dev(div5, "class", "drop drop-5 svelte-jyi7yg");
    			add_location(div5, file, 386, 10, 9581);
    			attr_dev(div6, "class", "drops svelte-jyi7yg");
    			add_location(div6, file, 381, 8, 9394);
    			attr_dev(div7, "class", "container svelte-jyi7yg");
    			add_location(div7, file, 320, 6, 7484);
    			attr_dev(div8, "slot", "signed-out");
    			attr_dev(div8, "class", "svelte-jyi7yg");
    			add_location(div8, file, 319, 4, 7453);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div8, anchor);
    			append_dev(div8, div7);
    			append_dev(div7, form);
    			append_dev(form, p);
    			append_dev(form, t1);
    			append_dev(form, input0);
    			set_input_value(input0, /*email*/ ctx[0]);
    			append_dev(form, t2);
    			append_dev(form, br0);
    			append_dev(form, t3);
    			append_dev(form, input1);
    			set_input_value(input1, /*password*/ ctx[1]);
    			append_dev(form, t4);
    			append_dev(form, br1);
    			append_dev(form, t5);
    			append_dev(form, input2);
    			append_dev(form, t6);
    			append_dev(form, br2);
    			append_dev(form, t7);
    			append_dev(form, div0);
    			append_dev(div0, ul);
    			append_dev(ul, li0);
    			append_dev(li0, a0);
    			append_dev(a0, span0);
    			append_dev(a0, t8);
    			append_dev(a0, span1);
    			append_dev(a0, t9);
    			append_dev(a0, span2);
    			append_dev(a0, t10);
    			append_dev(a0, span3);
    			append_dev(a0, t11);
    			append_dev(a0, span4);
    			append_dev(ul, t12);
    			append_dev(ul, li1);
    			append_dev(li1, a1);
    			append_dev(a1, span5);
    			append_dev(a1, t13);
    			append_dev(a1, span6);
    			append_dev(a1, t14);
    			append_dev(a1, span7);
    			append_dev(a1, t15);
    			append_dev(a1, span8);
    			append_dev(a1, t16);
    			append_dev(a1, span9);
    			append_dev(ul, t17);
    			append_dev(ul, li2);
    			append_dev(li2, a2);
    			append_dev(a2, span10);
    			append_dev(a2, t18);
    			append_dev(a2, span11);
    			append_dev(a2, t19);
    			append_dev(a2, span12);
    			append_dev(a2, t20);
    			append_dev(a2, span13);
    			append_dev(a2, t21);
    			append_dev(a2, span14);
    			append_dev(ul, t22);
    			append_dev(ul, li3);
    			append_dev(li3, a3);
    			append_dev(a3, span15);
    			append_dev(a3, t23);
    			append_dev(a3, span16);
    			append_dev(a3, t24);
    			append_dev(a3, span17);
    			append_dev(a3, t25);
    			append_dev(a3, span18);
    			append_dev(a3, t26);
    			append_dev(a3, span19);
    			append_dev(form, t27);
    			append_dev(form, br3);
    			append_dev(form, t28);
    			append_dev(form, a4);
    			append_dev(div7, t30);
    			append_dev(div7, div6);
    			append_dev(div6, div1);
    			append_dev(div6, t31);
    			append_dev(div6, div2);
    			append_dev(div6, t32);
    			append_dev(div6, div3);
    			append_dev(div6, t33);
    			append_dev(div6, div4);
    			append_dev(div6, t34);
    			append_dev(div6, div5);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[8]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
    					listen_dev(
    						input2,
    						"click",
    						function () {
    							if (is_function(firebase.auth().createUserWithEmailAndPassword(/*email*/ ctx[0], /*password*/ ctx[1]))) firebase.auth().createUserWithEmailAndPassword(/*email*/ ctx[0], /*password*/ ctx[1]).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(a0, "click", click_handler, false, false, false),
    					listen_dev(a1, "click", click_handler_1, false, false, false),
    					listen_dev(a2, "click", click_handler_2, false, false, false),
    					listen_dev(a3, "click", click_handler_3, false, false, false),
    					listen_dev(a4, "click", /*click_handler_4*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*email*/ 1 && input0.value !== /*email*/ ctx[0]) {
    				set_input_value(input0, /*email*/ ctx[0]);
    			}

    			if (dirty & /*password*/ 2 && input1.value !== /*password*/ ctx[1]) {
    				set_input_value(input1, /*password*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div8);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_signed_out_slot.name,
    		type: "slot",
    		source: "(320:4) ",
    		ctx
    	});

    	return block;
    }

    // (316:0) <FirebaseApp {firebase}>
    function create_default_slot(ctx) {
    	let user;
    	let current;

    	user = new User({
    			props: {
    				$$slots: {
    					"signed-out": [
    						create_signed_out_slot,
    						({ user, auth }) => ({ 16: user, 7: auth }),
    						({ user, auth }) => (user ? 65536 : 0) | (auth ? 128 : 0)
    					],
    					default: [
    						create_default_slot_1,
    						({ user, auth }) => ({ 16: user, 7: auth }),
    						({ user, auth }) => (user ? 65536 : 0) | (auth ? 128 : 0)
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(user.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(user, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const user_changes = {};

    			if (dirty & /*$$scope, email, password, user, auth*/ 196739) {
    				user_changes.$$scope = { dirty, ctx };
    			}

    			user.$set(user_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(user.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(user.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(user, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(316:0) <FirebaseApp {firebase}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let link0;
    	let link1;
    	let style;
    	let t1;
    	let head;
    	let t2;
    	let backgroundeffects;
    	let t3;
    	let firebaseapp;
    	let current;
    	head = new Head({ $$inline: true });
    	backgroundeffects = new BackgroundEffects({ $$inline: true });

    	firebaseapp = new FirebaseApp({
    			props: {
    				firebase,
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			link0 = element("link");
    			link1 = element("link");
    			style = element("style");
    			style.textContent = "@import url(\"//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\");";
    			t1 = space();
    			create_component(head.$$.fragment);
    			t2 = space();
    			create_component(backgroundeffects.$$.fragment);
    			t3 = space();
    			create_component(firebaseapp.$$.fragment);
    			attr_dev(link0, "rel", "preconnect");
    			attr_dev(link0, "href", "https://fonts.gstatic.com");
    			attr_dev(link0, "class", "svelte-jyi7yg");
    			add_location(link0, file, 303, 2, 7006);
    			attr_dev(link1, "href", "https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500&display=swap");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "class", "svelte-jyi7yg");
    			add_location(link1, file, 304, 2, 7068);
    			attr_dev(style, "class", "svelte-jyi7yg");
    			add_location(style, file, 307, 2, 7196);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, style);
    			insert_dev(target, t1, anchor);
    			mount_component(head, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(backgroundeffects, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(firebaseapp, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const firebaseapp_changes = {};

    			if (dirty & /*$$scope, email, password*/ 131075) {
    				firebaseapp_changes.$$scope = { dirty, ctx };
    			}

    			firebaseapp.$set(firebaseapp_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(head.$$.fragment, local);
    			transition_in(backgroundeffects.$$.fragment, local);
    			transition_in(firebaseapp.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(head.$$.fragment, local);
    			transition_out(backgroundeffects.$$.fragment, local);
    			transition_out(firebaseapp.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(style);
    			if (detaching) detach_dev(t1);
    			destroy_component(head, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(backgroundeffects, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(firebaseapp, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Login', slots, []);

    	const config = {
    		apiKey: "AIzaSyDo0CdNNtkGlzDE_6r8Sc6QyzHyHEFzOFE",
    		authDomain: "website-competition.firebaseapp.com",
    		projectId: "website-competition",
    		storageBucket: "website-competition.appspot.com",
    		messagingSenderId: "742534445003",
    		appId: "1:742534445003:web:43da1acf463532b3c9684e",
    		measurementId: "G-2HD1J43NPJ"
    	};

    	//initialise firebase app, database, auth and googleAuthProvider
    	firebase.initializeApp(config);

    	const auth = firebase.auth();
    	const googleProvider = new firebase.auth.GoogleAuthProvider();
    	const facebookProvider = new firebase.auth.FacebookAuthProvider();
    	const GithubProvider = new firebase.auth.GithubAuthProvider();
    	const microsoftProvider = new firebase.auth.OAuthProvider("microsoft.com");
    	let email, password;
    	const db = firebase.firestore();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		email = this.value;
    		$$invalidate(0, email);
    	}

    	function input1_input_handler() {
    		password = this.value;
    		$$invalidate(1, password);
    	}

    	const click_handler = auth => auth.signInWithPopup(facebookProvider);
    	const click_handler_1 = auth => auth.signInWithPopup(googleProvider);
    	const click_handler_2 = auth => auth.signInWithPopup(GithubProvider);
    	const click_handler_3 = auth => auth.signInWithPopup(microsoftProvider);
    	const click_handler_4 = () => firebase.auth().signInAnonymously();

    	$$self.$capture_state = () => ({
    		App,
    		Head,
    		BackgroundEffects,
    		FirebaseApp,
    		Doc,
    		Collection,
    		User,
    		firebase,
    		config,
    		auth,
    		googleProvider,
    		facebookProvider,
    		GithubProvider,
    		microsoftProvider,
    		email,
    		password,
    		db
    	});

    	$$self.$inject_state = $$props => {
    		if ('email' in $$props) $$invalidate(0, email = $$props.email);
    		if ('password' in $$props) $$invalidate(1, password = $$props.password);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		email,
    		password,
    		googleProvider,
    		facebookProvider,
    		GithubProvider,
    		microsoftProvider,
    		db,
    		auth,
    		input0_input_handler,
    		input1_input_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4
    	];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new Login({
    	target: document.body,
    	props: {
    		name: "world",
    	},
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
